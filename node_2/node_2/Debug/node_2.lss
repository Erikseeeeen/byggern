
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001994  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081994  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20000434  00081dc8  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004c0  00081e54  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c0  00082254  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005111  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e9e  00000000  00000000  000255c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e2e  00000000  00000000  00026465  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001a8  00000000  00000000  00027293  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  0002743b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002c8d  00000000  00000000  00027583  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003fef  00000000  00000000  0002a210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005523d  00000000  00000000  0002e1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000006d0  00000000  00000000  0008343c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 08 00 20 9d 03 08 00 99 03 08 00 99 03 08 00     ... ............
   80010:	99 03 08 00 99 03 08 00 99 03 08 00 00 00 00 00     ................
	...
   8002c:	99 03 08 00 99 03 08 00 00 00 00 00 99 03 08 00     ................
   8003c:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   8004c:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   8005c:	99 03 08 00 fd 09 08 00 99 03 08 00 00 00 00 00     ................
   8006c:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
	...
   80084:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   80094:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   800a4:	00 00 00 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   800b4:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   800c4:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   800d4:	99 03 08 00 99 03 08 00 99 03 08 00 99 03 08 00     ................
   800e4:	99 03 08 00 99 03 08 00 d9 02 08 00 99 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081994 	.word	0x00081994

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081994 	.word	0x00081994
   80154:	20000438 	.word	0x20000438
   80158:	00081994 	.word	0x00081994
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b510      	push	{r4, lr}
   802da:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802dc:	4b1a      	ldr	r3, [pc, #104]	; (80348 <CAN0_Handler+0x70>)
   802de:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e0:	f014 0f06 	tst.w	r4, #6
   802e4:	d023      	beq.n	8032e <CAN0_Handler+0x56>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e6:	f014 0f02 	tst.w	r4, #2
   802ea:	d112      	bne.n	80312 <CAN0_Handler+0x3a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ec:	f014 0f04 	tst.w	r4, #4
   802f0:	d014      	beq.n	8031c <CAN0_Handler+0x44>
		
		{
			can_receive(&message, 2);
   802f2:	2102      	movs	r1, #2
   802f4:	a801      	add	r0, sp, #4
   802f6:	4b15      	ldr	r3, [pc, #84]	; (8034c <CAN0_Handler+0x74>)
   802f8:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		joystick_x = message.data[0];
   802fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
   802fe:	4b14      	ldr	r3, [pc, #80]	; (80350 <CAN0_Handler+0x78>)
   80300:	701a      	strb	r2, [r3, #0]
		joystick_y = message.data[1];
   80302:	f89d 2008 	ldrb.w	r2, [sp, #8]
   80306:	4b13      	ldr	r3, [pc, #76]	; (80354 <CAN0_Handler+0x7c>)
   80308:	701a      	strb	r2, [r3, #0]
		set_servo_duty();
   8030a:	4b13      	ldr	r3, [pc, #76]	; (80358 <CAN0_Handler+0x80>)
   8030c:	4798      	blx	r3

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8030e:	2300      	movs	r3, #0
   80310:	e009      	b.n	80326 <CAN0_Handler+0x4e>
			can_receive(&message, 1);
   80312:	2101      	movs	r1, #1
   80314:	a801      	add	r0, sp, #4
   80316:	4b0d      	ldr	r3, [pc, #52]	; (8034c <CAN0_Handler+0x74>)
   80318:	4798      	blx	r3
   8031a:	e7ee      	b.n	802fa <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8031c:	480f      	ldr	r0, [pc, #60]	; (8035c <CAN0_Handler+0x84>)
   8031e:	4b10      	ldr	r3, [pc, #64]	; (80360 <CAN0_Handler+0x88>)
   80320:	4798      	blx	r3
   80322:	e7ea      	b.n	802fa <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80324:	3301      	adds	r3, #1
   80326:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8032a:	4293      	cmp	r3, r2
   8032c:	dbfa      	blt.n	80324 <CAN0_Handler+0x4c>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   8032e:	f014 0f01 	tst.w	r4, #1
   80332:	d002      	beq.n	8033a <CAN0_Handler+0x62>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80334:	2201      	movs	r2, #1
   80336:	4b04      	ldr	r3, [pc, #16]	; (80348 <CAN0_Handler+0x70>)
   80338:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8033a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8033e:	4b09      	ldr	r3, [pc, #36]	; (80364 <CAN0_Handler+0x8c>)
   80340:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80344:	b004      	add	sp, #16
   80346:	bd10      	pop	{r4, pc}
   80348:	400b4000 	.word	0x400b4000
   8034c:	00080255 	.word	0x00080255
   80350:	20000451 	.word	0x20000451
   80354:	20000450 	.word	0x20000450
   80358:	00080859 	.word	0x00080859
   8035c:	00081904 	.word	0x00081904
   80360:	000807dd 	.word	0x000807dd
   80364:	e000e100 	.word	0xe000e100

00080368 <delay_ms>:
 */ 

#include "delay.h"

void delay_ms(uint32_t ms){
	 uint32_t ticks = (F_CPU / 1000) * ms;
   80368:	4b09      	ldr	r3, [pc, #36]	; (80390 <delay_ms+0x28>)
   8036a:	fb03 f000 	mul.w	r0, r3, r0
	 SysTick->LOAD = ticks - 1;
   8036e:	3801      	subs	r0, #1
   80370:	4b08      	ldr	r3, [pc, #32]	; (80394 <delay_ms+0x2c>)
   80372:	6058      	str	r0, [r3, #4]
	 SysTick->VAL = 0;
   80374:	2200      	movs	r2, #0
   80376:	609a      	str	r2, [r3, #8]
	 SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   80378:	2205      	movs	r2, #5
   8037a:	601a      	str	r2, [r3, #0]
	 
	 while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   8037c:	4b05      	ldr	r3, [pc, #20]	; (80394 <delay_ms+0x2c>)
   8037e:	681b      	ldr	r3, [r3, #0]
   80380:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80384:	d0fa      	beq.n	8037c <delay_ms+0x14>
		 // Wait for the SysTick timer to count down
	 }
	 
	 SysTick->CTRL = 0; // Disable the SysTick timer
   80386:	2200      	movs	r2, #0
   80388:	4b02      	ldr	r3, [pc, #8]	; (80394 <delay_ms+0x2c>)
   8038a:	601a      	str	r2, [r3, #0]
   8038c:	4770      	bx	lr
   8038e:	bf00      	nop
   80390:	00014820 	.word	0x00014820
   80394:	e000e010 	.word	0xe000e010

00080398 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80398:	e7fe      	b.n	80398 <Dummy_Handler>
	...

0008039c <Reset_Handler>:
{
   8039c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8039e:	4b11      	ldr	r3, [pc, #68]	; (803e4 <Reset_Handler+0x48>)
   803a0:	4a11      	ldr	r2, [pc, #68]	; (803e8 <Reset_Handler+0x4c>)
   803a2:	429a      	cmp	r2, r3
   803a4:	d009      	beq.n	803ba <Reset_Handler+0x1e>
   803a6:	4b0f      	ldr	r3, [pc, #60]	; (803e4 <Reset_Handler+0x48>)
   803a8:	4a0f      	ldr	r2, [pc, #60]	; (803e8 <Reset_Handler+0x4c>)
   803aa:	e003      	b.n	803b4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   803ac:	6811      	ldr	r1, [r2, #0]
   803ae:	6019      	str	r1, [r3, #0]
   803b0:	3304      	adds	r3, #4
   803b2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   803b4:	490d      	ldr	r1, [pc, #52]	; (803ec <Reset_Handler+0x50>)
   803b6:	428b      	cmp	r3, r1
   803b8:	d3f8      	bcc.n	803ac <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   803ba:	4b0d      	ldr	r3, [pc, #52]	; (803f0 <Reset_Handler+0x54>)
   803bc:	e002      	b.n	803c4 <Reset_Handler+0x28>
                *pDest++ = 0;
   803be:	2200      	movs	r2, #0
   803c0:	601a      	str	r2, [r3, #0]
   803c2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803c4:	4a0b      	ldr	r2, [pc, #44]	; (803f4 <Reset_Handler+0x58>)
   803c6:	4293      	cmp	r3, r2
   803c8:	d3f9      	bcc.n	803be <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803ca:	4b0b      	ldr	r3, [pc, #44]	; (803f8 <Reset_Handler+0x5c>)
   803cc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803d4:	4a09      	ldr	r2, [pc, #36]	; (803fc <Reset_Handler+0x60>)
   803d6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803d8:	4b09      	ldr	r3, [pc, #36]	; (80400 <Reset_Handler+0x64>)
   803da:	4798      	blx	r3
        main();
   803dc:	4b09      	ldr	r3, [pc, #36]	; (80404 <Reset_Handler+0x68>)
   803de:	4798      	blx	r3
   803e0:	e7fe      	b.n	803e0 <Reset_Handler+0x44>
   803e2:	bf00      	nop
   803e4:	20000000 	.word	0x20000000
   803e8:	00081994 	.word	0x00081994
   803ec:	20000434 	.word	0x20000434
   803f0:	20000434 	.word	0x20000434
   803f4:	200004c0 	.word	0x200004c0
   803f8:	00080000 	.word	0x00080000
   803fc:	e000ed00 	.word	0xe000ed00
   80400:	00081795 	.word	0x00081795
   80404:	000804ad 	.word	0x000804ad

00080408 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80408:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8040c:	4a20      	ldr	r2, [pc, #128]	; (80490 <SystemInit+0x88>)
   8040e:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80410:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80414:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80416:	4b1f      	ldr	r3, [pc, #124]	; (80494 <SystemInit+0x8c>)
   80418:	6a1b      	ldr	r3, [r3, #32]
   8041a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8041e:	d107      	bne.n	80430 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80420:	4a1d      	ldr	r2, [pc, #116]	; (80498 <SystemInit+0x90>)
   80422:	4b1c      	ldr	r3, [pc, #112]	; (80494 <SystemInit+0x8c>)
   80424:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80426:	4b1b      	ldr	r3, [pc, #108]	; (80494 <SystemInit+0x8c>)
   80428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8042a:	f013 0f01 	tst.w	r3, #1
   8042e:	d0fa      	beq.n	80426 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80430:	4a1a      	ldr	r2, [pc, #104]	; (8049c <SystemInit+0x94>)
   80432:	4b18      	ldr	r3, [pc, #96]	; (80494 <SystemInit+0x8c>)
   80434:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80436:	4b17      	ldr	r3, [pc, #92]	; (80494 <SystemInit+0x8c>)
   80438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8043a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8043e:	d0fa      	beq.n	80436 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80440:	4a14      	ldr	r2, [pc, #80]	; (80494 <SystemInit+0x8c>)
   80442:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80444:	f023 0303 	bic.w	r3, r3, #3
   80448:	f043 0301 	orr.w	r3, r3, #1
   8044c:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8044e:	4b11      	ldr	r3, [pc, #68]	; (80494 <SystemInit+0x8c>)
   80450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80452:	f013 0f08 	tst.w	r3, #8
   80456:	d0fa      	beq.n	8044e <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80458:	4a11      	ldr	r2, [pc, #68]	; (804a0 <SystemInit+0x98>)
   8045a:	4b0e      	ldr	r3, [pc, #56]	; (80494 <SystemInit+0x8c>)
   8045c:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8045e:	4b0d      	ldr	r3, [pc, #52]	; (80494 <SystemInit+0x8c>)
   80460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80462:	f013 0f02 	tst.w	r3, #2
   80466:	d0fa      	beq.n	8045e <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80468:	2211      	movs	r2, #17
   8046a:	4b0a      	ldr	r3, [pc, #40]	; (80494 <SystemInit+0x8c>)
   8046c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8046e:	4b09      	ldr	r3, [pc, #36]	; (80494 <SystemInit+0x8c>)
   80470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80472:	f013 0f08 	tst.w	r3, #8
   80476:	d0fa      	beq.n	8046e <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80478:	2212      	movs	r2, #18
   8047a:	4b06      	ldr	r3, [pc, #24]	; (80494 <SystemInit+0x8c>)
   8047c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8047e:	4b05      	ldr	r3, [pc, #20]	; (80494 <SystemInit+0x8c>)
   80480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80482:	f013 0f08 	tst.w	r3, #8
   80486:	d0fa      	beq.n	8047e <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80488:	4a06      	ldr	r2, [pc, #24]	; (804a4 <SystemInit+0x9c>)
   8048a:	4b07      	ldr	r3, [pc, #28]	; (804a8 <SystemInit+0xa0>)
   8048c:	601a      	str	r2, [r3, #0]
   8048e:	4770      	bx	lr
   80490:	400e0a00 	.word	0x400e0a00
   80494:	400e0600 	.word	0x400e0600
   80498:	00370809 	.word	0x00370809
   8049c:	01370809 	.word	0x01370809
   804a0:	200d3f01 	.word	0x200d3f01
   804a4:	0501bd00 	.word	0x0501bd00
   804a8:	20000000 	.word	0x20000000

000804ac <main>:
#include "uart.h"
#include "pwm.h"


int main(void)
{
   804ac:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   804ae:	4b1a      	ldr	r3, [pc, #104]	; (80518 <main+0x6c>)
   804b0:	4798      	blx	r3
	
	can_init_def_tx_rx_mb(0x00290165);
   804b2:	481a      	ldr	r0, [pc, #104]	; (8051c <main+0x70>)
   804b4:	4b1a      	ldr	r3, [pc, #104]	; (80520 <main+0x74>)
   804b6:	4798      	blx	r3
	configure_uart();
   804b8:	4b1a      	ldr	r3, [pc, #104]	; (80524 <main+0x78>)
   804ba:	4798      	blx	r3
	pwm_init();
   804bc:	4b1a      	ldr	r3, [pc, #104]	; (80528 <main+0x7c>)
   804be:	4798      	blx	r3
	
	
	// Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCER0 |= (1 << ID_PIOA);
   804c0:	4a1a      	ldr	r2, [pc, #104]	; (8052c <main+0x80>)
   804c2:	6913      	ldr	r3, [r2, #16]
   804c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   804c8:	6113      	str	r3, [r2, #16]
	
	
	PIOA->PIO_PER |= PIO_PA20; // Enable PIO control
   804ca:	4b19      	ldr	r3, [pc, #100]	; (80530 <main+0x84>)
   804cc:	681a      	ldr	r2, [r3, #0]
   804ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804d2:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_PA20; // Set pin as output
   804d4:	691a      	ldr	r2, [r3, #16]
   804d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804da:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR |= PIO_PA20; // Set output high
   804dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804e2:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_CODR |= PIO_PA20;
   804e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   804e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804ea:	635a      	str	r2, [r3, #52]	; 0x34
	
	printf("Hello world");
   804ec:	4811      	ldr	r0, [pc, #68]	; (80534 <main+0x88>)
   804ee:	4b12      	ldr	r3, [pc, #72]	; (80538 <main+0x8c>)
   804f0:	4798      	blx	r3
	

    /* Replace with your application code */
    while (1)
    {
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;
   804f2:	4a12      	ldr	r2, [pc, #72]	; (8053c <main+0x90>)
   804f4:	4b12      	ldr	r3, [pc, #72]	; (80540 <main+0x94>)
   804f6:	601a      	str	r2, [r3, #0]
	    PIOA->PIO_SODR |= PIO_PA20;
   804f8:	4c0d      	ldr	r4, [pc, #52]	; (80530 <main+0x84>)
   804fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   804fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80500:	6323      	str	r3, [r4, #48]	; 0x30
	    delay_ms(100000);
   80502:	4e10      	ldr	r6, [pc, #64]	; (80544 <main+0x98>)
   80504:	4630      	mov	r0, r6
   80506:	4d10      	ldr	r5, [pc, #64]	; (80548 <main+0x9c>)
   80508:	47a8      	blx	r5
	    PIOA->PIO_CODR |= PIO_PA20;
   8050a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80510:	6363      	str	r3, [r4, #52]	; 0x34
	    delay_ms(100000);
   80512:	4630      	mov	r0, r6
   80514:	47a8      	blx	r5
   80516:	e7ec      	b.n	804f2 <main+0x46>
   80518:	00080409 	.word	0x00080409
   8051c:	00290165 	.word	0x00290165
   80520:	00080245 	.word	0x00080245
   80524:	00080971 	.word	0x00080971
   80528:	000808c1 	.word	0x000808c1
   8052c:	400e0600 	.word	0x400e0600
   80530:	400e0e00 	.word	0x400e0e00
   80534:	00081930 	.word	0x00081930
   80538:	000807dd 	.word	0x000807dd
   8053c:	a5000001 	.word	0xa5000001
   80540:	400e1a50 	.word	0x400e1a50
   80544:	000186a0 	.word	0x000186a0
   80548:	00080369 	.word	0x00080369

0008054c <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   8054c:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8054e:	b2c8      	uxtb	r0, r1
   80550:	4b01      	ldr	r3, [pc, #4]	; (80558 <printchar+0xc>)
   80552:	4798      	blx	r3
   80554:	bd08      	pop	{r3, pc}
   80556:	bf00      	nop
   80558:	000809d9 	.word	0x000809d9

0008055c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   8055c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80560:	4607      	mov	r7, r0
   80562:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80564:	1e15      	subs	r5, r2, #0
   80566:	dd02      	ble.n	8056e <prints+0x12>
   80568:	460a      	mov	r2, r1
   8056a:	2100      	movs	r1, #0
   8056c:	e004      	b.n	80578 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   8056e:	f04f 0820 	mov.w	r8, #32
   80572:	e00e      	b.n	80592 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80574:	3101      	adds	r1, #1
   80576:	3201      	adds	r2, #1
   80578:	7810      	ldrb	r0, [r2, #0]
   8057a:	2800      	cmp	r0, #0
   8057c:	d1fa      	bne.n	80574 <prints+0x18>
		if (len >= width) width = 0;
   8057e:	42a9      	cmp	r1, r5
   80580:	da01      	bge.n	80586 <prints+0x2a>
		else width -= len;
   80582:	1a6d      	subs	r5, r5, r1
   80584:	e000      	b.n	80588 <prints+0x2c>
		if (len >= width) width = 0;
   80586:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80588:	f013 0f02 	tst.w	r3, #2
   8058c:	d106      	bne.n	8059c <prints+0x40>
	register int pc = 0, padchar = ' ';
   8058e:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80592:	f013 0401 	ands.w	r4, r3, #1
   80596:	d00a      	beq.n	805ae <prints+0x52>
	register int pc = 0, padchar = ' ';
   80598:	2400      	movs	r4, #0
   8059a:	e010      	b.n	805be <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   8059c:	f04f 0830 	mov.w	r8, #48	; 0x30
   805a0:	e7f7      	b.n	80592 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   805a2:	4641      	mov	r1, r8
   805a4:	4638      	mov	r0, r7
   805a6:	4b0d      	ldr	r3, [pc, #52]	; (805dc <prints+0x80>)
   805a8:	4798      	blx	r3
			++pc;
   805aa:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   805ac:	3d01      	subs	r5, #1
   805ae:	2d00      	cmp	r5, #0
   805b0:	dcf7      	bgt.n	805a2 <prints+0x46>
   805b2:	e004      	b.n	805be <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   805b4:	4638      	mov	r0, r7
   805b6:	4b09      	ldr	r3, [pc, #36]	; (805dc <prints+0x80>)
   805b8:	4798      	blx	r3
		++pc;
   805ba:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   805bc:	3601      	adds	r6, #1
   805be:	7831      	ldrb	r1, [r6, #0]
   805c0:	2900      	cmp	r1, #0
   805c2:	d1f7      	bne.n	805b4 <prints+0x58>
   805c4:	e005      	b.n	805d2 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   805c6:	4641      	mov	r1, r8
   805c8:	4638      	mov	r0, r7
   805ca:	4b04      	ldr	r3, [pc, #16]	; (805dc <prints+0x80>)
   805cc:	4798      	blx	r3
		++pc;
   805ce:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   805d0:	3d01      	subs	r5, #1
   805d2:	2d00      	cmp	r5, #0
   805d4:	dcf7      	bgt.n	805c6 <prints+0x6a>
	}

	return pc;
}
   805d6:	4620      	mov	r0, r4
   805d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805dc:	0008054d 	.word	0x0008054d

000805e0 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   805e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   805e2:	b085      	sub	sp, #20
   805e4:	4607      	mov	r7, r0
   805e6:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   805e8:	b151      	cbz	r1, 80600 <printi+0x20>
   805ea:	461e      	mov	r6, r3
   805ec:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   805ee:	b113      	cbz	r3, 805f6 <printi+0x16>
   805f0:	2a0a      	cmp	r2, #10
   805f2:	d012      	beq.n	8061a <printi+0x3a>
	register int t, neg = 0, pc = 0;
   805f4:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   805f6:	ad04      	add	r5, sp, #16
   805f8:	2300      	movs	r3, #0
   805fa:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   805fe:	e018      	b.n	80632 <printi+0x52>
		print_buf[0] = '0';
   80600:	2330      	movs	r3, #48	; 0x30
   80602:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80606:	2300      	movs	r3, #0
   80608:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8060c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8060e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80610:	a901      	add	r1, sp, #4
   80612:	4638      	mov	r0, r7
   80614:	4c1b      	ldr	r4, [pc, #108]	; (80684 <printi+0xa4>)
   80616:	47a0      	blx	r4
   80618:	e029      	b.n	8066e <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   8061a:	2900      	cmp	r1, #0
   8061c:	db01      	blt.n	80622 <printi+0x42>
	register int t, neg = 0, pc = 0;
   8061e:	2600      	movs	r6, #0
   80620:	e7e9      	b.n	805f6 <printi+0x16>
		u = -i;
   80622:	424c      	negs	r4, r1
		neg = 1;
   80624:	2601      	movs	r6, #1
   80626:	e7e6      	b.n	805f6 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80628:	3330      	adds	r3, #48	; 0x30
   8062a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8062e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80632:	b14c      	cbz	r4, 80648 <printi+0x68>
		t = u % b;
   80634:	fbb4 f3f2 	udiv	r3, r4, r2
   80638:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   8063c:	2b09      	cmp	r3, #9
   8063e:	ddf3      	ble.n	80628 <printi+0x48>
			t += letbase - '0' - 10;
   80640:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80644:	440b      	add	r3, r1
   80646:	e7ef      	b.n	80628 <printi+0x48>
	}

	if (neg) {
   80648:	b156      	cbz	r6, 80660 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   8064a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8064c:	b11b      	cbz	r3, 80656 <printi+0x76>
   8064e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80650:	f013 0f02 	tst.w	r3, #2
   80654:	d10d      	bne.n	80672 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80656:	232d      	movs	r3, #45	; 0x2d
   80658:	f805 3c01 	strb.w	r3, [r5, #-1]
   8065c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8065e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80664:	4629      	mov	r1, r5
   80666:	4638      	mov	r0, r7
   80668:	4c06      	ldr	r4, [pc, #24]	; (80684 <printi+0xa4>)
   8066a:	47a0      	blx	r4
   8066c:	4430      	add	r0, r6
}
   8066e:	b005      	add	sp, #20
   80670:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80672:	212d      	movs	r1, #45	; 0x2d
   80674:	4638      	mov	r0, r7
   80676:	4b04      	ldr	r3, [pc, #16]	; (80688 <printi+0xa8>)
   80678:	4798      	blx	r3
			--width;
   8067a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8067c:	3b01      	subs	r3, #1
   8067e:	930a      	str	r3, [sp, #40]	; 0x28
   80680:	e7ee      	b.n	80660 <printi+0x80>
   80682:	bf00      	nop
   80684:	0008055d 	.word	0x0008055d
   80688:	0008054d 	.word	0x0008054d

0008068c <print>:

static int print( char **out, const char *format, va_list args )
{
   8068c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8068e:	b089      	sub	sp, #36	; 0x24
   80690:	4606      	mov	r6, r0
   80692:	460c      	mov	r4, r1
   80694:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80696:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80698:	e081      	b.n	8079e <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   8069a:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   8069c:	2301      	movs	r3, #1
   8069e:	e08b      	b.n	807b8 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   806a0:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   806a2:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   806a6:	7822      	ldrb	r2, [r4, #0]
   806a8:	2a30      	cmp	r2, #48	; 0x30
   806aa:	d0f9      	beq.n	806a0 <print+0x14>
   806ac:	2200      	movs	r2, #0
   806ae:	e006      	b.n	806be <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   806b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   806b4:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   806b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   806ba:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   806bc:	3401      	adds	r4, #1
   806be:	7821      	ldrb	r1, [r4, #0]
   806c0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   806c4:	b2c0      	uxtb	r0, r0
   806c6:	2809      	cmp	r0, #9
   806c8:	d9f2      	bls.n	806b0 <print+0x24>
			}
			if( *format == 's' ) {
   806ca:	2973      	cmp	r1, #115	; 0x73
   806cc:	d018      	beq.n	80700 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   806ce:	2964      	cmp	r1, #100	; 0x64
   806d0:	d022      	beq.n	80718 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   806d2:	2978      	cmp	r1, #120	; 0x78
   806d4:	d02f      	beq.n	80736 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   806d6:	2958      	cmp	r1, #88	; 0x58
   806d8:	d03c      	beq.n	80754 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   806da:	2975      	cmp	r1, #117	; 0x75
   806dc:	d049      	beq.n	80772 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   806de:	2963      	cmp	r1, #99	; 0x63
   806e0:	d15c      	bne.n	8079c <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   806e2:	9905      	ldr	r1, [sp, #20]
   806e4:	1d08      	adds	r0, r1, #4
   806e6:	9005      	str	r0, [sp, #20]
   806e8:	7809      	ldrb	r1, [r1, #0]
   806ea:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   806ee:	2100      	movs	r1, #0
   806f0:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   806f4:	a907      	add	r1, sp, #28
   806f6:	4630      	mov	r0, r6
   806f8:	4f34      	ldr	r7, [pc, #208]	; (807cc <print+0x140>)
   806fa:	47b8      	blx	r7
   806fc:	4405      	add	r5, r0
				continue;
   806fe:	e04d      	b.n	8079c <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80700:	9905      	ldr	r1, [sp, #20]
   80702:	1d08      	adds	r0, r1, #4
   80704:	9005      	str	r0, [sp, #20]
   80706:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80708:	b121      	cbz	r1, 80714 <print+0x88>
   8070a:	4630      	mov	r0, r6
   8070c:	4f2f      	ldr	r7, [pc, #188]	; (807cc <print+0x140>)
   8070e:	47b8      	blx	r7
   80710:	4405      	add	r5, r0
				continue;
   80712:	e043      	b.n	8079c <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80714:	492e      	ldr	r1, [pc, #184]	; (807d0 <print+0x144>)
   80716:	e7f8      	b.n	8070a <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80718:	9905      	ldr	r1, [sp, #20]
   8071a:	1d08      	adds	r0, r1, #4
   8071c:	9005      	str	r0, [sp, #20]
   8071e:	6809      	ldr	r1, [r1, #0]
   80720:	2061      	movs	r0, #97	; 0x61
   80722:	9002      	str	r0, [sp, #8]
   80724:	9301      	str	r3, [sp, #4]
   80726:	9200      	str	r2, [sp, #0]
   80728:	2301      	movs	r3, #1
   8072a:	220a      	movs	r2, #10
   8072c:	4630      	mov	r0, r6
   8072e:	4f29      	ldr	r7, [pc, #164]	; (807d4 <print+0x148>)
   80730:	47b8      	blx	r7
   80732:	4405      	add	r5, r0
				continue;
   80734:	e032      	b.n	8079c <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80736:	9905      	ldr	r1, [sp, #20]
   80738:	1d08      	adds	r0, r1, #4
   8073a:	9005      	str	r0, [sp, #20]
   8073c:	6809      	ldr	r1, [r1, #0]
   8073e:	2061      	movs	r0, #97	; 0x61
   80740:	9002      	str	r0, [sp, #8]
   80742:	9301      	str	r3, [sp, #4]
   80744:	9200      	str	r2, [sp, #0]
   80746:	2300      	movs	r3, #0
   80748:	2210      	movs	r2, #16
   8074a:	4630      	mov	r0, r6
   8074c:	4f21      	ldr	r7, [pc, #132]	; (807d4 <print+0x148>)
   8074e:	47b8      	blx	r7
   80750:	4405      	add	r5, r0
				continue;
   80752:	e023      	b.n	8079c <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80754:	9905      	ldr	r1, [sp, #20]
   80756:	1d08      	adds	r0, r1, #4
   80758:	9005      	str	r0, [sp, #20]
   8075a:	6809      	ldr	r1, [r1, #0]
   8075c:	2041      	movs	r0, #65	; 0x41
   8075e:	9002      	str	r0, [sp, #8]
   80760:	9301      	str	r3, [sp, #4]
   80762:	9200      	str	r2, [sp, #0]
   80764:	2300      	movs	r3, #0
   80766:	2210      	movs	r2, #16
   80768:	4630      	mov	r0, r6
   8076a:	4f1a      	ldr	r7, [pc, #104]	; (807d4 <print+0x148>)
   8076c:	47b8      	blx	r7
   8076e:	4405      	add	r5, r0
				continue;
   80770:	e014      	b.n	8079c <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80772:	9905      	ldr	r1, [sp, #20]
   80774:	1d08      	adds	r0, r1, #4
   80776:	9005      	str	r0, [sp, #20]
   80778:	6809      	ldr	r1, [r1, #0]
   8077a:	2061      	movs	r0, #97	; 0x61
   8077c:	9002      	str	r0, [sp, #8]
   8077e:	9301      	str	r3, [sp, #4]
   80780:	9200      	str	r2, [sp, #0]
   80782:	2300      	movs	r3, #0
   80784:	220a      	movs	r2, #10
   80786:	4630      	mov	r0, r6
   80788:	4f12      	ldr	r7, [pc, #72]	; (807d4 <print+0x148>)
   8078a:	47b8      	blx	r7
   8078c:	4405      	add	r5, r0
				continue;
   8078e:	e005      	b.n	8079c <print+0x110>
			++format;
   80790:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80792:	7821      	ldrb	r1, [r4, #0]
   80794:	4630      	mov	r0, r6
   80796:	4b10      	ldr	r3, [pc, #64]	; (807d8 <print+0x14c>)
   80798:	4798      	blx	r3
			++pc;
   8079a:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   8079c:	3401      	adds	r4, #1
   8079e:	7823      	ldrb	r3, [r4, #0]
   807a0:	b163      	cbz	r3, 807bc <print+0x130>
		if (*format == '%') {
   807a2:	2b25      	cmp	r3, #37	; 0x25
   807a4:	d1f5      	bne.n	80792 <print+0x106>
			++format;
   807a6:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   807a8:	7863      	ldrb	r3, [r4, #1]
   807aa:	b13b      	cbz	r3, 807bc <print+0x130>
			if (*format == '%') goto out;
   807ac:	2b25      	cmp	r3, #37	; 0x25
   807ae:	d0ef      	beq.n	80790 <print+0x104>
			if (*format == '-') {
   807b0:	2b2d      	cmp	r3, #45	; 0x2d
   807b2:	f43f af72 	beq.w	8069a <print+0xe>
			width = pad = 0;
   807b6:	2300      	movs	r3, #0
   807b8:	4614      	mov	r4, r2
   807ba:	e774      	b.n	806a6 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   807bc:	b116      	cbz	r6, 807c4 <print+0x138>
   807be:	6833      	ldr	r3, [r6, #0]
   807c0:	2200      	movs	r2, #0
   807c2:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   807c4:	4628      	mov	r0, r5
   807c6:	b009      	add	sp, #36	; 0x24
   807c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807ca:	bf00      	nop
   807cc:	0008055d 	.word	0x0008055d
   807d0:	0008193c 	.word	0x0008193c
   807d4:	000805e1 	.word	0x000805e1
   807d8:	0008054d 	.word	0x0008054d

000807dc <printf>:

int printf(const char *format, ...)
{
   807dc:	b40f      	push	{r0, r1, r2, r3}
   807de:	b500      	push	{lr}
   807e0:	b083      	sub	sp, #12
   807e2:	aa04      	add	r2, sp, #16
   807e4:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   807e8:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   807ea:	2000      	movs	r0, #0
   807ec:	4b03      	ldr	r3, [pc, #12]	; (807fc <printf+0x20>)
   807ee:	4798      	blx	r3
}
   807f0:	b003      	add	sp, #12
   807f2:	f85d eb04 	ldr.w	lr, [sp], #4
   807f6:	b004      	add	sp, #16
   807f8:	4770      	bx	lr
   807fa:	bf00      	nop
   807fc:	0008068d 	.word	0x0008068d

00080800 <pos_to_duty>:
	printf("%d    ",joystick_x);
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
}

float pos_to_duty(uint8_t pos)
{
   80800:	b510      	push	{r4, lr}
	return (float)CLAMP(pos, 0, 255) / 255.0 * 0.05 + 0.05;
   80802:	4b0f      	ldr	r3, [pc, #60]	; (80840 <pos_to_duty+0x40>)
   80804:	4798      	blx	r3
   80806:	4b0f      	ldr	r3, [pc, #60]	; (80844 <pos_to_duty+0x44>)
   80808:	4798      	blx	r3
   8080a:	a309      	add	r3, pc, #36	; (adr r3, 80830 <pos_to_duty+0x30>)
   8080c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80810:	4c0d      	ldr	r4, [pc, #52]	; (80848 <pos_to_duty+0x48>)
   80812:	47a0      	blx	r4
   80814:	a308      	add	r3, pc, #32	; (adr r3, 80838 <pos_to_duty+0x38>)
   80816:	e9d3 2300 	ldrd	r2, r3, [r3]
   8081a:	4c0c      	ldr	r4, [pc, #48]	; (8084c <pos_to_duty+0x4c>)
   8081c:	47a0      	blx	r4
   8081e:	a306      	add	r3, pc, #24	; (adr r3, 80838 <pos_to_duty+0x38>)
   80820:	e9d3 2300 	ldrd	r2, r3, [r3]
   80824:	4c0a      	ldr	r4, [pc, #40]	; (80850 <pos_to_duty+0x50>)
   80826:	47a0      	blx	r4
   80828:	4b0a      	ldr	r3, [pc, #40]	; (80854 <pos_to_duty+0x54>)
   8082a:	4798      	blx	r3
}
   8082c:	bd10      	pop	{r4, pc}
   8082e:	bf00      	nop
   80830:	00000000 	.word	0x00000000
   80834:	406fe000 	.word	0x406fe000
   80838:	9999999a 	.word	0x9999999a
   8083c:	3fa99999 	.word	0x3fa99999
   80840:	0008140d 	.word	0x0008140d
   80844:	00080d2d 	.word	0x00080d2d
   80848:	00081029 	.word	0x00081029
   8084c:	00080dd5 	.word	0x00080dd5
   80850:	00080a71 	.word	0x00080a71
   80854:	000811f9 	.word	0x000811f9

00080858 <set_servo_duty>:
{
   80858:	b538      	push	{r3, r4, r5, lr}
	printf("%d    ",joystick_x);
   8085a:	4c0f      	ldr	r4, [pc, #60]	; (80898 <set_servo_duty+0x40>)
   8085c:	7821      	ldrb	r1, [r4, #0]
   8085e:	480f      	ldr	r0, [pc, #60]	; (8089c <set_servo_duty+0x44>)
   80860:	4b0f      	ldr	r3, [pc, #60]	; (808a0 <set_servo_duty+0x48>)
   80862:	4798      	blx	r3
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80864:	4b0f      	ldr	r3, [pc, #60]	; (808a4 <set_servo_duty+0x4c>)
   80866:	6818      	ldr	r0, [r3, #0]
   80868:	4b0f      	ldr	r3, [pc, #60]	; (808a8 <set_servo_duty+0x50>)
   8086a:	4798      	blx	r3
   8086c:	4605      	mov	r5, r0
   8086e:	7820      	ldrb	r0, [r4, #0]
   80870:	4b0e      	ldr	r3, [pc, #56]	; (808ac <set_servo_duty+0x54>)
   80872:	4798      	blx	r3
   80874:	4601      	mov	r1, r0
   80876:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   8087a:	4b0d      	ldr	r3, [pc, #52]	; (808b0 <set_servo_duty+0x58>)
   8087c:	4798      	blx	r3
   8087e:	4601      	mov	r1, r0
   80880:	4628      	mov	r0, r5
   80882:	4b0c      	ldr	r3, [pc, #48]	; (808b4 <set_servo_duty+0x5c>)
   80884:	4798      	blx	r3
   80886:	4b0c      	ldr	r3, [pc, #48]	; (808b8 <set_servo_duty+0x60>)
   80888:	4798      	blx	r3
   8088a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8088e:	4b0b      	ldr	r3, [pc, #44]	; (808bc <set_servo_duty+0x64>)
   80890:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80894:	bd38      	pop	{r3, r4, r5, pc}
   80896:	bf00      	nop
   80898:	20000451 	.word	0x20000451
   8089c:	00081944 	.word	0x00081944
   808a0:	000807dd 	.word	0x000807dd
   808a4:	20000454 	.word	0x20000454
   808a8:	00081405 	.word	0x00081405
   808ac:	00080801 	.word	0x00080801
   808b0:	000812a1 	.word	0x000812a1
   808b4:	000814b5 	.word	0x000814b5
   808b8:	00081755 	.word	0x00081755
   808bc:	40094000 	.word	0x40094000

000808c0 <pwm_init>:
{
   808c0:	b510      	push	{r4, lr}
	PIOC->PIO_PDR |= PIO_PDR_P19;
   808c2:	4b20      	ldr	r3, [pc, #128]	; (80944 <pwm_init+0x84>)
   808c4:	685a      	ldr	r2, [r3, #4]
   808c6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   808ca:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   808cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   808ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   808d2:	671a      	str	r2, [r3, #112]	; 0x70
	PMC->PMC_PCR |= (ID_PWM << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   808d4:	491c      	ldr	r1, [pc, #112]	; (80948 <pwm_init+0x88>)
   808d6:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
   808da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   808de:	f042 0224 	orr.w	r2, r2, #36	; 0x24
   808e2:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_PWM-32));
   808e6:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   808ea:	f042 0210 	orr.w	r2, r2, #16
   808ee:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	PIOC->PIO_WPMR = 0;
   808f2:	2200      	movs	r2, #0
   808f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR = 0;
   808f8:	4c14      	ldr	r4, [pc, #80]	; (8094c <pwm_init+0x8c>)
   808fa:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	PWM->PWM_CLK = PWM_CLK_DIVA(84) | PWM_CLK_PREA(0);
   808fe:	2354      	movs	r3, #84	; 0x54
   80900:	6023      	str	r3, [r4, #0]
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_CLKA;
   80902:	230b      	movs	r3, #11
   80904:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
	servo_period = 20E-3 * F_CPU / 84;
   80908:	f644 6320 	movw	r3, #20000	; 0x4e20
   8090c:	4a10      	ldr	r2, [pc, #64]	; (80950 <pwm_init+0x90>)
   8090e:	6013      	str	r3, [r2, #0]
	PWM->PWM_CH_NUM[5].PWM_CPRD = PWM_CPRD_CPRD(servo_period);
   80910:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80914:	4b0f      	ldr	r3, [pc, #60]	; (80954 <pwm_init+0x94>)
   80916:	7818      	ldrb	r0, [r3, #0]
   80918:	4b0f      	ldr	r3, [pc, #60]	; (80958 <pwm_init+0x98>)
   8091a:	4798      	blx	r3
   8091c:	4601      	mov	r1, r0
   8091e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80922:	4b0e      	ldr	r3, [pc, #56]	; (8095c <pwm_init+0x9c>)
   80924:	4798      	blx	r3
   80926:	490e      	ldr	r1, [pc, #56]	; (80960 <pwm_init+0xa0>)
   80928:	4b0e      	ldr	r3, [pc, #56]	; (80964 <pwm_init+0xa4>)
   8092a:	4798      	blx	r3
   8092c:	4b0e      	ldr	r3, [pc, #56]	; (80968 <pwm_init+0xa8>)
   8092e:	4798      	blx	r3
   80930:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80934:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
	set_servo_duty();
   80938:	4b0c      	ldr	r3, [pc, #48]	; (8096c <pwm_init+0xac>)
   8093a:	4798      	blx	r3
	PWM->PWM_ENA = PWM_ENA_CHID5;
   8093c:	2320      	movs	r3, #32
   8093e:	6063      	str	r3, [r4, #4]
   80940:	bd10      	pop	{r4, pc}
   80942:	bf00      	nop
   80944:	400e1200 	.word	0x400e1200
   80948:	400e0600 	.word	0x400e0600
   8094c:	40094000 	.word	0x40094000
   80950:	20000454 	.word	0x20000454
   80954:	20000451 	.word	0x20000451
   80958:	00080801 	.word	0x00080801
   8095c:	000812a1 	.word	0x000812a1
   80960:	469c4000 	.word	0x469c4000
   80964:	000814b5 	.word	0x000814b5
   80968:	00081755 	.word	0x00081755
   8096c:	00080859 	.word	0x00080859

00080970 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80970:	4b16      	ldr	r3, [pc, #88]	; (809cc <configure_uart+0x5c>)
   80972:	2200      	movs	r2, #0
   80974:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80976:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80978:	4b15      	ldr	r3, [pc, #84]	; (809d0 <configure_uart+0x60>)
   8097a:	f44f 7140 	mov.w	r1, #768	; 0x300
   8097e:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80980:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80984:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80986:	4002      	ands	r2, r0
   80988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8098c:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8098e:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80990:	f44f 7280 	mov.w	r2, #256	; 0x100
   80994:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80998:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   8099a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8099e:	21ac      	movs	r1, #172	; 0xac
   809a0:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = (int)(MCK/(16*BAUDRATE)); // MCK / (16 * x) = BaudRate (write x into UART_BRGR, which is 547) 
   809a2:	f240 2122 	movw	r1, #546	; 0x222
   809a6:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   809a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   809ac:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   809ae:	f240 2102 	movw	r1, #514	; 0x202
   809b2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   809b6:	f04f 31ff 	mov.w	r1, #4294967295
   809ba:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   809bc:	21e1      	movs	r1, #225	; 0xe1
   809be:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   809c0:	4904      	ldr	r1, [pc, #16]	; (809d4 <configure_uart+0x64>)
   809c2:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809c4:	2250      	movs	r2, #80	; 0x50
   809c6:	601a      	str	r2, [r3, #0]
   809c8:	4770      	bx	lr
   809ca:	bf00      	nop
   809cc:	20000458 	.word	0x20000458
   809d0:	400e0e00 	.word	0x400e0e00
   809d4:	e000e100 	.word	0xe000e100

000809d8 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   809d8:	4b07      	ldr	r3, [pc, #28]	; (809f8 <uart_putchar+0x20>)
   809da:	695b      	ldr	r3, [r3, #20]
   809dc:	f013 0f02 	tst.w	r3, #2
   809e0:	d008      	beq.n	809f4 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   809e2:	4b05      	ldr	r3, [pc, #20]	; (809f8 <uart_putchar+0x20>)
   809e4:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   809e6:	4b04      	ldr	r3, [pc, #16]	; (809f8 <uart_putchar+0x20>)
   809e8:	695b      	ldr	r3, [r3, #20]
   809ea:	f413 7f00 	tst.w	r3, #512	; 0x200
   809ee:	d0fa      	beq.n	809e6 <uart_putchar+0xe>
	return 0;
   809f0:	2000      	movs	r0, #0
   809f2:	4770      	bx	lr
	return 1;
   809f4:	2001      	movs	r0, #1
}
   809f6:	4770      	bx	lr
   809f8:	400e0800 	.word	0x400e0800

000809fc <UART_Handler>:

void UART_Handler(void)
{
   809fc:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   809fe:	4b15      	ldr	r3, [pc, #84]	; (80a54 <UART_Handler+0x58>)
   80a00:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80a02:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a06:	d003      	beq.n	80a10 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80a08:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a0c:	4a11      	ldr	r2, [pc, #68]	; (80a54 <UART_Handler+0x58>)
   80a0e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80a10:	f013 0f01 	tst.w	r3, #1
   80a14:	d012      	beq.n	80a3c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80a16:	4810      	ldr	r0, [pc, #64]	; (80a58 <UART_Handler+0x5c>)
   80a18:	7842      	ldrb	r2, [r0, #1]
   80a1a:	1c53      	adds	r3, r2, #1
   80a1c:	4259      	negs	r1, r3
   80a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80a26:	bf58      	it	pl
   80a28:	424b      	negpl	r3, r1
   80a2a:	7801      	ldrb	r1, [r0, #0]
   80a2c:	428b      	cmp	r3, r1
   80a2e:	d006      	beq.n	80a3e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80a30:	4908      	ldr	r1, [pc, #32]	; (80a54 <UART_Handler+0x58>)
   80a32:	6988      	ldr	r0, [r1, #24]
   80a34:	4908      	ldr	r1, [pc, #32]	; (80a58 <UART_Handler+0x5c>)
   80a36:	440a      	add	r2, r1
   80a38:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80a3a:	704b      	strb	r3, [r1, #1]
   80a3c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80a3e:	4807      	ldr	r0, [pc, #28]	; (80a5c <UART_Handler+0x60>)
   80a40:	4b07      	ldr	r3, [pc, #28]	; (80a60 <UART_Handler+0x64>)
   80a42:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80a44:	4b04      	ldr	r3, [pc, #16]	; (80a58 <UART_Handler+0x5c>)
   80a46:	7859      	ldrb	r1, [r3, #1]
   80a48:	4a02      	ldr	r2, [pc, #8]	; (80a54 <UART_Handler+0x58>)
   80a4a:	6992      	ldr	r2, [r2, #24]
   80a4c:	440b      	add	r3, r1
   80a4e:	709a      	strb	r2, [r3, #2]
			return;
   80a50:	bd08      	pop	{r3, pc}
   80a52:	bf00      	nop
   80a54:	400e0800 	.word	0x400e0800
   80a58:	20000458 	.word	0x20000458
   80a5c:	0008194c 	.word	0x0008194c
   80a60:	000807dd 	.word	0x000807dd

00080a64 <__aeabi_drsub>:
   80a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80a68:	e002      	b.n	80a70 <__adddf3>
   80a6a:	bf00      	nop

00080a6c <__aeabi_dsub>:
   80a6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080a70 <__adddf3>:
   80a70:	b530      	push	{r4, r5, lr}
   80a72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80a76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80a7a:	ea94 0f05 	teq	r4, r5
   80a7e:	bf08      	it	eq
   80a80:	ea90 0f02 	teqeq	r0, r2
   80a84:	bf1f      	itttt	ne
   80a86:	ea54 0c00 	orrsne.w	ip, r4, r0
   80a8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80a8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80a92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80a96:	f000 80e2 	beq.w	80c5e <__adddf3+0x1ee>
   80a9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80a9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80aa2:	bfb8      	it	lt
   80aa4:	426d      	neglt	r5, r5
   80aa6:	dd0c      	ble.n	80ac2 <__adddf3+0x52>
   80aa8:	442c      	add	r4, r5
   80aaa:	ea80 0202 	eor.w	r2, r0, r2
   80aae:	ea81 0303 	eor.w	r3, r1, r3
   80ab2:	ea82 0000 	eor.w	r0, r2, r0
   80ab6:	ea83 0101 	eor.w	r1, r3, r1
   80aba:	ea80 0202 	eor.w	r2, r0, r2
   80abe:	ea81 0303 	eor.w	r3, r1, r3
   80ac2:	2d36      	cmp	r5, #54	; 0x36
   80ac4:	bf88      	it	hi
   80ac6:	bd30      	pophi	{r4, r5, pc}
   80ac8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80ad0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80ad4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80ad8:	d002      	beq.n	80ae0 <__adddf3+0x70>
   80ada:	4240      	negs	r0, r0
   80adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ae0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80ae8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80aec:	d002      	beq.n	80af4 <__adddf3+0x84>
   80aee:	4252      	negs	r2, r2
   80af0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80af4:	ea94 0f05 	teq	r4, r5
   80af8:	f000 80a7 	beq.w	80c4a <__adddf3+0x1da>
   80afc:	f1a4 0401 	sub.w	r4, r4, #1
   80b00:	f1d5 0e20 	rsbs	lr, r5, #32
   80b04:	db0d      	blt.n	80b22 <__adddf3+0xb2>
   80b06:	fa02 fc0e 	lsl.w	ip, r2, lr
   80b0a:	fa22 f205 	lsr.w	r2, r2, r5
   80b0e:	1880      	adds	r0, r0, r2
   80b10:	f141 0100 	adc.w	r1, r1, #0
   80b14:	fa03 f20e 	lsl.w	r2, r3, lr
   80b18:	1880      	adds	r0, r0, r2
   80b1a:	fa43 f305 	asr.w	r3, r3, r5
   80b1e:	4159      	adcs	r1, r3
   80b20:	e00e      	b.n	80b40 <__adddf3+0xd0>
   80b22:	f1a5 0520 	sub.w	r5, r5, #32
   80b26:	f10e 0e20 	add.w	lr, lr, #32
   80b2a:	2a01      	cmp	r2, #1
   80b2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80b30:	bf28      	it	cs
   80b32:	f04c 0c02 	orrcs.w	ip, ip, #2
   80b36:	fa43 f305 	asr.w	r3, r3, r5
   80b3a:	18c0      	adds	r0, r0, r3
   80b3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80b44:	d507      	bpl.n	80b56 <__adddf3+0xe6>
   80b46:	f04f 0e00 	mov.w	lr, #0
   80b4a:	f1dc 0c00 	rsbs	ip, ip, #0
   80b4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   80b52:	eb6e 0101 	sbc.w	r1, lr, r1
   80b56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80b5a:	d31b      	bcc.n	80b94 <__adddf3+0x124>
   80b5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80b60:	d30c      	bcc.n	80b7c <__adddf3+0x10c>
   80b62:	0849      	lsrs	r1, r1, #1
   80b64:	ea5f 0030 	movs.w	r0, r0, rrx
   80b68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80b6c:	f104 0401 	add.w	r4, r4, #1
   80b70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80b74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80b78:	f080 809a 	bcs.w	80cb0 <__adddf3+0x240>
   80b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80b80:	bf08      	it	eq
   80b82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80b86:	f150 0000 	adcs.w	r0, r0, #0
   80b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80b8e:	ea41 0105 	orr.w	r1, r1, r5
   80b92:	bd30      	pop	{r4, r5, pc}
   80b94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80b98:	4140      	adcs	r0, r0
   80b9a:	eb41 0101 	adc.w	r1, r1, r1
   80b9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80ba2:	f1a4 0401 	sub.w	r4, r4, #1
   80ba6:	d1e9      	bne.n	80b7c <__adddf3+0x10c>
   80ba8:	f091 0f00 	teq	r1, #0
   80bac:	bf04      	itt	eq
   80bae:	4601      	moveq	r1, r0
   80bb0:	2000      	moveq	r0, #0
   80bb2:	fab1 f381 	clz	r3, r1
   80bb6:	bf08      	it	eq
   80bb8:	3320      	addeq	r3, #32
   80bba:	f1a3 030b 	sub.w	r3, r3, #11
   80bbe:	f1b3 0220 	subs.w	r2, r3, #32
   80bc2:	da0c      	bge.n	80bde <__adddf3+0x16e>
   80bc4:	320c      	adds	r2, #12
   80bc6:	dd08      	ble.n	80bda <__adddf3+0x16a>
   80bc8:	f102 0c14 	add.w	ip, r2, #20
   80bcc:	f1c2 020c 	rsb	r2, r2, #12
   80bd0:	fa01 f00c 	lsl.w	r0, r1, ip
   80bd4:	fa21 f102 	lsr.w	r1, r1, r2
   80bd8:	e00c      	b.n	80bf4 <__adddf3+0x184>
   80bda:	f102 0214 	add.w	r2, r2, #20
   80bde:	bfd8      	it	le
   80be0:	f1c2 0c20 	rsble	ip, r2, #32
   80be4:	fa01 f102 	lsl.w	r1, r1, r2
   80be8:	fa20 fc0c 	lsr.w	ip, r0, ip
   80bec:	bfdc      	itt	le
   80bee:	ea41 010c 	orrle.w	r1, r1, ip
   80bf2:	4090      	lslle	r0, r2
   80bf4:	1ae4      	subs	r4, r4, r3
   80bf6:	bfa2      	ittt	ge
   80bf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80bfc:	4329      	orrge	r1, r5
   80bfe:	bd30      	popge	{r4, r5, pc}
   80c00:	ea6f 0404 	mvn.w	r4, r4
   80c04:	3c1f      	subs	r4, #31
   80c06:	da1c      	bge.n	80c42 <__adddf3+0x1d2>
   80c08:	340c      	adds	r4, #12
   80c0a:	dc0e      	bgt.n	80c2a <__adddf3+0x1ba>
   80c0c:	f104 0414 	add.w	r4, r4, #20
   80c10:	f1c4 0220 	rsb	r2, r4, #32
   80c14:	fa20 f004 	lsr.w	r0, r0, r4
   80c18:	fa01 f302 	lsl.w	r3, r1, r2
   80c1c:	ea40 0003 	orr.w	r0, r0, r3
   80c20:	fa21 f304 	lsr.w	r3, r1, r4
   80c24:	ea45 0103 	orr.w	r1, r5, r3
   80c28:	bd30      	pop	{r4, r5, pc}
   80c2a:	f1c4 040c 	rsb	r4, r4, #12
   80c2e:	f1c4 0220 	rsb	r2, r4, #32
   80c32:	fa20 f002 	lsr.w	r0, r0, r2
   80c36:	fa01 f304 	lsl.w	r3, r1, r4
   80c3a:	ea40 0003 	orr.w	r0, r0, r3
   80c3e:	4629      	mov	r1, r5
   80c40:	bd30      	pop	{r4, r5, pc}
   80c42:	fa21 f004 	lsr.w	r0, r1, r4
   80c46:	4629      	mov	r1, r5
   80c48:	bd30      	pop	{r4, r5, pc}
   80c4a:	f094 0f00 	teq	r4, #0
   80c4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80c52:	bf06      	itte	eq
   80c54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80c58:	3401      	addeq	r4, #1
   80c5a:	3d01      	subne	r5, #1
   80c5c:	e74e      	b.n	80afc <__adddf3+0x8c>
   80c5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80c62:	bf18      	it	ne
   80c64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80c68:	d029      	beq.n	80cbe <__adddf3+0x24e>
   80c6a:	ea94 0f05 	teq	r4, r5
   80c6e:	bf08      	it	eq
   80c70:	ea90 0f02 	teqeq	r0, r2
   80c74:	d005      	beq.n	80c82 <__adddf3+0x212>
   80c76:	ea54 0c00 	orrs.w	ip, r4, r0
   80c7a:	bf04      	itt	eq
   80c7c:	4619      	moveq	r1, r3
   80c7e:	4610      	moveq	r0, r2
   80c80:	bd30      	pop	{r4, r5, pc}
   80c82:	ea91 0f03 	teq	r1, r3
   80c86:	bf1e      	ittt	ne
   80c88:	2100      	movne	r1, #0
   80c8a:	2000      	movne	r0, #0
   80c8c:	bd30      	popne	{r4, r5, pc}
   80c8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80c92:	d105      	bne.n	80ca0 <__adddf3+0x230>
   80c94:	0040      	lsls	r0, r0, #1
   80c96:	4149      	adcs	r1, r1
   80c98:	bf28      	it	cs
   80c9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80c9e:	bd30      	pop	{r4, r5, pc}
   80ca0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80ca4:	bf3c      	itt	cc
   80ca6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80caa:	bd30      	popcc	{r4, r5, pc}
   80cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80cb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80cb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80cb8:	f04f 0000 	mov.w	r0, #0
   80cbc:	bd30      	pop	{r4, r5, pc}
   80cbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80cc2:	bf1a      	itte	ne
   80cc4:	4619      	movne	r1, r3
   80cc6:	4610      	movne	r0, r2
   80cc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80ccc:	bf1c      	itt	ne
   80cce:	460b      	movne	r3, r1
   80cd0:	4602      	movne	r2, r0
   80cd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80cd6:	bf06      	itte	eq
   80cd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80cdc:	ea91 0f03 	teqeq	r1, r3
   80ce0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80ce4:	bd30      	pop	{r4, r5, pc}
   80ce6:	bf00      	nop

00080ce8 <__aeabi_ui2d>:
   80ce8:	f090 0f00 	teq	r0, #0
   80cec:	bf04      	itt	eq
   80cee:	2100      	moveq	r1, #0
   80cf0:	4770      	bxeq	lr
   80cf2:	b530      	push	{r4, r5, lr}
   80cf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80cf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80cfc:	f04f 0500 	mov.w	r5, #0
   80d00:	f04f 0100 	mov.w	r1, #0
   80d04:	e750      	b.n	80ba8 <__adddf3+0x138>
   80d06:	bf00      	nop

00080d08 <__aeabi_i2d>:
   80d08:	f090 0f00 	teq	r0, #0
   80d0c:	bf04      	itt	eq
   80d0e:	2100      	moveq	r1, #0
   80d10:	4770      	bxeq	lr
   80d12:	b530      	push	{r4, r5, lr}
   80d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80d20:	bf48      	it	mi
   80d22:	4240      	negmi	r0, r0
   80d24:	f04f 0100 	mov.w	r1, #0
   80d28:	e73e      	b.n	80ba8 <__adddf3+0x138>
   80d2a:	bf00      	nop

00080d2c <__aeabi_f2d>:
   80d2c:	0042      	lsls	r2, r0, #1
   80d2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80d32:	ea4f 0131 	mov.w	r1, r1, rrx
   80d36:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80d3a:	bf1f      	itttt	ne
   80d3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80d40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80d44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80d48:	4770      	bxne	lr
   80d4a:	f092 0f00 	teq	r2, #0
   80d4e:	bf14      	ite	ne
   80d50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80d54:	4770      	bxeq	lr
   80d56:	b530      	push	{r4, r5, lr}
   80d58:	f44f 7460 	mov.w	r4, #896	; 0x380
   80d5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80d64:	e720      	b.n	80ba8 <__adddf3+0x138>
   80d66:	bf00      	nop

00080d68 <__aeabi_ul2d>:
   80d68:	ea50 0201 	orrs.w	r2, r0, r1
   80d6c:	bf08      	it	eq
   80d6e:	4770      	bxeq	lr
   80d70:	b530      	push	{r4, r5, lr}
   80d72:	f04f 0500 	mov.w	r5, #0
   80d76:	e00a      	b.n	80d8e <__aeabi_l2d+0x16>

00080d78 <__aeabi_l2d>:
   80d78:	ea50 0201 	orrs.w	r2, r0, r1
   80d7c:	bf08      	it	eq
   80d7e:	4770      	bxeq	lr
   80d80:	b530      	push	{r4, r5, lr}
   80d82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80d86:	d502      	bpl.n	80d8e <__aeabi_l2d+0x16>
   80d88:	4240      	negs	r0, r0
   80d8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80d8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80d9a:	f43f aedc 	beq.w	80b56 <__adddf3+0xe6>
   80d9e:	f04f 0203 	mov.w	r2, #3
   80da2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80da6:	bf18      	it	ne
   80da8:	3203      	addne	r2, #3
   80daa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80dae:	bf18      	it	ne
   80db0:	3203      	addne	r2, #3
   80db2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80db6:	f1c2 0320 	rsb	r3, r2, #32
   80dba:	fa00 fc03 	lsl.w	ip, r0, r3
   80dbe:	fa20 f002 	lsr.w	r0, r0, r2
   80dc2:	fa01 fe03 	lsl.w	lr, r1, r3
   80dc6:	ea40 000e 	orr.w	r0, r0, lr
   80dca:	fa21 f102 	lsr.w	r1, r1, r2
   80dce:	4414      	add	r4, r2
   80dd0:	e6c1      	b.n	80b56 <__adddf3+0xe6>
   80dd2:	bf00      	nop

00080dd4 <__aeabi_dmul>:
   80dd4:	b570      	push	{r4, r5, r6, lr}
   80dd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80dda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80dde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80de2:	bf1d      	ittte	ne
   80de4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80de8:	ea94 0f0c 	teqne	r4, ip
   80dec:	ea95 0f0c 	teqne	r5, ip
   80df0:	f000 f8de 	bleq	80fb0 <__aeabi_dmul+0x1dc>
   80df4:	442c      	add	r4, r5
   80df6:	ea81 0603 	eor.w	r6, r1, r3
   80dfa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80dfe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80e02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80e06:	bf18      	it	ne
   80e08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80e14:	d038      	beq.n	80e88 <__aeabi_dmul+0xb4>
   80e16:	fba0 ce02 	umull	ip, lr, r0, r2
   80e1a:	f04f 0500 	mov.w	r5, #0
   80e1e:	fbe1 e502 	umlal	lr, r5, r1, r2
   80e22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80e26:	fbe0 e503 	umlal	lr, r5, r0, r3
   80e2a:	f04f 0600 	mov.w	r6, #0
   80e2e:	fbe1 5603 	umlal	r5, r6, r1, r3
   80e32:	f09c 0f00 	teq	ip, #0
   80e36:	bf18      	it	ne
   80e38:	f04e 0e01 	orrne.w	lr, lr, #1
   80e3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80e40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80e44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80e48:	d204      	bcs.n	80e54 <__aeabi_dmul+0x80>
   80e4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80e4e:	416d      	adcs	r5, r5
   80e50:	eb46 0606 	adc.w	r6, r6, r6
   80e54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80e58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80e5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80e60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80e64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80e68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80e6c:	bf88      	it	hi
   80e6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80e72:	d81e      	bhi.n	80eb2 <__aeabi_dmul+0xde>
   80e74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80e78:	bf08      	it	eq
   80e7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80e7e:	f150 0000 	adcs.w	r0, r0, #0
   80e82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e86:	bd70      	pop	{r4, r5, r6, pc}
   80e88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80e8c:	ea46 0101 	orr.w	r1, r6, r1
   80e90:	ea40 0002 	orr.w	r0, r0, r2
   80e94:	ea81 0103 	eor.w	r1, r1, r3
   80e98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80e9c:	bfc2      	ittt	gt
   80e9e:	ebd4 050c 	rsbsgt	r5, r4, ip
   80ea2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80ea6:	bd70      	popgt	{r4, r5, r6, pc}
   80ea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80eac:	f04f 0e00 	mov.w	lr, #0
   80eb0:	3c01      	subs	r4, #1
   80eb2:	f300 80ab 	bgt.w	8100c <__aeabi_dmul+0x238>
   80eb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80eba:	bfde      	ittt	le
   80ebc:	2000      	movle	r0, #0
   80ebe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80ec2:	bd70      	pople	{r4, r5, r6, pc}
   80ec4:	f1c4 0400 	rsb	r4, r4, #0
   80ec8:	3c20      	subs	r4, #32
   80eca:	da35      	bge.n	80f38 <__aeabi_dmul+0x164>
   80ecc:	340c      	adds	r4, #12
   80ece:	dc1b      	bgt.n	80f08 <__aeabi_dmul+0x134>
   80ed0:	f104 0414 	add.w	r4, r4, #20
   80ed4:	f1c4 0520 	rsb	r5, r4, #32
   80ed8:	fa00 f305 	lsl.w	r3, r0, r5
   80edc:	fa20 f004 	lsr.w	r0, r0, r4
   80ee0:	fa01 f205 	lsl.w	r2, r1, r5
   80ee4:	ea40 0002 	orr.w	r0, r0, r2
   80ee8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80eec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80ef0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80ef4:	fa21 f604 	lsr.w	r6, r1, r4
   80ef8:	eb42 0106 	adc.w	r1, r2, r6
   80efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f00:	bf08      	it	eq
   80f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f06:	bd70      	pop	{r4, r5, r6, pc}
   80f08:	f1c4 040c 	rsb	r4, r4, #12
   80f0c:	f1c4 0520 	rsb	r5, r4, #32
   80f10:	fa00 f304 	lsl.w	r3, r0, r4
   80f14:	fa20 f005 	lsr.w	r0, r0, r5
   80f18:	fa01 f204 	lsl.w	r2, r1, r4
   80f1c:	ea40 0002 	orr.w	r0, r0, r2
   80f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80f28:	f141 0100 	adc.w	r1, r1, #0
   80f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f30:	bf08      	it	eq
   80f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f36:	bd70      	pop	{r4, r5, r6, pc}
   80f38:	f1c4 0520 	rsb	r5, r4, #32
   80f3c:	fa00 f205 	lsl.w	r2, r0, r5
   80f40:	ea4e 0e02 	orr.w	lr, lr, r2
   80f44:	fa20 f304 	lsr.w	r3, r0, r4
   80f48:	fa01 f205 	lsl.w	r2, r1, r5
   80f4c:	ea43 0302 	orr.w	r3, r3, r2
   80f50:	fa21 f004 	lsr.w	r0, r1, r4
   80f54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f58:	fa21 f204 	lsr.w	r2, r1, r4
   80f5c:	ea20 0002 	bic.w	r0, r0, r2
   80f60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   80f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f68:	bf08      	it	eq
   80f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f6e:	bd70      	pop	{r4, r5, r6, pc}
   80f70:	f094 0f00 	teq	r4, #0
   80f74:	d10f      	bne.n	80f96 <__aeabi_dmul+0x1c2>
   80f76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   80f7a:	0040      	lsls	r0, r0, #1
   80f7c:	eb41 0101 	adc.w	r1, r1, r1
   80f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f84:	bf08      	it	eq
   80f86:	3c01      	subeq	r4, #1
   80f88:	d0f7      	beq.n	80f7a <__aeabi_dmul+0x1a6>
   80f8a:	ea41 0106 	orr.w	r1, r1, r6
   80f8e:	f095 0f00 	teq	r5, #0
   80f92:	bf18      	it	ne
   80f94:	4770      	bxne	lr
   80f96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   80f9a:	0052      	lsls	r2, r2, #1
   80f9c:	eb43 0303 	adc.w	r3, r3, r3
   80fa0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   80fa4:	bf08      	it	eq
   80fa6:	3d01      	subeq	r5, #1
   80fa8:	d0f7      	beq.n	80f9a <__aeabi_dmul+0x1c6>
   80faa:	ea43 0306 	orr.w	r3, r3, r6
   80fae:	4770      	bx	lr
   80fb0:	ea94 0f0c 	teq	r4, ip
   80fb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   80fb8:	bf18      	it	ne
   80fba:	ea95 0f0c 	teqne	r5, ip
   80fbe:	d00c      	beq.n	80fda <__aeabi_dmul+0x206>
   80fc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80fc4:	bf18      	it	ne
   80fc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80fca:	d1d1      	bne.n	80f70 <__aeabi_dmul+0x19c>
   80fcc:	ea81 0103 	eor.w	r1, r1, r3
   80fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80fd4:	f04f 0000 	mov.w	r0, #0
   80fd8:	bd70      	pop	{r4, r5, r6, pc}
   80fda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80fde:	bf06      	itte	eq
   80fe0:	4610      	moveq	r0, r2
   80fe2:	4619      	moveq	r1, r3
   80fe4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80fe8:	d019      	beq.n	8101e <__aeabi_dmul+0x24a>
   80fea:	ea94 0f0c 	teq	r4, ip
   80fee:	d102      	bne.n	80ff6 <__aeabi_dmul+0x222>
   80ff0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   80ff4:	d113      	bne.n	8101e <__aeabi_dmul+0x24a>
   80ff6:	ea95 0f0c 	teq	r5, ip
   80ffa:	d105      	bne.n	81008 <__aeabi_dmul+0x234>
   80ffc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81000:	bf1c      	itt	ne
   81002:	4610      	movne	r0, r2
   81004:	4619      	movne	r1, r3
   81006:	d10a      	bne.n	8101e <__aeabi_dmul+0x24a>
   81008:	ea81 0103 	eor.w	r1, r1, r3
   8100c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81010:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81014:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81018:	f04f 0000 	mov.w	r0, #0
   8101c:	bd70      	pop	{r4, r5, r6, pc}
   8101e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81022:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81026:	bd70      	pop	{r4, r5, r6, pc}

00081028 <__aeabi_ddiv>:
   81028:	b570      	push	{r4, r5, r6, lr}
   8102a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8102e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81032:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81036:	bf1d      	ittte	ne
   81038:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8103c:	ea94 0f0c 	teqne	r4, ip
   81040:	ea95 0f0c 	teqne	r5, ip
   81044:	f000 f8a7 	bleq	81196 <__aeabi_ddiv+0x16e>
   81048:	eba4 0405 	sub.w	r4, r4, r5
   8104c:	ea81 0e03 	eor.w	lr, r1, r3
   81050:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81054:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81058:	f000 8088 	beq.w	8116c <__aeabi_ddiv+0x144>
   8105c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81060:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81064:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81068:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8106c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81070:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81074:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81078:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8107c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81080:	429d      	cmp	r5, r3
   81082:	bf08      	it	eq
   81084:	4296      	cmpeq	r6, r2
   81086:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8108a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8108e:	d202      	bcs.n	81096 <__aeabi_ddiv+0x6e>
   81090:	085b      	lsrs	r3, r3, #1
   81092:	ea4f 0232 	mov.w	r2, r2, rrx
   81096:	1ab6      	subs	r6, r6, r2
   81098:	eb65 0503 	sbc.w	r5, r5, r3
   8109c:	085b      	lsrs	r3, r3, #1
   8109e:	ea4f 0232 	mov.w	r2, r2, rrx
   810a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   810a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   810aa:	ebb6 0e02 	subs.w	lr, r6, r2
   810ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   810b2:	bf22      	ittt	cs
   810b4:	1ab6      	subcs	r6, r6, r2
   810b6:	4675      	movcs	r5, lr
   810b8:	ea40 000c 	orrcs.w	r0, r0, ip
   810bc:	085b      	lsrs	r3, r3, #1
   810be:	ea4f 0232 	mov.w	r2, r2, rrx
   810c2:	ebb6 0e02 	subs.w	lr, r6, r2
   810c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   810ca:	bf22      	ittt	cs
   810cc:	1ab6      	subcs	r6, r6, r2
   810ce:	4675      	movcs	r5, lr
   810d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   810d4:	085b      	lsrs	r3, r3, #1
   810d6:	ea4f 0232 	mov.w	r2, r2, rrx
   810da:	ebb6 0e02 	subs.w	lr, r6, r2
   810de:	eb75 0e03 	sbcs.w	lr, r5, r3
   810e2:	bf22      	ittt	cs
   810e4:	1ab6      	subcs	r6, r6, r2
   810e6:	4675      	movcs	r5, lr
   810e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   810ec:	085b      	lsrs	r3, r3, #1
   810ee:	ea4f 0232 	mov.w	r2, r2, rrx
   810f2:	ebb6 0e02 	subs.w	lr, r6, r2
   810f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   810fa:	bf22      	ittt	cs
   810fc:	1ab6      	subcs	r6, r6, r2
   810fe:	4675      	movcs	r5, lr
   81100:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81104:	ea55 0e06 	orrs.w	lr, r5, r6
   81108:	d018      	beq.n	8113c <__aeabi_ddiv+0x114>
   8110a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8110e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81112:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81116:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8111a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8111e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81122:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81126:	d1c0      	bne.n	810aa <__aeabi_ddiv+0x82>
   81128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8112c:	d10b      	bne.n	81146 <__aeabi_ddiv+0x11e>
   8112e:	ea41 0100 	orr.w	r1, r1, r0
   81132:	f04f 0000 	mov.w	r0, #0
   81136:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8113a:	e7b6      	b.n	810aa <__aeabi_ddiv+0x82>
   8113c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81140:	bf04      	itt	eq
   81142:	4301      	orreq	r1, r0
   81144:	2000      	moveq	r0, #0
   81146:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8114a:	bf88      	it	hi
   8114c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81150:	f63f aeaf 	bhi.w	80eb2 <__aeabi_dmul+0xde>
   81154:	ebb5 0c03 	subs.w	ip, r5, r3
   81158:	bf04      	itt	eq
   8115a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8115e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81162:	f150 0000 	adcs.w	r0, r0, #0
   81166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8116a:	bd70      	pop	{r4, r5, r6, pc}
   8116c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81170:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81174:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81178:	bfc2      	ittt	gt
   8117a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8117e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81182:	bd70      	popgt	{r4, r5, r6, pc}
   81184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81188:	f04f 0e00 	mov.w	lr, #0
   8118c:	3c01      	subs	r4, #1
   8118e:	e690      	b.n	80eb2 <__aeabi_dmul+0xde>
   81190:	ea45 0e06 	orr.w	lr, r5, r6
   81194:	e68d      	b.n	80eb2 <__aeabi_dmul+0xde>
   81196:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8119a:	ea94 0f0c 	teq	r4, ip
   8119e:	bf08      	it	eq
   811a0:	ea95 0f0c 	teqeq	r5, ip
   811a4:	f43f af3b 	beq.w	8101e <__aeabi_dmul+0x24a>
   811a8:	ea94 0f0c 	teq	r4, ip
   811ac:	d10a      	bne.n	811c4 <__aeabi_ddiv+0x19c>
   811ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811b2:	f47f af34 	bne.w	8101e <__aeabi_dmul+0x24a>
   811b6:	ea95 0f0c 	teq	r5, ip
   811ba:	f47f af25 	bne.w	81008 <__aeabi_dmul+0x234>
   811be:	4610      	mov	r0, r2
   811c0:	4619      	mov	r1, r3
   811c2:	e72c      	b.n	8101e <__aeabi_dmul+0x24a>
   811c4:	ea95 0f0c 	teq	r5, ip
   811c8:	d106      	bne.n	811d8 <__aeabi_ddiv+0x1b0>
   811ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   811ce:	f43f aefd 	beq.w	80fcc <__aeabi_dmul+0x1f8>
   811d2:	4610      	mov	r0, r2
   811d4:	4619      	mov	r1, r3
   811d6:	e722      	b.n	8101e <__aeabi_dmul+0x24a>
   811d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   811dc:	bf18      	it	ne
   811de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   811e2:	f47f aec5 	bne.w	80f70 <__aeabi_dmul+0x19c>
   811e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   811ea:	f47f af0d 	bne.w	81008 <__aeabi_dmul+0x234>
   811ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   811f2:	f47f aeeb 	bne.w	80fcc <__aeabi_dmul+0x1f8>
   811f6:	e712      	b.n	8101e <__aeabi_dmul+0x24a>

000811f8 <__aeabi_d2f>:
   811f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   811fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   81200:	bf24      	itt	cs
   81202:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   81206:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8120a:	d90d      	bls.n	81228 <__aeabi_d2f+0x30>
   8120c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81210:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   81214:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   81218:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   8121c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   81220:	bf08      	it	eq
   81222:	f020 0001 	biceq.w	r0, r0, #1
   81226:	4770      	bx	lr
   81228:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   8122c:	d121      	bne.n	81272 <__aeabi_d2f+0x7a>
   8122e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   81232:	bfbc      	itt	lt
   81234:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   81238:	4770      	bxlt	lr
   8123a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8123e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   81242:	f1c2 0218 	rsb	r2, r2, #24
   81246:	f1c2 0c20 	rsb	ip, r2, #32
   8124a:	fa10 f30c 	lsls.w	r3, r0, ip
   8124e:	fa20 f002 	lsr.w	r0, r0, r2
   81252:	bf18      	it	ne
   81254:	f040 0001 	orrne.w	r0, r0, #1
   81258:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8125c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81260:	fa03 fc0c 	lsl.w	ip, r3, ip
   81264:	ea40 000c 	orr.w	r0, r0, ip
   81268:	fa23 f302 	lsr.w	r3, r3, r2
   8126c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81270:	e7cc      	b.n	8120c <__aeabi_d2f+0x14>
   81272:	ea7f 5362 	mvns.w	r3, r2, asr #21
   81276:	d107      	bne.n	81288 <__aeabi_d2f+0x90>
   81278:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8127c:	bf1e      	ittt	ne
   8127e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   81282:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   81286:	4770      	bxne	lr
   81288:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8128c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81290:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81294:	4770      	bx	lr
   81296:	bf00      	nop

00081298 <__aeabi_frsub>:
   81298:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8129c:	e002      	b.n	812a4 <__addsf3>
   8129e:	bf00      	nop

000812a0 <__aeabi_fsub>:
   812a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000812a4 <__addsf3>:
   812a4:	0042      	lsls	r2, r0, #1
   812a6:	bf1f      	itttt	ne
   812a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   812ac:	ea92 0f03 	teqne	r2, r3
   812b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   812b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   812b8:	d06a      	beq.n	81390 <__addsf3+0xec>
   812ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
   812be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   812c2:	bfc1      	itttt	gt
   812c4:	18d2      	addgt	r2, r2, r3
   812c6:	4041      	eorgt	r1, r0
   812c8:	4048      	eorgt	r0, r1
   812ca:	4041      	eorgt	r1, r0
   812cc:	bfb8      	it	lt
   812ce:	425b      	neglt	r3, r3
   812d0:	2b19      	cmp	r3, #25
   812d2:	bf88      	it	hi
   812d4:	4770      	bxhi	lr
   812d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   812da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   812de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   812e2:	bf18      	it	ne
   812e4:	4240      	negne	r0, r0
   812e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   812ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   812ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   812f2:	bf18      	it	ne
   812f4:	4249      	negne	r1, r1
   812f6:	ea92 0f03 	teq	r2, r3
   812fa:	d03f      	beq.n	8137c <__addsf3+0xd8>
   812fc:	f1a2 0201 	sub.w	r2, r2, #1
   81300:	fa41 fc03 	asr.w	ip, r1, r3
   81304:	eb10 000c 	adds.w	r0, r0, ip
   81308:	f1c3 0320 	rsb	r3, r3, #32
   8130c:	fa01 f103 	lsl.w	r1, r1, r3
   81310:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81314:	d502      	bpl.n	8131c <__addsf3+0x78>
   81316:	4249      	negs	r1, r1
   81318:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   8131c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81320:	d313      	bcc.n	8134a <__addsf3+0xa6>
   81322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   81326:	d306      	bcc.n	81336 <__addsf3+0x92>
   81328:	0840      	lsrs	r0, r0, #1
   8132a:	ea4f 0131 	mov.w	r1, r1, rrx
   8132e:	f102 0201 	add.w	r2, r2, #1
   81332:	2afe      	cmp	r2, #254	; 0xfe
   81334:	d251      	bcs.n	813da <__addsf3+0x136>
   81336:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8133a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8133e:	bf08      	it	eq
   81340:	f020 0001 	biceq.w	r0, r0, #1
   81344:	ea40 0003 	orr.w	r0, r0, r3
   81348:	4770      	bx	lr
   8134a:	0049      	lsls	r1, r1, #1
   8134c:	eb40 0000 	adc.w	r0, r0, r0
   81350:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81354:	f1a2 0201 	sub.w	r2, r2, #1
   81358:	d1ed      	bne.n	81336 <__addsf3+0x92>
   8135a:	fab0 fc80 	clz	ip, r0
   8135e:	f1ac 0c08 	sub.w	ip, ip, #8
   81362:	ebb2 020c 	subs.w	r2, r2, ip
   81366:	fa00 f00c 	lsl.w	r0, r0, ip
   8136a:	bfaa      	itet	ge
   8136c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81370:	4252      	neglt	r2, r2
   81372:	4318      	orrge	r0, r3
   81374:	bfbc      	itt	lt
   81376:	40d0      	lsrlt	r0, r2
   81378:	4318      	orrlt	r0, r3
   8137a:	4770      	bx	lr
   8137c:	f092 0f00 	teq	r2, #0
   81380:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81384:	bf06      	itte	eq
   81386:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8138a:	3201      	addeq	r2, #1
   8138c:	3b01      	subne	r3, #1
   8138e:	e7b5      	b.n	812fc <__addsf3+0x58>
   81390:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81394:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81398:	bf18      	it	ne
   8139a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8139e:	d021      	beq.n	813e4 <__addsf3+0x140>
   813a0:	ea92 0f03 	teq	r2, r3
   813a4:	d004      	beq.n	813b0 <__addsf3+0x10c>
   813a6:	f092 0f00 	teq	r2, #0
   813aa:	bf08      	it	eq
   813ac:	4608      	moveq	r0, r1
   813ae:	4770      	bx	lr
   813b0:	ea90 0f01 	teq	r0, r1
   813b4:	bf1c      	itt	ne
   813b6:	2000      	movne	r0, #0
   813b8:	4770      	bxne	lr
   813ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   813be:	d104      	bne.n	813ca <__addsf3+0x126>
   813c0:	0040      	lsls	r0, r0, #1
   813c2:	bf28      	it	cs
   813c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   813c8:	4770      	bx	lr
   813ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   813ce:	bf3c      	itt	cc
   813d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   813d4:	4770      	bxcc	lr
   813d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   813da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   813de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   813e2:	4770      	bx	lr
   813e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   813e8:	bf16      	itet	ne
   813ea:	4608      	movne	r0, r1
   813ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   813f0:	4601      	movne	r1, r0
   813f2:	0242      	lsls	r2, r0, #9
   813f4:	bf06      	itte	eq
   813f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   813fa:	ea90 0f01 	teqeq	r0, r1
   813fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81402:	4770      	bx	lr

00081404 <__aeabi_ui2f>:
   81404:	f04f 0300 	mov.w	r3, #0
   81408:	e004      	b.n	81414 <__aeabi_i2f+0x8>
   8140a:	bf00      	nop

0008140c <__aeabi_i2f>:
   8140c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81410:	bf48      	it	mi
   81412:	4240      	negmi	r0, r0
   81414:	ea5f 0c00 	movs.w	ip, r0
   81418:	bf08      	it	eq
   8141a:	4770      	bxeq	lr
   8141c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81420:	4601      	mov	r1, r0
   81422:	f04f 0000 	mov.w	r0, #0
   81426:	e01c      	b.n	81462 <__aeabi_l2f+0x2a>

00081428 <__aeabi_ul2f>:
   81428:	ea50 0201 	orrs.w	r2, r0, r1
   8142c:	bf08      	it	eq
   8142e:	4770      	bxeq	lr
   81430:	f04f 0300 	mov.w	r3, #0
   81434:	e00a      	b.n	8144c <__aeabi_l2f+0x14>
   81436:	bf00      	nop

00081438 <__aeabi_l2f>:
   81438:	ea50 0201 	orrs.w	r2, r0, r1
   8143c:	bf08      	it	eq
   8143e:	4770      	bxeq	lr
   81440:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81444:	d502      	bpl.n	8144c <__aeabi_l2f+0x14>
   81446:	4240      	negs	r0, r0
   81448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8144c:	ea5f 0c01 	movs.w	ip, r1
   81450:	bf02      	ittt	eq
   81452:	4684      	moveq	ip, r0
   81454:	4601      	moveq	r1, r0
   81456:	2000      	moveq	r0, #0
   81458:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8145c:	bf08      	it	eq
   8145e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81462:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81466:	fabc f28c 	clz	r2, ip
   8146a:	3a08      	subs	r2, #8
   8146c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81470:	db10      	blt.n	81494 <__aeabi_l2f+0x5c>
   81472:	fa01 fc02 	lsl.w	ip, r1, r2
   81476:	4463      	add	r3, ip
   81478:	fa00 fc02 	lsl.w	ip, r0, r2
   8147c:	f1c2 0220 	rsb	r2, r2, #32
   81480:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81484:	fa20 f202 	lsr.w	r2, r0, r2
   81488:	eb43 0002 	adc.w	r0, r3, r2
   8148c:	bf08      	it	eq
   8148e:	f020 0001 	biceq.w	r0, r0, #1
   81492:	4770      	bx	lr
   81494:	f102 0220 	add.w	r2, r2, #32
   81498:	fa01 fc02 	lsl.w	ip, r1, r2
   8149c:	f1c2 0220 	rsb	r2, r2, #32
   814a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   814a4:	fa21 f202 	lsr.w	r2, r1, r2
   814a8:	eb43 0002 	adc.w	r0, r3, r2
   814ac:	bf08      	it	eq
   814ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   814b2:	4770      	bx	lr

000814b4 <__aeabi_fmul>:
   814b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   814b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   814bc:	bf1e      	ittt	ne
   814be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   814c2:	ea92 0f0c 	teqne	r2, ip
   814c6:	ea93 0f0c 	teqne	r3, ip
   814ca:	d06f      	beq.n	815ac <__aeabi_fmul+0xf8>
   814cc:	441a      	add	r2, r3
   814ce:	ea80 0c01 	eor.w	ip, r0, r1
   814d2:	0240      	lsls	r0, r0, #9
   814d4:	bf18      	it	ne
   814d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   814da:	d01e      	beq.n	8151a <__aeabi_fmul+0x66>
   814dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   814e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   814e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   814e8:	fba0 3101 	umull	r3, r1, r0, r1
   814ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   814f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   814f4:	bf3e      	ittt	cc
   814f6:	0049      	lslcc	r1, r1, #1
   814f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   814fc:	005b      	lslcc	r3, r3, #1
   814fe:	ea40 0001 	orr.w	r0, r0, r1
   81502:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81506:	2afd      	cmp	r2, #253	; 0xfd
   81508:	d81d      	bhi.n	81546 <__aeabi_fmul+0x92>
   8150a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8150e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81512:	bf08      	it	eq
   81514:	f020 0001 	biceq.w	r0, r0, #1
   81518:	4770      	bx	lr
   8151a:	f090 0f00 	teq	r0, #0
   8151e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81522:	bf08      	it	eq
   81524:	0249      	lsleq	r1, r1, #9
   81526:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8152a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8152e:	3a7f      	subs	r2, #127	; 0x7f
   81530:	bfc2      	ittt	gt
   81532:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81536:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8153a:	4770      	bxgt	lr
   8153c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81540:	f04f 0300 	mov.w	r3, #0
   81544:	3a01      	subs	r2, #1
   81546:	dc5d      	bgt.n	81604 <__aeabi_fmul+0x150>
   81548:	f112 0f19 	cmn.w	r2, #25
   8154c:	bfdc      	itt	le
   8154e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81552:	4770      	bxle	lr
   81554:	f1c2 0200 	rsb	r2, r2, #0
   81558:	0041      	lsls	r1, r0, #1
   8155a:	fa21 f102 	lsr.w	r1, r1, r2
   8155e:	f1c2 0220 	rsb	r2, r2, #32
   81562:	fa00 fc02 	lsl.w	ip, r0, r2
   81566:	ea5f 0031 	movs.w	r0, r1, rrx
   8156a:	f140 0000 	adc.w	r0, r0, #0
   8156e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81572:	bf08      	it	eq
   81574:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81578:	4770      	bx	lr
   8157a:	f092 0f00 	teq	r2, #0
   8157e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81582:	bf02      	ittt	eq
   81584:	0040      	lsleq	r0, r0, #1
   81586:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8158a:	3a01      	subeq	r2, #1
   8158c:	d0f9      	beq.n	81582 <__aeabi_fmul+0xce>
   8158e:	ea40 000c 	orr.w	r0, r0, ip
   81592:	f093 0f00 	teq	r3, #0
   81596:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8159a:	bf02      	ittt	eq
   8159c:	0049      	lsleq	r1, r1, #1
   8159e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   815a2:	3b01      	subeq	r3, #1
   815a4:	d0f9      	beq.n	8159a <__aeabi_fmul+0xe6>
   815a6:	ea41 010c 	orr.w	r1, r1, ip
   815aa:	e78f      	b.n	814cc <__aeabi_fmul+0x18>
   815ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   815b0:	ea92 0f0c 	teq	r2, ip
   815b4:	bf18      	it	ne
   815b6:	ea93 0f0c 	teqne	r3, ip
   815ba:	d00a      	beq.n	815d2 <__aeabi_fmul+0x11e>
   815bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   815c0:	bf18      	it	ne
   815c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   815c6:	d1d8      	bne.n	8157a <__aeabi_fmul+0xc6>
   815c8:	ea80 0001 	eor.w	r0, r0, r1
   815cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   815d0:	4770      	bx	lr
   815d2:	f090 0f00 	teq	r0, #0
   815d6:	bf17      	itett	ne
   815d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   815dc:	4608      	moveq	r0, r1
   815de:	f091 0f00 	teqne	r1, #0
   815e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   815e6:	d014      	beq.n	81612 <__aeabi_fmul+0x15e>
   815e8:	ea92 0f0c 	teq	r2, ip
   815ec:	d101      	bne.n	815f2 <__aeabi_fmul+0x13e>
   815ee:	0242      	lsls	r2, r0, #9
   815f0:	d10f      	bne.n	81612 <__aeabi_fmul+0x15e>
   815f2:	ea93 0f0c 	teq	r3, ip
   815f6:	d103      	bne.n	81600 <__aeabi_fmul+0x14c>
   815f8:	024b      	lsls	r3, r1, #9
   815fa:	bf18      	it	ne
   815fc:	4608      	movne	r0, r1
   815fe:	d108      	bne.n	81612 <__aeabi_fmul+0x15e>
   81600:	ea80 0001 	eor.w	r0, r0, r1
   81604:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81608:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8160c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81610:	4770      	bx	lr
   81612:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81616:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8161a:	4770      	bx	lr

0008161c <__aeabi_fdiv>:
   8161c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81620:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81624:	bf1e      	ittt	ne
   81626:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8162a:	ea92 0f0c 	teqne	r2, ip
   8162e:	ea93 0f0c 	teqne	r3, ip
   81632:	d069      	beq.n	81708 <__aeabi_fdiv+0xec>
   81634:	eba2 0203 	sub.w	r2, r2, r3
   81638:	ea80 0c01 	eor.w	ip, r0, r1
   8163c:	0249      	lsls	r1, r1, #9
   8163e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81642:	d037      	beq.n	816b4 <__aeabi_fdiv+0x98>
   81644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81648:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   8164c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81650:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81654:	428b      	cmp	r3, r1
   81656:	bf38      	it	cc
   81658:	005b      	lslcc	r3, r3, #1
   8165a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8165e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81662:	428b      	cmp	r3, r1
   81664:	bf24      	itt	cs
   81666:	1a5b      	subcs	r3, r3, r1
   81668:	ea40 000c 	orrcs.w	r0, r0, ip
   8166c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81670:	bf24      	itt	cs
   81672:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81676:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8167a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8167e:	bf24      	itt	cs
   81680:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81684:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81688:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8168c:	bf24      	itt	cs
   8168e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81692:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81696:	011b      	lsls	r3, r3, #4
   81698:	bf18      	it	ne
   8169a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8169e:	d1e0      	bne.n	81662 <__aeabi_fdiv+0x46>
   816a0:	2afd      	cmp	r2, #253	; 0xfd
   816a2:	f63f af50 	bhi.w	81546 <__aeabi_fmul+0x92>
   816a6:	428b      	cmp	r3, r1
   816a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   816ac:	bf08      	it	eq
   816ae:	f020 0001 	biceq.w	r0, r0, #1
   816b2:	4770      	bx	lr
   816b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   816b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   816bc:	327f      	adds	r2, #127	; 0x7f
   816be:	bfc2      	ittt	gt
   816c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   816c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   816c8:	4770      	bxgt	lr
   816ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   816ce:	f04f 0300 	mov.w	r3, #0
   816d2:	3a01      	subs	r2, #1
   816d4:	e737      	b.n	81546 <__aeabi_fmul+0x92>
   816d6:	f092 0f00 	teq	r2, #0
   816da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   816de:	bf02      	ittt	eq
   816e0:	0040      	lsleq	r0, r0, #1
   816e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   816e6:	3a01      	subeq	r2, #1
   816e8:	d0f9      	beq.n	816de <__aeabi_fdiv+0xc2>
   816ea:	ea40 000c 	orr.w	r0, r0, ip
   816ee:	f093 0f00 	teq	r3, #0
   816f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   816f6:	bf02      	ittt	eq
   816f8:	0049      	lsleq	r1, r1, #1
   816fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   816fe:	3b01      	subeq	r3, #1
   81700:	d0f9      	beq.n	816f6 <__aeabi_fdiv+0xda>
   81702:	ea41 010c 	orr.w	r1, r1, ip
   81706:	e795      	b.n	81634 <__aeabi_fdiv+0x18>
   81708:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8170c:	ea92 0f0c 	teq	r2, ip
   81710:	d108      	bne.n	81724 <__aeabi_fdiv+0x108>
   81712:	0242      	lsls	r2, r0, #9
   81714:	f47f af7d 	bne.w	81612 <__aeabi_fmul+0x15e>
   81718:	ea93 0f0c 	teq	r3, ip
   8171c:	f47f af70 	bne.w	81600 <__aeabi_fmul+0x14c>
   81720:	4608      	mov	r0, r1
   81722:	e776      	b.n	81612 <__aeabi_fmul+0x15e>
   81724:	ea93 0f0c 	teq	r3, ip
   81728:	d104      	bne.n	81734 <__aeabi_fdiv+0x118>
   8172a:	024b      	lsls	r3, r1, #9
   8172c:	f43f af4c 	beq.w	815c8 <__aeabi_fmul+0x114>
   81730:	4608      	mov	r0, r1
   81732:	e76e      	b.n	81612 <__aeabi_fmul+0x15e>
   81734:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81738:	bf18      	it	ne
   8173a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8173e:	d1ca      	bne.n	816d6 <__aeabi_fdiv+0xba>
   81740:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81744:	f47f af5c 	bne.w	81600 <__aeabi_fmul+0x14c>
   81748:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   8174c:	f47f af3c 	bne.w	815c8 <__aeabi_fmul+0x114>
   81750:	e75f      	b.n	81612 <__aeabi_fmul+0x15e>
   81752:	bf00      	nop

00081754 <__aeabi_f2uiz>:
   81754:	0042      	lsls	r2, r0, #1
   81756:	d20e      	bcs.n	81776 <__aeabi_f2uiz+0x22>
   81758:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8175c:	d30b      	bcc.n	81776 <__aeabi_f2uiz+0x22>
   8175e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81762:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81766:	d409      	bmi.n	8177c <__aeabi_f2uiz+0x28>
   81768:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8176c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81770:	fa23 f002 	lsr.w	r0, r3, r2
   81774:	4770      	bx	lr
   81776:	f04f 0000 	mov.w	r0, #0
   8177a:	4770      	bx	lr
   8177c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81780:	d101      	bne.n	81786 <__aeabi_f2uiz+0x32>
   81782:	0242      	lsls	r2, r0, #9
   81784:	d102      	bne.n	8178c <__aeabi_f2uiz+0x38>
   81786:	f04f 30ff 	mov.w	r0, #4294967295
   8178a:	4770      	bx	lr
   8178c:	f04f 0000 	mov.w	r0, #0
   81790:	4770      	bx	lr
   81792:	bf00      	nop

00081794 <__libc_init_array>:
   81794:	b570      	push	{r4, r5, r6, lr}
   81796:	4e0f      	ldr	r6, [pc, #60]	; (817d4 <__libc_init_array+0x40>)
   81798:	4d0f      	ldr	r5, [pc, #60]	; (817d8 <__libc_init_array+0x44>)
   8179a:	1b76      	subs	r6, r6, r5
   8179c:	10b6      	asrs	r6, r6, #2
   8179e:	bf18      	it	ne
   817a0:	2400      	movne	r4, #0
   817a2:	d005      	beq.n	817b0 <__libc_init_array+0x1c>
   817a4:	3401      	adds	r4, #1
   817a6:	f855 3b04 	ldr.w	r3, [r5], #4
   817aa:	4798      	blx	r3
   817ac:	42a6      	cmp	r6, r4
   817ae:	d1f9      	bne.n	817a4 <__libc_init_array+0x10>
   817b0:	4e0a      	ldr	r6, [pc, #40]	; (817dc <__libc_init_array+0x48>)
   817b2:	4d0b      	ldr	r5, [pc, #44]	; (817e0 <__libc_init_array+0x4c>)
   817b4:	f000 f8dc 	bl	81970 <_init>
   817b8:	1b76      	subs	r6, r6, r5
   817ba:	10b6      	asrs	r6, r6, #2
   817bc:	bf18      	it	ne
   817be:	2400      	movne	r4, #0
   817c0:	d006      	beq.n	817d0 <__libc_init_array+0x3c>
   817c2:	3401      	adds	r4, #1
   817c4:	f855 3b04 	ldr.w	r3, [r5], #4
   817c8:	4798      	blx	r3
   817ca:	42a6      	cmp	r6, r4
   817cc:	d1f9      	bne.n	817c2 <__libc_init_array+0x2e>
   817ce:	bd70      	pop	{r4, r5, r6, pc}
   817d0:	bd70      	pop	{r4, r5, r6, pc}
   817d2:	bf00      	nop
   817d4:	0008197c 	.word	0x0008197c
   817d8:	0008197c 	.word	0x0008197c
   817dc:	00081984 	.word	0x00081984
   817e0:	0008197c 	.word	0x0008197c

000817e4 <register_fini>:
   817e4:	4b02      	ldr	r3, [pc, #8]	; (817f0 <register_fini+0xc>)
   817e6:	b113      	cbz	r3, 817ee <register_fini+0xa>
   817e8:	4802      	ldr	r0, [pc, #8]	; (817f4 <register_fini+0x10>)
   817ea:	f000 b805 	b.w	817f8 <atexit>
   817ee:	4770      	bx	lr
   817f0:	00000000 	.word	0x00000000
   817f4:	00081805 	.word	0x00081805

000817f8 <atexit>:
   817f8:	2300      	movs	r3, #0
   817fa:	4601      	mov	r1, r0
   817fc:	461a      	mov	r2, r3
   817fe:	4618      	mov	r0, r3
   81800:	f000 b81e 	b.w	81840 <__register_exitproc>

00081804 <__libc_fini_array>:
   81804:	b538      	push	{r3, r4, r5, lr}
   81806:	4c0a      	ldr	r4, [pc, #40]	; (81830 <__libc_fini_array+0x2c>)
   81808:	4d0a      	ldr	r5, [pc, #40]	; (81834 <__libc_fini_array+0x30>)
   8180a:	1b64      	subs	r4, r4, r5
   8180c:	10a4      	asrs	r4, r4, #2
   8180e:	d00a      	beq.n	81826 <__libc_fini_array+0x22>
   81810:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81814:	3b01      	subs	r3, #1
   81816:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8181a:	3c01      	subs	r4, #1
   8181c:	f855 3904 	ldr.w	r3, [r5], #-4
   81820:	4798      	blx	r3
   81822:	2c00      	cmp	r4, #0
   81824:	d1f9      	bne.n	8181a <__libc_fini_array+0x16>
   81826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8182a:	f000 b8ab 	b.w	81984 <_fini>
   8182e:	bf00      	nop
   81830:	00081994 	.word	0x00081994
   81834:	00081990 	.word	0x00081990

00081838 <__retarget_lock_acquire_recursive>:
   81838:	4770      	bx	lr
   8183a:	bf00      	nop

0008183c <__retarget_lock_release_recursive>:
   8183c:	4770      	bx	lr
   8183e:	bf00      	nop

00081840 <__register_exitproc>:
   81840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81844:	4d2c      	ldr	r5, [pc, #176]	; (818f8 <__register_exitproc+0xb8>)
   81846:	4606      	mov	r6, r0
   81848:	6828      	ldr	r0, [r5, #0]
   8184a:	4698      	mov	r8, r3
   8184c:	460f      	mov	r7, r1
   8184e:	4691      	mov	r9, r2
   81850:	f7ff fff2 	bl	81838 <__retarget_lock_acquire_recursive>
   81854:	4b29      	ldr	r3, [pc, #164]	; (818fc <__register_exitproc+0xbc>)
   81856:	681c      	ldr	r4, [r3, #0]
   81858:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8185c:	2b00      	cmp	r3, #0
   8185e:	d03e      	beq.n	818de <__register_exitproc+0x9e>
   81860:	685a      	ldr	r2, [r3, #4]
   81862:	2a1f      	cmp	r2, #31
   81864:	dc1c      	bgt.n	818a0 <__register_exitproc+0x60>
   81866:	f102 0e01 	add.w	lr, r2, #1
   8186a:	b176      	cbz	r6, 8188a <__register_exitproc+0x4a>
   8186c:	2101      	movs	r1, #1
   8186e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81872:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81876:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8187a:	4091      	lsls	r1, r2
   8187c:	4308      	orrs	r0, r1
   8187e:	2e02      	cmp	r6, #2
   81880:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81884:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81888:	d023      	beq.n	818d2 <__register_exitproc+0x92>
   8188a:	3202      	adds	r2, #2
   8188c:	f8c3 e004 	str.w	lr, [r3, #4]
   81890:	6828      	ldr	r0, [r5, #0]
   81892:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81896:	f7ff ffd1 	bl	8183c <__retarget_lock_release_recursive>
   8189a:	2000      	movs	r0, #0
   8189c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818a0:	4b17      	ldr	r3, [pc, #92]	; (81900 <__register_exitproc+0xc0>)
   818a2:	b30b      	cbz	r3, 818e8 <__register_exitproc+0xa8>
   818a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   818a8:	f3af 8000 	nop.w
   818ac:	4603      	mov	r3, r0
   818ae:	b1d8      	cbz	r0, 818e8 <__register_exitproc+0xa8>
   818b0:	2000      	movs	r0, #0
   818b2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   818b6:	f04f 0e01 	mov.w	lr, #1
   818ba:	6058      	str	r0, [r3, #4]
   818bc:	6019      	str	r1, [r3, #0]
   818be:	4602      	mov	r2, r0
   818c0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   818c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   818c8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   818cc:	2e00      	cmp	r6, #0
   818ce:	d0dc      	beq.n	8188a <__register_exitproc+0x4a>
   818d0:	e7cc      	b.n	8186c <__register_exitproc+0x2c>
   818d2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   818d6:	4301      	orrs	r1, r0
   818d8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   818dc:	e7d5      	b.n	8188a <__register_exitproc+0x4a>
   818de:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   818e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   818e6:	e7bb      	b.n	81860 <__register_exitproc+0x20>
   818e8:	6828      	ldr	r0, [r5, #0]
   818ea:	f7ff ffa7 	bl	8183c <__retarget_lock_release_recursive>
   818ee:	f04f 30ff 	mov.w	r0, #4294967295
   818f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818f6:	bf00      	nop
   818f8:	20000430 	.word	0x20000430
   818fc:	0008196c 	.word	0x0008196c
   81900:	00000000 	.word	0x00000000
   81904:	304e4143 	.word	0x304e4143
   81908:	73656d20 	.word	0x73656d20
   8190c:	65676173 	.word	0x65676173
   81910:	72726120 	.word	0x72726120
   81914:	64657669 	.word	0x64657669
   81918:	206e6920 	.word	0x206e6920
   8191c:	2d6e6f6e 	.word	0x2d6e6f6e
   81920:	64657375 	.word	0x64657375
   81924:	69616d20 	.word	0x69616d20
   81928:	786f626c 	.word	0x786f626c
   8192c:	00000d0a 	.word	0x00000d0a
   81930:	6c6c6548 	.word	0x6c6c6548
   81934:	6f77206f 	.word	0x6f77206f
   81938:	00646c72 	.word	0x00646c72
   8193c:	6c756e28 	.word	0x6c756e28
   81940:	0000296c 	.word	0x0000296c
   81944:	20206425 	.word	0x20206425
   81948:	00002020 	.word	0x00002020
   8194c:	3a525245 	.word	0x3a525245
   81950:	52415520 	.word	0x52415520
   81954:	58522054 	.word	0x58522054
   81958:	66756220 	.word	0x66756220
   8195c:	20726566 	.word	0x20726566
   81960:	66207369 	.word	0x66207369
   81964:	0a6c6c75 	.word	0x0a6c6c75
   81968:	0000000d 	.word	0x0000000d

0008196c <_global_impure_ptr>:
   8196c:	20000008                                ... 

00081970 <_init>:
   81970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81972:	bf00      	nop
   81974:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81976:	bc08      	pop	{r3}
   81978:	469e      	mov	lr, r3
   8197a:	4770      	bx	lr

0008197c <__init_array_start>:
   8197c:	000817e5 	.word	0x000817e5

00081980 <__frame_dummy_init_array_entry>:
   81980:	00080119                                ....

00081984 <_fini>:
   81984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81986:	bf00      	nop
   81988:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8198a:	bc08      	pop	{r3}
   8198c:	469e      	mov	lr, r3
   8198e:	4770      	bx	lr

00081990 <__fini_array_start>:
   81990:	000800f5 	.word	0x000800f5
