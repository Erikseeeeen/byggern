
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fdc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00081fdc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  2000043c  00082418  0002043c  2**2
                  ALLOC
  3 .stack        00000404  200004dc  000824b8  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008e0  000828bc  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000849b  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001585  00000000  00000000  00028959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000248  00000000  00000000  00029ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001b8  00000000  00000000  0002a126  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013db0  00000000  00000000  0002a2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000581d  00000000  00000000  0003e08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00056ded  00000000  00000000  000438ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000008e8  00000000  00000000  0009a698  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000110b  00000000  00000000  0009af80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e0 08 00 20 51 05 08 00 4d 05 08 00 4d 05 08 00     ... Q...M...M...
   80010:	4d 05 08 00 4d 05 08 00 4d 05 08 00 00 00 00 00     M...M...M.......
	...
   8002c:	4d 05 08 00 4d 05 08 00 00 00 00 00 4d 05 08 00     M...M.......M...
   8003c:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   8004c:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   8005c:	4d 05 08 00 cd 0e 08 00 4d 05 08 00 00 00 00 00     M.......M.......
   8006c:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
	...
   80084:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   80094:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   800a4:	00 00 00 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     ....M...M...M...
   800b4:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   800c4:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   800d4:	4d 05 08 00 4d 05 08 00 4d 05 08 00 4d 05 08 00     M...M...M...M...
   800e4:	4d 05 08 00 4d 05 08 00 c9 03 08 00 4d 05 08 00     M...M.......M...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00081fdc 	.word	0x00081fdc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081fdc 	.word	0x00081fdc
   80154:	20000440 	.word	0x20000440
   80158:	00081fdc 	.word	0x00081fdc
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Enable peripheral clock
	PMC->PMC_PCR |= (ID_ADC << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   80160:	4a13      	ldr	r2, [pc, #76]	; (801b0 <adc_init+0x50>)
   80162:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   80166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   8016a:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   8016e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_ADC-32));
   80172:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80176:	f043 0320 	orr.w	r3, r3, #32
   8017a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Enable Channel Register
	ADC->ADC_WPMR &= ~(1);
   8017e:	4b0d      	ldr	r3, [pc, #52]	; (801b4 <adc_init+0x54>)
   80180:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80184:	f022 0201 	bic.w	r2, r2, #1
   80188:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ADC->ADC_CHER |= (ADC_CHDR_CH10);
   8018c:	691a      	ldr	r2, [r3, #16]
   8018e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80192:	611a      	str	r2, [r3, #16]
	
	// Single-Ended, Freerun Mode
	ADC->ADC_MR |= (1 << 7);
   80194:	685a      	ldr	r2, [r3, #4]
   80196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8019a:	605a      	str	r2, [r3, #4]
	ADC->ADC_COR &= ~(1 << 26);
   8019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8019e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   801a2:	64da      	str	r2, [r3, #76]	; 0x4c
	
	// Begin Analog-to-Digital Conversion
	ADC->ADC_CR |= 1 << 1;
   801a4:	681a      	ldr	r2, [r3, #0]
   801a6:	f042 0202 	orr.w	r2, r2, #2
   801aa:	601a      	str	r2, [r3, #0]
   801ac:	4770      	bx	lr
   801ae:	bf00      	nop
   801b0:	400e0600 	.word	0x400e0600
   801b4:	400c0000 	.word	0x400c0000

000801b8 <adc_receive>:
	
}

int adc_receive(){
	//printf("%d \n", ADC->ADC_CDR[10]);
	return ADC->ADC_CDR[10];
   801b8:	4b01      	ldr	r3, [pc, #4]	; (801c0 <adc_receive+0x8>)
   801ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   801bc:	4770      	bx	lr
   801be:	bf00      	nop
   801c0:	400c0000 	.word	0x400c0000

000801c4 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801c4:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801c6:	1857      	adds	r7, r2, r1
   801c8:	2f08      	cmp	r7, #8
   801ca:	bfd4      	ite	le
   801cc:	2300      	movle	r3, #0
   801ce:	2301      	movgt	r3, #1
   801d0:	2908      	cmp	r1, #8
   801d2:	bf98      	it	ls
   801d4:	2a08      	cmpls	r2, #8
   801d6:	d85c      	bhi.n	80292 <can_init+0xce>
   801d8:	460d      	mov	r5, r1
   801da:	2b00      	cmp	r3, #0
   801dc:	d159      	bne.n	80292 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801de:	4a2e      	ldr	r2, [pc, #184]	; (80298 <can_init+0xd4>)
   801e0:	6813      	ldr	r3, [r2, #0]
   801e2:	f023 0301 	bic.w	r3, r3, #1
   801e6:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801e8:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801ea:	4b2c      	ldr	r3, [pc, #176]	; (8029c <can_init+0xd8>)
   801ec:	f44f 7440 	mov.w	r4, #768	; 0x300
   801f0:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801f2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801f4:	f024 0403 	bic.w	r4, r4, #3
   801f8:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801fa:	2403      	movs	r4, #3
   801fc:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801fe:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80200:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80204:	4c26      	ldr	r4, [pc, #152]	; (802a0 <can_init+0xdc>)
   80206:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8020a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   8020e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80212:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   80216:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   80218:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8021a:	e019      	b.n	80250 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   8021c:	481e      	ldr	r0, [pc, #120]	; (80298 <can_init+0xd4>)
   8021e:	f101 0310 	add.w	r3, r1, #16
   80222:	015b      	lsls	r3, r3, #5
   80224:	18c2      	adds	r2, r0, r3
   80226:	2600      	movs	r6, #0
   80228:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8022a:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   8022e:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80232:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80236:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8023a:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8023c:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80244:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80248:	2301      	movs	r3, #1
   8024a:	408b      	lsls	r3, r1
   8024c:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8024e:	3101      	adds	r1, #1
   80250:	42b9      	cmp	r1, r7
   80252:	dde3      	ble.n	8021c <can_init+0x58>
   80254:	2300      	movs	r3, #0
   80256:	e00d      	b.n	80274 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80258:	490f      	ldr	r1, [pc, #60]	; (80298 <can_init+0xd4>)
   8025a:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8025e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80262:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80266:	f103 0210 	add.w	r2, r3, #16
   8026a:	0152      	lsls	r2, r2, #5
   8026c:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80270:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80272:	3301      	adds	r3, #1
   80274:	42ab      	cmp	r3, r5
   80276:	dbef      	blt.n	80258 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80278:	4b07      	ldr	r3, [pc, #28]	; (80298 <can_init+0xd4>)
   8027a:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8027c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80280:	4a08      	ldr	r2, [pc, #32]	; (802a4 <can_init+0xe0>)
   80282:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80284:	681a      	ldr	r2, [r3, #0]
   80286:	f042 0201 	orr.w	r2, r2, #1
   8028a:	601a      	str	r2, [r3, #0]

	return 0;
   8028c:	2000      	movs	r0, #0
}
   8028e:	bcf0      	pop	{r4, r5, r6, r7}
   80290:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80292:	2001      	movs	r0, #1
   80294:	e7fb      	b.n	8028e <can_init+0xca>
   80296:	bf00      	nop
   80298:	400b4000 	.word	0x400b4000
   8029c:	400e0e00 	.word	0x400e0e00
   802a0:	1000102b 	.word	0x1000102b
   802a4:	e000e100 	.word	0xe000e100

000802a8 <can_init_def_tx_rx_mb>:
{
   802a8:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802aa:	2202      	movs	r2, #2
   802ac:	2101      	movs	r1, #1
   802ae:	4b01      	ldr	r3, [pc, #4]	; (802b4 <can_init_def_tx_rx_mb+0xc>)
   802b0:	4798      	blx	r3
}
   802b2:	bd08      	pop	{r3, pc}
   802b4:	000801c5 	.word	0x000801c5

000802b8 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802b8:	014b      	lsls	r3, r1, #5
   802ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802be:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802c6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ca:	d036      	beq.n	8033a <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   802cc:	8803      	ldrh	r3, [r0, #0]
   802ce:	4a1c      	ldr	r2, [pc, #112]	; (80340 <can_send+0x88>)
   802d0:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   802d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   802d8:	014b      	lsls	r3, r1, #5
   802da:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802de:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   802e6:	7883      	ldrb	r3, [r0, #2]
   802e8:	2b07      	cmp	r3, #7
   802ea:	d901      	bls.n	802f0 <can_send+0x38>
			can_msg->data_length = 7;
   802ec:	2307      	movs	r3, #7
   802ee:	7083      	strb	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   802f0:	7982      	ldrb	r2, [r0, #6]
   802f2:	7943      	ldrb	r3, [r0, #5]
   802f4:	041b      	lsls	r3, r3, #16
   802f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802fa:	7902      	ldrb	r2, [r0, #4]
   802fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80300:	78c2      	ldrb	r2, [r0, #3]
   80302:	4313      	orrs	r3, r2
   80304:	0149      	lsls	r1, r1, #5
   80306:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8030a:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   8030e:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   80312:	7a82      	ldrb	r2, [r0, #10]
   80314:	7a43      	ldrb	r3, [r0, #9]
   80316:	041b      	lsls	r3, r3, #16
   80318:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   8031c:	7a02      	ldrb	r2, [r0, #8]
   8031e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80322:	79c2      	ldrb	r2, [r0, #7]
   80324:	4313      	orrs	r3, r2
   80326:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   8032a:	7883      	ldrb	r3, [r0, #2]
   8032c:	041b      	lsls	r3, r3, #16
   8032e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80332:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80336:	2000      	movs	r0, #0
   80338:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   8033a:	2001      	movs	r0, #1
	}
	
}
   8033c:	4770      	bx	lr
   8033e:	bf00      	nop
   80340:	1ffc0000 	.word	0x1ffc0000

00080344 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80344:	014b      	lsls	r3, r1, #5
   80346:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8034a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8034e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80352:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80356:	d033      	beq.n	803c0 <can_receive+0x7c>
{
   80358:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8035a:	014b      	lsls	r3, r1, #5
   8035c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80360:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80364:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80368:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8036c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80370:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80374:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80376:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8037a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8037e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80380:	2300      	movs	r3, #0
   80382:	e003      	b.n	8038c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80384:	18c6      	adds	r6, r0, r3
   80386:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80388:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8038a:	3301      	adds	r3, #1
   8038c:	42ab      	cmp	r3, r5
   8038e:	da05      	bge.n	8039c <can_receive+0x58>
			if(i < 4)
   80390:	2b03      	cmp	r3, #3
   80392:	dcf7      	bgt.n	80384 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   80394:	18c6      	adds	r6, r0, r3
   80396:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   80398:	0a24      	lsrs	r4, r4, #8
   8039a:	e7f6      	b.n	8038a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   8039c:	4b09      	ldr	r3, [pc, #36]	; (803c4 <can_receive+0x80>)
   8039e:	f101 0210 	add.w	r2, r1, #16
   803a2:	0152      	lsls	r2, r2, #5
   803a4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803a8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   803aa:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   803ae:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   803b6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   803ba:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   803bc:	bc70      	pop	{r4, r5, r6}
   803be:	4770      	bx	lr
		return 1;
   803c0:	2001      	movs	r0, #1
   803c2:	4770      	bx	lr
   803c4:	400b4000 	.word	0x400b4000

000803c8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   803c8:	b530      	push	{r4, r5, lr}
   803ca:	b085      	sub	sp, #20
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   803cc:	4b23      	ldr	r3, [pc, #140]	; (8045c <CAN0_Handler+0x94>)
   803ce:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   803d0:	f014 0f06 	tst.w	r4, #6
   803d4:	d035      	beq.n	80442 <CAN0_Handler+0x7a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   803d6:	f014 0f02 	tst.w	r4, #2
   803da:	d11e      	bne.n	8041a <CAN0_Handler+0x52>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   803dc:	f014 0f04 	tst.w	r4, #4
   803e0:	d020      	beq.n	80424 <CAN0_Handler+0x5c>
		
		{
			can_receive(&message, 2);
   803e2:	2102      	movs	r1, #2
   803e4:	a801      	add	r0, sp, #4
   803e6:	4b1e      	ldr	r3, [pc, #120]	; (80460 <CAN0_Handler+0x98>)
   803e8:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		int current_menu = message.data[3];
   803ea:	f89d 500a 	ldrb.w	r5, [sp, #10]
		if(current_menu == 0)
   803ee:	b1ed      	cbz	r5, 8042c <CAN0_Handler+0x64>
		disable_motor();
		if(current_menu == 1)
   803f0:	2d01      	cmp	r5, #1
   803f2:	d01e      	beq.n	80432 <CAN0_Handler+0x6a>
		enable_motor();
		
		joystick_x = message.data[1];
   803f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   803f8:	4b1a      	ldr	r3, [pc, #104]	; (80464 <CAN0_Handler+0x9c>)
   803fa:	701a      	strb	r2, [r3, #0]
		joystick_y = message.data[0];
   803fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   80400:	4b19      	ldr	r3, [pc, #100]	; (80468 <CAN0_Handler+0xa0>)
   80402:	701a      	strb	r2, [r3, #0]
		int button = message.data[2];
   80404:	f89d 2009 	ldrb.w	r2, [sp, #9]
		motor_write_speed = 1;
   80408:	2101      	movs	r1, #1
   8040a:	4b18      	ldr	r3, [pc, #96]	; (8046c <CAN0_Handler+0xa4>)
   8040c:	6019      	str	r1, [r3, #0]
		should_shoot = button;
   8040e:	4b18      	ldr	r3, [pc, #96]	; (80470 <CAN0_Handler+0xa8>)
   80410:	601a      	str	r2, [r3, #0]
		set_servo_duty();
   80412:	4b18      	ldr	r3, [pc, #96]	; (80474 <CAN0_Handler+0xac>)
   80414:	4798      	blx	r3
		//dac_write_speed();
		
		
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80416:	2300      	movs	r3, #0
   80418:	e00f      	b.n	8043a <CAN0_Handler+0x72>
			can_receive(&message, 1);
   8041a:	2101      	movs	r1, #1
   8041c:	a801      	add	r0, sp, #4
   8041e:	4b10      	ldr	r3, [pc, #64]	; (80460 <CAN0_Handler+0x98>)
   80420:	4798      	blx	r3
   80422:	e7e2      	b.n	803ea <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80424:	4814      	ldr	r0, [pc, #80]	; (80478 <CAN0_Handler+0xb0>)
   80426:	4b15      	ldr	r3, [pc, #84]	; (8047c <CAN0_Handler+0xb4>)
   80428:	4798      	blx	r3
   8042a:	e7de      	b.n	803ea <CAN0_Handler+0x22>
		disable_motor();
   8042c:	4b14      	ldr	r3, [pc, #80]	; (80480 <CAN0_Handler+0xb8>)
   8042e:	4798      	blx	r3
   80430:	e7de      	b.n	803f0 <CAN0_Handler+0x28>
		enable_motor();
   80432:	4b14      	ldr	r3, [pc, #80]	; (80484 <CAN0_Handler+0xbc>)
   80434:	4798      	blx	r3
   80436:	e7dd      	b.n	803f4 <CAN0_Handler+0x2c>
		for (int i = 0; i < message.data_length; i++)
   80438:	3301      	adds	r3, #1
   8043a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8043e:	4293      	cmp	r3, r2
   80440:	dbfa      	blt.n	80438 <CAN0_Handler+0x70>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80442:	f014 0f01 	tst.w	r4, #1
   80446:	d002      	beq.n	8044e <CAN0_Handler+0x86>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80448:	2201      	movs	r2, #1
   8044a:	4b04      	ldr	r3, [pc, #16]	; (8045c <CAN0_Handler+0x94>)
   8044c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8044e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80452:	4b0d      	ldr	r3, [pc, #52]	; (80488 <CAN0_Handler+0xc0>)
   80454:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80458:	b005      	add	sp, #20
   8045a:	bd30      	pop	{r4, r5, pc}
   8045c:	400b4000 	.word	0x400b4000
   80460:	00080345 	.word	0x00080345
   80464:	20000468 	.word	0x20000468
   80468:	20000460 	.word	0x20000460
   8046c:	20000464 	.word	0x20000464
   80470:	2000045c 	.word	0x2000045c
   80474:	00080d39 	.word	0x00080d39
   80478:	00081f0c 	.word	0x00081f0c
   8047c:	00080cb9 	.word	0x00080cb9
   80480:	000809f1 	.word	0x000809f1
   80484:	000809dd 	.word	0x000809dd
   80488:	e000e100 	.word	0xe000e100

0008048c <dac_write_uint_voltage>:
	dac_write_uint_voltage(0);
}

void dac_write_uint_voltage(uint16_t signal)
{
	DACC->DACC_CDR = signal;
   8048c:	4b01      	ldr	r3, [pc, #4]	; (80494 <dac_write_uint_voltage+0x8>)
   8048e:	6218      	str	r0, [r3, #32]
   80490:	4770      	bx	lr
   80492:	bf00      	nop
   80494:	400c8000 	.word	0x400c8000

00080498 <dac_init>:
{
   80498:	b510      	push	{r4, lr}
	PMC->PMC_PCR |= (ID_DACC << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   8049a:	4a0d      	ldr	r2, [pc, #52]	; (804d0 <dac_init+0x38>)
   8049c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   804a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   804a4:	f043 0326 	orr.w	r3, r3, #38	; 0x26
   804a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_DACC-32));
   804ac:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   804b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   804b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	DACC->DACC_MR = DACC_MR_USER_SEL_CHANNEL1 | DACC_MR_WORD_HALF | DACC_MR_STARTUP_8;
   804b8:	4b06      	ldr	r3, [pc, #24]	; (804d4 <dac_init+0x3c>)
   804ba:	4a07      	ldr	r2, [pc, #28]	; (804d8 <dac_init+0x40>)
   804bc:	605a      	str	r2, [r3, #4]
	DACC->DACC_CHER = DACC_CHER_CH1;
   804be:	2202      	movs	r2, #2
   804c0:	611a      	str	r2, [r3, #16]
	dac_write_uint_voltage(0xFFFF);
   804c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   804c6:	4c05      	ldr	r4, [pc, #20]	; (804dc <dac_init+0x44>)
   804c8:	47a0      	blx	r4
	dac_write_uint_voltage(0);
   804ca:	2000      	movs	r0, #0
   804cc:	47a0      	blx	r4
   804ce:	bd10      	pop	{r4, pc}
   804d0:	400e0600 	.word	0x400e0600
   804d4:	400c8000 	.word	0x400c8000
   804d8:	01010000 	.word	0x01010000
   804dc:	0008048d 	.word	0x0008048d

000804e0 <delay_ms>:
#include <stdio.h>
#include <inttypes.h>

// Max ca. 200ms!!
void delay_ms(uint32_t ms){
	uint32_t ticks = (F_CPU / 1000) * ms;
   804e0:	4b0b      	ldr	r3, [pc, #44]	; (80510 <delay_ms+0x30>)
   804e2:	fb03 f000 	mul.w	r0, r3, r0
	if(ticks > 0xFFFFFF)
   804e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   804ea:	d301      	bcc.n	804f0 <delay_ms+0x10>
	ticks = 0xFFFFFF;
   804ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	SysTick->LOAD = ticks - 1;
   804f0:	3801      	subs	r0, #1
   804f2:	4b08      	ldr	r3, [pc, #32]	; (80514 <delay_ms+0x34>)
   804f4:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   804f6:	2200      	movs	r2, #0
   804f8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   804fa:	2205      	movs	r2, #5
   804fc:	601a      	str	r2, [r3, #0]
	
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   804fe:	4b05      	ldr	r3, [pc, #20]	; (80514 <delay_ms+0x34>)
   80500:	681b      	ldr	r3, [r3, #0]
   80502:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80506:	d0fa      	beq.n	804fe <delay_ms+0x1e>
		// Wait for the SysTick timer to count down
	}
	
	SysTick->CTRL = 0; // Disable the SysTick timer
   80508:	2200      	movs	r2, #0
   8050a:	4b02      	ldr	r3, [pc, #8]	; (80514 <delay_ms+0x34>)
   8050c:	601a      	str	r2, [r3, #0]
   8050e:	4770      	bx	lr
   80510:	00014820 	.word	0x00014820
   80514:	e000e010 	.word	0xe000e010

00080518 <delay_us>:
}


// Max ca. 200 000us!!
void delay_us(uint32_t us){
	uint32_t ticks = (F_CPU / 1000000) * us;
   80518:	2354      	movs	r3, #84	; 0x54
   8051a:	fb03 f000 	mul.w	r0, r3, r0
	if(ticks > 0xFFFFFF)
   8051e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80522:	d301      	bcc.n	80528 <delay_us+0x10>
		ticks = 0xFFFFFF;
   80524:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	SysTick->LOAD = ticks - 1;
   80528:	3801      	subs	r0, #1
   8052a:	4b07      	ldr	r3, [pc, #28]	; (80548 <delay_us+0x30>)
   8052c:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   8052e:	2200      	movs	r2, #0
   80530:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   80532:	2205      	movs	r2, #5
   80534:	601a      	str	r2, [r3, #0]
	
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   80536:	4b04      	ldr	r3, [pc, #16]	; (80548 <delay_us+0x30>)
   80538:	681b      	ldr	r3, [r3, #0]
   8053a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8053e:	d0fa      	beq.n	80536 <delay_us+0x1e>
		// Wait for the SysTick timer to count down
	}
	
	SysTick->CTRL = 0; // Disable the SysTick timer
   80540:	2200      	movs	r2, #0
   80542:	4b01      	ldr	r3, [pc, #4]	; (80548 <delay_us+0x30>)
   80544:	601a      	str	r2, [r3, #0]
   80546:	4770      	bx	lr
   80548:	e000e010 	.word	0xe000e010

0008054c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8054c:	e7fe      	b.n	8054c <Dummy_Handler>
	...

00080550 <Reset_Handler>:
{
   80550:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80552:	4b11      	ldr	r3, [pc, #68]	; (80598 <Reset_Handler+0x48>)
   80554:	4a11      	ldr	r2, [pc, #68]	; (8059c <Reset_Handler+0x4c>)
   80556:	429a      	cmp	r2, r3
   80558:	d009      	beq.n	8056e <Reset_Handler+0x1e>
   8055a:	4b0f      	ldr	r3, [pc, #60]	; (80598 <Reset_Handler+0x48>)
   8055c:	4a0f      	ldr	r2, [pc, #60]	; (8059c <Reset_Handler+0x4c>)
   8055e:	e003      	b.n	80568 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80560:	6811      	ldr	r1, [r2, #0]
   80562:	6019      	str	r1, [r3, #0]
   80564:	3304      	adds	r3, #4
   80566:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80568:	490d      	ldr	r1, [pc, #52]	; (805a0 <Reset_Handler+0x50>)
   8056a:	428b      	cmp	r3, r1
   8056c:	d3f8      	bcc.n	80560 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8056e:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <Reset_Handler+0x54>)
   80570:	e002      	b.n	80578 <Reset_Handler+0x28>
                *pDest++ = 0;
   80572:	2200      	movs	r2, #0
   80574:	601a      	str	r2, [r3, #0]
   80576:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80578:	4a0b      	ldr	r2, [pc, #44]	; (805a8 <Reset_Handler+0x58>)
   8057a:	4293      	cmp	r3, r2
   8057c:	d3f9      	bcc.n	80572 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8057e:	4b0b      	ldr	r3, [pc, #44]	; (805ac <Reset_Handler+0x5c>)
   80580:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80584:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80588:	4a09      	ldr	r2, [pc, #36]	; (805b0 <Reset_Handler+0x60>)
   8058a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   8058c:	4b09      	ldr	r3, [pc, #36]	; (805b4 <Reset_Handler+0x64>)
   8058e:	4798      	blx	r3
        main();
   80590:	4b09      	ldr	r3, [pc, #36]	; (805b8 <Reset_Handler+0x68>)
   80592:	4798      	blx	r3
   80594:	e7fe      	b.n	80594 <Reset_Handler+0x44>
   80596:	bf00      	nop
   80598:	20000000 	.word	0x20000000
   8059c:	00081fdc 	.word	0x00081fdc
   805a0:	2000043c 	.word	0x2000043c
   805a4:	2000043c 	.word	0x2000043c
   805a8:	200004dc 	.word	0x200004dc
   805ac:	00080000 	.word	0x00080000
   805b0:	e000ed00 	.word	0xe000ed00
   805b4:	00081d9d 	.word	0x00081d9d
   805b8:	00080661 	.word	0x00080661

000805bc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   805bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   805c0:	4a20      	ldr	r2, [pc, #128]	; (80644 <SystemInit+0x88>)
   805c2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   805c4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   805c8:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   805ca:	4b1f      	ldr	r3, [pc, #124]	; (80648 <SystemInit+0x8c>)
   805cc:	6a1b      	ldr	r3, [r3, #32]
   805ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   805d2:	d107      	bne.n	805e4 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   805d4:	4a1d      	ldr	r2, [pc, #116]	; (8064c <SystemInit+0x90>)
   805d6:	4b1c      	ldr	r3, [pc, #112]	; (80648 <SystemInit+0x8c>)
   805d8:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   805da:	4b1b      	ldr	r3, [pc, #108]	; (80648 <SystemInit+0x8c>)
   805dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805de:	f013 0f01 	tst.w	r3, #1
   805e2:	d0fa      	beq.n	805da <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   805e4:	4a1a      	ldr	r2, [pc, #104]	; (80650 <SystemInit+0x94>)
   805e6:	4b18      	ldr	r3, [pc, #96]	; (80648 <SystemInit+0x8c>)
   805e8:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   805ea:	4b17      	ldr	r3, [pc, #92]	; (80648 <SystemInit+0x8c>)
   805ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   805f2:	d0fa      	beq.n	805ea <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   805f4:	4a14      	ldr	r2, [pc, #80]	; (80648 <SystemInit+0x8c>)
   805f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805f8:	f023 0303 	bic.w	r3, r3, #3
   805fc:	f043 0301 	orr.w	r3, r3, #1
   80600:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80602:	4b11      	ldr	r3, [pc, #68]	; (80648 <SystemInit+0x8c>)
   80604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80606:	f013 0f08 	tst.w	r3, #8
   8060a:	d0fa      	beq.n	80602 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8060c:	4a11      	ldr	r2, [pc, #68]	; (80654 <SystemInit+0x98>)
   8060e:	4b0e      	ldr	r3, [pc, #56]	; (80648 <SystemInit+0x8c>)
   80610:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80612:	4b0d      	ldr	r3, [pc, #52]	; (80648 <SystemInit+0x8c>)
   80614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80616:	f013 0f02 	tst.w	r3, #2
   8061a:	d0fa      	beq.n	80612 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8061c:	2211      	movs	r2, #17
   8061e:	4b0a      	ldr	r3, [pc, #40]	; (80648 <SystemInit+0x8c>)
   80620:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80622:	4b09      	ldr	r3, [pc, #36]	; (80648 <SystemInit+0x8c>)
   80624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80626:	f013 0f08 	tst.w	r3, #8
   8062a:	d0fa      	beq.n	80622 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8062c:	2212      	movs	r2, #18
   8062e:	4b06      	ldr	r3, [pc, #24]	; (80648 <SystemInit+0x8c>)
   80630:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80632:	4b05      	ldr	r3, [pc, #20]	; (80648 <SystemInit+0x8c>)
   80634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80636:	f013 0f08 	tst.w	r3, #8
   8063a:	d0fa      	beq.n	80632 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8063c:	4a06      	ldr	r2, [pc, #24]	; (80658 <SystemInit+0x9c>)
   8063e:	4b07      	ldr	r3, [pc, #28]	; (8065c <SystemInit+0xa0>)
   80640:	601a      	str	r2, [r3, #0]
   80642:	4770      	bx	lr
   80644:	400e0a00 	.word	0x400e0a00
   80648:	400e0600 	.word	0x400e0600
   8064c:	00370809 	.word	0x00370809
   80650:	01370809 	.word	0x01370809
   80654:	200d3f01 	.word	0x200d3f01
   80658:	0501bd00 	.word	0x0501bd00
   8065c:	20000000 	.word	0x20000000

00080660 <main>:
#include "adc.h"
#include "motor.h"
#include "dac.h"

int main(void)
{
   80660:	b530      	push	{r4, r5, lr}
   80662:	b085      	sub	sp, #20
    /* Initialize the SAM system */
    SystemInit();
   80664:	4b2d      	ldr	r3, [pc, #180]	; (8071c <main+0xbc>)
   80666:	4798      	blx	r3
	
	can_init_def_tx_rx_mb(0x00290165);
   80668:	482d      	ldr	r0, [pc, #180]	; (80720 <main+0xc0>)
   8066a:	4b2e      	ldr	r3, [pc, #184]	; (80724 <main+0xc4>)
   8066c:	4798      	blx	r3
	configure_uart();
   8066e:	4b2e      	ldr	r3, [pc, #184]	; (80728 <main+0xc8>)
   80670:	4798      	blx	r3
	pwm_init();
   80672:	4b2e      	ldr	r3, [pc, #184]	; (8072c <main+0xcc>)
   80674:	4798      	blx	r3
	adc_init();
   80676:	4b2e      	ldr	r3, [pc, #184]	; (80730 <main+0xd0>)
   80678:	4798      	blx	r3
	motor_init();
   8067a:	4b2e      	ldr	r3, [pc, #184]	; (80734 <main+0xd4>)
   8067c:	4798      	blx	r3
	dac_init();
   8067e:	4b2e      	ldr	r3, [pc, #184]	; (80738 <main+0xd8>)
   80680:	4798      	blx	r3
	
	disable_motor();
   80682:	4b2e      	ldr	r3, [pc, #184]	; (8073c <main+0xdc>)
   80684:	4798      	blx	r3
	
	//Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCER0 |= (1 << ID_PIOA);
   80686:	4a2e      	ldr	r2, [pc, #184]	; (80740 <main+0xe0>)
   80688:	6913      	ldr	r3, [r2, #16]
   8068a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8068e:	6113      	str	r3, [r2, #16]
	
	
	PIOA->PIO_PER |= PIO_PA20; // Enable PIO control
   80690:	4b2c      	ldr	r3, [pc, #176]	; (80744 <main+0xe4>)
   80692:	681a      	ldr	r2, [r3, #0]
   80694:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80698:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_PA20; // Set pin as output
   8069a:	691a      	ldr	r2, [r3, #16]
   8069c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   806a0:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR |= PIO_PA20; // Set output high
   806a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   806a8:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_CODR |= PIO_PA20;
   806aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   806ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   806b0:	635a      	str	r2, [r3, #52]	; 0x34
	
	printf("Hello world");
   806b2:	4825      	ldr	r0, [pc, #148]	; (80748 <main+0xe8>)
   806b4:	4b25      	ldr	r3, [pc, #148]	; (8074c <main+0xec>)
   806b6:	4798      	blx	r3
	
	
	CAN_MESSAGE msg;
	msg.data[0] = 1;
   806b8:	2301      	movs	r3, #1
   806ba:	f88d 3007 	strb.w	r3, [sp, #7]
	msg.id=0;
   806be:	2500      	movs	r5, #0
   806c0:	f8ad 5004 	strh.w	r5, [sp, #4]
	msg.data_length = 1;
   806c4:	f88d 3006 	strb.w	r3, [sp, #6]
	
	
	int counter = 0;
	int goal_count = 0;
	WDT->WDT_MR = WDT_MR_WDDIS;
   806c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806cc:	4b20      	ldr	r3, [pc, #128]	; (80750 <main+0xf0>)
   806ce:	605a      	str	r2, [r3, #4]
   806d0:	e005      	b.n	806de <main+0x7e>
		
		
		counter++;
		int adc_data = adc_receive();
		if(motor_write_speed)
			dac_write_speed();
   806d2:	4b20      	ldr	r3, [pc, #128]	; (80754 <main+0xf4>)
   806d4:	4798      	blx	r3
   806d6:	e009      	b.n	806ec <main+0x8c>
			shoot();
			should_shoot = 0;
		}
		
		//printf("%d ", counter);
		if(adc_data < 1000)
   806d8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   806dc:	db10      	blt.n	80700 <main+0xa0>
		int adc_data = adc_receive();
   806de:	4b1e      	ldr	r3, [pc, #120]	; (80758 <main+0xf8>)
   806e0:	4798      	blx	r3
   806e2:	4604      	mov	r4, r0
		if(motor_write_speed)
   806e4:	4b1d      	ldr	r3, [pc, #116]	; (8075c <main+0xfc>)
   806e6:	681b      	ldr	r3, [r3, #0]
   806e8:	2b00      	cmp	r3, #0
   806ea:	d1f2      	bne.n	806d2 <main+0x72>
		if(should_shoot)
   806ec:	4b1c      	ldr	r3, [pc, #112]	; (80760 <main+0x100>)
   806ee:	681b      	ldr	r3, [r3, #0]
   806f0:	2b00      	cmp	r3, #0
   806f2:	d0f1      	beq.n	806d8 <main+0x78>
			shoot();
   806f4:	4b1b      	ldr	r3, [pc, #108]	; (80764 <main+0x104>)
   806f6:	4798      	blx	r3
			should_shoot = 0;
   806f8:	2200      	movs	r2, #0
   806fa:	4b19      	ldr	r3, [pc, #100]	; (80760 <main+0x100>)
   806fc:	601a      	str	r2, [r3, #0]
   806fe:	e7eb      	b.n	806d8 <main+0x78>
		{
			goal_count++;
   80700:	3501      	adds	r5, #1
			counter = 0;
			printf("GOL");
   80702:	4819      	ldr	r0, [pc, #100]	; (80768 <main+0x108>)
   80704:	4c11      	ldr	r4, [pc, #68]	; (8074c <main+0xec>)
   80706:	47a0      	blx	r4
			printf("%d", goal_count);
   80708:	4629      	mov	r1, r5
   8070a:	4818      	ldr	r0, [pc, #96]	; (8076c <main+0x10c>)
   8070c:	47a0      	blx	r4
			
			can_send(&msg, 0);
   8070e:	2100      	movs	r1, #0
   80710:	a801      	add	r0, sp, #4
   80712:	4b17      	ldr	r3, [pc, #92]	; (80770 <main+0x110>)
   80714:	4798      	blx	r3
			printf("sent message");
   80716:	4817      	ldr	r0, [pc, #92]	; (80774 <main+0x114>)
   80718:	47a0      	blx	r4
   8071a:	e7e0      	b.n	806de <main+0x7e>
   8071c:	000805bd 	.word	0x000805bd
   80720:	00290165 	.word	0x00290165
   80724:	000802a9 	.word	0x000802a9
   80728:	00080e41 	.word	0x00080e41
   8072c:	00080d91 	.word	0x00080d91
   80730:	00080161 	.word	0x00080161
   80734:	00080779 	.word	0x00080779
   80738:	00080499 	.word	0x00080499
   8073c:	000809f1 	.word	0x000809f1
   80740:	400e0600 	.word	0x400e0600
   80744:	400e0e00 	.word	0x400e0e00
   80748:	00081f38 	.word	0x00081f38
   8074c:	00080cb9 	.word	0x00080cb9
   80750:	400e1a50 	.word	0x400e1a50
   80754:	00080851 	.word	0x00080851
   80758:	000801b9 	.word	0x000801b9
   8075c:	20000464 	.word	0x20000464
   80760:	2000045c 	.word	0x2000045c
   80764:	00080a05 	.word	0x00080a05
   80768:	00081f44 	.word	0x00081f44
   8076c:	00081f48 	.word	0x00081f48
   80770:	000802b9 	.word	0x000802b9
   80774:	00081f4c 	.word	0x00081f4c

00080778 <motor_init>:
#include "motor.h"


void motor_init()
{
   80778:	b410      	push	{r4}
	// Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   8077a:	4b18      	ldr	r3, [pc, #96]	; (807dc <motor_init+0x64>)
   8077c:	4a18      	ldr	r2, [pc, #96]	; (807e0 <motor_init+0x68>)
   8077e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   80782:	691a      	ldr	r2, [r3, #16]
   80784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80788:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   8078a:	691a      	ldr	r2, [r3, #16]
   8078c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80790:	611a      	str	r2, [r3, #16]
	
	// Set pins C1-C9 as input only
	// Should maybe set to be IO driven, not peripheral driven (page 623)
	PIOC->PIO_PER |= PIO_PC8 | PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7;
   80792:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   80796:	681a      	ldr	r2, [r3, #0]
   80798:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   8079c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= PIO_PC8 | PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7;
   8079e:	695a      	ldr	r2, [r3, #20]
   807a0:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   807a4:	615a      	str	r2, [r3, #20]
	PIOD->PIO_PER |= PIO_PD10 | PIO_PD2 | PIO_PD1 | PIO_PD0 | PIO_PD9;
   807a6:	4a0f      	ldr	r2, [pc, #60]	; (807e4 <motor_init+0x6c>)
   807a8:	6810      	ldr	r0, [r2, #0]
   807aa:	f240 6407 	movw	r4, #1543	; 0x607
   807ae:	4320      	orrs	r0, r4
   807b0:	6010      	str	r0, [r2, #0]
	PIOD->PIO_OER |= PIO_PD10 | PIO_PD2 | PIO_PD1 | PIO_PD0 | PIO_PD9;
   807b2:	6911      	ldr	r1, [r2, #16]
   807b4:	4321      	orrs	r1, r4
   807b6:	6111      	str	r1, [r2, #16]
	
	// Enable motor
	PIOD->PIO_SODR = PIO_PD9;
   807b8:	f44f 7100 	mov.w	r1, #512	; 0x200
   807bc:	6311      	str	r1, [r2, #48]	; 0x30
	PIOC->PIO_CODR = PIO_PC6;*/
	
	// Speed is set using DAC1 pin on shield.
	
	//INIT solenoid
	PIOC->PIO_PER |= PIO_PC13;
   807be:	681a      	ldr	r2, [r3, #0]
   807c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807c4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC13;
   807c6:	691a      	ldr	r2, [r3, #16]
   807c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807cc:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_PC13;
   807ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   807d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807d4:	631a      	str	r2, [r3, #48]	; 0x30
	 
}
   807d6:	bc10      	pop	{r4}
   807d8:	4770      	bx	lr
   807da:	bf00      	nop
   807dc:	400e0600 	.word	0x400e0600
   807e0:	1000000d 	.word	0x1000000d
   807e4:	400e1400 	.word	0x400e1400

000807e8 <read_encoder>:

int read_encoder()
{
   807e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Set !OE low
	PIOD->PIO_CODR |= PIO_PD0;
   807ea:	4c16      	ldr	r4, [pc, #88]	; (80844 <read_encoder+0x5c>)
   807ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   807ee:	f043 0301 	orr.w	r3, r3, #1
   807f2:	6363      	str	r3, [r4, #52]	; 0x34
	// Set SEL low
	PIOD->PIO_CODR |= PIO_PD2;
   807f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   807f6:	f043 0304 	orr.w	r3, r3, #4
   807fa:	6363      	str	r3, [r4, #52]	; 0x34
	// Wait 20us
	delay_us(20);
   807fc:	2014      	movs	r0, #20
   807fe:	4f12      	ldr	r7, [pc, #72]	; (80848 <read_encoder+0x60>)
   80800:	47b8      	blx	r7
	// Read MJ2 (high byte)
	int mj2_high = (PIOC->PIO_PDSR) & 0x1FE;
   80802:	4e12      	ldr	r6, [pc, #72]	; (8084c <read_encoder+0x64>)
   80804:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
	// Set SEL high
	PIOD->PIO_SODR |= PIO_PD2;
   80806:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80808:	f043 0304 	orr.w	r3, r3, #4
   8080c:	6323      	str	r3, [r4, #48]	; 0x30
	// Wait 20us
	delay_us(20);
   8080e:	2014      	movs	r0, #20
   80810:	47b8      	blx	r7
	// Read MJ2 (low byte)
	int mj2_low = (PIOC->PIO_PDSR) & 0x1FE;
   80812:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   80814:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
	//Reset encoder
	PIOD->PIO_CODR |= PIO_PD1;
   80818:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8081a:	f043 0302 	orr.w	r3, r3, #2
   8081e:	6363      	str	r3, [r4, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_PD1;
   80820:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80822:	f043 0302 	orr.w	r3, r3, #2
   80826:	6323      	str	r3, [r4, #48]	; 0x30
	// Set !OE high
	PIOD->PIO_SODR |= PIO_PD0;
   80828:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8082a:	f043 0301 	orr.w	r3, r3, #1
   8082e:	6323      	str	r3, [r4, #48]	; 0x30
	
	//int pos = ((mj2_low | (mj2_high << 8)) + 131070) % 130616;
	int pos = (mj2_low | (mj2_high << 8));
   80830:	022d      	lsls	r5, r5, #8
   80832:	f405 35ff 	and.w	r5, r5, #130560	; 0x1fe00
   80836:	4328      	orrs	r0, r5
    // printf("%-10d", pos);
	if(pos > 6000)
   80838:	f241 7370 	movw	r3, #6000	; 0x1770
   8083c:	4298      	cmp	r0, r3
   8083e:	dd00      	ble.n	80842 <read_encoder+0x5a>
	{
		pos = 0;
   80840:	2000      	movs	r0, #0
	}
	return pos;
	
}
   80842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80844:	400e1400 	.word	0x400e1400
   80848:	00080519 	.word	0x00080519
   8084c:	400e1200 	.word	0x400e1200

00080850 <dac_write_speed>:
float integral = 0;
float Kp = 0.06;
float Ki = 0.000001;

void dac_write_speed()
{
   80850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80854:	b082      	sub	sp, #8
	if(!motor_enabled)
   80856:	4b45      	ldr	r3, [pc, #276]	; (8096c <dac_write_speed+0x11c>)
   80858:	681b      	ldr	r3, [r3, #0]
   8085a:	2b00      	cmp	r3, #0
   8085c:	d071      	beq.n	80942 <dac_write_speed+0xf2>
	// printf("%d ", joystick_y );
		
	
	//Normalized reference is between -1 and 1, it is the reference value for the PI controller.
	//printf("%d ", joystick_y);
	float normalized_reference = (float)(joystick_y) / 128.0 - 1.0;
   8085e:	4b44      	ldr	r3, [pc, #272]	; (80970 <dac_write_speed+0x120>)
   80860:	7818      	ldrb	r0, [r3, #0]
   80862:	4b44      	ldr	r3, [pc, #272]	; (80974 <dac_write_speed+0x124>)
   80864:	4798      	blx	r3
   80866:	4b44      	ldr	r3, [pc, #272]	; (80978 <dac_write_speed+0x128>)
   80868:	4798      	blx	r3
   8086a:	2200      	movs	r2, #0
   8086c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   80870:	4c42      	ldr	r4, [pc, #264]	; (8097c <dac_write_speed+0x12c>)
   80872:	47a0      	blx	r4
   80874:	2200      	movs	r2, #0
   80876:	4b42      	ldr	r3, [pc, #264]	; (80980 <dac_write_speed+0x130>)
   80878:	4c42      	ldr	r4, [pc, #264]	; (80984 <dac_write_speed+0x134>)
   8087a:	47a0      	blx	r4
   8087c:	4b42      	ldr	r3, [pc, #264]	; (80988 <dac_write_speed+0x138>)
   8087e:	4798      	blx	r3
   80880:	4607      	mov	r7, r0
	
	//printf("joystick_y: %-10d   normalized_reference: %-10d   ", joystick_y, (int)(1000 * normalized_reference));
	

	int encoder_raw = read_encoder();
   80882:	4b42      	ldr	r3, [pc, #264]	; (8098c <dac_write_speed+0x13c>)
   80884:	4798      	blx	r3
   80886:	4680      	mov	r8, r0
	// Normalized y is between -1 and 1, it is the reference value for the PI controller.
	float y_normalized = (2014 - (float)encoder_raw) / 2014 * 2 - 1;
   80888:	4b41      	ldr	r3, [pc, #260]	; (80990 <dac_write_speed+0x140>)
   8088a:	4798      	blx	r3
   8088c:	4c41      	ldr	r4, [pc, #260]	; (80994 <dac_write_speed+0x144>)
   8088e:	4601      	mov	r1, r0
   80890:	4841      	ldr	r0, [pc, #260]	; (80998 <dac_write_speed+0x148>)
   80892:	47a0      	blx	r4
   80894:	4940      	ldr	r1, [pc, #256]	; (80998 <dac_write_speed+0x148>)
   80896:	4b41      	ldr	r3, [pc, #260]	; (8099c <dac_write_speed+0x14c>)
   80898:	4798      	blx	r3
   8089a:	4601      	mov	r1, r0
   8089c:	4b40      	ldr	r3, [pc, #256]	; (809a0 <dac_write_speed+0x150>)
   8089e:	4798      	blx	r3
   808a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   808a4:	47a0      	blx	r4

	// PI controller
	float e = normalized_reference - y_normalized;
   808a6:	4601      	mov	r1, r0
   808a8:	4638      	mov	r0, r7
   808aa:	47a0      	blx	r4
   808ac:	4606      	mov	r6, r0
	float u = 0;
	
	u = Kp * e; //+ Ki * integral;
   808ae:	4b3d      	ldr	r3, [pc, #244]	; (809a4 <dac_write_speed+0x154>)
   808b0:	6819      	ldr	r1, [r3, #0]
   808b2:	4b3d      	ldr	r3, [pc, #244]	; (809a8 <dac_write_speed+0x158>)
   808b4:	4798      	blx	r3
   808b6:	4604      	mov	r4, r0
	//printf("e: %-10d",(int)(1000*e) );
	

	
	
	if (u < -1)
   808b8:	493c      	ldr	r1, [pc, #240]	; (809ac <dac_write_speed+0x15c>)
   808ba:	4b3d      	ldr	r3, [pc, #244]	; (809b0 <dac_write_speed+0x160>)
   808bc:	4798      	blx	r3
   808be:	2800      	cmp	r0, #0
   808c0:	d143      	bne.n	8094a <dac_write_speed+0xfa>
	u = -1;
	else if (u > 1)
   808c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   808c6:	4620      	mov	r0, r4
   808c8:	4b3a      	ldr	r3, [pc, #232]	; (809b4 <dac_write_speed+0x164>)
   808ca:	4798      	blx	r3
   808cc:	b108      	cbz	r0, 808d2 <dac_write_speed+0x82>
	u = 1;
   808ce:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	else;
	integral += e;
   808d2:	4d39      	ldr	r5, [pc, #228]	; (809b8 <dac_write_speed+0x168>)
   808d4:	4631      	mov	r1, r6
   808d6:	6828      	ldr	r0, [r5, #0]
   808d8:	4b31      	ldr	r3, [pc, #196]	; (809a0 <dac_write_speed+0x150>)
   808da:	4798      	blx	r3
   808dc:	6028      	str	r0, [r5, #0]
	/*float abs_value = u;
	if(abs_value < 0)
		abs_value = -u;
	float sign = (u > 0) * 2 - 1;
	float u_sqrt = sign * sqrt(abs_value);*/
	printf("r: %-10d   y: %-10d   e: %-10d   u: %-10d   ", (int)(1000 * normalized_reference), (int)(encoder_raw), (int)(1000 * e), (int)(1000 * u));
   808de:	4d32      	ldr	r5, [pc, #200]	; (809a8 <dac_write_speed+0x158>)
   808e0:	4936      	ldr	r1, [pc, #216]	; (809bc <dac_write_speed+0x16c>)
   808e2:	4638      	mov	r0, r7
   808e4:	47a8      	blx	r5
   808e6:	4682      	mov	sl, r0
   808e8:	4934      	ldr	r1, [pc, #208]	; (809bc <dac_write_speed+0x16c>)
   808ea:	4630      	mov	r0, r6
   808ec:	47a8      	blx	r5
   808ee:	4606      	mov	r6, r0
   808f0:	4932      	ldr	r1, [pc, #200]	; (809bc <dac_write_speed+0x16c>)
   808f2:	4620      	mov	r0, r4
   808f4:	47a8      	blx	r5
   808f6:	4681      	mov	r9, r0
   808f8:	4d31      	ldr	r5, [pc, #196]	; (809c0 <dac_write_speed+0x170>)
   808fa:	4630      	mov	r0, r6
   808fc:	47a8      	blx	r5
   808fe:	4607      	mov	r7, r0
   80900:	4650      	mov	r0, sl
   80902:	47a8      	blx	r5
   80904:	4606      	mov	r6, r0
   80906:	4648      	mov	r0, r9
   80908:	47a8      	blx	r5
   8090a:	9000      	str	r0, [sp, #0]
   8090c:	463b      	mov	r3, r7
   8090e:	4642      	mov	r2, r8
   80910:	4631      	mov	r1, r6
   80912:	482c      	ldr	r0, [pc, #176]	; (809c4 <dac_write_speed+0x174>)
   80914:	4d2c      	ldr	r5, [pc, #176]	; (809c8 <dac_write_speed+0x178>)
   80916:	47a8      	blx	r5
	/*printf("u: %-10d   sqrt: %-10d   ", (int)(1000 * u), (int)(1000 * abs_value));
	
	u = u_sqrt;*/
	
	if(u < 0)
   80918:	2100      	movs	r1, #0
   8091a:	4620      	mov	r0, r4
   8091c:	4b24      	ldr	r3, [pc, #144]	; (809b0 <dac_write_speed+0x160>)
   8091e:	4798      	blx	r3
   80920:	b9a8      	cbnz	r0, 8094e <dac_write_speed+0xfe>
		// Set motor direction left
		PIOD->PIO_CODR = PIO_PD10;
	}
	else
	{
		dac_write_uint_voltage((uint16_t)(u * 65535));
   80922:	492a      	ldr	r1, [pc, #168]	; (809cc <dac_write_speed+0x17c>)
   80924:	4620      	mov	r0, r4
   80926:	4b20      	ldr	r3, [pc, #128]	; (809a8 <dac_write_speed+0x158>)
   80928:	4798      	blx	r3
   8092a:	4b29      	ldr	r3, [pc, #164]	; (809d0 <dac_write_speed+0x180>)
   8092c:	4798      	blx	r3
   8092e:	b280      	uxth	r0, r0
   80930:	4b28      	ldr	r3, [pc, #160]	; (809d4 <dac_write_speed+0x184>)
   80932:	4798      	blx	r3
		// Set motor direction right
		PIOD->PIO_SODR = PIO_PD10;
   80934:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80938:	4b27      	ldr	r3, [pc, #156]	; (809d8 <dac_write_speed+0x188>)
   8093a:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   8093c:	b002      	add	sp, #8
   8093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dac_write_uint_voltage(0);
   80942:	2000      	movs	r0, #0
   80944:	4b23      	ldr	r3, [pc, #140]	; (809d4 <dac_write_speed+0x184>)
   80946:	4798      	blx	r3
		return;
   80948:	e7f8      	b.n	8093c <dac_write_speed+0xec>
	u = -1;
   8094a:	4c18      	ldr	r4, [pc, #96]	; (809ac <dac_write_speed+0x15c>)
   8094c:	e7c1      	b.n	808d2 <dac_write_speed+0x82>
		dac_write_uint_voltage((uint16_t)(-u * 65535));
   8094e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
   80952:	491e      	ldr	r1, [pc, #120]	; (809cc <dac_write_speed+0x17c>)
   80954:	4b14      	ldr	r3, [pc, #80]	; (809a8 <dac_write_speed+0x158>)
   80956:	4798      	blx	r3
   80958:	4b1d      	ldr	r3, [pc, #116]	; (809d0 <dac_write_speed+0x180>)
   8095a:	4798      	blx	r3
   8095c:	b280      	uxth	r0, r0
   8095e:	4b1d      	ldr	r3, [pc, #116]	; (809d4 <dac_write_speed+0x184>)
   80960:	4798      	blx	r3
		PIOD->PIO_CODR = PIO_PD10;
   80962:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80966:	4b1c      	ldr	r3, [pc, #112]	; (809d8 <dac_write_speed+0x188>)
   80968:	635a      	str	r2, [r3, #52]	; 0x34
   8096a:	e7e7      	b.n	8093c <dac_write_speed+0xec>
   8096c:	20000470 	.word	0x20000470
   80970:	20000460 	.word	0x20000460
   80974:	000818d5 	.word	0x000818d5
   80978:	000811fd 	.word	0x000811fd
   8097c:	000812a5 	.word	0x000812a5
   80980:	3ff00000 	.word	0x3ff00000
   80984:	00080f3d 	.word	0x00080f3d
   80988:	000816c9 	.word	0x000816c9
   8098c:	000807e9 	.word	0x000807e9
   80990:	000818dd 	.word	0x000818dd
   80994:	00081771 	.word	0x00081771
   80998:	44fbc000 	.word	0x44fbc000
   8099c:	00081aed 	.word	0x00081aed
   809a0:	00081775 	.word	0x00081775
   809a4:	20000004 	.word	0x20000004
   809a8:	00081985 	.word	0x00081985
   809ac:	bf800000 	.word	0xbf800000
   809b0:	00081cc1 	.word	0x00081cc1
   809b4:	00081cfd 	.word	0x00081cfd
   809b8:	20000458 	.word	0x20000458
   809bc:	447a0000 	.word	0x447a0000
   809c0:	00081d11 	.word	0x00081d11
   809c4:	00081f5c 	.word	0x00081f5c
   809c8:	00080cb9 	.word	0x00080cb9
   809cc:	477fff00 	.word	0x477fff00
   809d0:	00081d5d 	.word	0x00081d5d
   809d4:	0008048d 	.word	0x0008048d
   809d8:	400e1400 	.word	0x400e1400

000809dc <enable_motor>:

void enable_motor()
{
	if(motor_enabled)
   809dc:	4b03      	ldr	r3, [pc, #12]	; (809ec <enable_motor+0x10>)
   809de:	681b      	ldr	r3, [r3, #0]
   809e0:	b913      	cbnz	r3, 809e8 <enable_motor+0xc>
		return;
		//printf("enabling motor");
	//PIOD->PIO_SODR = PIO_PD9;
	motor_enabled = 1;
   809e2:	2201      	movs	r2, #1
   809e4:	4b01      	ldr	r3, [pc, #4]	; (809ec <enable_motor+0x10>)
   809e6:	601a      	str	r2, [r3, #0]
   809e8:	4770      	bx	lr
   809ea:	bf00      	nop
   809ec:	20000470 	.word	0x20000470

000809f0 <disable_motor>:
}

void disable_motor()
{
	if(!motor_enabled)
   809f0:	4b03      	ldr	r3, [pc, #12]	; (80a00 <disable_motor+0x10>)
   809f2:	681b      	ldr	r3, [r3, #0]
   809f4:	b113      	cbz	r3, 809fc <disable_motor+0xc>
		return;
		//printf("disabling motor");
	//dac_write_speed(0);
	//PIOD->PIO_CODR = PIO_PD9;
	motor_enabled = 0;
   809f6:	2200      	movs	r2, #0
   809f8:	4b01      	ldr	r3, [pc, #4]	; (80a00 <disable_motor+0x10>)
   809fa:	601a      	str	r2, [r3, #0]
   809fc:	4770      	bx	lr
   809fe:	bf00      	nop
   80a00:	20000470 	.word	0x20000470

00080a04 <shoot>:
}


void shoot()
{
   80a04:	b510      	push	{r4, lr}
	PIOC->PIO_CODR |= PIO_PC13;
   80a06:	4c06      	ldr	r4, [pc, #24]	; (80a20 <shoot+0x1c>)
   80a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80a0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a0e:	6363      	str	r3, [r4, #52]	; 0x34
	delay_ms(120);
   80a10:	2078      	movs	r0, #120	; 0x78
   80a12:	4b04      	ldr	r3, [pc, #16]	; (80a24 <shoot+0x20>)
   80a14:	4798      	blx	r3
	PIOC->PIO_SODR |= PIO_PC13;
   80a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80a1c:	6323      	str	r3, [r4, #48]	; 0x30
   80a1e:	bd10      	pop	{r4, pc}
   80a20:	400e1200 	.word	0x400e1200
   80a24:	000804e1 	.word	0x000804e1

00080a28 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80a28:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80a2a:	b2c8      	uxtb	r0, r1
   80a2c:	4b01      	ldr	r3, [pc, #4]	; (80a34 <printchar+0xc>)
   80a2e:	4798      	blx	r3
   80a30:	bd08      	pop	{r3, pc}
   80a32:	bf00      	nop
   80a34:	00080ea9 	.word	0x00080ea9

00080a38 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a3c:	4607      	mov	r7, r0
   80a3e:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80a40:	1e15      	subs	r5, r2, #0
   80a42:	dd02      	ble.n	80a4a <prints+0x12>
   80a44:	460a      	mov	r2, r1
   80a46:	2100      	movs	r1, #0
   80a48:	e004      	b.n	80a54 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80a4a:	f04f 0820 	mov.w	r8, #32
   80a4e:	e00e      	b.n	80a6e <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80a50:	3101      	adds	r1, #1
   80a52:	3201      	adds	r2, #1
   80a54:	7810      	ldrb	r0, [r2, #0]
   80a56:	2800      	cmp	r0, #0
   80a58:	d1fa      	bne.n	80a50 <prints+0x18>
		if (len >= width) width = 0;
   80a5a:	42a9      	cmp	r1, r5
   80a5c:	da01      	bge.n	80a62 <prints+0x2a>
		else width -= len;
   80a5e:	1a6d      	subs	r5, r5, r1
   80a60:	e000      	b.n	80a64 <prints+0x2c>
		if (len >= width) width = 0;
   80a62:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80a64:	f013 0f02 	tst.w	r3, #2
   80a68:	d106      	bne.n	80a78 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80a6a:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80a6e:	f013 0401 	ands.w	r4, r3, #1
   80a72:	d00a      	beq.n	80a8a <prints+0x52>
	register int pc = 0, padchar = ' ';
   80a74:	2400      	movs	r4, #0
   80a76:	e010      	b.n	80a9a <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80a78:	f04f 0830 	mov.w	r8, #48	; 0x30
   80a7c:	e7f7      	b.n	80a6e <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   80a7e:	4641      	mov	r1, r8
   80a80:	4638      	mov	r0, r7
   80a82:	4b0d      	ldr	r3, [pc, #52]	; (80ab8 <prints+0x80>)
   80a84:	4798      	blx	r3
			++pc;
   80a86:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80a88:	3d01      	subs	r5, #1
   80a8a:	2d00      	cmp	r5, #0
   80a8c:	dcf7      	bgt.n	80a7e <prints+0x46>
   80a8e:	e004      	b.n	80a9a <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80a90:	4638      	mov	r0, r7
   80a92:	4b09      	ldr	r3, [pc, #36]	; (80ab8 <prints+0x80>)
   80a94:	4798      	blx	r3
		++pc;
   80a96:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80a98:	3601      	adds	r6, #1
   80a9a:	7831      	ldrb	r1, [r6, #0]
   80a9c:	2900      	cmp	r1, #0
   80a9e:	d1f7      	bne.n	80a90 <prints+0x58>
   80aa0:	e005      	b.n	80aae <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80aa2:	4641      	mov	r1, r8
   80aa4:	4638      	mov	r0, r7
   80aa6:	4b04      	ldr	r3, [pc, #16]	; (80ab8 <prints+0x80>)
   80aa8:	4798      	blx	r3
		++pc;
   80aaa:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80aac:	3d01      	subs	r5, #1
   80aae:	2d00      	cmp	r5, #0
   80ab0:	dcf7      	bgt.n	80aa2 <prints+0x6a>
	}

	return pc;
}
   80ab2:	4620      	mov	r0, r4
   80ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ab8:	00080a29 	.word	0x00080a29

00080abc <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   80abe:	b085      	sub	sp, #20
   80ac0:	4607      	mov	r7, r0
   80ac2:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80ac4:	b151      	cbz	r1, 80adc <printi+0x20>
   80ac6:	461e      	mov	r6, r3
   80ac8:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80aca:	b113      	cbz	r3, 80ad2 <printi+0x16>
   80acc:	2a0a      	cmp	r2, #10
   80ace:	d012      	beq.n	80af6 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80ad0:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80ad2:	ad04      	add	r5, sp, #16
   80ad4:	2300      	movs	r3, #0
   80ad6:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80ada:	e018      	b.n	80b0e <printi+0x52>
		print_buf[0] = '0';
   80adc:	2330      	movs	r3, #48	; 0x30
   80ade:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80ae2:	2300      	movs	r3, #0
   80ae4:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80aec:	a901      	add	r1, sp, #4
   80aee:	4638      	mov	r0, r7
   80af0:	4c1b      	ldr	r4, [pc, #108]	; (80b60 <printi+0xa4>)
   80af2:	47a0      	blx	r4
   80af4:	e029      	b.n	80b4a <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80af6:	2900      	cmp	r1, #0
   80af8:	db01      	blt.n	80afe <printi+0x42>
	register int t, neg = 0, pc = 0;
   80afa:	2600      	movs	r6, #0
   80afc:	e7e9      	b.n	80ad2 <printi+0x16>
		u = -i;
   80afe:	424c      	negs	r4, r1
		neg = 1;
   80b00:	2601      	movs	r6, #1
   80b02:	e7e6      	b.n	80ad2 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80b04:	3330      	adds	r3, #48	; 0x30
   80b06:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80b0a:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80b0e:	b14c      	cbz	r4, 80b24 <printi+0x68>
		t = u % b;
   80b10:	fbb4 f3f2 	udiv	r3, r4, r2
   80b14:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80b18:	2b09      	cmp	r3, #9
   80b1a:	ddf3      	ble.n	80b04 <printi+0x48>
			t += letbase - '0' - 10;
   80b1c:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80b20:	440b      	add	r3, r1
   80b22:	e7ef      	b.n	80b04 <printi+0x48>
	}

	if (neg) {
   80b24:	b156      	cbz	r6, 80b3c <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80b28:	b11b      	cbz	r3, 80b32 <printi+0x76>
   80b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b2c:	f013 0f02 	tst.w	r3, #2
   80b30:	d10d      	bne.n	80b4e <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80b32:	232d      	movs	r3, #45	; 0x2d
   80b34:	f805 3c01 	strb.w	r3, [r5, #-1]
   80b38:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80b3a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80b40:	4629      	mov	r1, r5
   80b42:	4638      	mov	r0, r7
   80b44:	4c06      	ldr	r4, [pc, #24]	; (80b60 <printi+0xa4>)
   80b46:	47a0      	blx	r4
   80b48:	4430      	add	r0, r6
}
   80b4a:	b005      	add	sp, #20
   80b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80b4e:	212d      	movs	r1, #45	; 0x2d
   80b50:	4638      	mov	r0, r7
   80b52:	4b04      	ldr	r3, [pc, #16]	; (80b64 <printi+0xa8>)
   80b54:	4798      	blx	r3
			--width;
   80b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80b58:	3b01      	subs	r3, #1
   80b5a:	930a      	str	r3, [sp, #40]	; 0x28
   80b5c:	e7ee      	b.n	80b3c <printi+0x80>
   80b5e:	bf00      	nop
   80b60:	00080a39 	.word	0x00080a39
   80b64:	00080a29 	.word	0x00080a29

00080b68 <print>:

static int print( char **out, const char *format, va_list args )
{
   80b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b6a:	b089      	sub	sp, #36	; 0x24
   80b6c:	4606      	mov	r6, r0
   80b6e:	460c      	mov	r4, r1
   80b70:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80b72:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80b74:	e081      	b.n	80c7a <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80b76:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80b78:	2301      	movs	r3, #1
   80b7a:	e08b      	b.n	80c94 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80b7c:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80b7e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80b82:	7822      	ldrb	r2, [r4, #0]
   80b84:	2a30      	cmp	r2, #48	; 0x30
   80b86:	d0f9      	beq.n	80b7c <print+0x14>
   80b88:	2200      	movs	r2, #0
   80b8a:	e006      	b.n	80b9a <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80b8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80b90:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80b92:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b96:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b98:	3401      	adds	r4, #1
   80b9a:	7821      	ldrb	r1, [r4, #0]
   80b9c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80ba0:	b2c0      	uxtb	r0, r0
   80ba2:	2809      	cmp	r0, #9
   80ba4:	d9f2      	bls.n	80b8c <print+0x24>
			}
			if( *format == 's' ) {
   80ba6:	2973      	cmp	r1, #115	; 0x73
   80ba8:	d018      	beq.n	80bdc <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80baa:	2964      	cmp	r1, #100	; 0x64
   80bac:	d022      	beq.n	80bf4 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80bae:	2978      	cmp	r1, #120	; 0x78
   80bb0:	d02f      	beq.n	80c12 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80bb2:	2958      	cmp	r1, #88	; 0x58
   80bb4:	d03c      	beq.n	80c30 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80bb6:	2975      	cmp	r1, #117	; 0x75
   80bb8:	d049      	beq.n	80c4e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80bba:	2963      	cmp	r1, #99	; 0x63
   80bbc:	d15c      	bne.n	80c78 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80bbe:	9905      	ldr	r1, [sp, #20]
   80bc0:	1d08      	adds	r0, r1, #4
   80bc2:	9005      	str	r0, [sp, #20]
   80bc4:	7809      	ldrb	r1, [r1, #0]
   80bc6:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80bca:	2100      	movs	r1, #0
   80bcc:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80bd0:	a907      	add	r1, sp, #28
   80bd2:	4630      	mov	r0, r6
   80bd4:	4f34      	ldr	r7, [pc, #208]	; (80ca8 <print+0x140>)
   80bd6:	47b8      	blx	r7
   80bd8:	4405      	add	r5, r0
				continue;
   80bda:	e04d      	b.n	80c78 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80bdc:	9905      	ldr	r1, [sp, #20]
   80bde:	1d08      	adds	r0, r1, #4
   80be0:	9005      	str	r0, [sp, #20]
   80be2:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80be4:	b121      	cbz	r1, 80bf0 <print+0x88>
   80be6:	4630      	mov	r0, r6
   80be8:	4f2f      	ldr	r7, [pc, #188]	; (80ca8 <print+0x140>)
   80bea:	47b8      	blx	r7
   80bec:	4405      	add	r5, r0
				continue;
   80bee:	e043      	b.n	80c78 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80bf0:	492e      	ldr	r1, [pc, #184]	; (80cac <print+0x144>)
   80bf2:	e7f8      	b.n	80be6 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80bf4:	9905      	ldr	r1, [sp, #20]
   80bf6:	1d08      	adds	r0, r1, #4
   80bf8:	9005      	str	r0, [sp, #20]
   80bfa:	6809      	ldr	r1, [r1, #0]
   80bfc:	2061      	movs	r0, #97	; 0x61
   80bfe:	9002      	str	r0, [sp, #8]
   80c00:	9301      	str	r3, [sp, #4]
   80c02:	9200      	str	r2, [sp, #0]
   80c04:	2301      	movs	r3, #1
   80c06:	220a      	movs	r2, #10
   80c08:	4630      	mov	r0, r6
   80c0a:	4f29      	ldr	r7, [pc, #164]	; (80cb0 <print+0x148>)
   80c0c:	47b8      	blx	r7
   80c0e:	4405      	add	r5, r0
				continue;
   80c10:	e032      	b.n	80c78 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80c12:	9905      	ldr	r1, [sp, #20]
   80c14:	1d08      	adds	r0, r1, #4
   80c16:	9005      	str	r0, [sp, #20]
   80c18:	6809      	ldr	r1, [r1, #0]
   80c1a:	2061      	movs	r0, #97	; 0x61
   80c1c:	9002      	str	r0, [sp, #8]
   80c1e:	9301      	str	r3, [sp, #4]
   80c20:	9200      	str	r2, [sp, #0]
   80c22:	2300      	movs	r3, #0
   80c24:	2210      	movs	r2, #16
   80c26:	4630      	mov	r0, r6
   80c28:	4f21      	ldr	r7, [pc, #132]	; (80cb0 <print+0x148>)
   80c2a:	47b8      	blx	r7
   80c2c:	4405      	add	r5, r0
				continue;
   80c2e:	e023      	b.n	80c78 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80c30:	9905      	ldr	r1, [sp, #20]
   80c32:	1d08      	adds	r0, r1, #4
   80c34:	9005      	str	r0, [sp, #20]
   80c36:	6809      	ldr	r1, [r1, #0]
   80c38:	2041      	movs	r0, #65	; 0x41
   80c3a:	9002      	str	r0, [sp, #8]
   80c3c:	9301      	str	r3, [sp, #4]
   80c3e:	9200      	str	r2, [sp, #0]
   80c40:	2300      	movs	r3, #0
   80c42:	2210      	movs	r2, #16
   80c44:	4630      	mov	r0, r6
   80c46:	4f1a      	ldr	r7, [pc, #104]	; (80cb0 <print+0x148>)
   80c48:	47b8      	blx	r7
   80c4a:	4405      	add	r5, r0
				continue;
   80c4c:	e014      	b.n	80c78 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80c4e:	9905      	ldr	r1, [sp, #20]
   80c50:	1d08      	adds	r0, r1, #4
   80c52:	9005      	str	r0, [sp, #20]
   80c54:	6809      	ldr	r1, [r1, #0]
   80c56:	2061      	movs	r0, #97	; 0x61
   80c58:	9002      	str	r0, [sp, #8]
   80c5a:	9301      	str	r3, [sp, #4]
   80c5c:	9200      	str	r2, [sp, #0]
   80c5e:	2300      	movs	r3, #0
   80c60:	220a      	movs	r2, #10
   80c62:	4630      	mov	r0, r6
   80c64:	4f12      	ldr	r7, [pc, #72]	; (80cb0 <print+0x148>)
   80c66:	47b8      	blx	r7
   80c68:	4405      	add	r5, r0
				continue;
   80c6a:	e005      	b.n	80c78 <print+0x110>
			++format;
   80c6c:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80c6e:	7821      	ldrb	r1, [r4, #0]
   80c70:	4630      	mov	r0, r6
   80c72:	4b10      	ldr	r3, [pc, #64]	; (80cb4 <print+0x14c>)
   80c74:	4798      	blx	r3
			++pc;
   80c76:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80c78:	3401      	adds	r4, #1
   80c7a:	7823      	ldrb	r3, [r4, #0]
   80c7c:	b163      	cbz	r3, 80c98 <print+0x130>
		if (*format == '%') {
   80c7e:	2b25      	cmp	r3, #37	; 0x25
   80c80:	d1f5      	bne.n	80c6e <print+0x106>
			++format;
   80c82:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80c84:	7863      	ldrb	r3, [r4, #1]
   80c86:	b13b      	cbz	r3, 80c98 <print+0x130>
			if (*format == '%') goto out;
   80c88:	2b25      	cmp	r3, #37	; 0x25
   80c8a:	d0ef      	beq.n	80c6c <print+0x104>
			if (*format == '-') {
   80c8c:	2b2d      	cmp	r3, #45	; 0x2d
   80c8e:	f43f af72 	beq.w	80b76 <print+0xe>
			width = pad = 0;
   80c92:	2300      	movs	r3, #0
   80c94:	4614      	mov	r4, r2
   80c96:	e774      	b.n	80b82 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80c98:	b116      	cbz	r6, 80ca0 <print+0x138>
   80c9a:	6833      	ldr	r3, [r6, #0]
   80c9c:	2200      	movs	r2, #0
   80c9e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80ca0:	4628      	mov	r0, r5
   80ca2:	b009      	add	sp, #36	; 0x24
   80ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80ca6:	bf00      	nop
   80ca8:	00080a39 	.word	0x00080a39
   80cac:	00081f8c 	.word	0x00081f8c
   80cb0:	00080abd 	.word	0x00080abd
   80cb4:	00080a29 	.word	0x00080a29

00080cb8 <printf>:

int printf(const char *format, ...)
{
   80cb8:	b40f      	push	{r0, r1, r2, r3}
   80cba:	b500      	push	{lr}
   80cbc:	b083      	sub	sp, #12
   80cbe:	aa04      	add	r2, sp, #16
   80cc0:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80cc4:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80cc6:	2000      	movs	r0, #0
   80cc8:	4b03      	ldr	r3, [pc, #12]	; (80cd8 <printf+0x20>)
   80cca:	4798      	blx	r3
}
   80ccc:	b003      	add	sp, #12
   80cce:	f85d eb04 	ldr.w	lr, [sp], #4
   80cd2:	b004      	add	sp, #16
   80cd4:	4770      	bx	lr
   80cd6:	bf00      	nop
   80cd8:	00080b69 	.word	0x00080b69
   80cdc:	00000000 	.word	0x00000000

00080ce0 <pos_to_duty>:
	// printf("%d    ",joystick_x);
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
}

float pos_to_duty(uint8_t pos)
{
   80ce0:	b510      	push	{r4, lr}
	return (float)CLAMP(pos, 0, 255) / 255.0 * 0.05 + 0.05;
   80ce2:	4b0f      	ldr	r3, [pc, #60]	; (80d20 <pos_to_duty+0x40>)
   80ce4:	4798      	blx	r3
   80ce6:	4b0f      	ldr	r3, [pc, #60]	; (80d24 <pos_to_duty+0x44>)
   80ce8:	4798      	blx	r3
   80cea:	a309      	add	r3, pc, #36	; (adr r3, 80d10 <pos_to_duty+0x30>)
   80cec:	e9d3 2300 	ldrd	r2, r3, [r3]
   80cf0:	4c0d      	ldr	r4, [pc, #52]	; (80d28 <pos_to_duty+0x48>)
   80cf2:	47a0      	blx	r4
   80cf4:	a308      	add	r3, pc, #32	; (adr r3, 80d18 <pos_to_duty+0x38>)
   80cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   80cfa:	4c0c      	ldr	r4, [pc, #48]	; (80d2c <pos_to_duty+0x4c>)
   80cfc:	47a0      	blx	r4
   80cfe:	a306      	add	r3, pc, #24	; (adr r3, 80d18 <pos_to_duty+0x38>)
   80d00:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d04:	4c0a      	ldr	r4, [pc, #40]	; (80d30 <pos_to_duty+0x50>)
   80d06:	47a0      	blx	r4
   80d08:	4b0a      	ldr	r3, [pc, #40]	; (80d34 <pos_to_duty+0x54>)
   80d0a:	4798      	blx	r3
}
   80d0c:	bd10      	pop	{r4, pc}
   80d0e:	bf00      	nop
   80d10:	00000000 	.word	0x00000000
   80d14:	406fe000 	.word	0x406fe000
   80d18:	9999999a 	.word	0x9999999a
   80d1c:	3fa99999 	.word	0x3fa99999
   80d20:	000818dd 	.word	0x000818dd
   80d24:	000811fd 	.word	0x000811fd
   80d28:	000814f9 	.word	0x000814f9
   80d2c:	000812a5 	.word	0x000812a5
   80d30:	00080f41 	.word	0x00080f41
   80d34:	000816c9 	.word	0x000816c9

00080d38 <set_servo_duty>:
{
   80d38:	b510      	push	{r4, lr}
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80d3a:	4b0d      	ldr	r3, [pc, #52]	; (80d70 <set_servo_duty+0x38>)
   80d3c:	6818      	ldr	r0, [r3, #0]
   80d3e:	4b0d      	ldr	r3, [pc, #52]	; (80d74 <set_servo_duty+0x3c>)
   80d40:	4798      	blx	r3
   80d42:	4604      	mov	r4, r0
   80d44:	4b0c      	ldr	r3, [pc, #48]	; (80d78 <set_servo_duty+0x40>)
   80d46:	7818      	ldrb	r0, [r3, #0]
   80d48:	4b0c      	ldr	r3, [pc, #48]	; (80d7c <set_servo_duty+0x44>)
   80d4a:	4798      	blx	r3
   80d4c:	4601      	mov	r1, r0
   80d4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80d52:	4b0b      	ldr	r3, [pc, #44]	; (80d80 <set_servo_duty+0x48>)
   80d54:	4798      	blx	r3
   80d56:	4601      	mov	r1, r0
   80d58:	4620      	mov	r0, r4
   80d5a:	4b0a      	ldr	r3, [pc, #40]	; (80d84 <set_servo_duty+0x4c>)
   80d5c:	4798      	blx	r3
   80d5e:	4b0a      	ldr	r3, [pc, #40]	; (80d88 <set_servo_duty+0x50>)
   80d60:	4798      	blx	r3
   80d62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80d66:	4b09      	ldr	r3, [pc, #36]	; (80d8c <set_servo_duty+0x54>)
   80d68:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80d6c:	bd10      	pop	{r4, pc}
   80d6e:	bf00      	nop
   80d70:	2000046c 	.word	0x2000046c
   80d74:	000818d5 	.word	0x000818d5
   80d78:	20000468 	.word	0x20000468
   80d7c:	00080ce1 	.word	0x00080ce1
   80d80:	00081771 	.word	0x00081771
   80d84:	00081985 	.word	0x00081985
   80d88:	00081d5d 	.word	0x00081d5d
   80d8c:	40094000 	.word	0x40094000

00080d90 <pwm_init>:
{
   80d90:	b510      	push	{r4, lr}
	PIOC->PIO_PDR |= PIO_PDR_P19;
   80d92:	4b20      	ldr	r3, [pc, #128]	; (80e14 <pwm_init+0x84>)
   80d94:	685a      	ldr	r2, [r3, #4]
   80d96:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80d9a:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   80d9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d9e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80da2:	671a      	str	r2, [r3, #112]	; 0x70
	PMC->PMC_PCR |= (ID_PWM << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   80da4:	491c      	ldr	r1, [pc, #112]	; (80e18 <pwm_init+0x88>)
   80da6:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
   80daa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80dae:	f042 0224 	orr.w	r2, r2, #36	; 0x24
   80db2:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_PWM-32));
   80db6:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80dba:	f042 0210 	orr.w	r2, r2, #16
   80dbe:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	PIOC->PIO_WPMR = 0;
   80dc2:	2200      	movs	r2, #0
   80dc4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR = 0;
   80dc8:	4c14      	ldr	r4, [pc, #80]	; (80e1c <pwm_init+0x8c>)
   80dca:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	PWM->PWM_CLK = PWM_CLK_DIVA(84) | PWM_CLK_PREA(0);
   80dce:	2354      	movs	r3, #84	; 0x54
   80dd0:	6023      	str	r3, [r4, #0]
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_CLKA;
   80dd2:	230b      	movs	r3, #11
   80dd4:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
	servo_period = 20E-3 * F_CPU / 84;
   80dd8:	f644 6320 	movw	r3, #20000	; 0x4e20
   80ddc:	4a10      	ldr	r2, [pc, #64]	; (80e20 <pwm_init+0x90>)
   80dde:	6013      	str	r3, [r2, #0]
	PWM->PWM_CH_NUM[5].PWM_CPRD = PWM_CPRD_CPRD(servo_period);
   80de0:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80de4:	4b0f      	ldr	r3, [pc, #60]	; (80e24 <pwm_init+0x94>)
   80de6:	7818      	ldrb	r0, [r3, #0]
   80de8:	4b0f      	ldr	r3, [pc, #60]	; (80e28 <pwm_init+0x98>)
   80dea:	4798      	blx	r3
   80dec:	4601      	mov	r1, r0
   80dee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80df2:	4b0e      	ldr	r3, [pc, #56]	; (80e2c <pwm_init+0x9c>)
   80df4:	4798      	blx	r3
   80df6:	490e      	ldr	r1, [pc, #56]	; (80e30 <pwm_init+0xa0>)
   80df8:	4b0e      	ldr	r3, [pc, #56]	; (80e34 <pwm_init+0xa4>)
   80dfa:	4798      	blx	r3
   80dfc:	4b0e      	ldr	r3, [pc, #56]	; (80e38 <pwm_init+0xa8>)
   80dfe:	4798      	blx	r3
   80e00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80e04:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
	set_servo_duty();
   80e08:	4b0c      	ldr	r3, [pc, #48]	; (80e3c <pwm_init+0xac>)
   80e0a:	4798      	blx	r3
	PWM->PWM_ENA = PWM_ENA_CHID5;
   80e0c:	2320      	movs	r3, #32
   80e0e:	6063      	str	r3, [r4, #4]
   80e10:	bd10      	pop	{r4, pc}
   80e12:	bf00      	nop
   80e14:	400e1200 	.word	0x400e1200
   80e18:	400e0600 	.word	0x400e0600
   80e1c:	40094000 	.word	0x40094000
   80e20:	2000046c 	.word	0x2000046c
   80e24:	20000468 	.word	0x20000468
   80e28:	00080ce1 	.word	0x00080ce1
   80e2c:	00081771 	.word	0x00081771
   80e30:	469c4000 	.word	0x469c4000
   80e34:	00081985 	.word	0x00081985
   80e38:	00081d5d 	.word	0x00081d5d
   80e3c:	00080d39 	.word	0x00080d39

00080e40 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80e40:	4b16      	ldr	r3, [pc, #88]	; (80e9c <configure_uart+0x5c>)
   80e42:	2200      	movs	r2, #0
   80e44:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80e46:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e48:	4b15      	ldr	r3, [pc, #84]	; (80ea0 <configure_uart+0x60>)
   80e4a:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e4e:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e50:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80e54:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80e56:	4002      	ands	r2, r0
   80e58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80e5c:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e5e:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80e60:	f44f 7280 	mov.w	r2, #256	; 0x100
   80e64:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80e68:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80e6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80e6e:	21ac      	movs	r1, #172	; 0xac
   80e70:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = (int)(MCK/(16*BAUDRATE)); // MCK / (16 * x) = BaudRate (write x into UART_BRGR, which is 547) 
   80e72:	f240 2122 	movw	r1, #546	; 0x222
   80e76:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80e7c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80e7e:	f240 2102 	movw	r1, #514	; 0x202
   80e82:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80e86:	f04f 31ff 	mov.w	r1, #4294967295
   80e8a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80e8c:	21e1      	movs	r1, #225	; 0xe1
   80e8e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80e90:	4904      	ldr	r1, [pc, #16]	; (80ea4 <configure_uart+0x64>)
   80e92:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80e94:	2250      	movs	r2, #80	; 0x50
   80e96:	601a      	str	r2, [r3, #0]
   80e98:	4770      	bx	lr
   80e9a:	bf00      	nop
   80e9c:	20000474 	.word	0x20000474
   80ea0:	400e0e00 	.word	0x400e0e00
   80ea4:	e000e100 	.word	0xe000e100

00080ea8 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80ea8:	4b07      	ldr	r3, [pc, #28]	; (80ec8 <uart_putchar+0x20>)
   80eaa:	695b      	ldr	r3, [r3, #20]
   80eac:	f013 0f02 	tst.w	r3, #2
   80eb0:	d008      	beq.n	80ec4 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80eb2:	4b05      	ldr	r3, [pc, #20]	; (80ec8 <uart_putchar+0x20>)
   80eb4:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80eb6:	4b04      	ldr	r3, [pc, #16]	; (80ec8 <uart_putchar+0x20>)
   80eb8:	695b      	ldr	r3, [r3, #20]
   80eba:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ebe:	d0fa      	beq.n	80eb6 <uart_putchar+0xe>
	return 0;
   80ec0:	2000      	movs	r0, #0
   80ec2:	4770      	bx	lr
	return 1;
   80ec4:	2001      	movs	r0, #1
}
   80ec6:	4770      	bx	lr
   80ec8:	400e0800 	.word	0x400e0800

00080ecc <UART_Handler>:

void UART_Handler(void)
{
   80ecc:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80ece:	4b15      	ldr	r3, [pc, #84]	; (80f24 <UART_Handler+0x58>)
   80ed0:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80ed2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80ed6:	d003      	beq.n	80ee0 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80ed8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80edc:	4a11      	ldr	r2, [pc, #68]	; (80f24 <UART_Handler+0x58>)
   80ede:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80ee0:	f013 0f01 	tst.w	r3, #1
   80ee4:	d012      	beq.n	80f0c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80ee6:	4810      	ldr	r0, [pc, #64]	; (80f28 <UART_Handler+0x5c>)
   80ee8:	7842      	ldrb	r2, [r0, #1]
   80eea:	1c53      	adds	r3, r2, #1
   80eec:	4259      	negs	r1, r3
   80eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80ef2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80ef6:	bf58      	it	pl
   80ef8:	424b      	negpl	r3, r1
   80efa:	7801      	ldrb	r1, [r0, #0]
   80efc:	428b      	cmp	r3, r1
   80efe:	d006      	beq.n	80f0e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80f00:	4908      	ldr	r1, [pc, #32]	; (80f24 <UART_Handler+0x58>)
   80f02:	6988      	ldr	r0, [r1, #24]
   80f04:	4908      	ldr	r1, [pc, #32]	; (80f28 <UART_Handler+0x5c>)
   80f06:	440a      	add	r2, r1
   80f08:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80f0a:	704b      	strb	r3, [r1, #1]
   80f0c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80f0e:	4807      	ldr	r0, [pc, #28]	; (80f2c <UART_Handler+0x60>)
   80f10:	4b07      	ldr	r3, [pc, #28]	; (80f30 <UART_Handler+0x64>)
   80f12:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80f14:	4b04      	ldr	r3, [pc, #16]	; (80f28 <UART_Handler+0x5c>)
   80f16:	7859      	ldrb	r1, [r3, #1]
   80f18:	4a02      	ldr	r2, [pc, #8]	; (80f24 <UART_Handler+0x58>)
   80f1a:	6992      	ldr	r2, [r2, #24]
   80f1c:	440b      	add	r3, r1
   80f1e:	709a      	strb	r2, [r3, #2]
			return;
   80f20:	bd08      	pop	{r3, pc}
   80f22:	bf00      	nop
   80f24:	400e0800 	.word	0x400e0800
   80f28:	20000474 	.word	0x20000474
   80f2c:	00081f94 	.word	0x00081f94
   80f30:	00080cb9 	.word	0x00080cb9

00080f34 <__aeabi_drsub>:
   80f34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f38:	e002      	b.n	80f40 <__adddf3>
   80f3a:	bf00      	nop

00080f3c <__aeabi_dsub>:
   80f3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080f40 <__adddf3>:
   80f40:	b530      	push	{r4, r5, lr}
   80f42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80f46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80f4a:	ea94 0f05 	teq	r4, r5
   80f4e:	bf08      	it	eq
   80f50:	ea90 0f02 	teqeq	r0, r2
   80f54:	bf1f      	itttt	ne
   80f56:	ea54 0c00 	orrsne.w	ip, r4, r0
   80f5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80f5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80f62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f66:	f000 80e2 	beq.w	8112e <__adddf3+0x1ee>
   80f6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80f6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80f72:	bfb8      	it	lt
   80f74:	426d      	neglt	r5, r5
   80f76:	dd0c      	ble.n	80f92 <__adddf3+0x52>
   80f78:	442c      	add	r4, r5
   80f7a:	ea80 0202 	eor.w	r2, r0, r2
   80f7e:	ea81 0303 	eor.w	r3, r1, r3
   80f82:	ea82 0000 	eor.w	r0, r2, r0
   80f86:	ea83 0101 	eor.w	r1, r3, r1
   80f8a:	ea80 0202 	eor.w	r2, r0, r2
   80f8e:	ea81 0303 	eor.w	r3, r1, r3
   80f92:	2d36      	cmp	r5, #54	; 0x36
   80f94:	bf88      	it	hi
   80f96:	bd30      	pophi	{r4, r5, pc}
   80f98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80f9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80fa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80fa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80fa8:	d002      	beq.n	80fb0 <__adddf3+0x70>
   80faa:	4240      	negs	r0, r0
   80fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80fb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80fb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80fb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80fbc:	d002      	beq.n	80fc4 <__adddf3+0x84>
   80fbe:	4252      	negs	r2, r2
   80fc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80fc4:	ea94 0f05 	teq	r4, r5
   80fc8:	f000 80a7 	beq.w	8111a <__adddf3+0x1da>
   80fcc:	f1a4 0401 	sub.w	r4, r4, #1
   80fd0:	f1d5 0e20 	rsbs	lr, r5, #32
   80fd4:	db0d      	blt.n	80ff2 <__adddf3+0xb2>
   80fd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   80fda:	fa22 f205 	lsr.w	r2, r2, r5
   80fde:	1880      	adds	r0, r0, r2
   80fe0:	f141 0100 	adc.w	r1, r1, #0
   80fe4:	fa03 f20e 	lsl.w	r2, r3, lr
   80fe8:	1880      	adds	r0, r0, r2
   80fea:	fa43 f305 	asr.w	r3, r3, r5
   80fee:	4159      	adcs	r1, r3
   80ff0:	e00e      	b.n	81010 <__adddf3+0xd0>
   80ff2:	f1a5 0520 	sub.w	r5, r5, #32
   80ff6:	f10e 0e20 	add.w	lr, lr, #32
   80ffa:	2a01      	cmp	r2, #1
   80ffc:	fa03 fc0e 	lsl.w	ip, r3, lr
   81000:	bf28      	it	cs
   81002:	f04c 0c02 	orrcs.w	ip, ip, #2
   81006:	fa43 f305 	asr.w	r3, r3, r5
   8100a:	18c0      	adds	r0, r0, r3
   8100c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81014:	d507      	bpl.n	81026 <__adddf3+0xe6>
   81016:	f04f 0e00 	mov.w	lr, #0
   8101a:	f1dc 0c00 	rsbs	ip, ip, #0
   8101e:	eb7e 0000 	sbcs.w	r0, lr, r0
   81022:	eb6e 0101 	sbc.w	r1, lr, r1
   81026:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8102a:	d31b      	bcc.n	81064 <__adddf3+0x124>
   8102c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81030:	d30c      	bcc.n	8104c <__adddf3+0x10c>
   81032:	0849      	lsrs	r1, r1, #1
   81034:	ea5f 0030 	movs.w	r0, r0, rrx
   81038:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8103c:	f104 0401 	add.w	r4, r4, #1
   81040:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81044:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81048:	f080 809a 	bcs.w	81180 <__adddf3+0x240>
   8104c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81050:	bf08      	it	eq
   81052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81056:	f150 0000 	adcs.w	r0, r0, #0
   8105a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8105e:	ea41 0105 	orr.w	r1, r1, r5
   81062:	bd30      	pop	{r4, r5, pc}
   81064:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81068:	4140      	adcs	r0, r0
   8106a:	eb41 0101 	adc.w	r1, r1, r1
   8106e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81072:	f1a4 0401 	sub.w	r4, r4, #1
   81076:	d1e9      	bne.n	8104c <__adddf3+0x10c>
   81078:	f091 0f00 	teq	r1, #0
   8107c:	bf04      	itt	eq
   8107e:	4601      	moveq	r1, r0
   81080:	2000      	moveq	r0, #0
   81082:	fab1 f381 	clz	r3, r1
   81086:	bf08      	it	eq
   81088:	3320      	addeq	r3, #32
   8108a:	f1a3 030b 	sub.w	r3, r3, #11
   8108e:	f1b3 0220 	subs.w	r2, r3, #32
   81092:	da0c      	bge.n	810ae <__adddf3+0x16e>
   81094:	320c      	adds	r2, #12
   81096:	dd08      	ble.n	810aa <__adddf3+0x16a>
   81098:	f102 0c14 	add.w	ip, r2, #20
   8109c:	f1c2 020c 	rsb	r2, r2, #12
   810a0:	fa01 f00c 	lsl.w	r0, r1, ip
   810a4:	fa21 f102 	lsr.w	r1, r1, r2
   810a8:	e00c      	b.n	810c4 <__adddf3+0x184>
   810aa:	f102 0214 	add.w	r2, r2, #20
   810ae:	bfd8      	it	le
   810b0:	f1c2 0c20 	rsble	ip, r2, #32
   810b4:	fa01 f102 	lsl.w	r1, r1, r2
   810b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   810bc:	bfdc      	itt	le
   810be:	ea41 010c 	orrle.w	r1, r1, ip
   810c2:	4090      	lslle	r0, r2
   810c4:	1ae4      	subs	r4, r4, r3
   810c6:	bfa2      	ittt	ge
   810c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   810cc:	4329      	orrge	r1, r5
   810ce:	bd30      	popge	{r4, r5, pc}
   810d0:	ea6f 0404 	mvn.w	r4, r4
   810d4:	3c1f      	subs	r4, #31
   810d6:	da1c      	bge.n	81112 <__adddf3+0x1d2>
   810d8:	340c      	adds	r4, #12
   810da:	dc0e      	bgt.n	810fa <__adddf3+0x1ba>
   810dc:	f104 0414 	add.w	r4, r4, #20
   810e0:	f1c4 0220 	rsb	r2, r4, #32
   810e4:	fa20 f004 	lsr.w	r0, r0, r4
   810e8:	fa01 f302 	lsl.w	r3, r1, r2
   810ec:	ea40 0003 	orr.w	r0, r0, r3
   810f0:	fa21 f304 	lsr.w	r3, r1, r4
   810f4:	ea45 0103 	orr.w	r1, r5, r3
   810f8:	bd30      	pop	{r4, r5, pc}
   810fa:	f1c4 040c 	rsb	r4, r4, #12
   810fe:	f1c4 0220 	rsb	r2, r4, #32
   81102:	fa20 f002 	lsr.w	r0, r0, r2
   81106:	fa01 f304 	lsl.w	r3, r1, r4
   8110a:	ea40 0003 	orr.w	r0, r0, r3
   8110e:	4629      	mov	r1, r5
   81110:	bd30      	pop	{r4, r5, pc}
   81112:	fa21 f004 	lsr.w	r0, r1, r4
   81116:	4629      	mov	r1, r5
   81118:	bd30      	pop	{r4, r5, pc}
   8111a:	f094 0f00 	teq	r4, #0
   8111e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81122:	bf06      	itte	eq
   81124:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81128:	3401      	addeq	r4, #1
   8112a:	3d01      	subne	r5, #1
   8112c:	e74e      	b.n	80fcc <__adddf3+0x8c>
   8112e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81132:	bf18      	it	ne
   81134:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81138:	d029      	beq.n	8118e <__adddf3+0x24e>
   8113a:	ea94 0f05 	teq	r4, r5
   8113e:	bf08      	it	eq
   81140:	ea90 0f02 	teqeq	r0, r2
   81144:	d005      	beq.n	81152 <__adddf3+0x212>
   81146:	ea54 0c00 	orrs.w	ip, r4, r0
   8114a:	bf04      	itt	eq
   8114c:	4619      	moveq	r1, r3
   8114e:	4610      	moveq	r0, r2
   81150:	bd30      	pop	{r4, r5, pc}
   81152:	ea91 0f03 	teq	r1, r3
   81156:	bf1e      	ittt	ne
   81158:	2100      	movne	r1, #0
   8115a:	2000      	movne	r0, #0
   8115c:	bd30      	popne	{r4, r5, pc}
   8115e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81162:	d105      	bne.n	81170 <__adddf3+0x230>
   81164:	0040      	lsls	r0, r0, #1
   81166:	4149      	adcs	r1, r1
   81168:	bf28      	it	cs
   8116a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8116e:	bd30      	pop	{r4, r5, pc}
   81170:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81174:	bf3c      	itt	cc
   81176:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8117a:	bd30      	popcc	{r4, r5, pc}
   8117c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81180:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81184:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81188:	f04f 0000 	mov.w	r0, #0
   8118c:	bd30      	pop	{r4, r5, pc}
   8118e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81192:	bf1a      	itte	ne
   81194:	4619      	movne	r1, r3
   81196:	4610      	movne	r0, r2
   81198:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8119c:	bf1c      	itt	ne
   8119e:	460b      	movne	r3, r1
   811a0:	4602      	movne	r2, r0
   811a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811a6:	bf06      	itte	eq
   811a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   811ac:	ea91 0f03 	teqeq	r1, r3
   811b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   811b4:	bd30      	pop	{r4, r5, pc}
   811b6:	bf00      	nop

000811b8 <__aeabi_ui2d>:
   811b8:	f090 0f00 	teq	r0, #0
   811bc:	bf04      	itt	eq
   811be:	2100      	moveq	r1, #0
   811c0:	4770      	bxeq	lr
   811c2:	b530      	push	{r4, r5, lr}
   811c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811cc:	f04f 0500 	mov.w	r5, #0
   811d0:	f04f 0100 	mov.w	r1, #0
   811d4:	e750      	b.n	81078 <__adddf3+0x138>
   811d6:	bf00      	nop

000811d8 <__aeabi_i2d>:
   811d8:	f090 0f00 	teq	r0, #0
   811dc:	bf04      	itt	eq
   811de:	2100      	moveq	r1, #0
   811e0:	4770      	bxeq	lr
   811e2:	b530      	push	{r4, r5, lr}
   811e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   811f0:	bf48      	it	mi
   811f2:	4240      	negmi	r0, r0
   811f4:	f04f 0100 	mov.w	r1, #0
   811f8:	e73e      	b.n	81078 <__adddf3+0x138>
   811fa:	bf00      	nop

000811fc <__aeabi_f2d>:
   811fc:	0042      	lsls	r2, r0, #1
   811fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81202:	ea4f 0131 	mov.w	r1, r1, rrx
   81206:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8120a:	bf1f      	itttt	ne
   8120c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81210:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81214:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81218:	4770      	bxne	lr
   8121a:	f092 0f00 	teq	r2, #0
   8121e:	bf14      	ite	ne
   81220:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81224:	4770      	bxeq	lr
   81226:	b530      	push	{r4, r5, lr}
   81228:	f44f 7460 	mov.w	r4, #896	; 0x380
   8122c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81230:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81234:	e720      	b.n	81078 <__adddf3+0x138>
   81236:	bf00      	nop

00081238 <__aeabi_ul2d>:
   81238:	ea50 0201 	orrs.w	r2, r0, r1
   8123c:	bf08      	it	eq
   8123e:	4770      	bxeq	lr
   81240:	b530      	push	{r4, r5, lr}
   81242:	f04f 0500 	mov.w	r5, #0
   81246:	e00a      	b.n	8125e <__aeabi_l2d+0x16>

00081248 <__aeabi_l2d>:
   81248:	ea50 0201 	orrs.w	r2, r0, r1
   8124c:	bf08      	it	eq
   8124e:	4770      	bxeq	lr
   81250:	b530      	push	{r4, r5, lr}
   81252:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81256:	d502      	bpl.n	8125e <__aeabi_l2d+0x16>
   81258:	4240      	negs	r0, r0
   8125a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8125e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81262:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81266:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8126a:	f43f aedc 	beq.w	81026 <__adddf3+0xe6>
   8126e:	f04f 0203 	mov.w	r2, #3
   81272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81276:	bf18      	it	ne
   81278:	3203      	addne	r2, #3
   8127a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8127e:	bf18      	it	ne
   81280:	3203      	addne	r2, #3
   81282:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81286:	f1c2 0320 	rsb	r3, r2, #32
   8128a:	fa00 fc03 	lsl.w	ip, r0, r3
   8128e:	fa20 f002 	lsr.w	r0, r0, r2
   81292:	fa01 fe03 	lsl.w	lr, r1, r3
   81296:	ea40 000e 	orr.w	r0, r0, lr
   8129a:	fa21 f102 	lsr.w	r1, r1, r2
   8129e:	4414      	add	r4, r2
   812a0:	e6c1      	b.n	81026 <__adddf3+0xe6>
   812a2:	bf00      	nop

000812a4 <__aeabi_dmul>:
   812a4:	b570      	push	{r4, r5, r6, lr}
   812a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812b2:	bf1d      	ittte	ne
   812b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812b8:	ea94 0f0c 	teqne	r4, ip
   812bc:	ea95 0f0c 	teqne	r5, ip
   812c0:	f000 f8de 	bleq	81480 <__aeabi_dmul+0x1dc>
   812c4:	442c      	add	r4, r5
   812c6:	ea81 0603 	eor.w	r6, r1, r3
   812ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   812ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   812d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   812d6:	bf18      	it	ne
   812d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   812dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   812e4:	d038      	beq.n	81358 <__aeabi_dmul+0xb4>
   812e6:	fba0 ce02 	umull	ip, lr, r0, r2
   812ea:	f04f 0500 	mov.w	r5, #0
   812ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   812f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   812f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   812fa:	f04f 0600 	mov.w	r6, #0
   812fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   81302:	f09c 0f00 	teq	ip, #0
   81306:	bf18      	it	ne
   81308:	f04e 0e01 	orrne.w	lr, lr, #1
   8130c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81310:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81314:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81318:	d204      	bcs.n	81324 <__aeabi_dmul+0x80>
   8131a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8131e:	416d      	adcs	r5, r5
   81320:	eb46 0606 	adc.w	r6, r6, r6
   81324:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81328:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8132c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81330:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81334:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81338:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8133c:	bf88      	it	hi
   8133e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81342:	d81e      	bhi.n	81382 <__aeabi_dmul+0xde>
   81344:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81348:	bf08      	it	eq
   8134a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8134e:	f150 0000 	adcs.w	r0, r0, #0
   81352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81356:	bd70      	pop	{r4, r5, r6, pc}
   81358:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8135c:	ea46 0101 	orr.w	r1, r6, r1
   81360:	ea40 0002 	orr.w	r0, r0, r2
   81364:	ea81 0103 	eor.w	r1, r1, r3
   81368:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8136c:	bfc2      	ittt	gt
   8136e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81372:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81376:	bd70      	popgt	{r4, r5, r6, pc}
   81378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8137c:	f04f 0e00 	mov.w	lr, #0
   81380:	3c01      	subs	r4, #1
   81382:	f300 80ab 	bgt.w	814dc <__aeabi_dmul+0x238>
   81386:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8138a:	bfde      	ittt	le
   8138c:	2000      	movle	r0, #0
   8138e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81392:	bd70      	pople	{r4, r5, r6, pc}
   81394:	f1c4 0400 	rsb	r4, r4, #0
   81398:	3c20      	subs	r4, #32
   8139a:	da35      	bge.n	81408 <__aeabi_dmul+0x164>
   8139c:	340c      	adds	r4, #12
   8139e:	dc1b      	bgt.n	813d8 <__aeabi_dmul+0x134>
   813a0:	f104 0414 	add.w	r4, r4, #20
   813a4:	f1c4 0520 	rsb	r5, r4, #32
   813a8:	fa00 f305 	lsl.w	r3, r0, r5
   813ac:	fa20 f004 	lsr.w	r0, r0, r4
   813b0:	fa01 f205 	lsl.w	r2, r1, r5
   813b4:	ea40 0002 	orr.w	r0, r0, r2
   813b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   813bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   813c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813c4:	fa21 f604 	lsr.w	r6, r1, r4
   813c8:	eb42 0106 	adc.w	r1, r2, r6
   813cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   813d0:	bf08      	it	eq
   813d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   813d6:	bd70      	pop	{r4, r5, r6, pc}
   813d8:	f1c4 040c 	rsb	r4, r4, #12
   813dc:	f1c4 0520 	rsb	r5, r4, #32
   813e0:	fa00 f304 	lsl.w	r3, r0, r4
   813e4:	fa20 f005 	lsr.w	r0, r0, r5
   813e8:	fa01 f204 	lsl.w	r2, r1, r4
   813ec:	ea40 0002 	orr.w	r0, r0, r2
   813f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813f8:	f141 0100 	adc.w	r1, r1, #0
   813fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81400:	bf08      	it	eq
   81402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81406:	bd70      	pop	{r4, r5, r6, pc}
   81408:	f1c4 0520 	rsb	r5, r4, #32
   8140c:	fa00 f205 	lsl.w	r2, r0, r5
   81410:	ea4e 0e02 	orr.w	lr, lr, r2
   81414:	fa20 f304 	lsr.w	r3, r0, r4
   81418:	fa01 f205 	lsl.w	r2, r1, r5
   8141c:	ea43 0302 	orr.w	r3, r3, r2
   81420:	fa21 f004 	lsr.w	r0, r1, r4
   81424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81428:	fa21 f204 	lsr.w	r2, r1, r4
   8142c:	ea20 0002 	bic.w	r0, r0, r2
   81430:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81438:	bf08      	it	eq
   8143a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8143e:	bd70      	pop	{r4, r5, r6, pc}
   81440:	f094 0f00 	teq	r4, #0
   81444:	d10f      	bne.n	81466 <__aeabi_dmul+0x1c2>
   81446:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8144a:	0040      	lsls	r0, r0, #1
   8144c:	eb41 0101 	adc.w	r1, r1, r1
   81450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81454:	bf08      	it	eq
   81456:	3c01      	subeq	r4, #1
   81458:	d0f7      	beq.n	8144a <__aeabi_dmul+0x1a6>
   8145a:	ea41 0106 	orr.w	r1, r1, r6
   8145e:	f095 0f00 	teq	r5, #0
   81462:	bf18      	it	ne
   81464:	4770      	bxne	lr
   81466:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8146a:	0052      	lsls	r2, r2, #1
   8146c:	eb43 0303 	adc.w	r3, r3, r3
   81470:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81474:	bf08      	it	eq
   81476:	3d01      	subeq	r5, #1
   81478:	d0f7      	beq.n	8146a <__aeabi_dmul+0x1c6>
   8147a:	ea43 0306 	orr.w	r3, r3, r6
   8147e:	4770      	bx	lr
   81480:	ea94 0f0c 	teq	r4, ip
   81484:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81488:	bf18      	it	ne
   8148a:	ea95 0f0c 	teqne	r5, ip
   8148e:	d00c      	beq.n	814aa <__aeabi_dmul+0x206>
   81490:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81494:	bf18      	it	ne
   81496:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8149a:	d1d1      	bne.n	81440 <__aeabi_dmul+0x19c>
   8149c:	ea81 0103 	eor.w	r1, r1, r3
   814a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814a4:	f04f 0000 	mov.w	r0, #0
   814a8:	bd70      	pop	{r4, r5, r6, pc}
   814aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814ae:	bf06      	itte	eq
   814b0:	4610      	moveq	r0, r2
   814b2:	4619      	moveq	r1, r3
   814b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814b8:	d019      	beq.n	814ee <__aeabi_dmul+0x24a>
   814ba:	ea94 0f0c 	teq	r4, ip
   814be:	d102      	bne.n	814c6 <__aeabi_dmul+0x222>
   814c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   814c4:	d113      	bne.n	814ee <__aeabi_dmul+0x24a>
   814c6:	ea95 0f0c 	teq	r5, ip
   814ca:	d105      	bne.n	814d8 <__aeabi_dmul+0x234>
   814cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   814d0:	bf1c      	itt	ne
   814d2:	4610      	movne	r0, r2
   814d4:	4619      	movne	r1, r3
   814d6:	d10a      	bne.n	814ee <__aeabi_dmul+0x24a>
   814d8:	ea81 0103 	eor.w	r1, r1, r3
   814dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   814e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   814e8:	f04f 0000 	mov.w	r0, #0
   814ec:	bd70      	pop	{r4, r5, r6, pc}
   814ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   814f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   814f6:	bd70      	pop	{r4, r5, r6, pc}

000814f8 <__aeabi_ddiv>:
   814f8:	b570      	push	{r4, r5, r6, lr}
   814fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   814fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81506:	bf1d      	ittte	ne
   81508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8150c:	ea94 0f0c 	teqne	r4, ip
   81510:	ea95 0f0c 	teqne	r5, ip
   81514:	f000 f8a7 	bleq	81666 <__aeabi_ddiv+0x16e>
   81518:	eba4 0405 	sub.w	r4, r4, r5
   8151c:	ea81 0e03 	eor.w	lr, r1, r3
   81520:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81524:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81528:	f000 8088 	beq.w	8163c <__aeabi_ddiv+0x144>
   8152c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81530:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81534:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81538:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8153c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81540:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81544:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81548:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8154c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81550:	429d      	cmp	r5, r3
   81552:	bf08      	it	eq
   81554:	4296      	cmpeq	r6, r2
   81556:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8155a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8155e:	d202      	bcs.n	81566 <__aeabi_ddiv+0x6e>
   81560:	085b      	lsrs	r3, r3, #1
   81562:	ea4f 0232 	mov.w	r2, r2, rrx
   81566:	1ab6      	subs	r6, r6, r2
   81568:	eb65 0503 	sbc.w	r5, r5, r3
   8156c:	085b      	lsrs	r3, r3, #1
   8156e:	ea4f 0232 	mov.w	r2, r2, rrx
   81572:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81576:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8157a:	ebb6 0e02 	subs.w	lr, r6, r2
   8157e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81582:	bf22      	ittt	cs
   81584:	1ab6      	subcs	r6, r6, r2
   81586:	4675      	movcs	r5, lr
   81588:	ea40 000c 	orrcs.w	r0, r0, ip
   8158c:	085b      	lsrs	r3, r3, #1
   8158e:	ea4f 0232 	mov.w	r2, r2, rrx
   81592:	ebb6 0e02 	subs.w	lr, r6, r2
   81596:	eb75 0e03 	sbcs.w	lr, r5, r3
   8159a:	bf22      	ittt	cs
   8159c:	1ab6      	subcs	r6, r6, r2
   8159e:	4675      	movcs	r5, lr
   815a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   815a4:	085b      	lsrs	r3, r3, #1
   815a6:	ea4f 0232 	mov.w	r2, r2, rrx
   815aa:	ebb6 0e02 	subs.w	lr, r6, r2
   815ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   815b2:	bf22      	ittt	cs
   815b4:	1ab6      	subcs	r6, r6, r2
   815b6:	4675      	movcs	r5, lr
   815b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   815bc:	085b      	lsrs	r3, r3, #1
   815be:	ea4f 0232 	mov.w	r2, r2, rrx
   815c2:	ebb6 0e02 	subs.w	lr, r6, r2
   815c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ca:	bf22      	ittt	cs
   815cc:	1ab6      	subcs	r6, r6, r2
   815ce:	4675      	movcs	r5, lr
   815d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   815d4:	ea55 0e06 	orrs.w	lr, r5, r6
   815d8:	d018      	beq.n	8160c <__aeabi_ddiv+0x114>
   815da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   815de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   815e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   815e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   815ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   815ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   815f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   815f6:	d1c0      	bne.n	8157a <__aeabi_ddiv+0x82>
   815f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   815fc:	d10b      	bne.n	81616 <__aeabi_ddiv+0x11e>
   815fe:	ea41 0100 	orr.w	r1, r1, r0
   81602:	f04f 0000 	mov.w	r0, #0
   81606:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8160a:	e7b6      	b.n	8157a <__aeabi_ddiv+0x82>
   8160c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81610:	bf04      	itt	eq
   81612:	4301      	orreq	r1, r0
   81614:	2000      	moveq	r0, #0
   81616:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8161a:	bf88      	it	hi
   8161c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81620:	f63f aeaf 	bhi.w	81382 <__aeabi_dmul+0xde>
   81624:	ebb5 0c03 	subs.w	ip, r5, r3
   81628:	bf04      	itt	eq
   8162a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8162e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81632:	f150 0000 	adcs.w	r0, r0, #0
   81636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8163a:	bd70      	pop	{r4, r5, r6, pc}
   8163c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81640:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81644:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81648:	bfc2      	ittt	gt
   8164a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8164e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81652:	bd70      	popgt	{r4, r5, r6, pc}
   81654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81658:	f04f 0e00 	mov.w	lr, #0
   8165c:	3c01      	subs	r4, #1
   8165e:	e690      	b.n	81382 <__aeabi_dmul+0xde>
   81660:	ea45 0e06 	orr.w	lr, r5, r6
   81664:	e68d      	b.n	81382 <__aeabi_dmul+0xde>
   81666:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8166a:	ea94 0f0c 	teq	r4, ip
   8166e:	bf08      	it	eq
   81670:	ea95 0f0c 	teqeq	r5, ip
   81674:	f43f af3b 	beq.w	814ee <__aeabi_dmul+0x24a>
   81678:	ea94 0f0c 	teq	r4, ip
   8167c:	d10a      	bne.n	81694 <__aeabi_ddiv+0x19c>
   8167e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81682:	f47f af34 	bne.w	814ee <__aeabi_dmul+0x24a>
   81686:	ea95 0f0c 	teq	r5, ip
   8168a:	f47f af25 	bne.w	814d8 <__aeabi_dmul+0x234>
   8168e:	4610      	mov	r0, r2
   81690:	4619      	mov	r1, r3
   81692:	e72c      	b.n	814ee <__aeabi_dmul+0x24a>
   81694:	ea95 0f0c 	teq	r5, ip
   81698:	d106      	bne.n	816a8 <__aeabi_ddiv+0x1b0>
   8169a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8169e:	f43f aefd 	beq.w	8149c <__aeabi_dmul+0x1f8>
   816a2:	4610      	mov	r0, r2
   816a4:	4619      	mov	r1, r3
   816a6:	e722      	b.n	814ee <__aeabi_dmul+0x24a>
   816a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816ac:	bf18      	it	ne
   816ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816b2:	f47f aec5 	bne.w	81440 <__aeabi_dmul+0x19c>
   816b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   816ba:	f47f af0d 	bne.w	814d8 <__aeabi_dmul+0x234>
   816be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   816c2:	f47f aeeb 	bne.w	8149c <__aeabi_dmul+0x1f8>
   816c6:	e712      	b.n	814ee <__aeabi_dmul+0x24a>

000816c8 <__aeabi_d2f>:
   816c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   816cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   816d0:	bf24      	itt	cs
   816d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   816d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   816da:	d90d      	bls.n	816f8 <__aeabi_d2f+0x30>
   816dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   816e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   816e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   816e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   816ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   816f0:	bf08      	it	eq
   816f2:	f020 0001 	biceq.w	r0, r0, #1
   816f6:	4770      	bx	lr
   816f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   816fc:	d121      	bne.n	81742 <__aeabi_d2f+0x7a>
   816fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   81702:	bfbc      	itt	lt
   81704:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   81708:	4770      	bxlt	lr
   8170a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8170e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   81712:	f1c2 0218 	rsb	r2, r2, #24
   81716:	f1c2 0c20 	rsb	ip, r2, #32
   8171a:	fa10 f30c 	lsls.w	r3, r0, ip
   8171e:	fa20 f002 	lsr.w	r0, r0, r2
   81722:	bf18      	it	ne
   81724:	f040 0001 	orrne.w	r0, r0, #1
   81728:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8172c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81730:	fa03 fc0c 	lsl.w	ip, r3, ip
   81734:	ea40 000c 	orr.w	r0, r0, ip
   81738:	fa23 f302 	lsr.w	r3, r3, r2
   8173c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81740:	e7cc      	b.n	816dc <__aeabi_d2f+0x14>
   81742:	ea7f 5362 	mvns.w	r3, r2, asr #21
   81746:	d107      	bne.n	81758 <__aeabi_d2f+0x90>
   81748:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8174c:	bf1e      	ittt	ne
   8174e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   81752:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   81756:	4770      	bxne	lr
   81758:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8175c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81760:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81764:	4770      	bx	lr
   81766:	bf00      	nop

00081768 <__aeabi_frsub>:
   81768:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8176c:	e002      	b.n	81774 <__addsf3>
   8176e:	bf00      	nop

00081770 <__aeabi_fsub>:
   81770:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081774 <__addsf3>:
   81774:	0042      	lsls	r2, r0, #1
   81776:	bf1f      	itttt	ne
   81778:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8177c:	ea92 0f03 	teqne	r2, r3
   81780:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81784:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81788:	d06a      	beq.n	81860 <__addsf3+0xec>
   8178a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8178e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81792:	bfc1      	itttt	gt
   81794:	18d2      	addgt	r2, r2, r3
   81796:	4041      	eorgt	r1, r0
   81798:	4048      	eorgt	r0, r1
   8179a:	4041      	eorgt	r1, r0
   8179c:	bfb8      	it	lt
   8179e:	425b      	neglt	r3, r3
   817a0:	2b19      	cmp	r3, #25
   817a2:	bf88      	it	hi
   817a4:	4770      	bxhi	lr
   817a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   817aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   817b2:	bf18      	it	ne
   817b4:	4240      	negne	r0, r0
   817b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   817ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   817be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   817c2:	bf18      	it	ne
   817c4:	4249      	negne	r1, r1
   817c6:	ea92 0f03 	teq	r2, r3
   817ca:	d03f      	beq.n	8184c <__addsf3+0xd8>
   817cc:	f1a2 0201 	sub.w	r2, r2, #1
   817d0:	fa41 fc03 	asr.w	ip, r1, r3
   817d4:	eb10 000c 	adds.w	r0, r0, ip
   817d8:	f1c3 0320 	rsb	r3, r3, #32
   817dc:	fa01 f103 	lsl.w	r1, r1, r3
   817e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   817e4:	d502      	bpl.n	817ec <__addsf3+0x78>
   817e6:	4249      	negs	r1, r1
   817e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   817ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   817f0:	d313      	bcc.n	8181a <__addsf3+0xa6>
   817f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   817f6:	d306      	bcc.n	81806 <__addsf3+0x92>
   817f8:	0840      	lsrs	r0, r0, #1
   817fa:	ea4f 0131 	mov.w	r1, r1, rrx
   817fe:	f102 0201 	add.w	r2, r2, #1
   81802:	2afe      	cmp	r2, #254	; 0xfe
   81804:	d251      	bcs.n	818aa <__addsf3+0x136>
   81806:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8180a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8180e:	bf08      	it	eq
   81810:	f020 0001 	biceq.w	r0, r0, #1
   81814:	ea40 0003 	orr.w	r0, r0, r3
   81818:	4770      	bx	lr
   8181a:	0049      	lsls	r1, r1, #1
   8181c:	eb40 0000 	adc.w	r0, r0, r0
   81820:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81824:	f1a2 0201 	sub.w	r2, r2, #1
   81828:	d1ed      	bne.n	81806 <__addsf3+0x92>
   8182a:	fab0 fc80 	clz	ip, r0
   8182e:	f1ac 0c08 	sub.w	ip, ip, #8
   81832:	ebb2 020c 	subs.w	r2, r2, ip
   81836:	fa00 f00c 	lsl.w	r0, r0, ip
   8183a:	bfaa      	itet	ge
   8183c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81840:	4252      	neglt	r2, r2
   81842:	4318      	orrge	r0, r3
   81844:	bfbc      	itt	lt
   81846:	40d0      	lsrlt	r0, r2
   81848:	4318      	orrlt	r0, r3
   8184a:	4770      	bx	lr
   8184c:	f092 0f00 	teq	r2, #0
   81850:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81854:	bf06      	itte	eq
   81856:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8185a:	3201      	addeq	r2, #1
   8185c:	3b01      	subne	r3, #1
   8185e:	e7b5      	b.n	817cc <__addsf3+0x58>
   81860:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81864:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81868:	bf18      	it	ne
   8186a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8186e:	d021      	beq.n	818b4 <__addsf3+0x140>
   81870:	ea92 0f03 	teq	r2, r3
   81874:	d004      	beq.n	81880 <__addsf3+0x10c>
   81876:	f092 0f00 	teq	r2, #0
   8187a:	bf08      	it	eq
   8187c:	4608      	moveq	r0, r1
   8187e:	4770      	bx	lr
   81880:	ea90 0f01 	teq	r0, r1
   81884:	bf1c      	itt	ne
   81886:	2000      	movne	r0, #0
   81888:	4770      	bxne	lr
   8188a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8188e:	d104      	bne.n	8189a <__addsf3+0x126>
   81890:	0040      	lsls	r0, r0, #1
   81892:	bf28      	it	cs
   81894:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81898:	4770      	bx	lr
   8189a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8189e:	bf3c      	itt	cc
   818a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   818a4:	4770      	bxcc	lr
   818a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   818aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   818ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818b2:	4770      	bx	lr
   818b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   818b8:	bf16      	itet	ne
   818ba:	4608      	movne	r0, r1
   818bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   818c0:	4601      	movne	r1, r0
   818c2:	0242      	lsls	r2, r0, #9
   818c4:	bf06      	itte	eq
   818c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   818ca:	ea90 0f01 	teqeq	r0, r1
   818ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   818d2:	4770      	bx	lr

000818d4 <__aeabi_ui2f>:
   818d4:	f04f 0300 	mov.w	r3, #0
   818d8:	e004      	b.n	818e4 <__aeabi_i2f+0x8>
   818da:	bf00      	nop

000818dc <__aeabi_i2f>:
   818dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   818e0:	bf48      	it	mi
   818e2:	4240      	negmi	r0, r0
   818e4:	ea5f 0c00 	movs.w	ip, r0
   818e8:	bf08      	it	eq
   818ea:	4770      	bxeq	lr
   818ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   818f0:	4601      	mov	r1, r0
   818f2:	f04f 0000 	mov.w	r0, #0
   818f6:	e01c      	b.n	81932 <__aeabi_l2f+0x2a>

000818f8 <__aeabi_ul2f>:
   818f8:	ea50 0201 	orrs.w	r2, r0, r1
   818fc:	bf08      	it	eq
   818fe:	4770      	bxeq	lr
   81900:	f04f 0300 	mov.w	r3, #0
   81904:	e00a      	b.n	8191c <__aeabi_l2f+0x14>
   81906:	bf00      	nop

00081908 <__aeabi_l2f>:
   81908:	ea50 0201 	orrs.w	r2, r0, r1
   8190c:	bf08      	it	eq
   8190e:	4770      	bxeq	lr
   81910:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81914:	d502      	bpl.n	8191c <__aeabi_l2f+0x14>
   81916:	4240      	negs	r0, r0
   81918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8191c:	ea5f 0c01 	movs.w	ip, r1
   81920:	bf02      	ittt	eq
   81922:	4684      	moveq	ip, r0
   81924:	4601      	moveq	r1, r0
   81926:	2000      	moveq	r0, #0
   81928:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8192c:	bf08      	it	eq
   8192e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81932:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81936:	fabc f28c 	clz	r2, ip
   8193a:	3a08      	subs	r2, #8
   8193c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81940:	db10      	blt.n	81964 <__aeabi_l2f+0x5c>
   81942:	fa01 fc02 	lsl.w	ip, r1, r2
   81946:	4463      	add	r3, ip
   81948:	fa00 fc02 	lsl.w	ip, r0, r2
   8194c:	f1c2 0220 	rsb	r2, r2, #32
   81950:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81954:	fa20 f202 	lsr.w	r2, r0, r2
   81958:	eb43 0002 	adc.w	r0, r3, r2
   8195c:	bf08      	it	eq
   8195e:	f020 0001 	biceq.w	r0, r0, #1
   81962:	4770      	bx	lr
   81964:	f102 0220 	add.w	r2, r2, #32
   81968:	fa01 fc02 	lsl.w	ip, r1, r2
   8196c:	f1c2 0220 	rsb	r2, r2, #32
   81970:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81974:	fa21 f202 	lsr.w	r2, r1, r2
   81978:	eb43 0002 	adc.w	r0, r3, r2
   8197c:	bf08      	it	eq
   8197e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81982:	4770      	bx	lr

00081984 <__aeabi_fmul>:
   81984:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81988:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8198c:	bf1e      	ittt	ne
   8198e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81992:	ea92 0f0c 	teqne	r2, ip
   81996:	ea93 0f0c 	teqne	r3, ip
   8199a:	d06f      	beq.n	81a7c <__aeabi_fmul+0xf8>
   8199c:	441a      	add	r2, r3
   8199e:	ea80 0c01 	eor.w	ip, r0, r1
   819a2:	0240      	lsls	r0, r0, #9
   819a4:	bf18      	it	ne
   819a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   819aa:	d01e      	beq.n	819ea <__aeabi_fmul+0x66>
   819ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   819b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   819b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   819b8:	fba0 3101 	umull	r3, r1, r0, r1
   819bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   819c4:	bf3e      	ittt	cc
   819c6:	0049      	lslcc	r1, r1, #1
   819c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   819cc:	005b      	lslcc	r3, r3, #1
   819ce:	ea40 0001 	orr.w	r0, r0, r1
   819d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   819d6:	2afd      	cmp	r2, #253	; 0xfd
   819d8:	d81d      	bhi.n	81a16 <__aeabi_fmul+0x92>
   819da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   819de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   819e2:	bf08      	it	eq
   819e4:	f020 0001 	biceq.w	r0, r0, #1
   819e8:	4770      	bx	lr
   819ea:	f090 0f00 	teq	r0, #0
   819ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   819f2:	bf08      	it	eq
   819f4:	0249      	lsleq	r1, r1, #9
   819f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   819fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   819fe:	3a7f      	subs	r2, #127	; 0x7f
   81a00:	bfc2      	ittt	gt
   81a02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a0a:	4770      	bxgt	lr
   81a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a10:	f04f 0300 	mov.w	r3, #0
   81a14:	3a01      	subs	r2, #1
   81a16:	dc5d      	bgt.n	81ad4 <__aeabi_fmul+0x150>
   81a18:	f112 0f19 	cmn.w	r2, #25
   81a1c:	bfdc      	itt	le
   81a1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81a22:	4770      	bxle	lr
   81a24:	f1c2 0200 	rsb	r2, r2, #0
   81a28:	0041      	lsls	r1, r0, #1
   81a2a:	fa21 f102 	lsr.w	r1, r1, r2
   81a2e:	f1c2 0220 	rsb	r2, r2, #32
   81a32:	fa00 fc02 	lsl.w	ip, r0, r2
   81a36:	ea5f 0031 	movs.w	r0, r1, rrx
   81a3a:	f140 0000 	adc.w	r0, r0, #0
   81a3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81a42:	bf08      	it	eq
   81a44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81a48:	4770      	bx	lr
   81a4a:	f092 0f00 	teq	r2, #0
   81a4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a52:	bf02      	ittt	eq
   81a54:	0040      	lsleq	r0, r0, #1
   81a56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a5a:	3a01      	subeq	r2, #1
   81a5c:	d0f9      	beq.n	81a52 <__aeabi_fmul+0xce>
   81a5e:	ea40 000c 	orr.w	r0, r0, ip
   81a62:	f093 0f00 	teq	r3, #0
   81a66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a6a:	bf02      	ittt	eq
   81a6c:	0049      	lsleq	r1, r1, #1
   81a6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81a72:	3b01      	subeq	r3, #1
   81a74:	d0f9      	beq.n	81a6a <__aeabi_fmul+0xe6>
   81a76:	ea41 010c 	orr.w	r1, r1, ip
   81a7a:	e78f      	b.n	8199c <__aeabi_fmul+0x18>
   81a7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81a80:	ea92 0f0c 	teq	r2, ip
   81a84:	bf18      	it	ne
   81a86:	ea93 0f0c 	teqne	r3, ip
   81a8a:	d00a      	beq.n	81aa2 <__aeabi_fmul+0x11e>
   81a8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81a90:	bf18      	it	ne
   81a92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81a96:	d1d8      	bne.n	81a4a <__aeabi_fmul+0xc6>
   81a98:	ea80 0001 	eor.w	r0, r0, r1
   81a9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81aa0:	4770      	bx	lr
   81aa2:	f090 0f00 	teq	r0, #0
   81aa6:	bf17      	itett	ne
   81aa8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81aac:	4608      	moveq	r0, r1
   81aae:	f091 0f00 	teqne	r1, #0
   81ab2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81ab6:	d014      	beq.n	81ae2 <__aeabi_fmul+0x15e>
   81ab8:	ea92 0f0c 	teq	r2, ip
   81abc:	d101      	bne.n	81ac2 <__aeabi_fmul+0x13e>
   81abe:	0242      	lsls	r2, r0, #9
   81ac0:	d10f      	bne.n	81ae2 <__aeabi_fmul+0x15e>
   81ac2:	ea93 0f0c 	teq	r3, ip
   81ac6:	d103      	bne.n	81ad0 <__aeabi_fmul+0x14c>
   81ac8:	024b      	lsls	r3, r1, #9
   81aca:	bf18      	it	ne
   81acc:	4608      	movne	r0, r1
   81ace:	d108      	bne.n	81ae2 <__aeabi_fmul+0x15e>
   81ad0:	ea80 0001 	eor.w	r0, r0, r1
   81ad4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81ae0:	4770      	bx	lr
   81ae2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81ae6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81aea:	4770      	bx	lr

00081aec <__aeabi_fdiv>:
   81aec:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81af4:	bf1e      	ittt	ne
   81af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81afa:	ea92 0f0c 	teqne	r2, ip
   81afe:	ea93 0f0c 	teqne	r3, ip
   81b02:	d069      	beq.n	81bd8 <__aeabi_fdiv+0xec>
   81b04:	eba2 0203 	sub.w	r2, r2, r3
   81b08:	ea80 0c01 	eor.w	ip, r0, r1
   81b0c:	0249      	lsls	r1, r1, #9
   81b0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81b12:	d037      	beq.n	81b84 <__aeabi_fdiv+0x98>
   81b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81b18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81b1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81b20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81b24:	428b      	cmp	r3, r1
   81b26:	bf38      	it	cc
   81b28:	005b      	lslcc	r3, r3, #1
   81b2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81b2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81b32:	428b      	cmp	r3, r1
   81b34:	bf24      	itt	cs
   81b36:	1a5b      	subcs	r3, r3, r1
   81b38:	ea40 000c 	orrcs.w	r0, r0, ip
   81b3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81b40:	bf24      	itt	cs
   81b42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81b46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81b4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81b4e:	bf24      	itt	cs
   81b50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81b54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81b58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81b5c:	bf24      	itt	cs
   81b5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81b62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81b66:	011b      	lsls	r3, r3, #4
   81b68:	bf18      	it	ne
   81b6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81b6e:	d1e0      	bne.n	81b32 <__aeabi_fdiv+0x46>
   81b70:	2afd      	cmp	r2, #253	; 0xfd
   81b72:	f63f af50 	bhi.w	81a16 <__aeabi_fmul+0x92>
   81b76:	428b      	cmp	r3, r1
   81b78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81b7c:	bf08      	it	eq
   81b7e:	f020 0001 	biceq.w	r0, r0, #1
   81b82:	4770      	bx	lr
   81b84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81b88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81b8c:	327f      	adds	r2, #127	; 0x7f
   81b8e:	bfc2      	ittt	gt
   81b90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81b94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81b98:	4770      	bxgt	lr
   81b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81b9e:	f04f 0300 	mov.w	r3, #0
   81ba2:	3a01      	subs	r2, #1
   81ba4:	e737      	b.n	81a16 <__aeabi_fmul+0x92>
   81ba6:	f092 0f00 	teq	r2, #0
   81baa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81bae:	bf02      	ittt	eq
   81bb0:	0040      	lsleq	r0, r0, #1
   81bb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81bb6:	3a01      	subeq	r2, #1
   81bb8:	d0f9      	beq.n	81bae <__aeabi_fdiv+0xc2>
   81bba:	ea40 000c 	orr.w	r0, r0, ip
   81bbe:	f093 0f00 	teq	r3, #0
   81bc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81bc6:	bf02      	ittt	eq
   81bc8:	0049      	lsleq	r1, r1, #1
   81bca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81bce:	3b01      	subeq	r3, #1
   81bd0:	d0f9      	beq.n	81bc6 <__aeabi_fdiv+0xda>
   81bd2:	ea41 010c 	orr.w	r1, r1, ip
   81bd6:	e795      	b.n	81b04 <__aeabi_fdiv+0x18>
   81bd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81bdc:	ea92 0f0c 	teq	r2, ip
   81be0:	d108      	bne.n	81bf4 <__aeabi_fdiv+0x108>
   81be2:	0242      	lsls	r2, r0, #9
   81be4:	f47f af7d 	bne.w	81ae2 <__aeabi_fmul+0x15e>
   81be8:	ea93 0f0c 	teq	r3, ip
   81bec:	f47f af70 	bne.w	81ad0 <__aeabi_fmul+0x14c>
   81bf0:	4608      	mov	r0, r1
   81bf2:	e776      	b.n	81ae2 <__aeabi_fmul+0x15e>
   81bf4:	ea93 0f0c 	teq	r3, ip
   81bf8:	d104      	bne.n	81c04 <__aeabi_fdiv+0x118>
   81bfa:	024b      	lsls	r3, r1, #9
   81bfc:	f43f af4c 	beq.w	81a98 <__aeabi_fmul+0x114>
   81c00:	4608      	mov	r0, r1
   81c02:	e76e      	b.n	81ae2 <__aeabi_fmul+0x15e>
   81c04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81c08:	bf18      	it	ne
   81c0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81c0e:	d1ca      	bne.n	81ba6 <__aeabi_fdiv+0xba>
   81c10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81c14:	f47f af5c 	bne.w	81ad0 <__aeabi_fmul+0x14c>
   81c18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81c1c:	f47f af3c 	bne.w	81a98 <__aeabi_fmul+0x114>
   81c20:	e75f      	b.n	81ae2 <__aeabi_fmul+0x15e>
   81c22:	bf00      	nop

00081c24 <__gesf2>:
   81c24:	f04f 3cff 	mov.w	ip, #4294967295
   81c28:	e006      	b.n	81c38 <__cmpsf2+0x4>
   81c2a:	bf00      	nop

00081c2c <__lesf2>:
   81c2c:	f04f 0c01 	mov.w	ip, #1
   81c30:	e002      	b.n	81c38 <__cmpsf2+0x4>
   81c32:	bf00      	nop

00081c34 <__cmpsf2>:
   81c34:	f04f 0c01 	mov.w	ip, #1
   81c38:	f84d cd04 	str.w	ip, [sp, #-4]!
   81c3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81c48:	bf18      	it	ne
   81c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81c4e:	d011      	beq.n	81c74 <__cmpsf2+0x40>
   81c50:	b001      	add	sp, #4
   81c52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81c56:	bf18      	it	ne
   81c58:	ea90 0f01 	teqne	r0, r1
   81c5c:	bf58      	it	pl
   81c5e:	ebb2 0003 	subspl.w	r0, r2, r3
   81c62:	bf88      	it	hi
   81c64:	17c8      	asrhi	r0, r1, #31
   81c66:	bf38      	it	cc
   81c68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81c6c:	bf18      	it	ne
   81c6e:	f040 0001 	orrne.w	r0, r0, #1
   81c72:	4770      	bx	lr
   81c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81c78:	d102      	bne.n	81c80 <__cmpsf2+0x4c>
   81c7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81c7e:	d105      	bne.n	81c8c <__cmpsf2+0x58>
   81c80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81c84:	d1e4      	bne.n	81c50 <__cmpsf2+0x1c>
   81c86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81c8a:	d0e1      	beq.n	81c50 <__cmpsf2+0x1c>
   81c8c:	f85d 0b04 	ldr.w	r0, [sp], #4
   81c90:	4770      	bx	lr
   81c92:	bf00      	nop

00081c94 <__aeabi_cfrcmple>:
   81c94:	4684      	mov	ip, r0
   81c96:	4608      	mov	r0, r1
   81c98:	4661      	mov	r1, ip
   81c9a:	e7ff      	b.n	81c9c <__aeabi_cfcmpeq>

00081c9c <__aeabi_cfcmpeq>:
   81c9c:	b50f      	push	{r0, r1, r2, r3, lr}
   81c9e:	f7ff ffc9 	bl	81c34 <__cmpsf2>
   81ca2:	2800      	cmp	r0, #0
   81ca4:	bf48      	it	mi
   81ca6:	f110 0f00 	cmnmi.w	r0, #0
   81caa:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081cac <__aeabi_fcmpeq>:
   81cac:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cb0:	f7ff fff4 	bl	81c9c <__aeabi_cfcmpeq>
   81cb4:	bf0c      	ite	eq
   81cb6:	2001      	moveq	r0, #1
   81cb8:	2000      	movne	r0, #0
   81cba:	f85d fb08 	ldr.w	pc, [sp], #8
   81cbe:	bf00      	nop

00081cc0 <__aeabi_fcmplt>:
   81cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cc4:	f7ff ffea 	bl	81c9c <__aeabi_cfcmpeq>
   81cc8:	bf34      	ite	cc
   81cca:	2001      	movcc	r0, #1
   81ccc:	2000      	movcs	r0, #0
   81cce:	f85d fb08 	ldr.w	pc, [sp], #8
   81cd2:	bf00      	nop

00081cd4 <__aeabi_fcmple>:
   81cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cd8:	f7ff ffe0 	bl	81c9c <__aeabi_cfcmpeq>
   81cdc:	bf94      	ite	ls
   81cde:	2001      	movls	r0, #1
   81ce0:	2000      	movhi	r0, #0
   81ce2:	f85d fb08 	ldr.w	pc, [sp], #8
   81ce6:	bf00      	nop

00081ce8 <__aeabi_fcmpge>:
   81ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cec:	f7ff ffd2 	bl	81c94 <__aeabi_cfrcmple>
   81cf0:	bf94      	ite	ls
   81cf2:	2001      	movls	r0, #1
   81cf4:	2000      	movhi	r0, #0
   81cf6:	f85d fb08 	ldr.w	pc, [sp], #8
   81cfa:	bf00      	nop

00081cfc <__aeabi_fcmpgt>:
   81cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d00:	f7ff ffc8 	bl	81c94 <__aeabi_cfrcmple>
   81d04:	bf34      	ite	cc
   81d06:	2001      	movcc	r0, #1
   81d08:	2000      	movcs	r0, #0
   81d0a:	f85d fb08 	ldr.w	pc, [sp], #8
   81d0e:	bf00      	nop

00081d10 <__aeabi_f2iz>:
   81d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81d18:	d30f      	bcc.n	81d3a <__aeabi_f2iz+0x2a>
   81d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81d22:	d90d      	bls.n	81d40 <__aeabi_f2iz+0x30>
   81d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81d2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81d30:	fa23 f002 	lsr.w	r0, r3, r2
   81d34:	bf18      	it	ne
   81d36:	4240      	negne	r0, r0
   81d38:	4770      	bx	lr
   81d3a:	f04f 0000 	mov.w	r0, #0
   81d3e:	4770      	bx	lr
   81d40:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81d44:	d101      	bne.n	81d4a <__aeabi_f2iz+0x3a>
   81d46:	0242      	lsls	r2, r0, #9
   81d48:	d105      	bne.n	81d56 <__aeabi_f2iz+0x46>
   81d4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81d4e:	bf08      	it	eq
   81d50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81d54:	4770      	bx	lr
   81d56:	f04f 0000 	mov.w	r0, #0
   81d5a:	4770      	bx	lr

00081d5c <__aeabi_f2uiz>:
   81d5c:	0042      	lsls	r2, r0, #1
   81d5e:	d20e      	bcs.n	81d7e <__aeabi_f2uiz+0x22>
   81d60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81d64:	d30b      	bcc.n	81d7e <__aeabi_f2uiz+0x22>
   81d66:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81d6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81d6e:	d409      	bmi.n	81d84 <__aeabi_f2uiz+0x28>
   81d70:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81d78:	fa23 f002 	lsr.w	r0, r3, r2
   81d7c:	4770      	bx	lr
   81d7e:	f04f 0000 	mov.w	r0, #0
   81d82:	4770      	bx	lr
   81d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81d88:	d101      	bne.n	81d8e <__aeabi_f2uiz+0x32>
   81d8a:	0242      	lsls	r2, r0, #9
   81d8c:	d102      	bne.n	81d94 <__aeabi_f2uiz+0x38>
   81d8e:	f04f 30ff 	mov.w	r0, #4294967295
   81d92:	4770      	bx	lr
   81d94:	f04f 0000 	mov.w	r0, #0
   81d98:	4770      	bx	lr
   81d9a:	bf00      	nop

00081d9c <__libc_init_array>:
   81d9c:	b570      	push	{r4, r5, r6, lr}
   81d9e:	4e0f      	ldr	r6, [pc, #60]	; (81ddc <__libc_init_array+0x40>)
   81da0:	4d0f      	ldr	r5, [pc, #60]	; (81de0 <__libc_init_array+0x44>)
   81da2:	1b76      	subs	r6, r6, r5
   81da4:	10b6      	asrs	r6, r6, #2
   81da6:	bf18      	it	ne
   81da8:	2400      	movne	r4, #0
   81daa:	d005      	beq.n	81db8 <__libc_init_array+0x1c>
   81dac:	3401      	adds	r4, #1
   81dae:	f855 3b04 	ldr.w	r3, [r5], #4
   81db2:	4798      	blx	r3
   81db4:	42a6      	cmp	r6, r4
   81db6:	d1f9      	bne.n	81dac <__libc_init_array+0x10>
   81db8:	4e0a      	ldr	r6, [pc, #40]	; (81de4 <__libc_init_array+0x48>)
   81dba:	4d0b      	ldr	r5, [pc, #44]	; (81de8 <__libc_init_array+0x4c>)
   81dbc:	f000 f8fc 	bl	81fb8 <_init>
   81dc0:	1b76      	subs	r6, r6, r5
   81dc2:	10b6      	asrs	r6, r6, #2
   81dc4:	bf18      	it	ne
   81dc6:	2400      	movne	r4, #0
   81dc8:	d006      	beq.n	81dd8 <__libc_init_array+0x3c>
   81dca:	3401      	adds	r4, #1
   81dcc:	f855 3b04 	ldr.w	r3, [r5], #4
   81dd0:	4798      	blx	r3
   81dd2:	42a6      	cmp	r6, r4
   81dd4:	d1f9      	bne.n	81dca <__libc_init_array+0x2e>
   81dd6:	bd70      	pop	{r4, r5, r6, pc}
   81dd8:	bd70      	pop	{r4, r5, r6, pc}
   81dda:	bf00      	nop
   81ddc:	00081fc4 	.word	0x00081fc4
   81de0:	00081fc4 	.word	0x00081fc4
   81de4:	00081fcc 	.word	0x00081fcc
   81de8:	00081fc4 	.word	0x00081fc4

00081dec <register_fini>:
   81dec:	4b02      	ldr	r3, [pc, #8]	; (81df8 <register_fini+0xc>)
   81dee:	b113      	cbz	r3, 81df6 <register_fini+0xa>
   81df0:	4802      	ldr	r0, [pc, #8]	; (81dfc <register_fini+0x10>)
   81df2:	f000 b805 	b.w	81e00 <atexit>
   81df6:	4770      	bx	lr
   81df8:	00000000 	.word	0x00000000
   81dfc:	00081e0d 	.word	0x00081e0d

00081e00 <atexit>:
   81e00:	2300      	movs	r3, #0
   81e02:	4601      	mov	r1, r0
   81e04:	461a      	mov	r2, r3
   81e06:	4618      	mov	r0, r3
   81e08:	f000 b81e 	b.w	81e48 <__register_exitproc>

00081e0c <__libc_fini_array>:
   81e0c:	b538      	push	{r3, r4, r5, lr}
   81e0e:	4c0a      	ldr	r4, [pc, #40]	; (81e38 <__libc_fini_array+0x2c>)
   81e10:	4d0a      	ldr	r5, [pc, #40]	; (81e3c <__libc_fini_array+0x30>)
   81e12:	1b64      	subs	r4, r4, r5
   81e14:	10a4      	asrs	r4, r4, #2
   81e16:	d00a      	beq.n	81e2e <__libc_fini_array+0x22>
   81e18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81e1c:	3b01      	subs	r3, #1
   81e1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81e22:	3c01      	subs	r4, #1
   81e24:	f855 3904 	ldr.w	r3, [r5], #-4
   81e28:	4798      	blx	r3
   81e2a:	2c00      	cmp	r4, #0
   81e2c:	d1f9      	bne.n	81e22 <__libc_fini_array+0x16>
   81e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81e32:	f000 b8cb 	b.w	81fcc <_fini>
   81e36:	bf00      	nop
   81e38:	00081fdc 	.word	0x00081fdc
   81e3c:	00081fd8 	.word	0x00081fd8

00081e40 <__retarget_lock_acquire_recursive>:
   81e40:	4770      	bx	lr
   81e42:	bf00      	nop

00081e44 <__retarget_lock_release_recursive>:
   81e44:	4770      	bx	lr
   81e46:	bf00      	nop

00081e48 <__register_exitproc>:
   81e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81e4c:	4d2c      	ldr	r5, [pc, #176]	; (81f00 <__register_exitproc+0xb8>)
   81e4e:	4606      	mov	r6, r0
   81e50:	6828      	ldr	r0, [r5, #0]
   81e52:	4698      	mov	r8, r3
   81e54:	460f      	mov	r7, r1
   81e56:	4691      	mov	r9, r2
   81e58:	f7ff fff2 	bl	81e40 <__retarget_lock_acquire_recursive>
   81e5c:	4b29      	ldr	r3, [pc, #164]	; (81f04 <__register_exitproc+0xbc>)
   81e5e:	681c      	ldr	r4, [r3, #0]
   81e60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81e64:	2b00      	cmp	r3, #0
   81e66:	d03e      	beq.n	81ee6 <__register_exitproc+0x9e>
   81e68:	685a      	ldr	r2, [r3, #4]
   81e6a:	2a1f      	cmp	r2, #31
   81e6c:	dc1c      	bgt.n	81ea8 <__register_exitproc+0x60>
   81e6e:	f102 0e01 	add.w	lr, r2, #1
   81e72:	b176      	cbz	r6, 81e92 <__register_exitproc+0x4a>
   81e74:	2101      	movs	r1, #1
   81e76:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81e7a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81e7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81e82:	4091      	lsls	r1, r2
   81e84:	4308      	orrs	r0, r1
   81e86:	2e02      	cmp	r6, #2
   81e88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81e8c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81e90:	d023      	beq.n	81eda <__register_exitproc+0x92>
   81e92:	3202      	adds	r2, #2
   81e94:	f8c3 e004 	str.w	lr, [r3, #4]
   81e98:	6828      	ldr	r0, [r5, #0]
   81e9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81e9e:	f7ff ffd1 	bl	81e44 <__retarget_lock_release_recursive>
   81ea2:	2000      	movs	r0, #0
   81ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ea8:	4b17      	ldr	r3, [pc, #92]	; (81f08 <__register_exitproc+0xc0>)
   81eaa:	b30b      	cbz	r3, 81ef0 <__register_exitproc+0xa8>
   81eac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81eb0:	f3af 8000 	nop.w
   81eb4:	4603      	mov	r3, r0
   81eb6:	b1d8      	cbz	r0, 81ef0 <__register_exitproc+0xa8>
   81eb8:	2000      	movs	r0, #0
   81eba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81ebe:	f04f 0e01 	mov.w	lr, #1
   81ec2:	6058      	str	r0, [r3, #4]
   81ec4:	6019      	str	r1, [r3, #0]
   81ec6:	4602      	mov	r2, r0
   81ec8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81ecc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81ed0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81ed4:	2e00      	cmp	r6, #0
   81ed6:	d0dc      	beq.n	81e92 <__register_exitproc+0x4a>
   81ed8:	e7cc      	b.n	81e74 <__register_exitproc+0x2c>
   81eda:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81ede:	4301      	orrs	r1, r0
   81ee0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81ee4:	e7d5      	b.n	81e92 <__register_exitproc+0x4a>
   81ee6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81eea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81eee:	e7bb      	b.n	81e68 <__register_exitproc+0x20>
   81ef0:	6828      	ldr	r0, [r5, #0]
   81ef2:	f7ff ffa7 	bl	81e44 <__retarget_lock_release_recursive>
   81ef6:	f04f 30ff 	mov.w	r0, #4294967295
   81efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81efe:	bf00      	nop
   81f00:	20000438 	.word	0x20000438
   81f04:	00081fb4 	.word	0x00081fb4
   81f08:	00000000 	.word	0x00000000
   81f0c:	304e4143 	.word	0x304e4143
   81f10:	73656d20 	.word	0x73656d20
   81f14:	65676173 	.word	0x65676173
   81f18:	72726120 	.word	0x72726120
   81f1c:	64657669 	.word	0x64657669
   81f20:	206e6920 	.word	0x206e6920
   81f24:	2d6e6f6e 	.word	0x2d6e6f6e
   81f28:	64657375 	.word	0x64657375
   81f2c:	69616d20 	.word	0x69616d20
   81f30:	786f626c 	.word	0x786f626c
   81f34:	00000d0a 	.word	0x00000d0a
   81f38:	6c6c6548 	.word	0x6c6c6548
   81f3c:	6f77206f 	.word	0x6f77206f
   81f40:	00646c72 	.word	0x00646c72
   81f44:	004c4f47 	.word	0x004c4f47
   81f48:	00006425 	.word	0x00006425
   81f4c:	746e6573 	.word	0x746e6573
   81f50:	73656d20 	.word	0x73656d20
   81f54:	65676173 	.word	0x65676173
   81f58:	00000000 	.word	0x00000000
   81f5c:	25203a72 	.word	0x25203a72
   81f60:	6430312d 	.word	0x6430312d
   81f64:	79202020 	.word	0x79202020
   81f68:	2d25203a 	.word	0x2d25203a
   81f6c:	20643031 	.word	0x20643031
   81f70:	3a652020 	.word	0x3a652020
   81f74:	312d2520 	.word	0x312d2520
   81f78:	20206430 	.word	0x20206430
   81f7c:	203a7520 	.word	0x203a7520
   81f80:	30312d25 	.word	0x30312d25
   81f84:	20202064 	.word	0x20202064
   81f88:	00000000 	.word	0x00000000
   81f8c:	6c756e28 	.word	0x6c756e28
   81f90:	0000296c 	.word	0x0000296c
   81f94:	3a525245 	.word	0x3a525245
   81f98:	52415520 	.word	0x52415520
   81f9c:	58522054 	.word	0x58522054
   81fa0:	66756220 	.word	0x66756220
   81fa4:	20726566 	.word	0x20726566
   81fa8:	66207369 	.word	0x66207369
   81fac:	0a6c6c75 	.word	0x0a6c6c75
   81fb0:	0000000d 	.word	0x0000000d

00081fb4 <_global_impure_ptr>:
   81fb4:	20000010                                ... 

00081fb8 <_init>:
   81fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81fba:	bf00      	nop
   81fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81fbe:	bc08      	pop	{r3}
   81fc0:	469e      	mov	lr, r3
   81fc2:	4770      	bx	lr

00081fc4 <__init_array_start>:
   81fc4:	00081ded 	.word	0x00081ded

00081fc8 <__frame_dummy_init_array_entry>:
   81fc8:	00080119                                ....

00081fcc <_fini>:
   81fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81fce:	bf00      	nop
   81fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81fd2:	bc08      	pop	{r3}
   81fd4:	469e      	mov	lr, r3
   81fd6:	4770      	bx	lr

00081fd8 <__fini_array_start>:
   81fd8:	000800f5 	.word	0x000800f5
