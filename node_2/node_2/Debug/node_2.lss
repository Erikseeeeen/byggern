
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ea4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00081ea4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  2000043c  000822e0  0002043c  2**2
                  ALLOC
  3 .stack        00000404  200004cc  00082370  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008d0  00082774  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007023  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001353  00000000  00000000  000274e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000238  00000000  00000000  00028834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001a8  00000000  00000000  00028a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013907  00000000  00000000  00028c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000056e7  00000000  00000000  0003c51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00056537  00000000  00000000  00041c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000008c8  00000000  00000000  0009813c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000010d1  00000000  00000000  00098a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 08 00 20 a9 04 08 00 a5 04 08 00 a5 04 08 00     ... ............
   80010:	a5 04 08 00 a5 04 08 00 a5 04 08 00 00 00 00 00     ................
	...
   8002c:	a5 04 08 00 a5 04 08 00 00 00 00 00 a5 04 08 00     ................
   8003c:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   8004c:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   8005c:	a5 04 08 00 a5 0d 08 00 a5 04 08 00 00 00 00 00     ................
   8006c:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
	...
   80084:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   80094:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800a4:	00 00 00 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800b4:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800c4:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800d4:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800e4:	a5 04 08 00 a5 04 08 00 3d 03 08 00 a5 04 08 00     ........=.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00081ea4 	.word	0x00081ea4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081ea4 	.word	0x00081ea4
   80154:	20000440 	.word	0x20000440
   80158:	00081ea4 	.word	0x00081ea4
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Enable peripheral clock
	PMC->PMC_PCR |= (ID_ADC << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   80160:	4a13      	ldr	r2, [pc, #76]	; (801b0 <adc_init+0x50>)
   80162:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   80166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   8016a:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   8016e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_ADC-32));
   80172:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80176:	f043 0320 	orr.w	r3, r3, #32
   8017a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Enable Channel Register
	ADC->ADC_WPMR &= ~(1);
   8017e:	4b0d      	ldr	r3, [pc, #52]	; (801b4 <adc_init+0x54>)
   80180:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80184:	f022 0201 	bic.w	r2, r2, #1
   80188:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ADC->ADC_CHER |= (ADC_CHDR_CH10);
   8018c:	691a      	ldr	r2, [r3, #16]
   8018e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80192:	611a      	str	r2, [r3, #16]
	
	// Single-Ended, Freerun Mode
	ADC->ADC_MR |= (1 << 7);
   80194:	685a      	ldr	r2, [r3, #4]
   80196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8019a:	605a      	str	r2, [r3, #4]
	ADC->ADC_COR &= ~(1 << 26);
   8019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8019e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   801a2:	64da      	str	r2, [r3, #76]	; 0x4c
	
	// Begin Analog-to-Digital Conversion
	ADC->ADC_CR |= 1 << 1;
   801a4:	681a      	ldr	r2, [r3, #0]
   801a6:	f042 0202 	orr.w	r2, r2, #2
   801aa:	601a      	str	r2, [r3, #0]
   801ac:	4770      	bx	lr
   801ae:	bf00      	nop
   801b0:	400e0600 	.word	0x400e0600
   801b4:	400c0000 	.word	0x400c0000

000801b8 <adc_receive>:
	
}

int adc_receive(){
	//printf("%d \n", ADC->ADC_CDR[10]);
	return ADC->ADC_CDR[10];
   801b8:	4b01      	ldr	r3, [pc, #4]	; (801c0 <adc_receive+0x8>)
   801ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   801bc:	4770      	bx	lr
   801be:	bf00      	nop
   801c0:	400c0000 	.word	0x400c0000

000801c4 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801c4:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801c6:	1857      	adds	r7, r2, r1
   801c8:	2f08      	cmp	r7, #8
   801ca:	bfd4      	ite	le
   801cc:	2300      	movle	r3, #0
   801ce:	2301      	movgt	r3, #1
   801d0:	2908      	cmp	r1, #8
   801d2:	bf98      	it	ls
   801d4:	2a08      	cmpls	r2, #8
   801d6:	d85c      	bhi.n	80292 <can_init+0xce>
   801d8:	460d      	mov	r5, r1
   801da:	2b00      	cmp	r3, #0
   801dc:	d159      	bne.n	80292 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801de:	4a2e      	ldr	r2, [pc, #184]	; (80298 <can_init+0xd4>)
   801e0:	6813      	ldr	r3, [r2, #0]
   801e2:	f023 0301 	bic.w	r3, r3, #1
   801e6:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801e8:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801ea:	4b2c      	ldr	r3, [pc, #176]	; (8029c <can_init+0xd8>)
   801ec:	f44f 7440 	mov.w	r4, #768	; 0x300
   801f0:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801f2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801f4:	f024 0403 	bic.w	r4, r4, #3
   801f8:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801fa:	2403      	movs	r4, #3
   801fc:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801fe:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80200:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80204:	4c26      	ldr	r4, [pc, #152]	; (802a0 <can_init+0xdc>)
   80206:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8020a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   8020e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80212:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   80216:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   80218:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8021a:	e019      	b.n	80250 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   8021c:	481e      	ldr	r0, [pc, #120]	; (80298 <can_init+0xd4>)
   8021e:	f101 0310 	add.w	r3, r1, #16
   80222:	015b      	lsls	r3, r3, #5
   80224:	18c2      	adds	r2, r0, r3
   80226:	2600      	movs	r6, #0
   80228:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8022a:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   8022e:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80232:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80236:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8023a:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8023c:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80244:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80248:	2301      	movs	r3, #1
   8024a:	408b      	lsls	r3, r1
   8024c:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8024e:	3101      	adds	r1, #1
   80250:	42b9      	cmp	r1, r7
   80252:	dde3      	ble.n	8021c <can_init+0x58>
   80254:	2300      	movs	r3, #0
   80256:	e00d      	b.n	80274 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80258:	490f      	ldr	r1, [pc, #60]	; (80298 <can_init+0xd4>)
   8025a:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8025e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80262:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80266:	f103 0210 	add.w	r2, r3, #16
   8026a:	0152      	lsls	r2, r2, #5
   8026c:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80270:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80272:	3301      	adds	r3, #1
   80274:	42ab      	cmp	r3, r5
   80276:	dbef      	blt.n	80258 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80278:	4b07      	ldr	r3, [pc, #28]	; (80298 <can_init+0xd4>)
   8027a:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8027c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80280:	4a08      	ldr	r2, [pc, #32]	; (802a4 <can_init+0xe0>)
   80282:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80284:	681a      	ldr	r2, [r3, #0]
   80286:	f042 0201 	orr.w	r2, r2, #1
   8028a:	601a      	str	r2, [r3, #0]

	return 0;
   8028c:	2000      	movs	r0, #0
}
   8028e:	bcf0      	pop	{r4, r5, r6, r7}
   80290:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80292:	2001      	movs	r0, #1
   80294:	e7fb      	b.n	8028e <can_init+0xca>
   80296:	bf00      	nop
   80298:	400b4000 	.word	0x400b4000
   8029c:	400e0e00 	.word	0x400e0e00
   802a0:	1000102b 	.word	0x1000102b
   802a4:	e000e100 	.word	0xe000e100

000802a8 <can_init_def_tx_rx_mb>:
{
   802a8:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802aa:	2202      	movs	r2, #2
   802ac:	2101      	movs	r1, #1
   802ae:	4b01      	ldr	r3, [pc, #4]	; (802b4 <can_init_def_tx_rx_mb+0xc>)
   802b0:	4798      	blx	r3
}
   802b2:	bd08      	pop	{r3, pc}
   802b4:	000801c5 	.word	0x000801c5

000802b8 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802b8:	014b      	lsls	r3, r1, #5
   802ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802be:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802c6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ca:	d033      	beq.n	80334 <can_receive+0x7c>
{
   802cc:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802ce:	014b      	lsls	r3, r1, #5
   802d0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802d4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802d8:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802e0:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802e4:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802e8:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802ea:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802ee:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802f2:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802f4:	2300      	movs	r3, #0
   802f6:	e003      	b.n	80300 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802f8:	18c6      	adds	r6, r0, r3
   802fa:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802fc:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802fe:	3301      	adds	r3, #1
   80300:	42ab      	cmp	r3, r5
   80302:	da05      	bge.n	80310 <can_receive+0x58>
			if(i < 4)
   80304:	2b03      	cmp	r3, #3
   80306:	dcf7      	bgt.n	802f8 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   80308:	18c6      	adds	r6, r0, r3
   8030a:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   8030c:	0a24      	lsrs	r4, r4, #8
   8030e:	e7f6      	b.n	802fe <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80310:	4b09      	ldr	r3, [pc, #36]	; (80338 <can_receive+0x80>)
   80312:	f101 0210 	add.w	r2, r1, #16
   80316:	0152      	lsls	r2, r2, #5
   80318:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8031c:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   8031e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80322:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8032a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   8032e:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80330:	bc70      	pop	{r4, r5, r6}
   80332:	4770      	bx	lr
		return 1;
   80334:	2001      	movs	r0, #1
   80336:	4770      	bx	lr
   80338:	400b4000 	.word	0x400b4000

0008033c <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   8033c:	b510      	push	{r4, lr}
   8033e:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80340:	4b1e      	ldr	r3, [pc, #120]	; (803bc <CAN0_Handler+0x80>)
   80342:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80344:	f014 0f06 	tst.w	r4, #6
   80348:	d02b      	beq.n	803a2 <CAN0_Handler+0x66>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8034a:	f014 0f02 	tst.w	r4, #2
   8034e:	d117      	bne.n	80380 <CAN0_Handler+0x44>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80350:	f014 0f04 	tst.w	r4, #4
   80354:	d019      	beq.n	8038a <CAN0_Handler+0x4e>
		
		{
			can_receive(&message, 2);
   80356:	2102      	movs	r1, #2
   80358:	a801      	add	r0, sp, #4
   8035a:	4b19      	ldr	r3, [pc, #100]	; (803c0 <CAN0_Handler+0x84>)
   8035c:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		joystick_x = message.data[0];
   8035e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   80362:	4b18      	ldr	r3, [pc, #96]	; (803c4 <CAN0_Handler+0x88>)
   80364:	701a      	strb	r2, [r3, #0]
		joystick_y = message.data[1];
   80366:	f89d 2008 	ldrb.w	r2, [sp, #8]
   8036a:	4b17      	ldr	r3, [pc, #92]	; (803c8 <CAN0_Handler+0x8c>)
   8036c:	701a      	strb	r2, [r3, #0]
		int button = message.data[2];
   8036e:	f89d 3009 	ldrb.w	r3, [sp, #9]
		//printf("%d", button);
		if(button)
   80372:	b973      	cbnz	r3, 80392 <CAN0_Handler+0x56>
			shoot();
		set_servo_duty();
   80374:	4b15      	ldr	r3, [pc, #84]	; (803cc <CAN0_Handler+0x90>)
   80376:	4798      	blx	r3
		dac_write_speed();
   80378:	4b15      	ldr	r3, [pc, #84]	; (803d0 <CAN0_Handler+0x94>)
   8037a:	4798      	blx	r3
		
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8037c:	2300      	movs	r3, #0
   8037e:	e00c      	b.n	8039a <CAN0_Handler+0x5e>
			can_receive(&message, 1);
   80380:	2101      	movs	r1, #1
   80382:	a801      	add	r0, sp, #4
   80384:	4b0e      	ldr	r3, [pc, #56]	; (803c0 <CAN0_Handler+0x84>)
   80386:	4798      	blx	r3
   80388:	e7e9      	b.n	8035e <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8038a:	4812      	ldr	r0, [pc, #72]	; (803d4 <CAN0_Handler+0x98>)
   8038c:	4b12      	ldr	r3, [pc, #72]	; (803d8 <CAN0_Handler+0x9c>)
   8038e:	4798      	blx	r3
   80390:	e7e5      	b.n	8035e <CAN0_Handler+0x22>
			shoot();
   80392:	4b12      	ldr	r3, [pc, #72]	; (803dc <CAN0_Handler+0xa0>)
   80394:	4798      	blx	r3
   80396:	e7ed      	b.n	80374 <CAN0_Handler+0x38>
		for (int i = 0; i < message.data_length; i++)
   80398:	3301      	adds	r3, #1
   8039a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8039e:	4293      	cmp	r3, r2
   803a0:	dbfa      	blt.n	80398 <CAN0_Handler+0x5c>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   803a2:	f014 0f01 	tst.w	r4, #1
   803a6:	d002      	beq.n	803ae <CAN0_Handler+0x72>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803a8:	2201      	movs	r2, #1
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <CAN0_Handler+0x80>)
   803ac:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803b2:	4b0b      	ldr	r3, [pc, #44]	; (803e0 <CAN0_Handler+0xa4>)
   803b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803b8:	b004      	add	sp, #16
   803ba:	bd10      	pop	{r4, pc}
   803bc:	400b4000 	.word	0x400b4000
   803c0:	000802b9 	.word	0x000802b9
   803c4:	2000045d 	.word	0x2000045d
   803c8:	2000045c 	.word	0x2000045c
   803cc:	00080c11 	.word	0x00080c11
   803d0:	00080759 	.word	0x00080759
   803d4:	00081de4 	.word	0x00081de4
   803d8:	00080b91 	.word	0x00080b91
   803dc:	000808dd 	.word	0x000808dd
   803e0:	e000e100 	.word	0xe000e100

000803e4 <dac_write_uint_voltage>:
	dac_write_uint_voltage(0);
}

void dac_write_uint_voltage(uint16_t signal)
{
	DACC->DACC_CDR = signal;
   803e4:	4b01      	ldr	r3, [pc, #4]	; (803ec <dac_write_uint_voltage+0x8>)
   803e6:	6218      	str	r0, [r3, #32]
   803e8:	4770      	bx	lr
   803ea:	bf00      	nop
   803ec:	400c8000 	.word	0x400c8000

000803f0 <dac_init>:
{
   803f0:	b510      	push	{r4, lr}
	PMC->PMC_PCR |= (ID_DACC << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   803f2:	4a0d      	ldr	r2, [pc, #52]	; (80428 <dac_init+0x38>)
   803f4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   803f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   803fc:	f043 0326 	orr.w	r3, r3, #38	; 0x26
   80400:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_DACC-32));
   80404:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8040c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	DACC->DACC_MR = DACC_MR_USER_SEL_CHANNEL1 | DACC_MR_WORD_HALF | DACC_MR_STARTUP_8;
   80410:	4b06      	ldr	r3, [pc, #24]	; (8042c <dac_init+0x3c>)
   80412:	4a07      	ldr	r2, [pc, #28]	; (80430 <dac_init+0x40>)
   80414:	605a      	str	r2, [r3, #4]
	DACC->DACC_CHER = DACC_CHER_CH1;
   80416:	2202      	movs	r2, #2
   80418:	611a      	str	r2, [r3, #16]
	dac_write_uint_voltage(0xFFFF);
   8041a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8041e:	4c05      	ldr	r4, [pc, #20]	; (80434 <dac_init+0x44>)
   80420:	47a0      	blx	r4
	dac_write_uint_voltage(0);
   80422:	2000      	movs	r0, #0
   80424:	47a0      	blx	r4
   80426:	bd10      	pop	{r4, pc}
   80428:	400e0600 	.word	0x400e0600
   8042c:	400c8000 	.word	0x400c8000
   80430:	01010000 	.word	0x01010000
   80434:	000803e5 	.word	0x000803e5

00080438 <delay_ms>:
#include <stdio.h>
#include <inttypes.h>

// Max ca. 200ms!!
void delay_ms(uint32_t ms){
	uint32_t ticks = (F_CPU / 1000) * ms;
   80438:	4b0b      	ldr	r3, [pc, #44]	; (80468 <delay_ms+0x30>)
   8043a:	fb03 f000 	mul.w	r0, r3, r0
	if(ticks > 0xFFFFFF)
   8043e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80442:	d301      	bcc.n	80448 <delay_ms+0x10>
	ticks = 0xFFFFFF;
   80444:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	SysTick->LOAD = ticks - 1;
   80448:	3801      	subs	r0, #1
   8044a:	4b08      	ldr	r3, [pc, #32]	; (8046c <delay_ms+0x34>)
   8044c:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   8044e:	2200      	movs	r2, #0
   80450:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   80452:	2205      	movs	r2, #5
   80454:	601a      	str	r2, [r3, #0]
	
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   80456:	4b05      	ldr	r3, [pc, #20]	; (8046c <delay_ms+0x34>)
   80458:	681b      	ldr	r3, [r3, #0]
   8045a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8045e:	d0fa      	beq.n	80456 <delay_ms+0x1e>
		// Wait for the SysTick timer to count down
	}
	
	SysTick->CTRL = 0; // Disable the SysTick timer
   80460:	2200      	movs	r2, #0
   80462:	4b02      	ldr	r3, [pc, #8]	; (8046c <delay_ms+0x34>)
   80464:	601a      	str	r2, [r3, #0]
   80466:	4770      	bx	lr
   80468:	00014820 	.word	0x00014820
   8046c:	e000e010 	.word	0xe000e010

00080470 <delay_us>:
}


// Max ca. 200 000us!!
void delay_us(uint32_t us){
	uint32_t ticks = (F_CPU / 1000000) * us;
   80470:	2354      	movs	r3, #84	; 0x54
   80472:	fb03 f000 	mul.w	r0, r3, r0
	if(ticks > 0xFFFFFF)
   80476:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8047a:	d301      	bcc.n	80480 <delay_us+0x10>
		ticks = 0xFFFFFF;
   8047c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	SysTick->LOAD = ticks - 1;
   80480:	3801      	subs	r0, #1
   80482:	4b07      	ldr	r3, [pc, #28]	; (804a0 <delay_us+0x30>)
   80484:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   80486:	2200      	movs	r2, #0
   80488:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   8048a:	2205      	movs	r2, #5
   8048c:	601a      	str	r2, [r3, #0]
	
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   8048e:	4b04      	ldr	r3, [pc, #16]	; (804a0 <delay_us+0x30>)
   80490:	681b      	ldr	r3, [r3, #0]
   80492:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80496:	d0fa      	beq.n	8048e <delay_us+0x1e>
		// Wait for the SysTick timer to count down
	}
	
	SysTick->CTRL = 0; // Disable the SysTick timer
   80498:	2200      	movs	r2, #0
   8049a:	4b01      	ldr	r3, [pc, #4]	; (804a0 <delay_us+0x30>)
   8049c:	601a      	str	r2, [r3, #0]
   8049e:	4770      	bx	lr
   804a0:	e000e010 	.word	0xe000e010

000804a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804a4:	e7fe      	b.n	804a4 <Dummy_Handler>
	...

000804a8 <Reset_Handler>:
{
   804a8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   804aa:	4b11      	ldr	r3, [pc, #68]	; (804f0 <Reset_Handler+0x48>)
   804ac:	4a11      	ldr	r2, [pc, #68]	; (804f4 <Reset_Handler+0x4c>)
   804ae:	429a      	cmp	r2, r3
   804b0:	d009      	beq.n	804c6 <Reset_Handler+0x1e>
   804b2:	4b0f      	ldr	r3, [pc, #60]	; (804f0 <Reset_Handler+0x48>)
   804b4:	4a0f      	ldr	r2, [pc, #60]	; (804f4 <Reset_Handler+0x4c>)
   804b6:	e003      	b.n	804c0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   804b8:	6811      	ldr	r1, [r2, #0]
   804ba:	6019      	str	r1, [r3, #0]
   804bc:	3304      	adds	r3, #4
   804be:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   804c0:	490d      	ldr	r1, [pc, #52]	; (804f8 <Reset_Handler+0x50>)
   804c2:	428b      	cmp	r3, r1
   804c4:	d3f8      	bcc.n	804b8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   804c6:	4b0d      	ldr	r3, [pc, #52]	; (804fc <Reset_Handler+0x54>)
   804c8:	e002      	b.n	804d0 <Reset_Handler+0x28>
                *pDest++ = 0;
   804ca:	2200      	movs	r2, #0
   804cc:	601a      	str	r2, [r3, #0]
   804ce:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   804d0:	4a0b      	ldr	r2, [pc, #44]	; (80500 <Reset_Handler+0x58>)
   804d2:	4293      	cmp	r3, r2
   804d4:	d3f9      	bcc.n	804ca <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   804d6:	4b0b      	ldr	r3, [pc, #44]	; (80504 <Reset_Handler+0x5c>)
   804d8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804e0:	4a09      	ldr	r2, [pc, #36]	; (80508 <Reset_Handler+0x60>)
   804e2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   804e4:	4b09      	ldr	r3, [pc, #36]	; (8050c <Reset_Handler+0x64>)
   804e6:	4798      	blx	r3
        main();
   804e8:	4b09      	ldr	r3, [pc, #36]	; (80510 <Reset_Handler+0x68>)
   804ea:	4798      	blx	r3
   804ec:	e7fe      	b.n	804ec <Reset_Handler+0x44>
   804ee:	bf00      	nop
   804f0:	20000000 	.word	0x20000000
   804f4:	00081ea4 	.word	0x00081ea4
   804f8:	2000043c 	.word	0x2000043c
   804fc:	2000043c 	.word	0x2000043c
   80500:	200004cc 	.word	0x200004cc
   80504:	00080000 	.word	0x00080000
   80508:	e000ed00 	.word	0xe000ed00
   8050c:	00081c75 	.word	0x00081c75
   80510:	000805b9 	.word	0x000805b9

00080514 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80514:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80518:	4a20      	ldr	r2, [pc, #128]	; (8059c <SystemInit+0x88>)
   8051a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8051c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80520:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80522:	4b1f      	ldr	r3, [pc, #124]	; (805a0 <SystemInit+0x8c>)
   80524:	6a1b      	ldr	r3, [r3, #32]
   80526:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8052a:	d107      	bne.n	8053c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8052c:	4a1d      	ldr	r2, [pc, #116]	; (805a4 <SystemInit+0x90>)
   8052e:	4b1c      	ldr	r3, [pc, #112]	; (805a0 <SystemInit+0x8c>)
   80530:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80532:	4b1b      	ldr	r3, [pc, #108]	; (805a0 <SystemInit+0x8c>)
   80534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80536:	f013 0f01 	tst.w	r3, #1
   8053a:	d0fa      	beq.n	80532 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8053c:	4a1a      	ldr	r2, [pc, #104]	; (805a8 <SystemInit+0x94>)
   8053e:	4b18      	ldr	r3, [pc, #96]	; (805a0 <SystemInit+0x8c>)
   80540:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80542:	4b17      	ldr	r3, [pc, #92]	; (805a0 <SystemInit+0x8c>)
   80544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80546:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8054a:	d0fa      	beq.n	80542 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8054c:	4a14      	ldr	r2, [pc, #80]	; (805a0 <SystemInit+0x8c>)
   8054e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80550:	f023 0303 	bic.w	r3, r3, #3
   80554:	f043 0301 	orr.w	r3, r3, #1
   80558:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8055a:	4b11      	ldr	r3, [pc, #68]	; (805a0 <SystemInit+0x8c>)
   8055c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8055e:	f013 0f08 	tst.w	r3, #8
   80562:	d0fa      	beq.n	8055a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80564:	4a11      	ldr	r2, [pc, #68]	; (805ac <SystemInit+0x98>)
   80566:	4b0e      	ldr	r3, [pc, #56]	; (805a0 <SystemInit+0x8c>)
   80568:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8056a:	4b0d      	ldr	r3, [pc, #52]	; (805a0 <SystemInit+0x8c>)
   8056c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8056e:	f013 0f02 	tst.w	r3, #2
   80572:	d0fa      	beq.n	8056a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80574:	2211      	movs	r2, #17
   80576:	4b0a      	ldr	r3, [pc, #40]	; (805a0 <SystemInit+0x8c>)
   80578:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8057a:	4b09      	ldr	r3, [pc, #36]	; (805a0 <SystemInit+0x8c>)
   8057c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8057e:	f013 0f08 	tst.w	r3, #8
   80582:	d0fa      	beq.n	8057a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80584:	2212      	movs	r2, #18
   80586:	4b06      	ldr	r3, [pc, #24]	; (805a0 <SystemInit+0x8c>)
   80588:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8058a:	4b05      	ldr	r3, [pc, #20]	; (805a0 <SystemInit+0x8c>)
   8058c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8058e:	f013 0f08 	tst.w	r3, #8
   80592:	d0fa      	beq.n	8058a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80594:	4a06      	ldr	r2, [pc, #24]	; (805b0 <SystemInit+0x9c>)
   80596:	4b07      	ldr	r3, [pc, #28]	; (805b4 <SystemInit+0xa0>)
   80598:	601a      	str	r2, [r3, #0]
   8059a:	4770      	bx	lr
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	400e0600 	.word	0x400e0600
   805a4:	00370809 	.word	0x00370809
   805a8:	01370809 	.word	0x01370809
   805ac:	200d3f01 	.word	0x200d3f01
   805b0:	0501bd00 	.word	0x0501bd00
   805b4:	20000000 	.word	0x20000000

000805b8 <main>:
#include "adc.h"
#include "motor.h"
#include "dac.h"

int main(void)
{
   805b8:	b538      	push	{r3, r4, r5, lr}
    /* Initialize the SAM system */
    SystemInit();
   805ba:	4b20      	ldr	r3, [pc, #128]	; (8063c <main+0x84>)
   805bc:	4798      	blx	r3
	
	can_init_def_tx_rx_mb(0x00290165);
   805be:	4820      	ldr	r0, [pc, #128]	; (80640 <main+0x88>)
   805c0:	4b20      	ldr	r3, [pc, #128]	; (80644 <main+0x8c>)
   805c2:	4798      	blx	r3
	configure_uart();
   805c4:	4b20      	ldr	r3, [pc, #128]	; (80648 <main+0x90>)
   805c6:	4798      	blx	r3
	pwm_init();
   805c8:	4b20      	ldr	r3, [pc, #128]	; (8064c <main+0x94>)
   805ca:	4798      	blx	r3
	adc_init();
   805cc:	4b20      	ldr	r3, [pc, #128]	; (80650 <main+0x98>)
   805ce:	4798      	blx	r3
	motor_init();
   805d0:	4b20      	ldr	r3, [pc, #128]	; (80654 <main+0x9c>)
   805d2:	4798      	blx	r3
	dac_init();
   805d4:	4b20      	ldr	r3, [pc, #128]	; (80658 <main+0xa0>)
   805d6:	4798      	blx	r3
	
	
	// Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCER0 |= (1 << ID_PIOA);
   805d8:	4a20      	ldr	r2, [pc, #128]	; (8065c <main+0xa4>)
   805da:	6913      	ldr	r3, [r2, #16]
   805dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   805e0:	6113      	str	r3, [r2, #16]
	
	
	PIOA->PIO_PER |= PIO_PA20; // Enable PIO control
   805e2:	4b1f      	ldr	r3, [pc, #124]	; (80660 <main+0xa8>)
   805e4:	681a      	ldr	r2, [r3, #0]
   805e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805ea:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_PA20; // Set pin as output
   805ec:	691a      	ldr	r2, [r3, #16]
   805ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805f2:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR |= PIO_PA20; // Set output high
   805f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805fa:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_CODR |= PIO_PA20;
   805fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   805fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80602:	635a      	str	r2, [r3, #52]	; 0x34
	
	printf("Hello world");
   80604:	4817      	ldr	r0, [pc, #92]	; (80664 <main+0xac>)
   80606:	4b18      	ldr	r3, [pc, #96]	; (80668 <main+0xb0>)
   80608:	4798      	blx	r3
	
	
	int counter = 0;
	int goal_count = 0;
	WDT->WDT_MR = WDT_MR_WDDIS;
   8060a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8060e:	4b17      	ldr	r3, [pc, #92]	; (8066c <main+0xb4>)
   80610:	605a      	str	r2, [r3, #4]
	int goal_count = 0;
   80612:	2500      	movs	r5, #0
	int counter = 0;
   80614:	462c      	mov	r4, r5
	    //PIOA->PIO_CODR |= PIO_PA20;
	    //delay_ms(100000);
		
		
		
		counter++;
   80616:	3401      	adds	r4, #1
		int adc_data = adc_receive();
   80618:	4b15      	ldr	r3, [pc, #84]	; (80670 <main+0xb8>)
   8061a:	4798      	blx	r3
		if(adc_data < 1000 && counter > 2000000)
   8061c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   80620:	daf9      	bge.n	80616 <main+0x5e>
   80622:	4b14      	ldr	r3, [pc, #80]	; (80674 <main+0xbc>)
   80624:	429c      	cmp	r4, r3
   80626:	ddf6      	ble.n	80616 <main+0x5e>
		{
			goal_count++;
   80628:	3501      	adds	r5, #1
			counter = 0;
			printf("GOL");
   8062a:	4813      	ldr	r0, [pc, #76]	; (80678 <main+0xc0>)
   8062c:	4c0e      	ldr	r4, [pc, #56]	; (80668 <main+0xb0>)
   8062e:	47a0      	blx	r4
			printf("%d", goal_count);
   80630:	4629      	mov	r1, r5
   80632:	4812      	ldr	r0, [pc, #72]	; (8067c <main+0xc4>)
   80634:	47a0      	blx	r4
			counter = 0;
   80636:	2400      	movs	r4, #0
   80638:	e7ed      	b.n	80616 <main+0x5e>
   8063a:	bf00      	nop
   8063c:	00080515 	.word	0x00080515
   80640:	00290165 	.word	0x00290165
   80644:	000802a9 	.word	0x000802a9
   80648:	00080d19 	.word	0x00080d19
   8064c:	00080c69 	.word	0x00080c69
   80650:	00080161 	.word	0x00080161
   80654:	00080681 	.word	0x00080681
   80658:	000803f1 	.word	0x000803f1
   8065c:	400e0600 	.word	0x400e0600
   80660:	400e0e00 	.word	0x400e0e00
   80664:	00081e10 	.word	0x00081e10
   80668:	00080b91 	.word	0x00080b91
   8066c:	400e1a50 	.word	0x400e1a50
   80670:	000801b9 	.word	0x000801b9
   80674:	001e8480 	.word	0x001e8480
   80678:	00081e1c 	.word	0x00081e1c
   8067c:	00081e20 	.word	0x00081e20

00080680 <motor_init>:
#include "motor.h"


void motor_init()
{
   80680:	b410      	push	{r4}
	// Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   80682:	4b18      	ldr	r3, [pc, #96]	; (806e4 <motor_init+0x64>)
   80684:	4a18      	ldr	r2, [pc, #96]	; (806e8 <motor_init+0x68>)
   80686:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   8068a:	691a      	ldr	r2, [r3, #16]
   8068c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80690:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   80692:	691a      	ldr	r2, [r3, #16]
   80694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80698:	611a      	str	r2, [r3, #16]
	
	// Set pins C1-C9 as input only
	// Should maybe set to be IO driven, not peripheral driven (page 623)
	PIOC->PIO_PER |= PIO_PC8 | PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7;
   8069a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   8069e:	681a      	ldr	r2, [r3, #0]
   806a0:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   806a4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= PIO_PC8 | PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7;
   806a6:	695a      	ldr	r2, [r3, #20]
   806a8:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   806ac:	615a      	str	r2, [r3, #20]
	PIOD->PIO_PER |= PIO_PD10 | PIO_PD2 | PIO_PD1 | PIO_PD0 | PIO_PD9;
   806ae:	4a0f      	ldr	r2, [pc, #60]	; (806ec <motor_init+0x6c>)
   806b0:	6810      	ldr	r0, [r2, #0]
   806b2:	f240 6407 	movw	r4, #1543	; 0x607
   806b6:	4320      	orrs	r0, r4
   806b8:	6010      	str	r0, [r2, #0]
	PIOD->PIO_OER |= PIO_PD10 | PIO_PD2 | PIO_PD1 | PIO_PD0 | PIO_PD9;
   806ba:	6911      	ldr	r1, [r2, #16]
   806bc:	4321      	orrs	r1, r4
   806be:	6111      	str	r1, [r2, #16]
	
	// Enable motor
	PIOD->PIO_SODR = PIO_PD9;
   806c0:	f44f 7100 	mov.w	r1, #512	; 0x200
   806c4:	6311      	str	r1, [r2, #48]	; 0x30
	PIOC->PIO_CODR = PIO_PC6;*/
	
	// Speed is set using DAC1 pin on shield.
	
	//INIT solenoid
	PIOC->PIO_PER |= PIO_PC13;
   806c6:	681a      	ldr	r2, [r3, #0]
   806c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806cc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC13;
   806ce:	691a      	ldr	r2, [r3, #16]
   806d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806d4:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_PC13;
   806d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806dc:	631a      	str	r2, [r3, #48]	; 0x30
	 
}
   806de:	bc10      	pop	{r4}
   806e0:	4770      	bx	lr
   806e2:	bf00      	nop
   806e4:	400e0600 	.word	0x400e0600
   806e8:	1000000d 	.word	0x1000000d
   806ec:	400e1400 	.word	0x400e1400

000806f0 <read_encoder>:

int read_encoder()
{
   806f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Set !OE low
	PIOD->PIO_CODR |= PIO_PD0;
   806f2:	4c16      	ldr	r4, [pc, #88]	; (8074c <read_encoder+0x5c>)
   806f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   806f6:	f043 0301 	orr.w	r3, r3, #1
   806fa:	6363      	str	r3, [r4, #52]	; 0x34
	// Set SEL low
	PIOD->PIO_CODR |= PIO_PD2;
   806fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   806fe:	f043 0304 	orr.w	r3, r3, #4
   80702:	6363      	str	r3, [r4, #52]	; 0x34
	// Wait 20us
	delay_us(20);
   80704:	2014      	movs	r0, #20
   80706:	4f12      	ldr	r7, [pc, #72]	; (80750 <read_encoder+0x60>)
   80708:	47b8      	blx	r7
	// Read MJ2 (high byte)
	int mj2_high = (PIOC->PIO_PDSR) & 0x1FE;
   8070a:	4e12      	ldr	r6, [pc, #72]	; (80754 <read_encoder+0x64>)
   8070c:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
	// Set SEL high
	PIOD->PIO_SODR |= PIO_PD2;
   8070e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80710:	f043 0304 	orr.w	r3, r3, #4
   80714:	6323      	str	r3, [r4, #48]	; 0x30
	// Wait 20us
	delay_us(20);
   80716:	2014      	movs	r0, #20
   80718:	47b8      	blx	r7
	// Read MJ2 (low byte)
	int mj2_low = (PIOC->PIO_PDSR) & 0x1FE;
   8071a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   8071c:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
	//Reset encoder
	PIOD->PIO_CODR |= PIO_PD1;
   80720:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80722:	f043 0302 	orr.w	r3, r3, #2
   80726:	6363      	str	r3, [r4, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_PD1;
   80728:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8072a:	f043 0302 	orr.w	r3, r3, #2
   8072e:	6323      	str	r3, [r4, #48]	; 0x30
	// Set !OE high
	PIOD->PIO_SODR |= PIO_PD0;
   80730:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80732:	f043 0301 	orr.w	r3, r3, #1
   80736:	6323      	str	r3, [r4, #48]	; 0x30
	
	//int pos = ((mj2_low | (mj2_high << 8)) + 131070) % 130616;
	int pos = (mj2_low | (mj2_high << 8));
   80738:	022d      	lsls	r5, r5, #8
   8073a:	f405 35ff 	and.w	r5, r5, #130560	; 0x1fe00
   8073e:	4328      	orrs	r0, r5
	if(pos > 6000)
   80740:	f241 7370 	movw	r3, #6000	; 0x1770
   80744:	4298      	cmp	r0, r3
   80746:	dd00      	ble.n	8074a <read_encoder+0x5a>
	{
		pos = 0;
   80748:	2000      	movs	r0, #0
	}
	return pos;
	
}
   8074a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8074c:	400e1400 	.word	0x400e1400
   80750:	00080471 	.word	0x00080471
   80754:	400e1200 	.word	0x400e1200

00080758 <dac_write_speed>:
float integral = 0;
float Kp = 0.06;
float Ki = 1;

void dac_write_speed()
{
   80758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8075c:	b082      	sub	sp, #8
	// Normalized reference is between -1 and 1, it is the reference value for the PI controller.
	// printf("%d ", joystick_y);
	float normalized_reference = (float)(joystick_y) / 128.0 - 1.0;
   8075e:	4b44      	ldr	r3, [pc, #272]	; (80870 <dac_write_speed+0x118>)
   80760:	7818      	ldrb	r0, [r3, #0]
   80762:	4b44      	ldr	r3, [pc, #272]	; (80874 <dac_write_speed+0x11c>)
   80764:	4798      	blx	r3
   80766:	4b44      	ldr	r3, [pc, #272]	; (80878 <dac_write_speed+0x120>)
   80768:	4798      	blx	r3
   8076a:	2200      	movs	r2, #0
   8076c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   80770:	4c42      	ldr	r4, [pc, #264]	; (8087c <dac_write_speed+0x124>)
   80772:	47a0      	blx	r4
   80774:	2200      	movs	r2, #0
   80776:	4b42      	ldr	r3, [pc, #264]	; (80880 <dac_write_speed+0x128>)
   80778:	4c42      	ldr	r4, [pc, #264]	; (80884 <dac_write_speed+0x12c>)
   8077a:	47a0      	blx	r4
   8077c:	4b42      	ldr	r3, [pc, #264]	; (80888 <dac_write_speed+0x130>)
   8077e:	4798      	blx	r3
   80780:	4680      	mov	r8, r0

	int encoder_raw = read_encoder();
   80782:	4b42      	ldr	r3, [pc, #264]	; (8088c <dac_write_speed+0x134>)
   80784:	4798      	blx	r3
	// Normalized y is between -1 and 1, it is the reference value for the PI controller.
	float y_normalized = (2806 - (float)encoder_raw) / 2806 * 2 - 1;
   80786:	4b42      	ldr	r3, [pc, #264]	; (80890 <dac_write_speed+0x138>)
   80788:	4798      	blx	r3
   8078a:	4c42      	ldr	r4, [pc, #264]	; (80894 <dac_write_speed+0x13c>)
   8078c:	4601      	mov	r1, r0
   8078e:	4842      	ldr	r0, [pc, #264]	; (80898 <dac_write_speed+0x140>)
   80790:	47a0      	blx	r4
   80792:	4941      	ldr	r1, [pc, #260]	; (80898 <dac_write_speed+0x140>)
   80794:	4b41      	ldr	r3, [pc, #260]	; (8089c <dac_write_speed+0x144>)
   80796:	4798      	blx	r3
   80798:	4d41      	ldr	r5, [pc, #260]	; (808a0 <dac_write_speed+0x148>)
   8079a:	4601      	mov	r1, r0
   8079c:	47a8      	blx	r5
   8079e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   807a2:	47a0      	blx	r4
   807a4:	4607      	mov	r7, r0

	// PI controller
	float e = normalized_reference - y_normalized;
   807a6:	4601      	mov	r1, r0
   807a8:	4640      	mov	r0, r8
   807aa:	47a0      	blx	r4
   807ac:	4606      	mov	r6, r0
	float u = 0;

	integral += e;
   807ae:	4c3d      	ldr	r4, [pc, #244]	; (808a4 <dac_write_speed+0x14c>)
   807b0:	4601      	mov	r1, r0
   807b2:	6820      	ldr	r0, [r4, #0]
   807b4:	47a8      	blx	r5
   807b6:	6020      	str	r0, [r4, #0]

	u = Kp * e;// + Ki * integral;
   807b8:	4d3b      	ldr	r5, [pc, #236]	; (808a8 <dac_write_speed+0x150>)
   807ba:	4b3c      	ldr	r3, [pc, #240]	; (808ac <dac_write_speed+0x154>)
   807bc:	6819      	ldr	r1, [r3, #0]
   807be:	4630      	mov	r0, r6
   807c0:	47a8      	blx	r5
   807c2:	4604      	mov	r4, r0
	
	printf("r: %-10d   y: %-10d   e: %-10d   u: %-10d   ", (int)(1000 * normalized_reference), (int)(1000 * y_normalized), (int)(1000 * e), (int)(1000 * u));
   807c4:	493a      	ldr	r1, [pc, #232]	; (808b0 <dac_write_speed+0x158>)
   807c6:	4640      	mov	r0, r8
   807c8:	47a8      	blx	r5
   807ca:	4681      	mov	r9, r0
   807cc:	4938      	ldr	r1, [pc, #224]	; (808b0 <dac_write_speed+0x158>)
   807ce:	4638      	mov	r0, r7
   807d0:	47a8      	blx	r5
   807d2:	4607      	mov	r7, r0
   807d4:	4936      	ldr	r1, [pc, #216]	; (808b0 <dac_write_speed+0x158>)
   807d6:	4630      	mov	r0, r6
   807d8:	47a8      	blx	r5
   807da:	4606      	mov	r6, r0
   807dc:	4934      	ldr	r1, [pc, #208]	; (808b0 <dac_write_speed+0x158>)
   807de:	4620      	mov	r0, r4
   807e0:	47a8      	blx	r5
   807e2:	4682      	mov	sl, r0
   807e4:	4d33      	ldr	r5, [pc, #204]	; (808b4 <dac_write_speed+0x15c>)
   807e6:	4630      	mov	r0, r6
   807e8:	47a8      	blx	r5
   807ea:	4680      	mov	r8, r0
   807ec:	4638      	mov	r0, r7
   807ee:	47a8      	blx	r5
   807f0:	4607      	mov	r7, r0
   807f2:	4648      	mov	r0, r9
   807f4:	47a8      	blx	r5
   807f6:	4606      	mov	r6, r0
   807f8:	4650      	mov	r0, sl
   807fa:	47a8      	blx	r5
   807fc:	9000      	str	r0, [sp, #0]
   807fe:	4643      	mov	r3, r8
   80800:	463a      	mov	r2, r7
   80802:	4631      	mov	r1, r6
   80804:	482c      	ldr	r0, [pc, #176]	; (808b8 <dac_write_speed+0x160>)
   80806:	4d2d      	ldr	r5, [pc, #180]	; (808bc <dac_write_speed+0x164>)
   80808:	47a8      	blx	r5




	
	if (u < -1)
   8080a:	492d      	ldr	r1, [pc, #180]	; (808c0 <dac_write_speed+0x168>)
   8080c:	4620      	mov	r0, r4
   8080e:	4b2d      	ldr	r3, [pc, #180]	; (808c4 <dac_write_speed+0x16c>)
   80810:	4798      	blx	r3
   80812:	b9e0      	cbnz	r0, 8084e <dac_write_speed+0xf6>
	u = -1;
	if (u > 1)
   80814:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   80818:	4620      	mov	r0, r4
   8081a:	4b2b      	ldr	r3, [pc, #172]	; (808c8 <dac_write_speed+0x170>)
   8081c:	4798      	blx	r3
   8081e:	b108      	cbz	r0, 80824 <dac_write_speed+0xcc>
	u = 1;
   80820:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	
	if(u < 0)
   80824:	2100      	movs	r1, #0
   80826:	4620      	mov	r0, r4
   80828:	4b26      	ldr	r3, [pc, #152]	; (808c4 <dac_write_speed+0x16c>)
   8082a:	4798      	blx	r3
   8082c:	b988      	cbnz	r0, 80852 <dac_write_speed+0xfa>
		// Set motor direction left
		PIOD->PIO_CODR = PIO_PD10;
	}
	else
	{
		dac_write_uint_voltage((uint16_t)(u * 65535));
   8082e:	4927      	ldr	r1, [pc, #156]	; (808cc <dac_write_speed+0x174>)
   80830:	4620      	mov	r0, r4
   80832:	4b1d      	ldr	r3, [pc, #116]	; (808a8 <dac_write_speed+0x150>)
   80834:	4798      	blx	r3
   80836:	4b26      	ldr	r3, [pc, #152]	; (808d0 <dac_write_speed+0x178>)
   80838:	4798      	blx	r3
   8083a:	b280      	uxth	r0, r0
   8083c:	4b25      	ldr	r3, [pc, #148]	; (808d4 <dac_write_speed+0x17c>)
   8083e:	4798      	blx	r3
		// Set motor direction right
		PIOD->PIO_SODR = PIO_PD10;
   80840:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80844:	4b24      	ldr	r3, [pc, #144]	; (808d8 <dac_write_speed+0x180>)
   80846:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   80848:	b002      	add	sp, #8
   8084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	u = -1;
   8084e:	4c1c      	ldr	r4, [pc, #112]	; (808c0 <dac_write_speed+0x168>)
   80850:	e7e0      	b.n	80814 <dac_write_speed+0xbc>
		dac_write_uint_voltage((uint16_t)(-u * 65535));
   80852:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
   80856:	491d      	ldr	r1, [pc, #116]	; (808cc <dac_write_speed+0x174>)
   80858:	4b13      	ldr	r3, [pc, #76]	; (808a8 <dac_write_speed+0x150>)
   8085a:	4798      	blx	r3
   8085c:	4b1c      	ldr	r3, [pc, #112]	; (808d0 <dac_write_speed+0x178>)
   8085e:	4798      	blx	r3
   80860:	b280      	uxth	r0, r0
   80862:	4b1c      	ldr	r3, [pc, #112]	; (808d4 <dac_write_speed+0x17c>)
   80864:	4798      	blx	r3
		PIOD->PIO_CODR = PIO_PD10;
   80866:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8086a:	4b1b      	ldr	r3, [pc, #108]	; (808d8 <dac_write_speed+0x180>)
   8086c:	635a      	str	r2, [r3, #52]	; 0x34
   8086e:	e7eb      	b.n	80848 <dac_write_speed+0xf0>
   80870:	2000045c 	.word	0x2000045c
   80874:	000817ad 	.word	0x000817ad
   80878:	000810d5 	.word	0x000810d5
   8087c:	0008117d 	.word	0x0008117d
   80880:	3ff00000 	.word	0x3ff00000
   80884:	00080e15 	.word	0x00080e15
   80888:	000815a1 	.word	0x000815a1
   8088c:	000806f1 	.word	0x000806f1
   80890:	000817b5 	.word	0x000817b5
   80894:	00081649 	.word	0x00081649
   80898:	452f6000 	.word	0x452f6000
   8089c:	000819c5 	.word	0x000819c5
   808a0:	0008164d 	.word	0x0008164d
   808a4:	20000458 	.word	0x20000458
   808a8:	0008185d 	.word	0x0008185d
   808ac:	20000004 	.word	0x20000004
   808b0:	447a0000 	.word	0x447a0000
   808b4:	00081be9 	.word	0x00081be9
   808b8:	00081e24 	.word	0x00081e24
   808bc:	00080b91 	.word	0x00080b91
   808c0:	bf800000 	.word	0xbf800000
   808c4:	00081b99 	.word	0x00081b99
   808c8:	00081bd5 	.word	0x00081bd5
   808cc:	477fff00 	.word	0x477fff00
   808d0:	00081c35 	.word	0x00081c35
   808d4:	000803e5 	.word	0x000803e5
   808d8:	400e1400 	.word	0x400e1400

000808dc <shoot>:

void shoot()
{
   808dc:	b510      	push	{r4, lr}
	PIOC->PIO_CODR |= PIO_PC13;
   808de:	4c06      	ldr	r4, [pc, #24]	; (808f8 <shoot+0x1c>)
   808e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   808e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808e6:	6363      	str	r3, [r4, #52]	; 0x34
	delay_ms(80);
   808e8:	2050      	movs	r0, #80	; 0x50
   808ea:	4b04      	ldr	r3, [pc, #16]	; (808fc <shoot+0x20>)
   808ec:	4798      	blx	r3
	PIOC->PIO_SODR |= PIO_PC13;
   808ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   808f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   808f4:	6323      	str	r3, [r4, #48]	; 0x30
   808f6:	bd10      	pop	{r4, pc}
   808f8:	400e1200 	.word	0x400e1200
   808fc:	00080439 	.word	0x00080439

00080900 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80900:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80902:	b2c8      	uxtb	r0, r1
   80904:	4b01      	ldr	r3, [pc, #4]	; (8090c <printchar+0xc>)
   80906:	4798      	blx	r3
   80908:	bd08      	pop	{r3, pc}
   8090a:	bf00      	nop
   8090c:	00080d81 	.word	0x00080d81

00080910 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80914:	4607      	mov	r7, r0
   80916:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80918:	1e15      	subs	r5, r2, #0
   8091a:	dd02      	ble.n	80922 <prints+0x12>
   8091c:	460a      	mov	r2, r1
   8091e:	2100      	movs	r1, #0
   80920:	e004      	b.n	8092c <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80922:	f04f 0820 	mov.w	r8, #32
   80926:	e00e      	b.n	80946 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80928:	3101      	adds	r1, #1
   8092a:	3201      	adds	r2, #1
   8092c:	7810      	ldrb	r0, [r2, #0]
   8092e:	2800      	cmp	r0, #0
   80930:	d1fa      	bne.n	80928 <prints+0x18>
		if (len >= width) width = 0;
   80932:	42a9      	cmp	r1, r5
   80934:	da01      	bge.n	8093a <prints+0x2a>
		else width -= len;
   80936:	1a6d      	subs	r5, r5, r1
   80938:	e000      	b.n	8093c <prints+0x2c>
		if (len >= width) width = 0;
   8093a:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   8093c:	f013 0f02 	tst.w	r3, #2
   80940:	d106      	bne.n	80950 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80942:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80946:	f013 0401 	ands.w	r4, r3, #1
   8094a:	d00a      	beq.n	80962 <prints+0x52>
	register int pc = 0, padchar = ' ';
   8094c:	2400      	movs	r4, #0
   8094e:	e010      	b.n	80972 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80950:	f04f 0830 	mov.w	r8, #48	; 0x30
   80954:	e7f7      	b.n	80946 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   80956:	4641      	mov	r1, r8
   80958:	4638      	mov	r0, r7
   8095a:	4b0d      	ldr	r3, [pc, #52]	; (80990 <prints+0x80>)
   8095c:	4798      	blx	r3
			++pc;
   8095e:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80960:	3d01      	subs	r5, #1
   80962:	2d00      	cmp	r5, #0
   80964:	dcf7      	bgt.n	80956 <prints+0x46>
   80966:	e004      	b.n	80972 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80968:	4638      	mov	r0, r7
   8096a:	4b09      	ldr	r3, [pc, #36]	; (80990 <prints+0x80>)
   8096c:	4798      	blx	r3
		++pc;
   8096e:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80970:	3601      	adds	r6, #1
   80972:	7831      	ldrb	r1, [r6, #0]
   80974:	2900      	cmp	r1, #0
   80976:	d1f7      	bne.n	80968 <prints+0x58>
   80978:	e005      	b.n	80986 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8097a:	4641      	mov	r1, r8
   8097c:	4638      	mov	r0, r7
   8097e:	4b04      	ldr	r3, [pc, #16]	; (80990 <prints+0x80>)
   80980:	4798      	blx	r3
		++pc;
   80982:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80984:	3d01      	subs	r5, #1
   80986:	2d00      	cmp	r5, #0
   80988:	dcf7      	bgt.n	8097a <prints+0x6a>
	}

	return pc;
}
   8098a:	4620      	mov	r0, r4
   8098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80990:	00080901 	.word	0x00080901

00080994 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80994:	b5f0      	push	{r4, r5, r6, r7, lr}
   80996:	b085      	sub	sp, #20
   80998:	4607      	mov	r7, r0
   8099a:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   8099c:	b151      	cbz	r1, 809b4 <printi+0x20>
   8099e:	461e      	mov	r6, r3
   809a0:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   809a2:	b113      	cbz	r3, 809aa <printi+0x16>
   809a4:	2a0a      	cmp	r2, #10
   809a6:	d012      	beq.n	809ce <printi+0x3a>
	register int t, neg = 0, pc = 0;
   809a8:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   809aa:	ad04      	add	r5, sp, #16
   809ac:	2300      	movs	r3, #0
   809ae:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   809b2:	e018      	b.n	809e6 <printi+0x52>
		print_buf[0] = '0';
   809b4:	2330      	movs	r3, #48	; 0x30
   809b6:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   809ba:	2300      	movs	r3, #0
   809bc:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   809c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809c4:	a901      	add	r1, sp, #4
   809c6:	4638      	mov	r0, r7
   809c8:	4c1b      	ldr	r4, [pc, #108]	; (80a38 <printi+0xa4>)
   809ca:	47a0      	blx	r4
   809cc:	e029      	b.n	80a22 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   809ce:	2900      	cmp	r1, #0
   809d0:	db01      	blt.n	809d6 <printi+0x42>
	register int t, neg = 0, pc = 0;
   809d2:	2600      	movs	r6, #0
   809d4:	e7e9      	b.n	809aa <printi+0x16>
		u = -i;
   809d6:	424c      	negs	r4, r1
		neg = 1;
   809d8:	2601      	movs	r6, #1
   809da:	e7e6      	b.n	809aa <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   809dc:	3330      	adds	r3, #48	; 0x30
   809de:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   809e2:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   809e6:	b14c      	cbz	r4, 809fc <printi+0x68>
		t = u % b;
   809e8:	fbb4 f3f2 	udiv	r3, r4, r2
   809ec:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   809f0:	2b09      	cmp	r3, #9
   809f2:	ddf3      	ble.n	809dc <printi+0x48>
			t += letbase - '0' - 10;
   809f4:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   809f8:	440b      	add	r3, r1
   809fa:	e7ef      	b.n	809dc <printi+0x48>
	}

	if (neg) {
   809fc:	b156      	cbz	r6, 80a14 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   809fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a00:	b11b      	cbz	r3, 80a0a <printi+0x76>
   80a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a04:	f013 0f02 	tst.w	r3, #2
   80a08:	d10d      	bne.n	80a26 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80a0a:	232d      	movs	r3, #45	; 0x2d
   80a0c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a10:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a12:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a18:	4629      	mov	r1, r5
   80a1a:	4638      	mov	r0, r7
   80a1c:	4c06      	ldr	r4, [pc, #24]	; (80a38 <printi+0xa4>)
   80a1e:	47a0      	blx	r4
   80a20:	4430      	add	r0, r6
}
   80a22:	b005      	add	sp, #20
   80a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80a26:	212d      	movs	r1, #45	; 0x2d
   80a28:	4638      	mov	r0, r7
   80a2a:	4b04      	ldr	r3, [pc, #16]	; (80a3c <printi+0xa8>)
   80a2c:	4798      	blx	r3
			--width;
   80a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a30:	3b01      	subs	r3, #1
   80a32:	930a      	str	r3, [sp, #40]	; 0x28
   80a34:	e7ee      	b.n	80a14 <printi+0x80>
   80a36:	bf00      	nop
   80a38:	00080911 	.word	0x00080911
   80a3c:	00080901 	.word	0x00080901

00080a40 <print>:

static int print( char **out, const char *format, va_list args )
{
   80a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a42:	b089      	sub	sp, #36	; 0x24
   80a44:	4606      	mov	r6, r0
   80a46:	460c      	mov	r4, r1
   80a48:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80a4a:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80a4c:	e081      	b.n	80b52 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80a4e:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80a50:	2301      	movs	r3, #1
   80a52:	e08b      	b.n	80b6c <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80a54:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80a56:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80a5a:	7822      	ldrb	r2, [r4, #0]
   80a5c:	2a30      	cmp	r2, #48	; 0x30
   80a5e:	d0f9      	beq.n	80a54 <print+0x14>
   80a60:	2200      	movs	r2, #0
   80a62:	e006      	b.n	80a72 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80a64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a68:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80a6a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80a6e:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80a70:	3401      	adds	r4, #1
   80a72:	7821      	ldrb	r1, [r4, #0]
   80a74:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80a78:	b2c0      	uxtb	r0, r0
   80a7a:	2809      	cmp	r0, #9
   80a7c:	d9f2      	bls.n	80a64 <print+0x24>
			}
			if( *format == 's' ) {
   80a7e:	2973      	cmp	r1, #115	; 0x73
   80a80:	d018      	beq.n	80ab4 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80a82:	2964      	cmp	r1, #100	; 0x64
   80a84:	d022      	beq.n	80acc <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80a86:	2978      	cmp	r1, #120	; 0x78
   80a88:	d02f      	beq.n	80aea <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80a8a:	2958      	cmp	r1, #88	; 0x58
   80a8c:	d03c      	beq.n	80b08 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80a8e:	2975      	cmp	r1, #117	; 0x75
   80a90:	d049      	beq.n	80b26 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80a92:	2963      	cmp	r1, #99	; 0x63
   80a94:	d15c      	bne.n	80b50 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80a96:	9905      	ldr	r1, [sp, #20]
   80a98:	1d08      	adds	r0, r1, #4
   80a9a:	9005      	str	r0, [sp, #20]
   80a9c:	7809      	ldrb	r1, [r1, #0]
   80a9e:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80aa2:	2100      	movs	r1, #0
   80aa4:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80aa8:	a907      	add	r1, sp, #28
   80aaa:	4630      	mov	r0, r6
   80aac:	4f34      	ldr	r7, [pc, #208]	; (80b80 <print+0x140>)
   80aae:	47b8      	blx	r7
   80ab0:	4405      	add	r5, r0
				continue;
   80ab2:	e04d      	b.n	80b50 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80ab4:	9905      	ldr	r1, [sp, #20]
   80ab6:	1d08      	adds	r0, r1, #4
   80ab8:	9005      	str	r0, [sp, #20]
   80aba:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80abc:	b121      	cbz	r1, 80ac8 <print+0x88>
   80abe:	4630      	mov	r0, r6
   80ac0:	4f2f      	ldr	r7, [pc, #188]	; (80b80 <print+0x140>)
   80ac2:	47b8      	blx	r7
   80ac4:	4405      	add	r5, r0
				continue;
   80ac6:	e043      	b.n	80b50 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80ac8:	492e      	ldr	r1, [pc, #184]	; (80b84 <print+0x144>)
   80aca:	e7f8      	b.n	80abe <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80acc:	9905      	ldr	r1, [sp, #20]
   80ace:	1d08      	adds	r0, r1, #4
   80ad0:	9005      	str	r0, [sp, #20]
   80ad2:	6809      	ldr	r1, [r1, #0]
   80ad4:	2061      	movs	r0, #97	; 0x61
   80ad6:	9002      	str	r0, [sp, #8]
   80ad8:	9301      	str	r3, [sp, #4]
   80ada:	9200      	str	r2, [sp, #0]
   80adc:	2301      	movs	r3, #1
   80ade:	220a      	movs	r2, #10
   80ae0:	4630      	mov	r0, r6
   80ae2:	4f29      	ldr	r7, [pc, #164]	; (80b88 <print+0x148>)
   80ae4:	47b8      	blx	r7
   80ae6:	4405      	add	r5, r0
				continue;
   80ae8:	e032      	b.n	80b50 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80aea:	9905      	ldr	r1, [sp, #20]
   80aec:	1d08      	adds	r0, r1, #4
   80aee:	9005      	str	r0, [sp, #20]
   80af0:	6809      	ldr	r1, [r1, #0]
   80af2:	2061      	movs	r0, #97	; 0x61
   80af4:	9002      	str	r0, [sp, #8]
   80af6:	9301      	str	r3, [sp, #4]
   80af8:	9200      	str	r2, [sp, #0]
   80afa:	2300      	movs	r3, #0
   80afc:	2210      	movs	r2, #16
   80afe:	4630      	mov	r0, r6
   80b00:	4f21      	ldr	r7, [pc, #132]	; (80b88 <print+0x148>)
   80b02:	47b8      	blx	r7
   80b04:	4405      	add	r5, r0
				continue;
   80b06:	e023      	b.n	80b50 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80b08:	9905      	ldr	r1, [sp, #20]
   80b0a:	1d08      	adds	r0, r1, #4
   80b0c:	9005      	str	r0, [sp, #20]
   80b0e:	6809      	ldr	r1, [r1, #0]
   80b10:	2041      	movs	r0, #65	; 0x41
   80b12:	9002      	str	r0, [sp, #8]
   80b14:	9301      	str	r3, [sp, #4]
   80b16:	9200      	str	r2, [sp, #0]
   80b18:	2300      	movs	r3, #0
   80b1a:	2210      	movs	r2, #16
   80b1c:	4630      	mov	r0, r6
   80b1e:	4f1a      	ldr	r7, [pc, #104]	; (80b88 <print+0x148>)
   80b20:	47b8      	blx	r7
   80b22:	4405      	add	r5, r0
				continue;
   80b24:	e014      	b.n	80b50 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b26:	9905      	ldr	r1, [sp, #20]
   80b28:	1d08      	adds	r0, r1, #4
   80b2a:	9005      	str	r0, [sp, #20]
   80b2c:	6809      	ldr	r1, [r1, #0]
   80b2e:	2061      	movs	r0, #97	; 0x61
   80b30:	9002      	str	r0, [sp, #8]
   80b32:	9301      	str	r3, [sp, #4]
   80b34:	9200      	str	r2, [sp, #0]
   80b36:	2300      	movs	r3, #0
   80b38:	220a      	movs	r2, #10
   80b3a:	4630      	mov	r0, r6
   80b3c:	4f12      	ldr	r7, [pc, #72]	; (80b88 <print+0x148>)
   80b3e:	47b8      	blx	r7
   80b40:	4405      	add	r5, r0
				continue;
   80b42:	e005      	b.n	80b50 <print+0x110>
			++format;
   80b44:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80b46:	7821      	ldrb	r1, [r4, #0]
   80b48:	4630      	mov	r0, r6
   80b4a:	4b10      	ldr	r3, [pc, #64]	; (80b8c <print+0x14c>)
   80b4c:	4798      	blx	r3
			++pc;
   80b4e:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80b50:	3401      	adds	r4, #1
   80b52:	7823      	ldrb	r3, [r4, #0]
   80b54:	b163      	cbz	r3, 80b70 <print+0x130>
		if (*format == '%') {
   80b56:	2b25      	cmp	r3, #37	; 0x25
   80b58:	d1f5      	bne.n	80b46 <print+0x106>
			++format;
   80b5a:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80b5c:	7863      	ldrb	r3, [r4, #1]
   80b5e:	b13b      	cbz	r3, 80b70 <print+0x130>
			if (*format == '%') goto out;
   80b60:	2b25      	cmp	r3, #37	; 0x25
   80b62:	d0ef      	beq.n	80b44 <print+0x104>
			if (*format == '-') {
   80b64:	2b2d      	cmp	r3, #45	; 0x2d
   80b66:	f43f af72 	beq.w	80a4e <print+0xe>
			width = pad = 0;
   80b6a:	2300      	movs	r3, #0
   80b6c:	4614      	mov	r4, r2
   80b6e:	e774      	b.n	80a5a <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80b70:	b116      	cbz	r6, 80b78 <print+0x138>
   80b72:	6833      	ldr	r3, [r6, #0]
   80b74:	2200      	movs	r2, #0
   80b76:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80b78:	4628      	mov	r0, r5
   80b7a:	b009      	add	sp, #36	; 0x24
   80b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b7e:	bf00      	nop
   80b80:	00080911 	.word	0x00080911
   80b84:	00081e54 	.word	0x00081e54
   80b88:	00080995 	.word	0x00080995
   80b8c:	00080901 	.word	0x00080901

00080b90 <printf>:

int printf(const char *format, ...)
{
   80b90:	b40f      	push	{r0, r1, r2, r3}
   80b92:	b500      	push	{lr}
   80b94:	b083      	sub	sp, #12
   80b96:	aa04      	add	r2, sp, #16
   80b98:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80b9c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80b9e:	2000      	movs	r0, #0
   80ba0:	4b03      	ldr	r3, [pc, #12]	; (80bb0 <printf+0x20>)
   80ba2:	4798      	blx	r3
}
   80ba4:	b003      	add	sp, #12
   80ba6:	f85d eb04 	ldr.w	lr, [sp], #4
   80baa:	b004      	add	sp, #16
   80bac:	4770      	bx	lr
   80bae:	bf00      	nop
   80bb0:	00080a41 	.word	0x00080a41
   80bb4:	00000000 	.word	0x00000000

00080bb8 <pos_to_duty>:
	// printf("%d    ",joystick_x);
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
}

float pos_to_duty(uint8_t pos)
{
   80bb8:	b510      	push	{r4, lr}
	return (float)CLAMP(pos, 0, 255) / 255.0 * 0.05 + 0.05;
   80bba:	4b0f      	ldr	r3, [pc, #60]	; (80bf8 <pos_to_duty+0x40>)
   80bbc:	4798      	blx	r3
   80bbe:	4b0f      	ldr	r3, [pc, #60]	; (80bfc <pos_to_duty+0x44>)
   80bc0:	4798      	blx	r3
   80bc2:	a309      	add	r3, pc, #36	; (adr r3, 80be8 <pos_to_duty+0x30>)
   80bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bc8:	4c0d      	ldr	r4, [pc, #52]	; (80c00 <pos_to_duty+0x48>)
   80bca:	47a0      	blx	r4
   80bcc:	a308      	add	r3, pc, #32	; (adr r3, 80bf0 <pos_to_duty+0x38>)
   80bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bd2:	4c0c      	ldr	r4, [pc, #48]	; (80c04 <pos_to_duty+0x4c>)
   80bd4:	47a0      	blx	r4
   80bd6:	a306      	add	r3, pc, #24	; (adr r3, 80bf0 <pos_to_duty+0x38>)
   80bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   80bdc:	4c0a      	ldr	r4, [pc, #40]	; (80c08 <pos_to_duty+0x50>)
   80bde:	47a0      	blx	r4
   80be0:	4b0a      	ldr	r3, [pc, #40]	; (80c0c <pos_to_duty+0x54>)
   80be2:	4798      	blx	r3
}
   80be4:	bd10      	pop	{r4, pc}
   80be6:	bf00      	nop
   80be8:	00000000 	.word	0x00000000
   80bec:	406fe000 	.word	0x406fe000
   80bf0:	9999999a 	.word	0x9999999a
   80bf4:	3fa99999 	.word	0x3fa99999
   80bf8:	000817b5 	.word	0x000817b5
   80bfc:	000810d5 	.word	0x000810d5
   80c00:	000813d1 	.word	0x000813d1
   80c04:	0008117d 	.word	0x0008117d
   80c08:	00080e19 	.word	0x00080e19
   80c0c:	000815a1 	.word	0x000815a1

00080c10 <set_servo_duty>:
{
   80c10:	b510      	push	{r4, lr}
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80c12:	4b0d      	ldr	r3, [pc, #52]	; (80c48 <set_servo_duty+0x38>)
   80c14:	6818      	ldr	r0, [r3, #0]
   80c16:	4b0d      	ldr	r3, [pc, #52]	; (80c4c <set_servo_duty+0x3c>)
   80c18:	4798      	blx	r3
   80c1a:	4604      	mov	r4, r0
   80c1c:	4b0c      	ldr	r3, [pc, #48]	; (80c50 <set_servo_duty+0x40>)
   80c1e:	7818      	ldrb	r0, [r3, #0]
   80c20:	4b0c      	ldr	r3, [pc, #48]	; (80c54 <set_servo_duty+0x44>)
   80c22:	4798      	blx	r3
   80c24:	4601      	mov	r1, r0
   80c26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80c2a:	4b0b      	ldr	r3, [pc, #44]	; (80c58 <set_servo_duty+0x48>)
   80c2c:	4798      	blx	r3
   80c2e:	4601      	mov	r1, r0
   80c30:	4620      	mov	r0, r4
   80c32:	4b0a      	ldr	r3, [pc, #40]	; (80c5c <set_servo_duty+0x4c>)
   80c34:	4798      	blx	r3
   80c36:	4b0a      	ldr	r3, [pc, #40]	; (80c60 <set_servo_duty+0x50>)
   80c38:	4798      	blx	r3
   80c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80c3e:	4b09      	ldr	r3, [pc, #36]	; (80c64 <set_servo_duty+0x54>)
   80c40:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80c44:	bd10      	pop	{r4, pc}
   80c46:	bf00      	nop
   80c48:	20000460 	.word	0x20000460
   80c4c:	000817ad 	.word	0x000817ad
   80c50:	2000045d 	.word	0x2000045d
   80c54:	00080bb9 	.word	0x00080bb9
   80c58:	00081649 	.word	0x00081649
   80c5c:	0008185d 	.word	0x0008185d
   80c60:	00081c35 	.word	0x00081c35
   80c64:	40094000 	.word	0x40094000

00080c68 <pwm_init>:
{
   80c68:	b510      	push	{r4, lr}
	PIOC->PIO_PDR |= PIO_PDR_P19;
   80c6a:	4b20      	ldr	r3, [pc, #128]	; (80cec <pwm_init+0x84>)
   80c6c:	685a      	ldr	r2, [r3, #4]
   80c6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c72:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   80c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80c7a:	671a      	str	r2, [r3, #112]	; 0x70
	PMC->PMC_PCR |= (ID_PWM << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   80c7c:	491c      	ldr	r1, [pc, #112]	; (80cf0 <pwm_init+0x88>)
   80c7e:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
   80c82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80c86:	f042 0224 	orr.w	r2, r2, #36	; 0x24
   80c8a:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_PWM-32));
   80c8e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80c92:	f042 0210 	orr.w	r2, r2, #16
   80c96:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	PIOC->PIO_WPMR = 0;
   80c9a:	2200      	movs	r2, #0
   80c9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR = 0;
   80ca0:	4c14      	ldr	r4, [pc, #80]	; (80cf4 <pwm_init+0x8c>)
   80ca2:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	PWM->PWM_CLK = PWM_CLK_DIVA(84) | PWM_CLK_PREA(0);
   80ca6:	2354      	movs	r3, #84	; 0x54
   80ca8:	6023      	str	r3, [r4, #0]
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_CLKA;
   80caa:	230b      	movs	r3, #11
   80cac:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
	servo_period = 20E-3 * F_CPU / 84;
   80cb0:	f644 6320 	movw	r3, #20000	; 0x4e20
   80cb4:	4a10      	ldr	r2, [pc, #64]	; (80cf8 <pwm_init+0x90>)
   80cb6:	6013      	str	r3, [r2, #0]
	PWM->PWM_CH_NUM[5].PWM_CPRD = PWM_CPRD_CPRD(servo_period);
   80cb8:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80cbc:	4b0f      	ldr	r3, [pc, #60]	; (80cfc <pwm_init+0x94>)
   80cbe:	7818      	ldrb	r0, [r3, #0]
   80cc0:	4b0f      	ldr	r3, [pc, #60]	; (80d00 <pwm_init+0x98>)
   80cc2:	4798      	blx	r3
   80cc4:	4601      	mov	r1, r0
   80cc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80cca:	4b0e      	ldr	r3, [pc, #56]	; (80d04 <pwm_init+0x9c>)
   80ccc:	4798      	blx	r3
   80cce:	490e      	ldr	r1, [pc, #56]	; (80d08 <pwm_init+0xa0>)
   80cd0:	4b0e      	ldr	r3, [pc, #56]	; (80d0c <pwm_init+0xa4>)
   80cd2:	4798      	blx	r3
   80cd4:	4b0e      	ldr	r3, [pc, #56]	; (80d10 <pwm_init+0xa8>)
   80cd6:	4798      	blx	r3
   80cd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80cdc:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
	set_servo_duty();
   80ce0:	4b0c      	ldr	r3, [pc, #48]	; (80d14 <pwm_init+0xac>)
   80ce2:	4798      	blx	r3
	PWM->PWM_ENA = PWM_ENA_CHID5;
   80ce4:	2320      	movs	r3, #32
   80ce6:	6063      	str	r3, [r4, #4]
   80ce8:	bd10      	pop	{r4, pc}
   80cea:	bf00      	nop
   80cec:	400e1200 	.word	0x400e1200
   80cf0:	400e0600 	.word	0x400e0600
   80cf4:	40094000 	.word	0x40094000
   80cf8:	20000460 	.word	0x20000460
   80cfc:	2000045d 	.word	0x2000045d
   80d00:	00080bb9 	.word	0x00080bb9
   80d04:	00081649 	.word	0x00081649
   80d08:	469c4000 	.word	0x469c4000
   80d0c:	0008185d 	.word	0x0008185d
   80d10:	00081c35 	.word	0x00081c35
   80d14:	00080c11 	.word	0x00080c11

00080d18 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80d18:	4b16      	ldr	r3, [pc, #88]	; (80d74 <configure_uart+0x5c>)
   80d1a:	2200      	movs	r2, #0
   80d1c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80d1e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d20:	4b15      	ldr	r3, [pc, #84]	; (80d78 <configure_uart+0x60>)
   80d22:	f44f 7140 	mov.w	r1, #768	; 0x300
   80d26:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d28:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80d2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80d2e:	4002      	ands	r2, r0
   80d30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80d34:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d36:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80d38:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d3c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80d40:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80d46:	21ac      	movs	r1, #172	; 0xac
   80d48:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = (int)(MCK/(16*BAUDRATE)); // MCK / (16 * x) = BaudRate (write x into UART_BRGR, which is 547) 
   80d4a:	f240 2122 	movw	r1, #546	; 0x222
   80d4e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80d54:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80d56:	f240 2102 	movw	r1, #514	; 0x202
   80d5a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80d5e:	f04f 31ff 	mov.w	r1, #4294967295
   80d62:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80d64:	21e1      	movs	r1, #225	; 0xe1
   80d66:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80d68:	4904      	ldr	r1, [pc, #16]	; (80d7c <configure_uart+0x64>)
   80d6a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80d6c:	2250      	movs	r2, #80	; 0x50
   80d6e:	601a      	str	r2, [r3, #0]
   80d70:	4770      	bx	lr
   80d72:	bf00      	nop
   80d74:	20000464 	.word	0x20000464
   80d78:	400e0e00 	.word	0x400e0e00
   80d7c:	e000e100 	.word	0xe000e100

00080d80 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80d80:	4b07      	ldr	r3, [pc, #28]	; (80da0 <uart_putchar+0x20>)
   80d82:	695b      	ldr	r3, [r3, #20]
   80d84:	f013 0f02 	tst.w	r3, #2
   80d88:	d008      	beq.n	80d9c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80d8a:	4b05      	ldr	r3, [pc, #20]	; (80da0 <uart_putchar+0x20>)
   80d8c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80d8e:	4b04      	ldr	r3, [pc, #16]	; (80da0 <uart_putchar+0x20>)
   80d90:	695b      	ldr	r3, [r3, #20]
   80d92:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d96:	d0fa      	beq.n	80d8e <uart_putchar+0xe>
	return 0;
   80d98:	2000      	movs	r0, #0
   80d9a:	4770      	bx	lr
	return 1;
   80d9c:	2001      	movs	r0, #1
}
   80d9e:	4770      	bx	lr
   80da0:	400e0800 	.word	0x400e0800

00080da4 <UART_Handler>:

void UART_Handler(void)
{
   80da4:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80da6:	4b15      	ldr	r3, [pc, #84]	; (80dfc <UART_Handler+0x58>)
   80da8:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80daa:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80dae:	d003      	beq.n	80db8 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80db0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80db4:	4a11      	ldr	r2, [pc, #68]	; (80dfc <UART_Handler+0x58>)
   80db6:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80db8:	f013 0f01 	tst.w	r3, #1
   80dbc:	d012      	beq.n	80de4 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80dbe:	4810      	ldr	r0, [pc, #64]	; (80e00 <UART_Handler+0x5c>)
   80dc0:	7842      	ldrb	r2, [r0, #1]
   80dc2:	1c53      	adds	r3, r2, #1
   80dc4:	4259      	negs	r1, r3
   80dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80dca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80dce:	bf58      	it	pl
   80dd0:	424b      	negpl	r3, r1
   80dd2:	7801      	ldrb	r1, [r0, #0]
   80dd4:	428b      	cmp	r3, r1
   80dd6:	d006      	beq.n	80de6 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80dd8:	4908      	ldr	r1, [pc, #32]	; (80dfc <UART_Handler+0x58>)
   80dda:	6988      	ldr	r0, [r1, #24]
   80ddc:	4908      	ldr	r1, [pc, #32]	; (80e00 <UART_Handler+0x5c>)
   80dde:	440a      	add	r2, r1
   80de0:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80de2:	704b      	strb	r3, [r1, #1]
   80de4:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80de6:	4807      	ldr	r0, [pc, #28]	; (80e04 <UART_Handler+0x60>)
   80de8:	4b07      	ldr	r3, [pc, #28]	; (80e08 <UART_Handler+0x64>)
   80dea:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80dec:	4b04      	ldr	r3, [pc, #16]	; (80e00 <UART_Handler+0x5c>)
   80dee:	7859      	ldrb	r1, [r3, #1]
   80df0:	4a02      	ldr	r2, [pc, #8]	; (80dfc <UART_Handler+0x58>)
   80df2:	6992      	ldr	r2, [r2, #24]
   80df4:	440b      	add	r3, r1
   80df6:	709a      	strb	r2, [r3, #2]
			return;
   80df8:	bd08      	pop	{r3, pc}
   80dfa:	bf00      	nop
   80dfc:	400e0800 	.word	0x400e0800
   80e00:	20000464 	.word	0x20000464
   80e04:	00081e5c 	.word	0x00081e5c
   80e08:	00080b91 	.word	0x00080b91

00080e0c <__aeabi_drsub>:
   80e0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e10:	e002      	b.n	80e18 <__adddf3>
   80e12:	bf00      	nop

00080e14 <__aeabi_dsub>:
   80e14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e18 <__adddf3>:
   80e18:	b530      	push	{r4, r5, lr}
   80e1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e22:	ea94 0f05 	teq	r4, r5
   80e26:	bf08      	it	eq
   80e28:	ea90 0f02 	teqeq	r0, r2
   80e2c:	bf1f      	itttt	ne
   80e2e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80e32:	ea55 0c02 	orrsne.w	ip, r5, r2
   80e36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80e3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e3e:	f000 80e2 	beq.w	81006 <__adddf3+0x1ee>
   80e42:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80e46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80e4a:	bfb8      	it	lt
   80e4c:	426d      	neglt	r5, r5
   80e4e:	dd0c      	ble.n	80e6a <__adddf3+0x52>
   80e50:	442c      	add	r4, r5
   80e52:	ea80 0202 	eor.w	r2, r0, r2
   80e56:	ea81 0303 	eor.w	r3, r1, r3
   80e5a:	ea82 0000 	eor.w	r0, r2, r0
   80e5e:	ea83 0101 	eor.w	r1, r3, r1
   80e62:	ea80 0202 	eor.w	r2, r0, r2
   80e66:	ea81 0303 	eor.w	r3, r1, r3
   80e6a:	2d36      	cmp	r5, #54	; 0x36
   80e6c:	bf88      	it	hi
   80e6e:	bd30      	pophi	{r4, r5, pc}
   80e70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80e74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80e78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80e7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80e80:	d002      	beq.n	80e88 <__adddf3+0x70>
   80e82:	4240      	negs	r0, r0
   80e84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80e88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80e8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80e90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80e94:	d002      	beq.n	80e9c <__adddf3+0x84>
   80e96:	4252      	negs	r2, r2
   80e98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80e9c:	ea94 0f05 	teq	r4, r5
   80ea0:	f000 80a7 	beq.w	80ff2 <__adddf3+0x1da>
   80ea4:	f1a4 0401 	sub.w	r4, r4, #1
   80ea8:	f1d5 0e20 	rsbs	lr, r5, #32
   80eac:	db0d      	blt.n	80eca <__adddf3+0xb2>
   80eae:	fa02 fc0e 	lsl.w	ip, r2, lr
   80eb2:	fa22 f205 	lsr.w	r2, r2, r5
   80eb6:	1880      	adds	r0, r0, r2
   80eb8:	f141 0100 	adc.w	r1, r1, #0
   80ebc:	fa03 f20e 	lsl.w	r2, r3, lr
   80ec0:	1880      	adds	r0, r0, r2
   80ec2:	fa43 f305 	asr.w	r3, r3, r5
   80ec6:	4159      	adcs	r1, r3
   80ec8:	e00e      	b.n	80ee8 <__adddf3+0xd0>
   80eca:	f1a5 0520 	sub.w	r5, r5, #32
   80ece:	f10e 0e20 	add.w	lr, lr, #32
   80ed2:	2a01      	cmp	r2, #1
   80ed4:	fa03 fc0e 	lsl.w	ip, r3, lr
   80ed8:	bf28      	it	cs
   80eda:	f04c 0c02 	orrcs.w	ip, ip, #2
   80ede:	fa43 f305 	asr.w	r3, r3, r5
   80ee2:	18c0      	adds	r0, r0, r3
   80ee4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80ee8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80eec:	d507      	bpl.n	80efe <__adddf3+0xe6>
   80eee:	f04f 0e00 	mov.w	lr, #0
   80ef2:	f1dc 0c00 	rsbs	ip, ip, #0
   80ef6:	eb7e 0000 	sbcs.w	r0, lr, r0
   80efa:	eb6e 0101 	sbc.w	r1, lr, r1
   80efe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f02:	d31b      	bcc.n	80f3c <__adddf3+0x124>
   80f04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f08:	d30c      	bcc.n	80f24 <__adddf3+0x10c>
   80f0a:	0849      	lsrs	r1, r1, #1
   80f0c:	ea5f 0030 	movs.w	r0, r0, rrx
   80f10:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f14:	f104 0401 	add.w	r4, r4, #1
   80f18:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f20:	f080 809a 	bcs.w	81058 <__adddf3+0x240>
   80f24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f28:	bf08      	it	eq
   80f2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80f2e:	f150 0000 	adcs.w	r0, r0, #0
   80f32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f36:	ea41 0105 	orr.w	r1, r1, r5
   80f3a:	bd30      	pop	{r4, r5, pc}
   80f3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80f40:	4140      	adcs	r0, r0
   80f42:	eb41 0101 	adc.w	r1, r1, r1
   80f46:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f4a:	f1a4 0401 	sub.w	r4, r4, #1
   80f4e:	d1e9      	bne.n	80f24 <__adddf3+0x10c>
   80f50:	f091 0f00 	teq	r1, #0
   80f54:	bf04      	itt	eq
   80f56:	4601      	moveq	r1, r0
   80f58:	2000      	moveq	r0, #0
   80f5a:	fab1 f381 	clz	r3, r1
   80f5e:	bf08      	it	eq
   80f60:	3320      	addeq	r3, #32
   80f62:	f1a3 030b 	sub.w	r3, r3, #11
   80f66:	f1b3 0220 	subs.w	r2, r3, #32
   80f6a:	da0c      	bge.n	80f86 <__adddf3+0x16e>
   80f6c:	320c      	adds	r2, #12
   80f6e:	dd08      	ble.n	80f82 <__adddf3+0x16a>
   80f70:	f102 0c14 	add.w	ip, r2, #20
   80f74:	f1c2 020c 	rsb	r2, r2, #12
   80f78:	fa01 f00c 	lsl.w	r0, r1, ip
   80f7c:	fa21 f102 	lsr.w	r1, r1, r2
   80f80:	e00c      	b.n	80f9c <__adddf3+0x184>
   80f82:	f102 0214 	add.w	r2, r2, #20
   80f86:	bfd8      	it	le
   80f88:	f1c2 0c20 	rsble	ip, r2, #32
   80f8c:	fa01 f102 	lsl.w	r1, r1, r2
   80f90:	fa20 fc0c 	lsr.w	ip, r0, ip
   80f94:	bfdc      	itt	le
   80f96:	ea41 010c 	orrle.w	r1, r1, ip
   80f9a:	4090      	lslle	r0, r2
   80f9c:	1ae4      	subs	r4, r4, r3
   80f9e:	bfa2      	ittt	ge
   80fa0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80fa4:	4329      	orrge	r1, r5
   80fa6:	bd30      	popge	{r4, r5, pc}
   80fa8:	ea6f 0404 	mvn.w	r4, r4
   80fac:	3c1f      	subs	r4, #31
   80fae:	da1c      	bge.n	80fea <__adddf3+0x1d2>
   80fb0:	340c      	adds	r4, #12
   80fb2:	dc0e      	bgt.n	80fd2 <__adddf3+0x1ba>
   80fb4:	f104 0414 	add.w	r4, r4, #20
   80fb8:	f1c4 0220 	rsb	r2, r4, #32
   80fbc:	fa20 f004 	lsr.w	r0, r0, r4
   80fc0:	fa01 f302 	lsl.w	r3, r1, r2
   80fc4:	ea40 0003 	orr.w	r0, r0, r3
   80fc8:	fa21 f304 	lsr.w	r3, r1, r4
   80fcc:	ea45 0103 	orr.w	r1, r5, r3
   80fd0:	bd30      	pop	{r4, r5, pc}
   80fd2:	f1c4 040c 	rsb	r4, r4, #12
   80fd6:	f1c4 0220 	rsb	r2, r4, #32
   80fda:	fa20 f002 	lsr.w	r0, r0, r2
   80fde:	fa01 f304 	lsl.w	r3, r1, r4
   80fe2:	ea40 0003 	orr.w	r0, r0, r3
   80fe6:	4629      	mov	r1, r5
   80fe8:	bd30      	pop	{r4, r5, pc}
   80fea:	fa21 f004 	lsr.w	r0, r1, r4
   80fee:	4629      	mov	r1, r5
   80ff0:	bd30      	pop	{r4, r5, pc}
   80ff2:	f094 0f00 	teq	r4, #0
   80ff6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80ffa:	bf06      	itte	eq
   80ffc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81000:	3401      	addeq	r4, #1
   81002:	3d01      	subne	r5, #1
   81004:	e74e      	b.n	80ea4 <__adddf3+0x8c>
   81006:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8100a:	bf18      	it	ne
   8100c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81010:	d029      	beq.n	81066 <__adddf3+0x24e>
   81012:	ea94 0f05 	teq	r4, r5
   81016:	bf08      	it	eq
   81018:	ea90 0f02 	teqeq	r0, r2
   8101c:	d005      	beq.n	8102a <__adddf3+0x212>
   8101e:	ea54 0c00 	orrs.w	ip, r4, r0
   81022:	bf04      	itt	eq
   81024:	4619      	moveq	r1, r3
   81026:	4610      	moveq	r0, r2
   81028:	bd30      	pop	{r4, r5, pc}
   8102a:	ea91 0f03 	teq	r1, r3
   8102e:	bf1e      	ittt	ne
   81030:	2100      	movne	r1, #0
   81032:	2000      	movne	r0, #0
   81034:	bd30      	popne	{r4, r5, pc}
   81036:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8103a:	d105      	bne.n	81048 <__adddf3+0x230>
   8103c:	0040      	lsls	r0, r0, #1
   8103e:	4149      	adcs	r1, r1
   81040:	bf28      	it	cs
   81042:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81046:	bd30      	pop	{r4, r5, pc}
   81048:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8104c:	bf3c      	itt	cc
   8104e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81052:	bd30      	popcc	{r4, r5, pc}
   81054:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81058:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8105c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81060:	f04f 0000 	mov.w	r0, #0
   81064:	bd30      	pop	{r4, r5, pc}
   81066:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8106a:	bf1a      	itte	ne
   8106c:	4619      	movne	r1, r3
   8106e:	4610      	movne	r0, r2
   81070:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81074:	bf1c      	itt	ne
   81076:	460b      	movne	r3, r1
   81078:	4602      	movne	r2, r0
   8107a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8107e:	bf06      	itte	eq
   81080:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81084:	ea91 0f03 	teqeq	r1, r3
   81088:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8108c:	bd30      	pop	{r4, r5, pc}
   8108e:	bf00      	nop

00081090 <__aeabi_ui2d>:
   81090:	f090 0f00 	teq	r0, #0
   81094:	bf04      	itt	eq
   81096:	2100      	moveq	r1, #0
   81098:	4770      	bxeq	lr
   8109a:	b530      	push	{r4, r5, lr}
   8109c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810a4:	f04f 0500 	mov.w	r5, #0
   810a8:	f04f 0100 	mov.w	r1, #0
   810ac:	e750      	b.n	80f50 <__adddf3+0x138>
   810ae:	bf00      	nop

000810b0 <__aeabi_i2d>:
   810b0:	f090 0f00 	teq	r0, #0
   810b4:	bf04      	itt	eq
   810b6:	2100      	moveq	r1, #0
   810b8:	4770      	bxeq	lr
   810ba:	b530      	push	{r4, r5, lr}
   810bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   810c8:	bf48      	it	mi
   810ca:	4240      	negmi	r0, r0
   810cc:	f04f 0100 	mov.w	r1, #0
   810d0:	e73e      	b.n	80f50 <__adddf3+0x138>
   810d2:	bf00      	nop

000810d4 <__aeabi_f2d>:
   810d4:	0042      	lsls	r2, r0, #1
   810d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   810da:	ea4f 0131 	mov.w	r1, r1, rrx
   810de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   810e2:	bf1f      	itttt	ne
   810e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   810e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   810ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   810f0:	4770      	bxne	lr
   810f2:	f092 0f00 	teq	r2, #0
   810f6:	bf14      	ite	ne
   810f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   810fc:	4770      	bxeq	lr
   810fe:	b530      	push	{r4, r5, lr}
   81100:	f44f 7460 	mov.w	r4, #896	; 0x380
   81104:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81108:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8110c:	e720      	b.n	80f50 <__adddf3+0x138>
   8110e:	bf00      	nop

00081110 <__aeabi_ul2d>:
   81110:	ea50 0201 	orrs.w	r2, r0, r1
   81114:	bf08      	it	eq
   81116:	4770      	bxeq	lr
   81118:	b530      	push	{r4, r5, lr}
   8111a:	f04f 0500 	mov.w	r5, #0
   8111e:	e00a      	b.n	81136 <__aeabi_l2d+0x16>

00081120 <__aeabi_l2d>:
   81120:	ea50 0201 	orrs.w	r2, r0, r1
   81124:	bf08      	it	eq
   81126:	4770      	bxeq	lr
   81128:	b530      	push	{r4, r5, lr}
   8112a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8112e:	d502      	bpl.n	81136 <__aeabi_l2d+0x16>
   81130:	4240      	negs	r0, r0
   81132:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81136:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8113a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8113e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81142:	f43f aedc 	beq.w	80efe <__adddf3+0xe6>
   81146:	f04f 0203 	mov.w	r2, #3
   8114a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8114e:	bf18      	it	ne
   81150:	3203      	addne	r2, #3
   81152:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81156:	bf18      	it	ne
   81158:	3203      	addne	r2, #3
   8115a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8115e:	f1c2 0320 	rsb	r3, r2, #32
   81162:	fa00 fc03 	lsl.w	ip, r0, r3
   81166:	fa20 f002 	lsr.w	r0, r0, r2
   8116a:	fa01 fe03 	lsl.w	lr, r1, r3
   8116e:	ea40 000e 	orr.w	r0, r0, lr
   81172:	fa21 f102 	lsr.w	r1, r1, r2
   81176:	4414      	add	r4, r2
   81178:	e6c1      	b.n	80efe <__adddf3+0xe6>
   8117a:	bf00      	nop

0008117c <__aeabi_dmul>:
   8117c:	b570      	push	{r4, r5, r6, lr}
   8117e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81182:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81186:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8118a:	bf1d      	ittte	ne
   8118c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81190:	ea94 0f0c 	teqne	r4, ip
   81194:	ea95 0f0c 	teqne	r5, ip
   81198:	f000 f8de 	bleq	81358 <__aeabi_dmul+0x1dc>
   8119c:	442c      	add	r4, r5
   8119e:	ea81 0603 	eor.w	r6, r1, r3
   811a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   811a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   811aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   811ae:	bf18      	it	ne
   811b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   811b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811bc:	d038      	beq.n	81230 <__aeabi_dmul+0xb4>
   811be:	fba0 ce02 	umull	ip, lr, r0, r2
   811c2:	f04f 0500 	mov.w	r5, #0
   811c6:	fbe1 e502 	umlal	lr, r5, r1, r2
   811ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   811ce:	fbe0 e503 	umlal	lr, r5, r0, r3
   811d2:	f04f 0600 	mov.w	r6, #0
   811d6:	fbe1 5603 	umlal	r5, r6, r1, r3
   811da:	f09c 0f00 	teq	ip, #0
   811de:	bf18      	it	ne
   811e0:	f04e 0e01 	orrne.w	lr, lr, #1
   811e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   811e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   811ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   811f0:	d204      	bcs.n	811fc <__aeabi_dmul+0x80>
   811f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   811f6:	416d      	adcs	r5, r5
   811f8:	eb46 0606 	adc.w	r6, r6, r6
   811fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81200:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81204:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81208:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8120c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81210:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81214:	bf88      	it	hi
   81216:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8121a:	d81e      	bhi.n	8125a <__aeabi_dmul+0xde>
   8121c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81220:	bf08      	it	eq
   81222:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81226:	f150 0000 	adcs.w	r0, r0, #0
   8122a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8122e:	bd70      	pop	{r4, r5, r6, pc}
   81230:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81234:	ea46 0101 	orr.w	r1, r6, r1
   81238:	ea40 0002 	orr.w	r0, r0, r2
   8123c:	ea81 0103 	eor.w	r1, r1, r3
   81240:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81244:	bfc2      	ittt	gt
   81246:	ebd4 050c 	rsbsgt	r5, r4, ip
   8124a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8124e:	bd70      	popgt	{r4, r5, r6, pc}
   81250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81254:	f04f 0e00 	mov.w	lr, #0
   81258:	3c01      	subs	r4, #1
   8125a:	f300 80ab 	bgt.w	813b4 <__aeabi_dmul+0x238>
   8125e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81262:	bfde      	ittt	le
   81264:	2000      	movle	r0, #0
   81266:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8126a:	bd70      	pople	{r4, r5, r6, pc}
   8126c:	f1c4 0400 	rsb	r4, r4, #0
   81270:	3c20      	subs	r4, #32
   81272:	da35      	bge.n	812e0 <__aeabi_dmul+0x164>
   81274:	340c      	adds	r4, #12
   81276:	dc1b      	bgt.n	812b0 <__aeabi_dmul+0x134>
   81278:	f104 0414 	add.w	r4, r4, #20
   8127c:	f1c4 0520 	rsb	r5, r4, #32
   81280:	fa00 f305 	lsl.w	r3, r0, r5
   81284:	fa20 f004 	lsr.w	r0, r0, r4
   81288:	fa01 f205 	lsl.w	r2, r1, r5
   8128c:	ea40 0002 	orr.w	r0, r0, r2
   81290:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81294:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81298:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8129c:	fa21 f604 	lsr.w	r6, r1, r4
   812a0:	eb42 0106 	adc.w	r1, r2, r6
   812a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812a8:	bf08      	it	eq
   812aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812ae:	bd70      	pop	{r4, r5, r6, pc}
   812b0:	f1c4 040c 	rsb	r4, r4, #12
   812b4:	f1c4 0520 	rsb	r5, r4, #32
   812b8:	fa00 f304 	lsl.w	r3, r0, r4
   812bc:	fa20 f005 	lsr.w	r0, r0, r5
   812c0:	fa01 f204 	lsl.w	r2, r1, r4
   812c4:	ea40 0002 	orr.w	r0, r0, r2
   812c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812d0:	f141 0100 	adc.w	r1, r1, #0
   812d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812d8:	bf08      	it	eq
   812da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812de:	bd70      	pop	{r4, r5, r6, pc}
   812e0:	f1c4 0520 	rsb	r5, r4, #32
   812e4:	fa00 f205 	lsl.w	r2, r0, r5
   812e8:	ea4e 0e02 	orr.w	lr, lr, r2
   812ec:	fa20 f304 	lsr.w	r3, r0, r4
   812f0:	fa01 f205 	lsl.w	r2, r1, r5
   812f4:	ea43 0302 	orr.w	r3, r3, r2
   812f8:	fa21 f004 	lsr.w	r0, r1, r4
   812fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81300:	fa21 f204 	lsr.w	r2, r1, r4
   81304:	ea20 0002 	bic.w	r0, r0, r2
   81308:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8130c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81310:	bf08      	it	eq
   81312:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81316:	bd70      	pop	{r4, r5, r6, pc}
   81318:	f094 0f00 	teq	r4, #0
   8131c:	d10f      	bne.n	8133e <__aeabi_dmul+0x1c2>
   8131e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81322:	0040      	lsls	r0, r0, #1
   81324:	eb41 0101 	adc.w	r1, r1, r1
   81328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8132c:	bf08      	it	eq
   8132e:	3c01      	subeq	r4, #1
   81330:	d0f7      	beq.n	81322 <__aeabi_dmul+0x1a6>
   81332:	ea41 0106 	orr.w	r1, r1, r6
   81336:	f095 0f00 	teq	r5, #0
   8133a:	bf18      	it	ne
   8133c:	4770      	bxne	lr
   8133e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81342:	0052      	lsls	r2, r2, #1
   81344:	eb43 0303 	adc.w	r3, r3, r3
   81348:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8134c:	bf08      	it	eq
   8134e:	3d01      	subeq	r5, #1
   81350:	d0f7      	beq.n	81342 <__aeabi_dmul+0x1c6>
   81352:	ea43 0306 	orr.w	r3, r3, r6
   81356:	4770      	bx	lr
   81358:	ea94 0f0c 	teq	r4, ip
   8135c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81360:	bf18      	it	ne
   81362:	ea95 0f0c 	teqne	r5, ip
   81366:	d00c      	beq.n	81382 <__aeabi_dmul+0x206>
   81368:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8136c:	bf18      	it	ne
   8136e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81372:	d1d1      	bne.n	81318 <__aeabi_dmul+0x19c>
   81374:	ea81 0103 	eor.w	r1, r1, r3
   81378:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8137c:	f04f 0000 	mov.w	r0, #0
   81380:	bd70      	pop	{r4, r5, r6, pc}
   81382:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81386:	bf06      	itte	eq
   81388:	4610      	moveq	r0, r2
   8138a:	4619      	moveq	r1, r3
   8138c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81390:	d019      	beq.n	813c6 <__aeabi_dmul+0x24a>
   81392:	ea94 0f0c 	teq	r4, ip
   81396:	d102      	bne.n	8139e <__aeabi_dmul+0x222>
   81398:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8139c:	d113      	bne.n	813c6 <__aeabi_dmul+0x24a>
   8139e:	ea95 0f0c 	teq	r5, ip
   813a2:	d105      	bne.n	813b0 <__aeabi_dmul+0x234>
   813a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   813a8:	bf1c      	itt	ne
   813aa:	4610      	movne	r0, r2
   813ac:	4619      	movne	r1, r3
   813ae:	d10a      	bne.n	813c6 <__aeabi_dmul+0x24a>
   813b0:	ea81 0103 	eor.w	r1, r1, r3
   813b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   813c0:	f04f 0000 	mov.w	r0, #0
   813c4:	bd70      	pop	{r4, r5, r6, pc}
   813c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   813ce:	bd70      	pop	{r4, r5, r6, pc}

000813d0 <__aeabi_ddiv>:
   813d0:	b570      	push	{r4, r5, r6, lr}
   813d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   813da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   813de:	bf1d      	ittte	ne
   813e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   813e4:	ea94 0f0c 	teqne	r4, ip
   813e8:	ea95 0f0c 	teqne	r5, ip
   813ec:	f000 f8a7 	bleq	8153e <__aeabi_ddiv+0x16e>
   813f0:	eba4 0405 	sub.w	r4, r4, r5
   813f4:	ea81 0e03 	eor.w	lr, r1, r3
   813f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   813fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81400:	f000 8088 	beq.w	81514 <__aeabi_ddiv+0x144>
   81404:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81408:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8140c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81410:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81414:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81418:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8141c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81420:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81424:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81428:	429d      	cmp	r5, r3
   8142a:	bf08      	it	eq
   8142c:	4296      	cmpeq	r6, r2
   8142e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81432:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81436:	d202      	bcs.n	8143e <__aeabi_ddiv+0x6e>
   81438:	085b      	lsrs	r3, r3, #1
   8143a:	ea4f 0232 	mov.w	r2, r2, rrx
   8143e:	1ab6      	subs	r6, r6, r2
   81440:	eb65 0503 	sbc.w	r5, r5, r3
   81444:	085b      	lsrs	r3, r3, #1
   81446:	ea4f 0232 	mov.w	r2, r2, rrx
   8144a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8144e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81452:	ebb6 0e02 	subs.w	lr, r6, r2
   81456:	eb75 0e03 	sbcs.w	lr, r5, r3
   8145a:	bf22      	ittt	cs
   8145c:	1ab6      	subcs	r6, r6, r2
   8145e:	4675      	movcs	r5, lr
   81460:	ea40 000c 	orrcs.w	r0, r0, ip
   81464:	085b      	lsrs	r3, r3, #1
   81466:	ea4f 0232 	mov.w	r2, r2, rrx
   8146a:	ebb6 0e02 	subs.w	lr, r6, r2
   8146e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81472:	bf22      	ittt	cs
   81474:	1ab6      	subcs	r6, r6, r2
   81476:	4675      	movcs	r5, lr
   81478:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8147c:	085b      	lsrs	r3, r3, #1
   8147e:	ea4f 0232 	mov.w	r2, r2, rrx
   81482:	ebb6 0e02 	subs.w	lr, r6, r2
   81486:	eb75 0e03 	sbcs.w	lr, r5, r3
   8148a:	bf22      	ittt	cs
   8148c:	1ab6      	subcs	r6, r6, r2
   8148e:	4675      	movcs	r5, lr
   81490:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81494:	085b      	lsrs	r3, r3, #1
   81496:	ea4f 0232 	mov.w	r2, r2, rrx
   8149a:	ebb6 0e02 	subs.w	lr, r6, r2
   8149e:	eb75 0e03 	sbcs.w	lr, r5, r3
   814a2:	bf22      	ittt	cs
   814a4:	1ab6      	subcs	r6, r6, r2
   814a6:	4675      	movcs	r5, lr
   814a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   814ac:	ea55 0e06 	orrs.w	lr, r5, r6
   814b0:	d018      	beq.n	814e4 <__aeabi_ddiv+0x114>
   814b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   814b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   814ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   814be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   814c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   814c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   814ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   814ce:	d1c0      	bne.n	81452 <__aeabi_ddiv+0x82>
   814d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814d4:	d10b      	bne.n	814ee <__aeabi_ddiv+0x11e>
   814d6:	ea41 0100 	orr.w	r1, r1, r0
   814da:	f04f 0000 	mov.w	r0, #0
   814de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   814e2:	e7b6      	b.n	81452 <__aeabi_ddiv+0x82>
   814e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814e8:	bf04      	itt	eq
   814ea:	4301      	orreq	r1, r0
   814ec:	2000      	moveq	r0, #0
   814ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   814f2:	bf88      	it	hi
   814f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   814f8:	f63f aeaf 	bhi.w	8125a <__aeabi_dmul+0xde>
   814fc:	ebb5 0c03 	subs.w	ip, r5, r3
   81500:	bf04      	itt	eq
   81502:	ebb6 0c02 	subseq.w	ip, r6, r2
   81506:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8150a:	f150 0000 	adcs.w	r0, r0, #0
   8150e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81512:	bd70      	pop	{r4, r5, r6, pc}
   81514:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81518:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8151c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81520:	bfc2      	ittt	gt
   81522:	ebd4 050c 	rsbsgt	r5, r4, ip
   81526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8152a:	bd70      	popgt	{r4, r5, r6, pc}
   8152c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81530:	f04f 0e00 	mov.w	lr, #0
   81534:	3c01      	subs	r4, #1
   81536:	e690      	b.n	8125a <__aeabi_dmul+0xde>
   81538:	ea45 0e06 	orr.w	lr, r5, r6
   8153c:	e68d      	b.n	8125a <__aeabi_dmul+0xde>
   8153e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81542:	ea94 0f0c 	teq	r4, ip
   81546:	bf08      	it	eq
   81548:	ea95 0f0c 	teqeq	r5, ip
   8154c:	f43f af3b 	beq.w	813c6 <__aeabi_dmul+0x24a>
   81550:	ea94 0f0c 	teq	r4, ip
   81554:	d10a      	bne.n	8156c <__aeabi_ddiv+0x19c>
   81556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8155a:	f47f af34 	bne.w	813c6 <__aeabi_dmul+0x24a>
   8155e:	ea95 0f0c 	teq	r5, ip
   81562:	f47f af25 	bne.w	813b0 <__aeabi_dmul+0x234>
   81566:	4610      	mov	r0, r2
   81568:	4619      	mov	r1, r3
   8156a:	e72c      	b.n	813c6 <__aeabi_dmul+0x24a>
   8156c:	ea95 0f0c 	teq	r5, ip
   81570:	d106      	bne.n	81580 <__aeabi_ddiv+0x1b0>
   81572:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81576:	f43f aefd 	beq.w	81374 <__aeabi_dmul+0x1f8>
   8157a:	4610      	mov	r0, r2
   8157c:	4619      	mov	r1, r3
   8157e:	e722      	b.n	813c6 <__aeabi_dmul+0x24a>
   81580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81584:	bf18      	it	ne
   81586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8158a:	f47f aec5 	bne.w	81318 <__aeabi_dmul+0x19c>
   8158e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81592:	f47f af0d 	bne.w	813b0 <__aeabi_dmul+0x234>
   81596:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8159a:	f47f aeeb 	bne.w	81374 <__aeabi_dmul+0x1f8>
   8159e:	e712      	b.n	813c6 <__aeabi_dmul+0x24a>

000815a0 <__aeabi_d2f>:
   815a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   815a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   815a8:	bf24      	itt	cs
   815aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   815ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   815b2:	d90d      	bls.n	815d0 <__aeabi_d2f+0x30>
   815b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   815b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   815bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   815c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   815c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   815c8:	bf08      	it	eq
   815ca:	f020 0001 	biceq.w	r0, r0, #1
   815ce:	4770      	bx	lr
   815d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   815d4:	d121      	bne.n	8161a <__aeabi_d2f+0x7a>
   815d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   815da:	bfbc      	itt	lt
   815dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   815e0:	4770      	bxlt	lr
   815e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   815ea:	f1c2 0218 	rsb	r2, r2, #24
   815ee:	f1c2 0c20 	rsb	ip, r2, #32
   815f2:	fa10 f30c 	lsls.w	r3, r0, ip
   815f6:	fa20 f002 	lsr.w	r0, r0, r2
   815fa:	bf18      	it	ne
   815fc:	f040 0001 	orrne.w	r0, r0, #1
   81600:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81604:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81608:	fa03 fc0c 	lsl.w	ip, r3, ip
   8160c:	ea40 000c 	orr.w	r0, r0, ip
   81610:	fa23 f302 	lsr.w	r3, r3, r2
   81614:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81618:	e7cc      	b.n	815b4 <__aeabi_d2f+0x14>
   8161a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8161e:	d107      	bne.n	81630 <__aeabi_d2f+0x90>
   81620:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81624:	bf1e      	ittt	ne
   81626:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8162a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8162e:	4770      	bxne	lr
   81630:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81634:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81638:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8163c:	4770      	bx	lr
   8163e:	bf00      	nop

00081640 <__aeabi_frsub>:
   81640:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81644:	e002      	b.n	8164c <__addsf3>
   81646:	bf00      	nop

00081648 <__aeabi_fsub>:
   81648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008164c <__addsf3>:
   8164c:	0042      	lsls	r2, r0, #1
   8164e:	bf1f      	itttt	ne
   81650:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81654:	ea92 0f03 	teqne	r2, r3
   81658:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   8165c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81660:	d06a      	beq.n	81738 <__addsf3+0xec>
   81662:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81666:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8166a:	bfc1      	itttt	gt
   8166c:	18d2      	addgt	r2, r2, r3
   8166e:	4041      	eorgt	r1, r0
   81670:	4048      	eorgt	r0, r1
   81672:	4041      	eorgt	r1, r0
   81674:	bfb8      	it	lt
   81676:	425b      	neglt	r3, r3
   81678:	2b19      	cmp	r3, #25
   8167a:	bf88      	it	hi
   8167c:	4770      	bxhi	lr
   8167e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81682:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81686:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8168a:	bf18      	it	ne
   8168c:	4240      	negne	r0, r0
   8168e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81692:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81696:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8169a:	bf18      	it	ne
   8169c:	4249      	negne	r1, r1
   8169e:	ea92 0f03 	teq	r2, r3
   816a2:	d03f      	beq.n	81724 <__addsf3+0xd8>
   816a4:	f1a2 0201 	sub.w	r2, r2, #1
   816a8:	fa41 fc03 	asr.w	ip, r1, r3
   816ac:	eb10 000c 	adds.w	r0, r0, ip
   816b0:	f1c3 0320 	rsb	r3, r3, #32
   816b4:	fa01 f103 	lsl.w	r1, r1, r3
   816b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   816bc:	d502      	bpl.n	816c4 <__addsf3+0x78>
   816be:	4249      	negs	r1, r1
   816c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   816c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   816c8:	d313      	bcc.n	816f2 <__addsf3+0xa6>
   816ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   816ce:	d306      	bcc.n	816de <__addsf3+0x92>
   816d0:	0840      	lsrs	r0, r0, #1
   816d2:	ea4f 0131 	mov.w	r1, r1, rrx
   816d6:	f102 0201 	add.w	r2, r2, #1
   816da:	2afe      	cmp	r2, #254	; 0xfe
   816dc:	d251      	bcs.n	81782 <__addsf3+0x136>
   816de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   816e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   816e6:	bf08      	it	eq
   816e8:	f020 0001 	biceq.w	r0, r0, #1
   816ec:	ea40 0003 	orr.w	r0, r0, r3
   816f0:	4770      	bx	lr
   816f2:	0049      	lsls	r1, r1, #1
   816f4:	eb40 0000 	adc.w	r0, r0, r0
   816f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   816fc:	f1a2 0201 	sub.w	r2, r2, #1
   81700:	d1ed      	bne.n	816de <__addsf3+0x92>
   81702:	fab0 fc80 	clz	ip, r0
   81706:	f1ac 0c08 	sub.w	ip, ip, #8
   8170a:	ebb2 020c 	subs.w	r2, r2, ip
   8170e:	fa00 f00c 	lsl.w	r0, r0, ip
   81712:	bfaa      	itet	ge
   81714:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81718:	4252      	neglt	r2, r2
   8171a:	4318      	orrge	r0, r3
   8171c:	bfbc      	itt	lt
   8171e:	40d0      	lsrlt	r0, r2
   81720:	4318      	orrlt	r0, r3
   81722:	4770      	bx	lr
   81724:	f092 0f00 	teq	r2, #0
   81728:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   8172c:	bf06      	itte	eq
   8172e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81732:	3201      	addeq	r2, #1
   81734:	3b01      	subne	r3, #1
   81736:	e7b5      	b.n	816a4 <__addsf3+0x58>
   81738:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8173c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81740:	bf18      	it	ne
   81742:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81746:	d021      	beq.n	8178c <__addsf3+0x140>
   81748:	ea92 0f03 	teq	r2, r3
   8174c:	d004      	beq.n	81758 <__addsf3+0x10c>
   8174e:	f092 0f00 	teq	r2, #0
   81752:	bf08      	it	eq
   81754:	4608      	moveq	r0, r1
   81756:	4770      	bx	lr
   81758:	ea90 0f01 	teq	r0, r1
   8175c:	bf1c      	itt	ne
   8175e:	2000      	movne	r0, #0
   81760:	4770      	bxne	lr
   81762:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81766:	d104      	bne.n	81772 <__addsf3+0x126>
   81768:	0040      	lsls	r0, r0, #1
   8176a:	bf28      	it	cs
   8176c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81770:	4770      	bx	lr
   81772:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81776:	bf3c      	itt	cc
   81778:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   8177c:	4770      	bxcc	lr
   8177e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81782:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81786:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8178a:	4770      	bx	lr
   8178c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81790:	bf16      	itet	ne
   81792:	4608      	movne	r0, r1
   81794:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81798:	4601      	movne	r1, r0
   8179a:	0242      	lsls	r2, r0, #9
   8179c:	bf06      	itte	eq
   8179e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   817a2:	ea90 0f01 	teqeq	r0, r1
   817a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   817aa:	4770      	bx	lr

000817ac <__aeabi_ui2f>:
   817ac:	f04f 0300 	mov.w	r3, #0
   817b0:	e004      	b.n	817bc <__aeabi_i2f+0x8>
   817b2:	bf00      	nop

000817b4 <__aeabi_i2f>:
   817b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   817b8:	bf48      	it	mi
   817ba:	4240      	negmi	r0, r0
   817bc:	ea5f 0c00 	movs.w	ip, r0
   817c0:	bf08      	it	eq
   817c2:	4770      	bxeq	lr
   817c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   817c8:	4601      	mov	r1, r0
   817ca:	f04f 0000 	mov.w	r0, #0
   817ce:	e01c      	b.n	8180a <__aeabi_l2f+0x2a>

000817d0 <__aeabi_ul2f>:
   817d0:	ea50 0201 	orrs.w	r2, r0, r1
   817d4:	bf08      	it	eq
   817d6:	4770      	bxeq	lr
   817d8:	f04f 0300 	mov.w	r3, #0
   817dc:	e00a      	b.n	817f4 <__aeabi_l2f+0x14>
   817de:	bf00      	nop

000817e0 <__aeabi_l2f>:
   817e0:	ea50 0201 	orrs.w	r2, r0, r1
   817e4:	bf08      	it	eq
   817e6:	4770      	bxeq	lr
   817e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   817ec:	d502      	bpl.n	817f4 <__aeabi_l2f+0x14>
   817ee:	4240      	negs	r0, r0
   817f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   817f4:	ea5f 0c01 	movs.w	ip, r1
   817f8:	bf02      	ittt	eq
   817fa:	4684      	moveq	ip, r0
   817fc:	4601      	moveq	r1, r0
   817fe:	2000      	moveq	r0, #0
   81800:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81804:	bf08      	it	eq
   81806:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8180a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8180e:	fabc f28c 	clz	r2, ip
   81812:	3a08      	subs	r2, #8
   81814:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81818:	db10      	blt.n	8183c <__aeabi_l2f+0x5c>
   8181a:	fa01 fc02 	lsl.w	ip, r1, r2
   8181e:	4463      	add	r3, ip
   81820:	fa00 fc02 	lsl.w	ip, r0, r2
   81824:	f1c2 0220 	rsb	r2, r2, #32
   81828:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8182c:	fa20 f202 	lsr.w	r2, r0, r2
   81830:	eb43 0002 	adc.w	r0, r3, r2
   81834:	bf08      	it	eq
   81836:	f020 0001 	biceq.w	r0, r0, #1
   8183a:	4770      	bx	lr
   8183c:	f102 0220 	add.w	r2, r2, #32
   81840:	fa01 fc02 	lsl.w	ip, r1, r2
   81844:	f1c2 0220 	rsb	r2, r2, #32
   81848:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   8184c:	fa21 f202 	lsr.w	r2, r1, r2
   81850:	eb43 0002 	adc.w	r0, r3, r2
   81854:	bf08      	it	eq
   81856:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8185a:	4770      	bx	lr

0008185c <__aeabi_fmul>:
   8185c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81860:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81864:	bf1e      	ittt	ne
   81866:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8186a:	ea92 0f0c 	teqne	r2, ip
   8186e:	ea93 0f0c 	teqne	r3, ip
   81872:	d06f      	beq.n	81954 <__aeabi_fmul+0xf8>
   81874:	441a      	add	r2, r3
   81876:	ea80 0c01 	eor.w	ip, r0, r1
   8187a:	0240      	lsls	r0, r0, #9
   8187c:	bf18      	it	ne
   8187e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   81882:	d01e      	beq.n	818c2 <__aeabi_fmul+0x66>
   81884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81888:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   8188c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81890:	fba0 3101 	umull	r3, r1, r0, r1
   81894:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81898:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   8189c:	bf3e      	ittt	cc
   8189e:	0049      	lslcc	r1, r1, #1
   818a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   818a4:	005b      	lslcc	r3, r3, #1
   818a6:	ea40 0001 	orr.w	r0, r0, r1
   818aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   818ae:	2afd      	cmp	r2, #253	; 0xfd
   818b0:	d81d      	bhi.n	818ee <__aeabi_fmul+0x92>
   818b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   818b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   818ba:	bf08      	it	eq
   818bc:	f020 0001 	biceq.w	r0, r0, #1
   818c0:	4770      	bx	lr
   818c2:	f090 0f00 	teq	r0, #0
   818c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   818ca:	bf08      	it	eq
   818cc:	0249      	lsleq	r1, r1, #9
   818ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   818d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   818d6:	3a7f      	subs	r2, #127	; 0x7f
   818d8:	bfc2      	ittt	gt
   818da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   818de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   818e2:	4770      	bxgt	lr
   818e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818e8:	f04f 0300 	mov.w	r3, #0
   818ec:	3a01      	subs	r2, #1
   818ee:	dc5d      	bgt.n	819ac <__aeabi_fmul+0x150>
   818f0:	f112 0f19 	cmn.w	r2, #25
   818f4:	bfdc      	itt	le
   818f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   818fa:	4770      	bxle	lr
   818fc:	f1c2 0200 	rsb	r2, r2, #0
   81900:	0041      	lsls	r1, r0, #1
   81902:	fa21 f102 	lsr.w	r1, r1, r2
   81906:	f1c2 0220 	rsb	r2, r2, #32
   8190a:	fa00 fc02 	lsl.w	ip, r0, r2
   8190e:	ea5f 0031 	movs.w	r0, r1, rrx
   81912:	f140 0000 	adc.w	r0, r0, #0
   81916:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8191a:	bf08      	it	eq
   8191c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81920:	4770      	bx	lr
   81922:	f092 0f00 	teq	r2, #0
   81926:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8192a:	bf02      	ittt	eq
   8192c:	0040      	lsleq	r0, r0, #1
   8192e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81932:	3a01      	subeq	r2, #1
   81934:	d0f9      	beq.n	8192a <__aeabi_fmul+0xce>
   81936:	ea40 000c 	orr.w	r0, r0, ip
   8193a:	f093 0f00 	teq	r3, #0
   8193e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81942:	bf02      	ittt	eq
   81944:	0049      	lsleq	r1, r1, #1
   81946:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8194a:	3b01      	subeq	r3, #1
   8194c:	d0f9      	beq.n	81942 <__aeabi_fmul+0xe6>
   8194e:	ea41 010c 	orr.w	r1, r1, ip
   81952:	e78f      	b.n	81874 <__aeabi_fmul+0x18>
   81954:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81958:	ea92 0f0c 	teq	r2, ip
   8195c:	bf18      	it	ne
   8195e:	ea93 0f0c 	teqne	r3, ip
   81962:	d00a      	beq.n	8197a <__aeabi_fmul+0x11e>
   81964:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81968:	bf18      	it	ne
   8196a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8196e:	d1d8      	bne.n	81922 <__aeabi_fmul+0xc6>
   81970:	ea80 0001 	eor.w	r0, r0, r1
   81974:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81978:	4770      	bx	lr
   8197a:	f090 0f00 	teq	r0, #0
   8197e:	bf17      	itett	ne
   81980:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81984:	4608      	moveq	r0, r1
   81986:	f091 0f00 	teqne	r1, #0
   8198a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8198e:	d014      	beq.n	819ba <__aeabi_fmul+0x15e>
   81990:	ea92 0f0c 	teq	r2, ip
   81994:	d101      	bne.n	8199a <__aeabi_fmul+0x13e>
   81996:	0242      	lsls	r2, r0, #9
   81998:	d10f      	bne.n	819ba <__aeabi_fmul+0x15e>
   8199a:	ea93 0f0c 	teq	r3, ip
   8199e:	d103      	bne.n	819a8 <__aeabi_fmul+0x14c>
   819a0:	024b      	lsls	r3, r1, #9
   819a2:	bf18      	it	ne
   819a4:	4608      	movne	r0, r1
   819a6:	d108      	bne.n	819ba <__aeabi_fmul+0x15e>
   819a8:	ea80 0001 	eor.w	r0, r0, r1
   819ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   819b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   819b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   819b8:	4770      	bx	lr
   819ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   819be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   819c2:	4770      	bx	lr

000819c4 <__aeabi_fdiv>:
   819c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   819c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   819cc:	bf1e      	ittt	ne
   819ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   819d2:	ea92 0f0c 	teqne	r2, ip
   819d6:	ea93 0f0c 	teqne	r3, ip
   819da:	d069      	beq.n	81ab0 <__aeabi_fdiv+0xec>
   819dc:	eba2 0203 	sub.w	r2, r2, r3
   819e0:	ea80 0c01 	eor.w	ip, r0, r1
   819e4:	0249      	lsls	r1, r1, #9
   819e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   819ea:	d037      	beq.n	81a5c <__aeabi_fdiv+0x98>
   819ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   819f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   819f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   819f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819fc:	428b      	cmp	r3, r1
   819fe:	bf38      	it	cc
   81a00:	005b      	lslcc	r3, r3, #1
   81a02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81a06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81a0a:	428b      	cmp	r3, r1
   81a0c:	bf24      	itt	cs
   81a0e:	1a5b      	subcs	r3, r3, r1
   81a10:	ea40 000c 	orrcs.w	r0, r0, ip
   81a14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81a18:	bf24      	itt	cs
   81a1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81a1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81a22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81a26:	bf24      	itt	cs
   81a28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81a30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81a34:	bf24      	itt	cs
   81a36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81a3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81a3e:	011b      	lsls	r3, r3, #4
   81a40:	bf18      	it	ne
   81a42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81a46:	d1e0      	bne.n	81a0a <__aeabi_fdiv+0x46>
   81a48:	2afd      	cmp	r2, #253	; 0xfd
   81a4a:	f63f af50 	bhi.w	818ee <__aeabi_fmul+0x92>
   81a4e:	428b      	cmp	r3, r1
   81a50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81a54:	bf08      	it	eq
   81a56:	f020 0001 	biceq.w	r0, r0, #1
   81a5a:	4770      	bx	lr
   81a5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81a60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81a64:	327f      	adds	r2, #127	; 0x7f
   81a66:	bfc2      	ittt	gt
   81a68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a70:	4770      	bxgt	lr
   81a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a76:	f04f 0300 	mov.w	r3, #0
   81a7a:	3a01      	subs	r2, #1
   81a7c:	e737      	b.n	818ee <__aeabi_fmul+0x92>
   81a7e:	f092 0f00 	teq	r2, #0
   81a82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a86:	bf02      	ittt	eq
   81a88:	0040      	lsleq	r0, r0, #1
   81a8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a8e:	3a01      	subeq	r2, #1
   81a90:	d0f9      	beq.n	81a86 <__aeabi_fdiv+0xc2>
   81a92:	ea40 000c 	orr.w	r0, r0, ip
   81a96:	f093 0f00 	teq	r3, #0
   81a9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a9e:	bf02      	ittt	eq
   81aa0:	0049      	lsleq	r1, r1, #1
   81aa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81aa6:	3b01      	subeq	r3, #1
   81aa8:	d0f9      	beq.n	81a9e <__aeabi_fdiv+0xda>
   81aaa:	ea41 010c 	orr.w	r1, r1, ip
   81aae:	e795      	b.n	819dc <__aeabi_fdiv+0x18>
   81ab0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81ab4:	ea92 0f0c 	teq	r2, ip
   81ab8:	d108      	bne.n	81acc <__aeabi_fdiv+0x108>
   81aba:	0242      	lsls	r2, r0, #9
   81abc:	f47f af7d 	bne.w	819ba <__aeabi_fmul+0x15e>
   81ac0:	ea93 0f0c 	teq	r3, ip
   81ac4:	f47f af70 	bne.w	819a8 <__aeabi_fmul+0x14c>
   81ac8:	4608      	mov	r0, r1
   81aca:	e776      	b.n	819ba <__aeabi_fmul+0x15e>
   81acc:	ea93 0f0c 	teq	r3, ip
   81ad0:	d104      	bne.n	81adc <__aeabi_fdiv+0x118>
   81ad2:	024b      	lsls	r3, r1, #9
   81ad4:	f43f af4c 	beq.w	81970 <__aeabi_fmul+0x114>
   81ad8:	4608      	mov	r0, r1
   81ada:	e76e      	b.n	819ba <__aeabi_fmul+0x15e>
   81adc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81ae0:	bf18      	it	ne
   81ae2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81ae6:	d1ca      	bne.n	81a7e <__aeabi_fdiv+0xba>
   81ae8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81aec:	f47f af5c 	bne.w	819a8 <__aeabi_fmul+0x14c>
   81af0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81af4:	f47f af3c 	bne.w	81970 <__aeabi_fmul+0x114>
   81af8:	e75f      	b.n	819ba <__aeabi_fmul+0x15e>
   81afa:	bf00      	nop

00081afc <__gesf2>:
   81afc:	f04f 3cff 	mov.w	ip, #4294967295
   81b00:	e006      	b.n	81b10 <__cmpsf2+0x4>
   81b02:	bf00      	nop

00081b04 <__lesf2>:
   81b04:	f04f 0c01 	mov.w	ip, #1
   81b08:	e002      	b.n	81b10 <__cmpsf2+0x4>
   81b0a:	bf00      	nop

00081b0c <__cmpsf2>:
   81b0c:	f04f 0c01 	mov.w	ip, #1
   81b10:	f84d cd04 	str.w	ip, [sp, #-4]!
   81b14:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81b18:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81b1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81b20:	bf18      	it	ne
   81b22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81b26:	d011      	beq.n	81b4c <__cmpsf2+0x40>
   81b28:	b001      	add	sp, #4
   81b2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81b2e:	bf18      	it	ne
   81b30:	ea90 0f01 	teqne	r0, r1
   81b34:	bf58      	it	pl
   81b36:	ebb2 0003 	subspl.w	r0, r2, r3
   81b3a:	bf88      	it	hi
   81b3c:	17c8      	asrhi	r0, r1, #31
   81b3e:	bf38      	it	cc
   81b40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81b44:	bf18      	it	ne
   81b46:	f040 0001 	orrne.w	r0, r0, #1
   81b4a:	4770      	bx	lr
   81b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81b50:	d102      	bne.n	81b58 <__cmpsf2+0x4c>
   81b52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81b56:	d105      	bne.n	81b64 <__cmpsf2+0x58>
   81b58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81b5c:	d1e4      	bne.n	81b28 <__cmpsf2+0x1c>
   81b5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81b62:	d0e1      	beq.n	81b28 <__cmpsf2+0x1c>
   81b64:	f85d 0b04 	ldr.w	r0, [sp], #4
   81b68:	4770      	bx	lr
   81b6a:	bf00      	nop

00081b6c <__aeabi_cfrcmple>:
   81b6c:	4684      	mov	ip, r0
   81b6e:	4608      	mov	r0, r1
   81b70:	4661      	mov	r1, ip
   81b72:	e7ff      	b.n	81b74 <__aeabi_cfcmpeq>

00081b74 <__aeabi_cfcmpeq>:
   81b74:	b50f      	push	{r0, r1, r2, r3, lr}
   81b76:	f7ff ffc9 	bl	81b0c <__cmpsf2>
   81b7a:	2800      	cmp	r0, #0
   81b7c:	bf48      	it	mi
   81b7e:	f110 0f00 	cmnmi.w	r0, #0
   81b82:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081b84 <__aeabi_fcmpeq>:
   81b84:	f84d ed08 	str.w	lr, [sp, #-8]!
   81b88:	f7ff fff4 	bl	81b74 <__aeabi_cfcmpeq>
   81b8c:	bf0c      	ite	eq
   81b8e:	2001      	moveq	r0, #1
   81b90:	2000      	movne	r0, #0
   81b92:	f85d fb08 	ldr.w	pc, [sp], #8
   81b96:	bf00      	nop

00081b98 <__aeabi_fcmplt>:
   81b98:	f84d ed08 	str.w	lr, [sp, #-8]!
   81b9c:	f7ff ffea 	bl	81b74 <__aeabi_cfcmpeq>
   81ba0:	bf34      	ite	cc
   81ba2:	2001      	movcc	r0, #1
   81ba4:	2000      	movcs	r0, #0
   81ba6:	f85d fb08 	ldr.w	pc, [sp], #8
   81baa:	bf00      	nop

00081bac <__aeabi_fcmple>:
   81bac:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bb0:	f7ff ffe0 	bl	81b74 <__aeabi_cfcmpeq>
   81bb4:	bf94      	ite	ls
   81bb6:	2001      	movls	r0, #1
   81bb8:	2000      	movhi	r0, #0
   81bba:	f85d fb08 	ldr.w	pc, [sp], #8
   81bbe:	bf00      	nop

00081bc0 <__aeabi_fcmpge>:
   81bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bc4:	f7ff ffd2 	bl	81b6c <__aeabi_cfrcmple>
   81bc8:	bf94      	ite	ls
   81bca:	2001      	movls	r0, #1
   81bcc:	2000      	movhi	r0, #0
   81bce:	f85d fb08 	ldr.w	pc, [sp], #8
   81bd2:	bf00      	nop

00081bd4 <__aeabi_fcmpgt>:
   81bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bd8:	f7ff ffc8 	bl	81b6c <__aeabi_cfrcmple>
   81bdc:	bf34      	ite	cc
   81bde:	2001      	movcc	r0, #1
   81be0:	2000      	movcs	r0, #0
   81be2:	f85d fb08 	ldr.w	pc, [sp], #8
   81be6:	bf00      	nop

00081be8 <__aeabi_f2iz>:
   81be8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81bec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81bf0:	d30f      	bcc.n	81c12 <__aeabi_f2iz+0x2a>
   81bf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81bf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81bfa:	d90d      	bls.n	81c18 <__aeabi_f2iz+0x30>
   81bfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c04:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81c08:	fa23 f002 	lsr.w	r0, r3, r2
   81c0c:	bf18      	it	ne
   81c0e:	4240      	negne	r0, r0
   81c10:	4770      	bx	lr
   81c12:	f04f 0000 	mov.w	r0, #0
   81c16:	4770      	bx	lr
   81c18:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c1c:	d101      	bne.n	81c22 <__aeabi_f2iz+0x3a>
   81c1e:	0242      	lsls	r2, r0, #9
   81c20:	d105      	bne.n	81c2e <__aeabi_f2iz+0x46>
   81c22:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81c26:	bf08      	it	eq
   81c28:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81c2c:	4770      	bx	lr
   81c2e:	f04f 0000 	mov.w	r0, #0
   81c32:	4770      	bx	lr

00081c34 <__aeabi_f2uiz>:
   81c34:	0042      	lsls	r2, r0, #1
   81c36:	d20e      	bcs.n	81c56 <__aeabi_f2uiz+0x22>
   81c38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81c3c:	d30b      	bcc.n	81c56 <__aeabi_f2uiz+0x22>
   81c3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81c42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81c46:	d409      	bmi.n	81c5c <__aeabi_f2uiz+0x28>
   81c48:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c50:	fa23 f002 	lsr.w	r0, r3, r2
   81c54:	4770      	bx	lr
   81c56:	f04f 0000 	mov.w	r0, #0
   81c5a:	4770      	bx	lr
   81c5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c60:	d101      	bne.n	81c66 <__aeabi_f2uiz+0x32>
   81c62:	0242      	lsls	r2, r0, #9
   81c64:	d102      	bne.n	81c6c <__aeabi_f2uiz+0x38>
   81c66:	f04f 30ff 	mov.w	r0, #4294967295
   81c6a:	4770      	bx	lr
   81c6c:	f04f 0000 	mov.w	r0, #0
   81c70:	4770      	bx	lr
   81c72:	bf00      	nop

00081c74 <__libc_init_array>:
   81c74:	b570      	push	{r4, r5, r6, lr}
   81c76:	4e0f      	ldr	r6, [pc, #60]	; (81cb4 <__libc_init_array+0x40>)
   81c78:	4d0f      	ldr	r5, [pc, #60]	; (81cb8 <__libc_init_array+0x44>)
   81c7a:	1b76      	subs	r6, r6, r5
   81c7c:	10b6      	asrs	r6, r6, #2
   81c7e:	bf18      	it	ne
   81c80:	2400      	movne	r4, #0
   81c82:	d005      	beq.n	81c90 <__libc_init_array+0x1c>
   81c84:	3401      	adds	r4, #1
   81c86:	f855 3b04 	ldr.w	r3, [r5], #4
   81c8a:	4798      	blx	r3
   81c8c:	42a6      	cmp	r6, r4
   81c8e:	d1f9      	bne.n	81c84 <__libc_init_array+0x10>
   81c90:	4e0a      	ldr	r6, [pc, #40]	; (81cbc <__libc_init_array+0x48>)
   81c92:	4d0b      	ldr	r5, [pc, #44]	; (81cc0 <__libc_init_array+0x4c>)
   81c94:	f000 f8f4 	bl	81e80 <_init>
   81c98:	1b76      	subs	r6, r6, r5
   81c9a:	10b6      	asrs	r6, r6, #2
   81c9c:	bf18      	it	ne
   81c9e:	2400      	movne	r4, #0
   81ca0:	d006      	beq.n	81cb0 <__libc_init_array+0x3c>
   81ca2:	3401      	adds	r4, #1
   81ca4:	f855 3b04 	ldr.w	r3, [r5], #4
   81ca8:	4798      	blx	r3
   81caa:	42a6      	cmp	r6, r4
   81cac:	d1f9      	bne.n	81ca2 <__libc_init_array+0x2e>
   81cae:	bd70      	pop	{r4, r5, r6, pc}
   81cb0:	bd70      	pop	{r4, r5, r6, pc}
   81cb2:	bf00      	nop
   81cb4:	00081e8c 	.word	0x00081e8c
   81cb8:	00081e8c 	.word	0x00081e8c
   81cbc:	00081e94 	.word	0x00081e94
   81cc0:	00081e8c 	.word	0x00081e8c

00081cc4 <register_fini>:
   81cc4:	4b02      	ldr	r3, [pc, #8]	; (81cd0 <register_fini+0xc>)
   81cc6:	b113      	cbz	r3, 81cce <register_fini+0xa>
   81cc8:	4802      	ldr	r0, [pc, #8]	; (81cd4 <register_fini+0x10>)
   81cca:	f000 b805 	b.w	81cd8 <atexit>
   81cce:	4770      	bx	lr
   81cd0:	00000000 	.word	0x00000000
   81cd4:	00081ce5 	.word	0x00081ce5

00081cd8 <atexit>:
   81cd8:	2300      	movs	r3, #0
   81cda:	4601      	mov	r1, r0
   81cdc:	461a      	mov	r2, r3
   81cde:	4618      	mov	r0, r3
   81ce0:	f000 b81e 	b.w	81d20 <__register_exitproc>

00081ce4 <__libc_fini_array>:
   81ce4:	b538      	push	{r3, r4, r5, lr}
   81ce6:	4c0a      	ldr	r4, [pc, #40]	; (81d10 <__libc_fini_array+0x2c>)
   81ce8:	4d0a      	ldr	r5, [pc, #40]	; (81d14 <__libc_fini_array+0x30>)
   81cea:	1b64      	subs	r4, r4, r5
   81cec:	10a4      	asrs	r4, r4, #2
   81cee:	d00a      	beq.n	81d06 <__libc_fini_array+0x22>
   81cf0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81cf4:	3b01      	subs	r3, #1
   81cf6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81cfa:	3c01      	subs	r4, #1
   81cfc:	f855 3904 	ldr.w	r3, [r5], #-4
   81d00:	4798      	blx	r3
   81d02:	2c00      	cmp	r4, #0
   81d04:	d1f9      	bne.n	81cfa <__libc_fini_array+0x16>
   81d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81d0a:	f000 b8c3 	b.w	81e94 <_fini>
   81d0e:	bf00      	nop
   81d10:	00081ea4 	.word	0x00081ea4
   81d14:	00081ea0 	.word	0x00081ea0

00081d18 <__retarget_lock_acquire_recursive>:
   81d18:	4770      	bx	lr
   81d1a:	bf00      	nop

00081d1c <__retarget_lock_release_recursive>:
   81d1c:	4770      	bx	lr
   81d1e:	bf00      	nop

00081d20 <__register_exitproc>:
   81d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81d24:	4d2c      	ldr	r5, [pc, #176]	; (81dd8 <__register_exitproc+0xb8>)
   81d26:	4606      	mov	r6, r0
   81d28:	6828      	ldr	r0, [r5, #0]
   81d2a:	4698      	mov	r8, r3
   81d2c:	460f      	mov	r7, r1
   81d2e:	4691      	mov	r9, r2
   81d30:	f7ff fff2 	bl	81d18 <__retarget_lock_acquire_recursive>
   81d34:	4b29      	ldr	r3, [pc, #164]	; (81ddc <__register_exitproc+0xbc>)
   81d36:	681c      	ldr	r4, [r3, #0]
   81d38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81d3c:	2b00      	cmp	r3, #0
   81d3e:	d03e      	beq.n	81dbe <__register_exitproc+0x9e>
   81d40:	685a      	ldr	r2, [r3, #4]
   81d42:	2a1f      	cmp	r2, #31
   81d44:	dc1c      	bgt.n	81d80 <__register_exitproc+0x60>
   81d46:	f102 0e01 	add.w	lr, r2, #1
   81d4a:	b176      	cbz	r6, 81d6a <__register_exitproc+0x4a>
   81d4c:	2101      	movs	r1, #1
   81d4e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81d52:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81d56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81d5a:	4091      	lsls	r1, r2
   81d5c:	4308      	orrs	r0, r1
   81d5e:	2e02      	cmp	r6, #2
   81d60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81d64:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81d68:	d023      	beq.n	81db2 <__register_exitproc+0x92>
   81d6a:	3202      	adds	r2, #2
   81d6c:	f8c3 e004 	str.w	lr, [r3, #4]
   81d70:	6828      	ldr	r0, [r5, #0]
   81d72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81d76:	f7ff ffd1 	bl	81d1c <__retarget_lock_release_recursive>
   81d7a:	2000      	movs	r0, #0
   81d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81d80:	4b17      	ldr	r3, [pc, #92]	; (81de0 <__register_exitproc+0xc0>)
   81d82:	b30b      	cbz	r3, 81dc8 <__register_exitproc+0xa8>
   81d84:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81d88:	f3af 8000 	nop.w
   81d8c:	4603      	mov	r3, r0
   81d8e:	b1d8      	cbz	r0, 81dc8 <__register_exitproc+0xa8>
   81d90:	2000      	movs	r0, #0
   81d92:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81d96:	f04f 0e01 	mov.w	lr, #1
   81d9a:	6058      	str	r0, [r3, #4]
   81d9c:	6019      	str	r1, [r3, #0]
   81d9e:	4602      	mov	r2, r0
   81da0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81da4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81da8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81dac:	2e00      	cmp	r6, #0
   81dae:	d0dc      	beq.n	81d6a <__register_exitproc+0x4a>
   81db0:	e7cc      	b.n	81d4c <__register_exitproc+0x2c>
   81db2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81db6:	4301      	orrs	r1, r0
   81db8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81dbc:	e7d5      	b.n	81d6a <__register_exitproc+0x4a>
   81dbe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81dc2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dc6:	e7bb      	b.n	81d40 <__register_exitproc+0x20>
   81dc8:	6828      	ldr	r0, [r5, #0]
   81dca:	f7ff ffa7 	bl	81d1c <__retarget_lock_release_recursive>
   81dce:	f04f 30ff 	mov.w	r0, #4294967295
   81dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81dd6:	bf00      	nop
   81dd8:	20000438 	.word	0x20000438
   81ddc:	00081e7c 	.word	0x00081e7c
   81de0:	00000000 	.word	0x00000000
   81de4:	304e4143 	.word	0x304e4143
   81de8:	73656d20 	.word	0x73656d20
   81dec:	65676173 	.word	0x65676173
   81df0:	72726120 	.word	0x72726120
   81df4:	64657669 	.word	0x64657669
   81df8:	206e6920 	.word	0x206e6920
   81dfc:	2d6e6f6e 	.word	0x2d6e6f6e
   81e00:	64657375 	.word	0x64657375
   81e04:	69616d20 	.word	0x69616d20
   81e08:	786f626c 	.word	0x786f626c
   81e0c:	00000d0a 	.word	0x00000d0a
   81e10:	6c6c6548 	.word	0x6c6c6548
   81e14:	6f77206f 	.word	0x6f77206f
   81e18:	00646c72 	.word	0x00646c72
   81e1c:	004c4f47 	.word	0x004c4f47
   81e20:	00006425 	.word	0x00006425
   81e24:	25203a72 	.word	0x25203a72
   81e28:	6430312d 	.word	0x6430312d
   81e2c:	79202020 	.word	0x79202020
   81e30:	2d25203a 	.word	0x2d25203a
   81e34:	20643031 	.word	0x20643031
   81e38:	3a652020 	.word	0x3a652020
   81e3c:	312d2520 	.word	0x312d2520
   81e40:	20206430 	.word	0x20206430
   81e44:	203a7520 	.word	0x203a7520
   81e48:	30312d25 	.word	0x30312d25
   81e4c:	20202064 	.word	0x20202064
   81e50:	00000000 	.word	0x00000000
   81e54:	6c756e28 	.word	0x6c756e28
   81e58:	0000296c 	.word	0x0000296c
   81e5c:	3a525245 	.word	0x3a525245
   81e60:	52415520 	.word	0x52415520
   81e64:	58522054 	.word	0x58522054
   81e68:	66756220 	.word	0x66756220
   81e6c:	20726566 	.word	0x20726566
   81e70:	66207369 	.word	0x66207369
   81e74:	0a6c6c75 	.word	0x0a6c6c75
   81e78:	0000000d 	.word	0x0000000d

00081e7c <_global_impure_ptr>:
   81e7c:	20000010                                ... 

00081e80 <_init>:
   81e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e82:	bf00      	nop
   81e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81e86:	bc08      	pop	{r3}
   81e88:	469e      	mov	lr, r3
   81e8a:	4770      	bx	lr

00081e8c <__init_array_start>:
   81e8c:	00081cc5 	.word	0x00081cc5

00081e90 <__frame_dummy_init_array_entry>:
   81e90:	00080119                                ....

00081e94 <_fini>:
   81e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e96:	bf00      	nop
   81e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81e9a:	bc08      	pop	{r3}
   81e9c:	469e      	mov	lr, r3
   81e9e:	4770      	bx	lr

00081ea0 <__fini_array_start>:
   81ea0:	000800f5 	.word	0x000800f5
