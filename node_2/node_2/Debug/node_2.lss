
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d80  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081d80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  20000434  000821b4  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004c0  00082240  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c0  00082640  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006f3e  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001342  00000000  00000000  000273f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000238  00000000  00000000  00028736  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001a8  00000000  00000000  0002896e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013907  00000000  00000000  00028b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000056da  00000000  00000000  0003c41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005650b  00000000  00000000  00041af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000088c  00000000  00000000  00098004  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001025  00000000  00000000  00098890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 08 00 20 a9 04 08 00 a5 04 08 00 a5 04 08 00     ... ............
   80010:	a5 04 08 00 a5 04 08 00 a5 04 08 00 00 00 00 00     ................
	...
   8002c:	a5 04 08 00 a5 04 08 00 00 00 00 00 a5 04 08 00     ................
   8003c:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   8004c:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   8005c:	a5 04 08 00 f5 0c 08 00 a5 04 08 00 00 00 00 00     ................
   8006c:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
	...
   80084:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   80094:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800a4:	00 00 00 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800b4:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800c4:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800d4:	a5 04 08 00 a5 04 08 00 a5 04 08 00 a5 04 08 00     ................
   800e4:	a5 04 08 00 a5 04 08 00 3d 03 08 00 a5 04 08 00     ........=.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081d80 	.word	0x00081d80

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081d80 	.word	0x00081d80
   80154:	20000438 	.word	0x20000438
   80158:	00081d80 	.word	0x00081d80
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
#include "adc.h"

void adc_init(){
	
	// Enable peripheral clock
	PMC->PMC_PCR |= (ID_ADC << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   80160:	4a13      	ldr	r2, [pc, #76]	; (801b0 <adc_init+0x50>)
   80162:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   80166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   8016a:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   8016e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_ADC-32));
   80172:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80176:	f043 0320 	orr.w	r3, r3, #32
   8017a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Enable Channel Register
	ADC->ADC_WPMR &= ~(1);
   8017e:	4b0d      	ldr	r3, [pc, #52]	; (801b4 <adc_init+0x54>)
   80180:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80184:	f022 0201 	bic.w	r2, r2, #1
   80188:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ADC->ADC_CHER |= (ADC_CHDR_CH10);
   8018c:	691a      	ldr	r2, [r3, #16]
   8018e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80192:	611a      	str	r2, [r3, #16]
	
	// Single-Ended, Freerun Mode
	ADC->ADC_MR |= (1 << 7);
   80194:	685a      	ldr	r2, [r3, #4]
   80196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8019a:	605a      	str	r2, [r3, #4]
	ADC->ADC_COR &= ~(1 << 26);
   8019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8019e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   801a2:	64da      	str	r2, [r3, #76]	; 0x4c
	
	// Begin Analog-to-Digital Conversion
	ADC->ADC_CR |= 1 << 1;
   801a4:	681a      	ldr	r2, [r3, #0]
   801a6:	f042 0202 	orr.w	r2, r2, #2
   801aa:	601a      	str	r2, [r3, #0]
   801ac:	4770      	bx	lr
   801ae:	bf00      	nop
   801b0:	400e0600 	.word	0x400e0600
   801b4:	400c0000 	.word	0x400c0000

000801b8 <adc_receive>:
	
}

int adc_receive(){
	//printf("%d \n", ADC->ADC_CDR[10]);
	return ADC->ADC_CDR[10];
   801b8:	4b01      	ldr	r3, [pc, #4]	; (801c0 <adc_receive+0x8>)
   801ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   801bc:	4770      	bx	lr
   801be:	bf00      	nop
   801c0:	400c0000 	.word	0x400c0000

000801c4 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801c4:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801c6:	1857      	adds	r7, r2, r1
   801c8:	2f08      	cmp	r7, #8
   801ca:	bfd4      	ite	le
   801cc:	2300      	movle	r3, #0
   801ce:	2301      	movgt	r3, #1
   801d0:	2908      	cmp	r1, #8
   801d2:	bf98      	it	ls
   801d4:	2a08      	cmpls	r2, #8
   801d6:	d85c      	bhi.n	80292 <can_init+0xce>
   801d8:	460d      	mov	r5, r1
   801da:	2b00      	cmp	r3, #0
   801dc:	d159      	bne.n	80292 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801de:	4a2e      	ldr	r2, [pc, #184]	; (80298 <can_init+0xd4>)
   801e0:	6813      	ldr	r3, [r2, #0]
   801e2:	f023 0301 	bic.w	r3, r3, #1
   801e6:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801e8:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801ea:	4b2c      	ldr	r3, [pc, #176]	; (8029c <can_init+0xd8>)
   801ec:	f44f 7440 	mov.w	r4, #768	; 0x300
   801f0:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801f2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801f4:	f024 0403 	bic.w	r4, r4, #3
   801f8:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801fa:	2403      	movs	r4, #3
   801fc:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801fe:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80200:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80204:	4c26      	ldr	r4, [pc, #152]	; (802a0 <can_init+0xdc>)
   80206:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8020a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   8020e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80212:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   80216:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   80218:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8021a:	e019      	b.n	80250 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   8021c:	481e      	ldr	r0, [pc, #120]	; (80298 <can_init+0xd4>)
   8021e:	f101 0310 	add.w	r3, r1, #16
   80222:	015b      	lsls	r3, r3, #5
   80224:	18c2      	adds	r2, r0, r3
   80226:	2600      	movs	r6, #0
   80228:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8022a:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   8022e:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80232:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80236:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8023a:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8023c:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80244:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80248:	2301      	movs	r3, #1
   8024a:	408b      	lsls	r3, r1
   8024c:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8024e:	3101      	adds	r1, #1
   80250:	42b9      	cmp	r1, r7
   80252:	dde3      	ble.n	8021c <can_init+0x58>
   80254:	2300      	movs	r3, #0
   80256:	e00d      	b.n	80274 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80258:	490f      	ldr	r1, [pc, #60]	; (80298 <can_init+0xd4>)
   8025a:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8025e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80262:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80266:	f103 0210 	add.w	r2, r3, #16
   8026a:	0152      	lsls	r2, r2, #5
   8026c:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80270:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80272:	3301      	adds	r3, #1
   80274:	42ab      	cmp	r3, r5
   80276:	dbef      	blt.n	80258 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80278:	4b07      	ldr	r3, [pc, #28]	; (80298 <can_init+0xd4>)
   8027a:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8027c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80280:	4a08      	ldr	r2, [pc, #32]	; (802a4 <can_init+0xe0>)
   80282:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80284:	681a      	ldr	r2, [r3, #0]
   80286:	f042 0201 	orr.w	r2, r2, #1
   8028a:	601a      	str	r2, [r3, #0]

	return 0;
   8028c:	2000      	movs	r0, #0
}
   8028e:	bcf0      	pop	{r4, r5, r6, r7}
   80290:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80292:	2001      	movs	r0, #1
   80294:	e7fb      	b.n	8028e <can_init+0xca>
   80296:	bf00      	nop
   80298:	400b4000 	.word	0x400b4000
   8029c:	400e0e00 	.word	0x400e0e00
   802a0:	1000102b 	.word	0x1000102b
   802a4:	e000e100 	.word	0xe000e100

000802a8 <can_init_def_tx_rx_mb>:
{
   802a8:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802aa:	2202      	movs	r2, #2
   802ac:	2101      	movs	r1, #1
   802ae:	4b01      	ldr	r3, [pc, #4]	; (802b4 <can_init_def_tx_rx_mb+0xc>)
   802b0:	4798      	blx	r3
}
   802b2:	bd08      	pop	{r3, pc}
   802b4:	000801c5 	.word	0x000801c5

000802b8 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802b8:	014b      	lsls	r3, r1, #5
   802ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802be:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802c6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ca:	d033      	beq.n	80334 <can_receive+0x7c>
{
   802cc:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802ce:	014b      	lsls	r3, r1, #5
   802d0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802d4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802d8:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802e0:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802e4:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802e8:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802ea:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802ee:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802f2:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802f4:	2300      	movs	r3, #0
   802f6:	e003      	b.n	80300 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802f8:	18c6      	adds	r6, r0, r3
   802fa:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802fc:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802fe:	3301      	adds	r3, #1
   80300:	42ab      	cmp	r3, r5
   80302:	da05      	bge.n	80310 <can_receive+0x58>
			if(i < 4)
   80304:	2b03      	cmp	r3, #3
   80306:	dcf7      	bgt.n	802f8 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   80308:	18c6      	adds	r6, r0, r3
   8030a:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   8030c:	0a24      	lsrs	r4, r4, #8
   8030e:	e7f6      	b.n	802fe <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80310:	4b09      	ldr	r3, [pc, #36]	; (80338 <can_receive+0x80>)
   80312:	f101 0210 	add.w	r2, r1, #16
   80316:	0152      	lsls	r2, r2, #5
   80318:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8031c:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   8031e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80322:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8032a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   8032e:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80330:	bc70      	pop	{r4, r5, r6}
   80332:	4770      	bx	lr
		return 1;
   80334:	2001      	movs	r0, #1
   80336:	4770      	bx	lr
   80338:	400b4000 	.word	0x400b4000

0008033c <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   8033c:	b510      	push	{r4, lr}
   8033e:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80340:	4b1e      	ldr	r3, [pc, #120]	; (803bc <CAN0_Handler+0x80>)
   80342:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80344:	f014 0f06 	tst.w	r4, #6
   80348:	d02b      	beq.n	803a2 <CAN0_Handler+0x66>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8034a:	f014 0f02 	tst.w	r4, #2
   8034e:	d117      	bne.n	80380 <CAN0_Handler+0x44>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80350:	f014 0f04 	tst.w	r4, #4
   80354:	d019      	beq.n	8038a <CAN0_Handler+0x4e>
		
		{
			can_receive(&message, 2);
   80356:	2102      	movs	r1, #2
   80358:	a801      	add	r0, sp, #4
   8035a:	4b19      	ldr	r3, [pc, #100]	; (803c0 <CAN0_Handler+0x84>)
   8035c:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		joystick_x = message.data[0];
   8035e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   80362:	4b18      	ldr	r3, [pc, #96]	; (803c4 <CAN0_Handler+0x88>)
   80364:	701a      	strb	r2, [r3, #0]
		joystick_y = message.data[1];
   80366:	f89d 2008 	ldrb.w	r2, [sp, #8]
   8036a:	4b17      	ldr	r3, [pc, #92]	; (803c8 <CAN0_Handler+0x8c>)
   8036c:	701a      	strb	r2, [r3, #0]
		int button = message.data[2];
   8036e:	f89d 3009 	ldrb.w	r3, [sp, #9]
		//printf("%d", button);
		if(button)
   80372:	b973      	cbnz	r3, 80392 <CAN0_Handler+0x56>
			shoot();
		set_servo_duty();
   80374:	4b15      	ldr	r3, [pc, #84]	; (803cc <CAN0_Handler+0x90>)
   80376:	4798      	blx	r3
		dac_write_speed();
   80378:	4b15      	ldr	r3, [pc, #84]	; (803d0 <CAN0_Handler+0x94>)
   8037a:	4798      	blx	r3
		
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8037c:	2300      	movs	r3, #0
   8037e:	e00c      	b.n	8039a <CAN0_Handler+0x5e>
			can_receive(&message, 1);
   80380:	2101      	movs	r1, #1
   80382:	a801      	add	r0, sp, #4
   80384:	4b0e      	ldr	r3, [pc, #56]	; (803c0 <CAN0_Handler+0x84>)
   80386:	4798      	blx	r3
   80388:	e7e9      	b.n	8035e <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8038a:	4812      	ldr	r0, [pc, #72]	; (803d4 <CAN0_Handler+0x98>)
   8038c:	4b12      	ldr	r3, [pc, #72]	; (803d8 <CAN0_Handler+0x9c>)
   8038e:	4798      	blx	r3
   80390:	e7e5      	b.n	8035e <CAN0_Handler+0x22>
			shoot();
   80392:	4b12      	ldr	r3, [pc, #72]	; (803dc <CAN0_Handler+0xa0>)
   80394:	4798      	blx	r3
   80396:	e7ed      	b.n	80374 <CAN0_Handler+0x38>
		for (int i = 0; i < message.data_length; i++)
   80398:	3301      	adds	r3, #1
   8039a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8039e:	4293      	cmp	r3, r2
   803a0:	dbfa      	blt.n	80398 <CAN0_Handler+0x5c>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   803a2:	f014 0f01 	tst.w	r4, #1
   803a6:	d002      	beq.n	803ae <CAN0_Handler+0x72>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803a8:	2201      	movs	r2, #1
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <CAN0_Handler+0x80>)
   803ac:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803b2:	4b0b      	ldr	r3, [pc, #44]	; (803e0 <CAN0_Handler+0xa4>)
   803b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803b8:	b004      	add	sp, #16
   803ba:	bd10      	pop	{r4, pc}
   803bc:	400b4000 	.word	0x400b4000
   803c0:	000802b9 	.word	0x000802b9
   803c4:	20000451 	.word	0x20000451
   803c8:	20000450 	.word	0x20000450
   803cc:	00080b61 	.word	0x00080b61
   803d0:	00080769 	.word	0x00080769
   803d4:	00081ce8 	.word	0x00081ce8
   803d8:	00080ae1 	.word	0x00080ae1
   803dc:	0008082d 	.word	0x0008082d
   803e0:	e000e100 	.word	0xe000e100

000803e4 <dac_write_uint_voltage>:
	dac_write_uint_voltage(0);
}

void dac_write_uint_voltage(uint16_t signal)
{
	DACC->DACC_CDR = signal;
   803e4:	4b01      	ldr	r3, [pc, #4]	; (803ec <dac_write_uint_voltage+0x8>)
   803e6:	6218      	str	r0, [r3, #32]
   803e8:	4770      	bx	lr
   803ea:	bf00      	nop
   803ec:	400c8000 	.word	0x400c8000

000803f0 <dac_init>:
{
   803f0:	b510      	push	{r4, lr}
	PMC->PMC_PCR |= (ID_DACC << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   803f2:	4a0d      	ldr	r2, [pc, #52]	; (80428 <dac_init+0x38>)
   803f4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   803f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   803fc:	f043 0326 	orr.w	r3, r3, #38	; 0x26
   80400:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_DACC-32));
   80404:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8040c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	DACC->DACC_MR = DACC_MR_USER_SEL_CHANNEL1 | DACC_MR_WORD_HALF | DACC_MR_STARTUP_8;
   80410:	4b06      	ldr	r3, [pc, #24]	; (8042c <dac_init+0x3c>)
   80412:	4a07      	ldr	r2, [pc, #28]	; (80430 <dac_init+0x40>)
   80414:	605a      	str	r2, [r3, #4]
	DACC->DACC_CHER = DACC_CHER_CH1;
   80416:	2202      	movs	r2, #2
   80418:	611a      	str	r2, [r3, #16]
	dac_write_uint_voltage(0xFFFF);
   8041a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8041e:	4c05      	ldr	r4, [pc, #20]	; (80434 <dac_init+0x44>)
   80420:	47a0      	blx	r4
	dac_write_uint_voltage(0);
   80422:	2000      	movs	r0, #0
   80424:	47a0      	blx	r4
   80426:	bd10      	pop	{r4, pc}
   80428:	400e0600 	.word	0x400e0600
   8042c:	400c8000 	.word	0x400c8000
   80430:	01010000 	.word	0x01010000
   80434:	000803e5 	.word	0x000803e5

00080438 <delay_ms>:
#include <stdio.h>
#include <inttypes.h>

// Max ca. 200ms!!
void delay_ms(uint32_t ms){
	uint32_t ticks = (F_CPU / 1000) * ms;
   80438:	4b0b      	ldr	r3, [pc, #44]	; (80468 <delay_ms+0x30>)
   8043a:	fb03 f000 	mul.w	r0, r3, r0
	if(ticks > 0xFFFFFF)
   8043e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80442:	d301      	bcc.n	80448 <delay_ms+0x10>
	ticks = 0xFFFFFF;
   80444:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	SysTick->LOAD = ticks - 1;
   80448:	3801      	subs	r0, #1
   8044a:	4b08      	ldr	r3, [pc, #32]	; (8046c <delay_ms+0x34>)
   8044c:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   8044e:	2200      	movs	r2, #0
   80450:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   80452:	2205      	movs	r2, #5
   80454:	601a      	str	r2, [r3, #0]
	
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   80456:	4b05      	ldr	r3, [pc, #20]	; (8046c <delay_ms+0x34>)
   80458:	681b      	ldr	r3, [r3, #0]
   8045a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8045e:	d0fa      	beq.n	80456 <delay_ms+0x1e>
		// Wait for the SysTick timer to count down
	}
	
	SysTick->CTRL = 0; // Disable the SysTick timer
   80460:	2200      	movs	r2, #0
   80462:	4b02      	ldr	r3, [pc, #8]	; (8046c <delay_ms+0x34>)
   80464:	601a      	str	r2, [r3, #0]
   80466:	4770      	bx	lr
   80468:	00014820 	.word	0x00014820
   8046c:	e000e010 	.word	0xe000e010

00080470 <delay_us>:
}


// Max ca. 200 000us!!
void delay_us(uint32_t us){
	uint32_t ticks = (F_CPU / 1000000) * us;
   80470:	2354      	movs	r3, #84	; 0x54
   80472:	fb03 f000 	mul.w	r0, r3, r0
	if(ticks > 0xFFFFFF)
   80476:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8047a:	d301      	bcc.n	80480 <delay_us+0x10>
		ticks = 0xFFFFFF;
   8047c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	SysTick->LOAD = ticks - 1;
   80480:	3801      	subs	r0, #1
   80482:	4b07      	ldr	r3, [pc, #28]	; (804a0 <delay_us+0x30>)
   80484:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
   80486:	2200      	movs	r2, #0
   80488:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   8048a:	2205      	movs	r2, #5
   8048c:	601a      	str	r2, [r3, #0]
	
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   8048e:	4b04      	ldr	r3, [pc, #16]	; (804a0 <delay_us+0x30>)
   80490:	681b      	ldr	r3, [r3, #0]
   80492:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80496:	d0fa      	beq.n	8048e <delay_us+0x1e>
		// Wait for the SysTick timer to count down
	}
	
	SysTick->CTRL = 0; // Disable the SysTick timer
   80498:	2200      	movs	r2, #0
   8049a:	4b01      	ldr	r3, [pc, #4]	; (804a0 <delay_us+0x30>)
   8049c:	601a      	str	r2, [r3, #0]
   8049e:	4770      	bx	lr
   804a0:	e000e010 	.word	0xe000e010

000804a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804a4:	e7fe      	b.n	804a4 <Dummy_Handler>
	...

000804a8 <Reset_Handler>:
{
   804a8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   804aa:	4b11      	ldr	r3, [pc, #68]	; (804f0 <Reset_Handler+0x48>)
   804ac:	4a11      	ldr	r2, [pc, #68]	; (804f4 <Reset_Handler+0x4c>)
   804ae:	429a      	cmp	r2, r3
   804b0:	d009      	beq.n	804c6 <Reset_Handler+0x1e>
   804b2:	4b0f      	ldr	r3, [pc, #60]	; (804f0 <Reset_Handler+0x48>)
   804b4:	4a0f      	ldr	r2, [pc, #60]	; (804f4 <Reset_Handler+0x4c>)
   804b6:	e003      	b.n	804c0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   804b8:	6811      	ldr	r1, [r2, #0]
   804ba:	6019      	str	r1, [r3, #0]
   804bc:	3304      	adds	r3, #4
   804be:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   804c0:	490d      	ldr	r1, [pc, #52]	; (804f8 <Reset_Handler+0x50>)
   804c2:	428b      	cmp	r3, r1
   804c4:	d3f8      	bcc.n	804b8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   804c6:	4b0d      	ldr	r3, [pc, #52]	; (804fc <Reset_Handler+0x54>)
   804c8:	e002      	b.n	804d0 <Reset_Handler+0x28>
                *pDest++ = 0;
   804ca:	2200      	movs	r2, #0
   804cc:	601a      	str	r2, [r3, #0]
   804ce:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   804d0:	4a0b      	ldr	r2, [pc, #44]	; (80500 <Reset_Handler+0x58>)
   804d2:	4293      	cmp	r3, r2
   804d4:	d3f9      	bcc.n	804ca <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   804d6:	4b0b      	ldr	r3, [pc, #44]	; (80504 <Reset_Handler+0x5c>)
   804d8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804e0:	4a09      	ldr	r2, [pc, #36]	; (80508 <Reset_Handler+0x60>)
   804e2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   804e4:	4b09      	ldr	r3, [pc, #36]	; (8050c <Reset_Handler+0x64>)
   804e6:	4798      	blx	r3
        main();
   804e8:	4b09      	ldr	r3, [pc, #36]	; (80510 <Reset_Handler+0x68>)
   804ea:	4798      	blx	r3
   804ec:	e7fe      	b.n	804ec <Reset_Handler+0x44>
   804ee:	bf00      	nop
   804f0:	20000000 	.word	0x20000000
   804f4:	00081d80 	.word	0x00081d80
   804f8:	20000434 	.word	0x20000434
   804fc:	20000434 	.word	0x20000434
   80500:	200004c0 	.word	0x200004c0
   80504:	00080000 	.word	0x00080000
   80508:	e000ed00 	.word	0xe000ed00
   8050c:	00081b79 	.word	0x00081b79
   80510:	000805b9 	.word	0x000805b9

00080514 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80514:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80518:	4a20      	ldr	r2, [pc, #128]	; (8059c <SystemInit+0x88>)
   8051a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8051c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80520:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80522:	4b1f      	ldr	r3, [pc, #124]	; (805a0 <SystemInit+0x8c>)
   80524:	6a1b      	ldr	r3, [r3, #32]
   80526:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8052a:	d107      	bne.n	8053c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8052c:	4a1d      	ldr	r2, [pc, #116]	; (805a4 <SystemInit+0x90>)
   8052e:	4b1c      	ldr	r3, [pc, #112]	; (805a0 <SystemInit+0x8c>)
   80530:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80532:	4b1b      	ldr	r3, [pc, #108]	; (805a0 <SystemInit+0x8c>)
   80534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80536:	f013 0f01 	tst.w	r3, #1
   8053a:	d0fa      	beq.n	80532 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8053c:	4a1a      	ldr	r2, [pc, #104]	; (805a8 <SystemInit+0x94>)
   8053e:	4b18      	ldr	r3, [pc, #96]	; (805a0 <SystemInit+0x8c>)
   80540:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80542:	4b17      	ldr	r3, [pc, #92]	; (805a0 <SystemInit+0x8c>)
   80544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80546:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8054a:	d0fa      	beq.n	80542 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8054c:	4a14      	ldr	r2, [pc, #80]	; (805a0 <SystemInit+0x8c>)
   8054e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80550:	f023 0303 	bic.w	r3, r3, #3
   80554:	f043 0301 	orr.w	r3, r3, #1
   80558:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8055a:	4b11      	ldr	r3, [pc, #68]	; (805a0 <SystemInit+0x8c>)
   8055c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8055e:	f013 0f08 	tst.w	r3, #8
   80562:	d0fa      	beq.n	8055a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80564:	4a11      	ldr	r2, [pc, #68]	; (805ac <SystemInit+0x98>)
   80566:	4b0e      	ldr	r3, [pc, #56]	; (805a0 <SystemInit+0x8c>)
   80568:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8056a:	4b0d      	ldr	r3, [pc, #52]	; (805a0 <SystemInit+0x8c>)
   8056c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8056e:	f013 0f02 	tst.w	r3, #2
   80572:	d0fa      	beq.n	8056a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80574:	2211      	movs	r2, #17
   80576:	4b0a      	ldr	r3, [pc, #40]	; (805a0 <SystemInit+0x8c>)
   80578:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8057a:	4b09      	ldr	r3, [pc, #36]	; (805a0 <SystemInit+0x8c>)
   8057c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8057e:	f013 0f08 	tst.w	r3, #8
   80582:	d0fa      	beq.n	8057a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80584:	2212      	movs	r2, #18
   80586:	4b06      	ldr	r3, [pc, #24]	; (805a0 <SystemInit+0x8c>)
   80588:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8058a:	4b05      	ldr	r3, [pc, #20]	; (805a0 <SystemInit+0x8c>)
   8058c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8058e:	f013 0f08 	tst.w	r3, #8
   80592:	d0fa      	beq.n	8058a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80594:	4a06      	ldr	r2, [pc, #24]	; (805b0 <SystemInit+0x9c>)
   80596:	4b07      	ldr	r3, [pc, #28]	; (805b4 <SystemInit+0xa0>)
   80598:	601a      	str	r2, [r3, #0]
   8059a:	4770      	bx	lr
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	400e0600 	.word	0x400e0600
   805a4:	00370809 	.word	0x00370809
   805a8:	01370809 	.word	0x01370809
   805ac:	200d3f01 	.word	0x200d3f01
   805b0:	0501bd00 	.word	0x0501bd00
   805b4:	20000000 	.word	0x20000000

000805b8 <main>:
#include "adc.h"
#include "motor.h"
#include "dac.h"

int main(void)
{
   805b8:	b538      	push	{r3, r4, r5, lr}
    /* Initialize the SAM system */
    SystemInit();
   805ba:	4b20      	ldr	r3, [pc, #128]	; (8063c <main+0x84>)
   805bc:	4798      	blx	r3
	
	can_init_def_tx_rx_mb(0x00290165);
   805be:	4820      	ldr	r0, [pc, #128]	; (80640 <main+0x88>)
   805c0:	4b20      	ldr	r3, [pc, #128]	; (80644 <main+0x8c>)
   805c2:	4798      	blx	r3
	configure_uart();
   805c4:	4b20      	ldr	r3, [pc, #128]	; (80648 <main+0x90>)
   805c6:	4798      	blx	r3
	pwm_init();
   805c8:	4b20      	ldr	r3, [pc, #128]	; (8064c <main+0x94>)
   805ca:	4798      	blx	r3
	adc_init();
   805cc:	4b20      	ldr	r3, [pc, #128]	; (80650 <main+0x98>)
   805ce:	4798      	blx	r3
	motor_init();
   805d0:	4b20      	ldr	r3, [pc, #128]	; (80654 <main+0x9c>)
   805d2:	4798      	blx	r3
	dac_init();
   805d4:	4b20      	ldr	r3, [pc, #128]	; (80658 <main+0xa0>)
   805d6:	4798      	blx	r3
	
	
	// Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCER0 |= (1 << ID_PIOA);
   805d8:	4a20      	ldr	r2, [pc, #128]	; (8065c <main+0xa4>)
   805da:	6913      	ldr	r3, [r2, #16]
   805dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   805e0:	6113      	str	r3, [r2, #16]
	
	
	PIOA->PIO_PER |= PIO_PA20; // Enable PIO control
   805e2:	4b1f      	ldr	r3, [pc, #124]	; (80660 <main+0xa8>)
   805e4:	681a      	ldr	r2, [r3, #0]
   805e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805ea:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_PA20; // Set pin as output
   805ec:	691a      	ldr	r2, [r3, #16]
   805ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805f2:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR |= PIO_PA20; // Set output high
   805f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805fa:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_CODR |= PIO_PA20;
   805fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   805fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80602:	635a      	str	r2, [r3, #52]	; 0x34
	
	printf("Hello world");
   80604:	4817      	ldr	r0, [pc, #92]	; (80664 <main+0xac>)
   80606:	4b18      	ldr	r3, [pc, #96]	; (80668 <main+0xb0>)
   80608:	4798      	blx	r3
	
	
	int counter = 0;
	int goal_count = 0;
   8060a:	2500      	movs	r5, #0
	int counter = 0;
   8060c:	462c      	mov	r4, r5
    /* Replace with your application code */
	while (1)
	{
		read_encoder();
   8060e:	4b17      	ldr	r3, [pc, #92]	; (8066c <main+0xb4>)
   80610:	4798      	blx	r3
		//printf("%d", read_encoder());
		
		WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;
   80612:	4a17      	ldr	r2, [pc, #92]	; (80670 <main+0xb8>)
   80614:	4b17      	ldr	r3, [pc, #92]	; (80674 <main+0xbc>)
   80616:	601a      	str	r2, [r3, #0]
	    //PIOA->PIO_CODR |= PIO_PA20;
	    //delay_ms(100000);
		
		
		
		counter++;
   80618:	3401      	adds	r4, #1
		int adc_data = adc_receive();
   8061a:	4b17      	ldr	r3, [pc, #92]	; (80678 <main+0xc0>)
   8061c:	4798      	blx	r3
		if(adc_data < 1000 && counter > 2000000)
   8061e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   80622:	daf4      	bge.n	8060e <main+0x56>
   80624:	4b15      	ldr	r3, [pc, #84]	; (8067c <main+0xc4>)
   80626:	429c      	cmp	r4, r3
   80628:	ddf1      	ble.n	8060e <main+0x56>
		{
			goal_count++;
   8062a:	3501      	adds	r5, #1
			counter = 0;
			printf("GOL");
   8062c:	4814      	ldr	r0, [pc, #80]	; (80680 <main+0xc8>)
   8062e:	4c0e      	ldr	r4, [pc, #56]	; (80668 <main+0xb0>)
   80630:	47a0      	blx	r4
			printf("%d", goal_count);
   80632:	4629      	mov	r1, r5
   80634:	4813      	ldr	r0, [pc, #76]	; (80684 <main+0xcc>)
   80636:	47a0      	blx	r4
			counter = 0;
   80638:	2400      	movs	r4, #0
   8063a:	e7e8      	b.n	8060e <main+0x56>
   8063c:	00080515 	.word	0x00080515
   80640:	00290165 	.word	0x00290165
   80644:	000802a9 	.word	0x000802a9
   80648:	00080c69 	.word	0x00080c69
   8064c:	00080bb9 	.word	0x00080bb9
   80650:	00080161 	.word	0x00080161
   80654:	00080689 	.word	0x00080689
   80658:	000803f1 	.word	0x000803f1
   8065c:	400e0600 	.word	0x400e0600
   80660:	400e0e00 	.word	0x400e0e00
   80664:	00081d14 	.word	0x00081d14
   80668:	00080ae1 	.word	0x00080ae1
   8066c:	000806f9 	.word	0x000806f9
   80670:	a5000001 	.word	0xa5000001
   80674:	400e1a50 	.word	0x400e1a50
   80678:	000801b9 	.word	0x000801b9
   8067c:	001e8480 	.word	0x001e8480
   80680:	00081d20 	.word	0x00081d20
   80684:	00081d24 	.word	0x00081d24

00080688 <motor_init>:
#include "motor.h"


void motor_init()
{
   80688:	b410      	push	{r4}
	// Enable the peripheral clock for the PIO (Peripheral Input/Output) controller
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   8068a:	4b18      	ldr	r3, [pc, #96]	; (806ec <motor_init+0x64>)
   8068c:	4a18      	ldr	r2, [pc, #96]	; (806f0 <motor_init+0x68>)
   8068e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   80692:	691a      	ldr	r2, [r3, #16]
   80694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80698:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1 << ID_PIOD);
   8069a:	691a      	ldr	r2, [r3, #16]
   8069c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   806a0:	611a      	str	r2, [r3, #16]
	
	// Set pins C1-C9 as input only
	// Should maybe set to be IO driven, not peripheral driven (page 623)
	PIOC->PIO_PER |= PIO_PC8 | PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7;
   806a2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   806a6:	681a      	ldr	r2, [r3, #0]
   806a8:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   806ac:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= PIO_PC8 | PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7;
   806ae:	695a      	ldr	r2, [r3, #20]
   806b0:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   806b4:	615a      	str	r2, [r3, #20]
	PIOD->PIO_PER |= PIO_PD10 | PIO_PD2 | PIO_PD1 | PIO_PD0 | PIO_PD9;
   806b6:	4a0f      	ldr	r2, [pc, #60]	; (806f4 <motor_init+0x6c>)
   806b8:	6810      	ldr	r0, [r2, #0]
   806ba:	f240 6407 	movw	r4, #1543	; 0x607
   806be:	4320      	orrs	r0, r4
   806c0:	6010      	str	r0, [r2, #0]
	PIOD->PIO_OER |= PIO_PD10 | PIO_PD2 | PIO_PD1 | PIO_PD0 | PIO_PD9;
   806c2:	6911      	ldr	r1, [r2, #16]
   806c4:	4321      	orrs	r1, r4
   806c6:	6111      	str	r1, [r2, #16]
	
	// Enable motor
	PIOD->PIO_SODR = PIO_PD9;
   806c8:	f44f 7100 	mov.w	r1, #512	; 0x200
   806cc:	6311      	str	r1, [r2, #48]	; 0x30
	PIOC->PIO_CODR = PIO_PC6;*/
	
	// Speed is set using DAC1 pin on shield.
	
	//INIT solenoid
	PIOC->PIO_PER |= PIO_PC13;
   806ce:	681a      	ldr	r2, [r3, #0]
   806d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806d4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC13;
   806d6:	691a      	ldr	r2, [r3, #16]
   806d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806dc:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_PC13;
   806de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   806e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   806e4:	631a      	str	r2, [r3, #48]	; 0x30
	 
}
   806e6:	bc10      	pop	{r4}
   806e8:	4770      	bx	lr
   806ea:	bf00      	nop
   806ec:	400e0600 	.word	0x400e0600
   806f0:	1000000d 	.word	0x1000000d
   806f4:	400e1400 	.word	0x400e1400

000806f8 <read_encoder>:

int read_encoder()
{
   806f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Set !OE low
	PIOD->PIO_CODR |= PIO_PD0;
   806fa:	4c16      	ldr	r4, [pc, #88]	; (80754 <read_encoder+0x5c>)
   806fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   806fe:	f043 0301 	orr.w	r3, r3, #1
   80702:	6363      	str	r3, [r4, #52]	; 0x34
	// Set SEL low
	PIOD->PIO_CODR |= PIO_PD2;
   80704:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80706:	f043 0304 	orr.w	r3, r3, #4
   8070a:	6363      	str	r3, [r4, #52]	; 0x34
	// Wait 20us
	delay_us(20);
   8070c:	2014      	movs	r0, #20
   8070e:	4f12      	ldr	r7, [pc, #72]	; (80758 <read_encoder+0x60>)
   80710:	47b8      	blx	r7
	// Read MJ2 (high byte)
	int mj2_high = (PIOC->PIO_PDSR) & 0x1FE;
   80712:	4e12      	ldr	r6, [pc, #72]	; (8075c <read_encoder+0x64>)
   80714:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
	// Set SEL high
	PIOD->PIO_SODR |= PIO_PD2;
   80716:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80718:	f043 0304 	orr.w	r3, r3, #4
   8071c:	6323      	str	r3, [r4, #48]	; 0x30
	// Wait 20us
	delay_us(20);
   8071e:	2014      	movs	r0, #20
   80720:	47b8      	blx	r7
	// Read MJ2 (low byte)
	int mj2_low = (PIOC->PIO_PDSR) & 0x1FE;
   80722:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   80724:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
	//Reset encoder
	PIOD->PIO_CODR |= PIO_PD1;
   80728:	6b62      	ldr	r2, [r4, #52]	; 0x34
   8072a:	f042 0202 	orr.w	r2, r2, #2
   8072e:	6362      	str	r2, [r4, #52]	; 0x34
	PIOD->PIO_SODR |= PIO_PD1;
   80730:	6b22      	ldr	r2, [r4, #48]	; 0x30
   80732:	f042 0202 	orr.w	r2, r2, #2
   80736:	6322      	str	r2, [r4, #48]	; 0x30
	// Set !OE high
	PIOD->PIO_SODR |= PIO_PD0;
   80738:	6b22      	ldr	r2, [r4, #48]	; 0x30
   8073a:	f042 0201 	orr.w	r2, r2, #1
   8073e:	6322      	str	r2, [r4, #48]	; 0x30
	
	//int pos = ((mj2_low | (mj2_high << 8)) + 131070) % 130616;
	int pos = (mj2_low | (mj2_high << 8));
   80740:	022c      	lsls	r4, r5, #8
   80742:	f404 34ff 	and.w	r4, r4, #130560	; 0x1fe00
   80746:	431c      	orrs	r4, r3
	printf(" %d ", pos);
   80748:	4621      	mov	r1, r4
   8074a:	4805      	ldr	r0, [pc, #20]	; (80760 <read_encoder+0x68>)
   8074c:	4b05      	ldr	r3, [pc, #20]	; (80764 <read_encoder+0x6c>)
   8074e:	4798      	blx	r3
	return pos;
	
}
   80750:	4620      	mov	r0, r4
   80752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80754:	400e1400 	.word	0x400e1400
   80758:	00080471 	.word	0x00080471
   8075c:	400e1200 	.word	0x400e1200
   80760:	00081d28 	.word	0x00081d28
   80764:	00080ae1 	.word	0x00080ae1

00080768 <dac_write_speed>:


void dac_write_speed()
{
   80768:	b510      	push	{r4, lr}
	float normalized_signal = (float)(joystick_y) / 128.0 - 1.0;
   8076a:	4b21      	ldr	r3, [pc, #132]	; (807f0 <dac_write_speed+0x88>)
   8076c:	7818      	ldrb	r0, [r3, #0]
   8076e:	4b21      	ldr	r3, [pc, #132]	; (807f4 <dac_write_speed+0x8c>)
   80770:	4798      	blx	r3
   80772:	4b21      	ldr	r3, [pc, #132]	; (807f8 <dac_write_speed+0x90>)
   80774:	4798      	blx	r3
   80776:	2200      	movs	r2, #0
   80778:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   8077c:	4c1f      	ldr	r4, [pc, #124]	; (807fc <dac_write_speed+0x94>)
   8077e:	47a0      	blx	r4
   80780:	2200      	movs	r2, #0
   80782:	4b1f      	ldr	r3, [pc, #124]	; (80800 <dac_write_speed+0x98>)
   80784:	4c1f      	ldr	r4, [pc, #124]	; (80804 <dac_write_speed+0x9c>)
   80786:	47a0      	blx	r4
   80788:	4b1f      	ldr	r3, [pc, #124]	; (80808 <dac_write_speed+0xa0>)
   8078a:	4798      	blx	r3
   8078c:	4604      	mov	r4, r0
	
	if (normalized_signal < -1)
   8078e:	491f      	ldr	r1, [pc, #124]	; (8080c <dac_write_speed+0xa4>)
   80790:	4b1f      	ldr	r3, [pc, #124]	; (80810 <dac_write_speed+0xa8>)
   80792:	4798      	blx	r3
   80794:	b9d0      	cbnz	r0, 807cc <dac_write_speed+0x64>
	normalized_signal = -1;
	if (normalized_signal > 1)
   80796:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8079a:	4620      	mov	r0, r4
   8079c:	4b1d      	ldr	r3, [pc, #116]	; (80814 <dac_write_speed+0xac>)
   8079e:	4798      	blx	r3
   807a0:	b108      	cbz	r0, 807a6 <dac_write_speed+0x3e>
	normalized_signal = 1;
   807a2:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	
	if(normalized_signal < 0)
   807a6:	2100      	movs	r1, #0
   807a8:	4620      	mov	r0, r4
   807aa:	4b19      	ldr	r3, [pc, #100]	; (80810 <dac_write_speed+0xa8>)
   807ac:	4798      	blx	r3
   807ae:	b978      	cbnz	r0, 807d0 <dac_write_speed+0x68>
		// Set motor direction left
		PIOD->PIO_CODR = PIO_PD10;
	}
	else
	{
		dac_write_uint_voltage((uint16_t)(normalized_signal * 65535));
   807b0:	4919      	ldr	r1, [pc, #100]	; (80818 <dac_write_speed+0xb0>)
   807b2:	4620      	mov	r0, r4
   807b4:	4b19      	ldr	r3, [pc, #100]	; (8081c <dac_write_speed+0xb4>)
   807b6:	4798      	blx	r3
   807b8:	4b19      	ldr	r3, [pc, #100]	; (80820 <dac_write_speed+0xb8>)
   807ba:	4798      	blx	r3
   807bc:	b280      	uxth	r0, r0
   807be:	4b19      	ldr	r3, [pc, #100]	; (80824 <dac_write_speed+0xbc>)
   807c0:	4798      	blx	r3
		// Set motor direction right
		PIOD->PIO_SODR = PIO_PD10;
   807c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   807c6:	4b18      	ldr	r3, [pc, #96]	; (80828 <dac_write_speed+0xc0>)
   807c8:	631a      	str	r2, [r3, #48]	; 0x30
   807ca:	bd10      	pop	{r4, pc}
	normalized_signal = -1;
   807cc:	4c0f      	ldr	r4, [pc, #60]	; (8080c <dac_write_speed+0xa4>)
   807ce:	e7e2      	b.n	80796 <dac_write_speed+0x2e>
		dac_write_uint_voltage((uint16_t)(-normalized_signal * 65535));
   807d0:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
   807d4:	4910      	ldr	r1, [pc, #64]	; (80818 <dac_write_speed+0xb0>)
   807d6:	4b11      	ldr	r3, [pc, #68]	; (8081c <dac_write_speed+0xb4>)
   807d8:	4798      	blx	r3
   807da:	4b11      	ldr	r3, [pc, #68]	; (80820 <dac_write_speed+0xb8>)
   807dc:	4798      	blx	r3
   807de:	b280      	uxth	r0, r0
   807e0:	4b10      	ldr	r3, [pc, #64]	; (80824 <dac_write_speed+0xbc>)
   807e2:	4798      	blx	r3
		PIOD->PIO_CODR = PIO_PD10;
   807e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   807e8:	4b0f      	ldr	r3, [pc, #60]	; (80828 <dac_write_speed+0xc0>)
   807ea:	635a      	str	r2, [r3, #52]	; 0x34
   807ec:	bd10      	pop	{r4, pc}
   807ee:	bf00      	nop
   807f0:	20000450 	.word	0x20000450
   807f4:	000816fd 	.word	0x000816fd
   807f8:	00081025 	.word	0x00081025
   807fc:	000810cd 	.word	0x000810cd
   80800:	3ff00000 	.word	0x3ff00000
   80804:	00080d65 	.word	0x00080d65
   80808:	000814f1 	.word	0x000814f1
   8080c:	bf800000 	.word	0xbf800000
   80810:	00081ae9 	.word	0x00081ae9
   80814:	00081b25 	.word	0x00081b25
   80818:	477fff00 	.word	0x477fff00
   8081c:	000817ad 	.word	0x000817ad
   80820:	00081b39 	.word	0x00081b39
   80824:	000803e5 	.word	0x000803e5
   80828:	400e1400 	.word	0x400e1400

0008082c <shoot>:
	}
}

void shoot()
{
   8082c:	b510      	push	{r4, lr}
	PIOC->PIO_CODR |= PIO_PC13;
   8082e:	4c06      	ldr	r4, [pc, #24]	; (80848 <shoot+0x1c>)
   80830:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80836:	6363      	str	r3, [r4, #52]	; 0x34
	delay_ms(80);
   80838:	2050      	movs	r0, #80	; 0x50
   8083a:	4b04      	ldr	r3, [pc, #16]	; (8084c <shoot+0x20>)
   8083c:	4798      	blx	r3
	PIOC->PIO_SODR |= PIO_PC13;
   8083e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80844:	6323      	str	r3, [r4, #48]	; 0x30
   80846:	bd10      	pop	{r4, pc}
   80848:	400e1200 	.word	0x400e1200
   8084c:	00080439 	.word	0x00080439

00080850 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80850:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80852:	b2c8      	uxtb	r0, r1
   80854:	4b01      	ldr	r3, [pc, #4]	; (8085c <printchar+0xc>)
   80856:	4798      	blx	r3
   80858:	bd08      	pop	{r3, pc}
   8085a:	bf00      	nop
   8085c:	00080cd1 	.word	0x00080cd1

00080860 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80864:	4607      	mov	r7, r0
   80866:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80868:	1e15      	subs	r5, r2, #0
   8086a:	dd02      	ble.n	80872 <prints+0x12>
   8086c:	460a      	mov	r2, r1
   8086e:	2100      	movs	r1, #0
   80870:	e004      	b.n	8087c <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80872:	f04f 0820 	mov.w	r8, #32
   80876:	e00e      	b.n	80896 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80878:	3101      	adds	r1, #1
   8087a:	3201      	adds	r2, #1
   8087c:	7810      	ldrb	r0, [r2, #0]
   8087e:	2800      	cmp	r0, #0
   80880:	d1fa      	bne.n	80878 <prints+0x18>
		if (len >= width) width = 0;
   80882:	42a9      	cmp	r1, r5
   80884:	da01      	bge.n	8088a <prints+0x2a>
		else width -= len;
   80886:	1a6d      	subs	r5, r5, r1
   80888:	e000      	b.n	8088c <prints+0x2c>
		if (len >= width) width = 0;
   8088a:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   8088c:	f013 0f02 	tst.w	r3, #2
   80890:	d106      	bne.n	808a0 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80892:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80896:	f013 0401 	ands.w	r4, r3, #1
   8089a:	d00a      	beq.n	808b2 <prints+0x52>
	register int pc = 0, padchar = ' ';
   8089c:	2400      	movs	r4, #0
   8089e:	e010      	b.n	808c2 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   808a0:	f04f 0830 	mov.w	r8, #48	; 0x30
   808a4:	e7f7      	b.n	80896 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   808a6:	4641      	mov	r1, r8
   808a8:	4638      	mov	r0, r7
   808aa:	4b0d      	ldr	r3, [pc, #52]	; (808e0 <prints+0x80>)
   808ac:	4798      	blx	r3
			++pc;
   808ae:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   808b0:	3d01      	subs	r5, #1
   808b2:	2d00      	cmp	r5, #0
   808b4:	dcf7      	bgt.n	808a6 <prints+0x46>
   808b6:	e004      	b.n	808c2 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   808b8:	4638      	mov	r0, r7
   808ba:	4b09      	ldr	r3, [pc, #36]	; (808e0 <prints+0x80>)
   808bc:	4798      	blx	r3
		++pc;
   808be:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   808c0:	3601      	adds	r6, #1
   808c2:	7831      	ldrb	r1, [r6, #0]
   808c4:	2900      	cmp	r1, #0
   808c6:	d1f7      	bne.n	808b8 <prints+0x58>
   808c8:	e005      	b.n	808d6 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   808ca:	4641      	mov	r1, r8
   808cc:	4638      	mov	r0, r7
   808ce:	4b04      	ldr	r3, [pc, #16]	; (808e0 <prints+0x80>)
   808d0:	4798      	blx	r3
		++pc;
   808d2:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   808d4:	3d01      	subs	r5, #1
   808d6:	2d00      	cmp	r5, #0
   808d8:	dcf7      	bgt.n	808ca <prints+0x6a>
	}

	return pc;
}
   808da:	4620      	mov	r0, r4
   808dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808e0:	00080851 	.word	0x00080851

000808e4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   808e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   808e6:	b085      	sub	sp, #20
   808e8:	4607      	mov	r7, r0
   808ea:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   808ec:	b151      	cbz	r1, 80904 <printi+0x20>
   808ee:	461e      	mov	r6, r3
   808f0:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   808f2:	b113      	cbz	r3, 808fa <printi+0x16>
   808f4:	2a0a      	cmp	r2, #10
   808f6:	d012      	beq.n	8091e <printi+0x3a>
	register int t, neg = 0, pc = 0;
   808f8:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   808fa:	ad04      	add	r5, sp, #16
   808fc:	2300      	movs	r3, #0
   808fe:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80902:	e018      	b.n	80936 <printi+0x52>
		print_buf[0] = '0';
   80904:	2330      	movs	r3, #48	; 0x30
   80906:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   8090a:	2300      	movs	r3, #0
   8090c:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80914:	a901      	add	r1, sp, #4
   80916:	4638      	mov	r0, r7
   80918:	4c1b      	ldr	r4, [pc, #108]	; (80988 <printi+0xa4>)
   8091a:	47a0      	blx	r4
   8091c:	e029      	b.n	80972 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   8091e:	2900      	cmp	r1, #0
   80920:	db01      	blt.n	80926 <printi+0x42>
	register int t, neg = 0, pc = 0;
   80922:	2600      	movs	r6, #0
   80924:	e7e9      	b.n	808fa <printi+0x16>
		u = -i;
   80926:	424c      	negs	r4, r1
		neg = 1;
   80928:	2601      	movs	r6, #1
   8092a:	e7e6      	b.n	808fa <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   8092c:	3330      	adds	r3, #48	; 0x30
   8092e:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80932:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80936:	b14c      	cbz	r4, 8094c <printi+0x68>
		t = u % b;
   80938:	fbb4 f3f2 	udiv	r3, r4, r2
   8093c:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80940:	2b09      	cmp	r3, #9
   80942:	ddf3      	ble.n	8092c <printi+0x48>
			t += letbase - '0' - 10;
   80944:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80948:	440b      	add	r3, r1
   8094a:	e7ef      	b.n	8092c <printi+0x48>
	}

	if (neg) {
   8094c:	b156      	cbz	r6, 80964 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   8094e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80950:	b11b      	cbz	r3, 8095a <printi+0x76>
   80952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80954:	f013 0f02 	tst.w	r3, #2
   80958:	d10d      	bne.n	80976 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   8095a:	232d      	movs	r3, #45	; 0x2d
   8095c:	f805 3c01 	strb.w	r3, [r5, #-1]
   80960:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80962:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80968:	4629      	mov	r1, r5
   8096a:	4638      	mov	r0, r7
   8096c:	4c06      	ldr	r4, [pc, #24]	; (80988 <printi+0xa4>)
   8096e:	47a0      	blx	r4
   80970:	4430      	add	r0, r6
}
   80972:	b005      	add	sp, #20
   80974:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80976:	212d      	movs	r1, #45	; 0x2d
   80978:	4638      	mov	r0, r7
   8097a:	4b04      	ldr	r3, [pc, #16]	; (8098c <printi+0xa8>)
   8097c:	4798      	blx	r3
			--width;
   8097e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80980:	3b01      	subs	r3, #1
   80982:	930a      	str	r3, [sp, #40]	; 0x28
   80984:	e7ee      	b.n	80964 <printi+0x80>
   80986:	bf00      	nop
   80988:	00080861 	.word	0x00080861
   8098c:	00080851 	.word	0x00080851

00080990 <print>:

static int print( char **out, const char *format, va_list args )
{
   80990:	b5f0      	push	{r4, r5, r6, r7, lr}
   80992:	b089      	sub	sp, #36	; 0x24
   80994:	4606      	mov	r6, r0
   80996:	460c      	mov	r4, r1
   80998:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   8099a:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   8099c:	e081      	b.n	80aa2 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   8099e:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   809a0:	2301      	movs	r3, #1
   809a2:	e08b      	b.n	80abc <print+0x12c>
			}
			while (*format == '0') {
				++format;
   809a4:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   809a6:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   809aa:	7822      	ldrb	r2, [r4, #0]
   809ac:	2a30      	cmp	r2, #48	; 0x30
   809ae:	d0f9      	beq.n	809a4 <print+0x14>
   809b0:	2200      	movs	r2, #0
   809b2:	e006      	b.n	809c2 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   809b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   809b8:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   809ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   809be:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   809c0:	3401      	adds	r4, #1
   809c2:	7821      	ldrb	r1, [r4, #0]
   809c4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   809c8:	b2c0      	uxtb	r0, r0
   809ca:	2809      	cmp	r0, #9
   809cc:	d9f2      	bls.n	809b4 <print+0x24>
			}
			if( *format == 's' ) {
   809ce:	2973      	cmp	r1, #115	; 0x73
   809d0:	d018      	beq.n	80a04 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   809d2:	2964      	cmp	r1, #100	; 0x64
   809d4:	d022      	beq.n	80a1c <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   809d6:	2978      	cmp	r1, #120	; 0x78
   809d8:	d02f      	beq.n	80a3a <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   809da:	2958      	cmp	r1, #88	; 0x58
   809dc:	d03c      	beq.n	80a58 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   809de:	2975      	cmp	r1, #117	; 0x75
   809e0:	d049      	beq.n	80a76 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   809e2:	2963      	cmp	r1, #99	; 0x63
   809e4:	d15c      	bne.n	80aa0 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   809e6:	9905      	ldr	r1, [sp, #20]
   809e8:	1d08      	adds	r0, r1, #4
   809ea:	9005      	str	r0, [sp, #20]
   809ec:	7809      	ldrb	r1, [r1, #0]
   809ee:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   809f2:	2100      	movs	r1, #0
   809f4:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   809f8:	a907      	add	r1, sp, #28
   809fa:	4630      	mov	r0, r6
   809fc:	4f34      	ldr	r7, [pc, #208]	; (80ad0 <print+0x140>)
   809fe:	47b8      	blx	r7
   80a00:	4405      	add	r5, r0
				continue;
   80a02:	e04d      	b.n	80aa0 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80a04:	9905      	ldr	r1, [sp, #20]
   80a06:	1d08      	adds	r0, r1, #4
   80a08:	9005      	str	r0, [sp, #20]
   80a0a:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80a0c:	b121      	cbz	r1, 80a18 <print+0x88>
   80a0e:	4630      	mov	r0, r6
   80a10:	4f2f      	ldr	r7, [pc, #188]	; (80ad0 <print+0x140>)
   80a12:	47b8      	blx	r7
   80a14:	4405      	add	r5, r0
				continue;
   80a16:	e043      	b.n	80aa0 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80a18:	492e      	ldr	r1, [pc, #184]	; (80ad4 <print+0x144>)
   80a1a:	e7f8      	b.n	80a0e <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80a1c:	9905      	ldr	r1, [sp, #20]
   80a1e:	1d08      	adds	r0, r1, #4
   80a20:	9005      	str	r0, [sp, #20]
   80a22:	6809      	ldr	r1, [r1, #0]
   80a24:	2061      	movs	r0, #97	; 0x61
   80a26:	9002      	str	r0, [sp, #8]
   80a28:	9301      	str	r3, [sp, #4]
   80a2a:	9200      	str	r2, [sp, #0]
   80a2c:	2301      	movs	r3, #1
   80a2e:	220a      	movs	r2, #10
   80a30:	4630      	mov	r0, r6
   80a32:	4f29      	ldr	r7, [pc, #164]	; (80ad8 <print+0x148>)
   80a34:	47b8      	blx	r7
   80a36:	4405      	add	r5, r0
				continue;
   80a38:	e032      	b.n	80aa0 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80a3a:	9905      	ldr	r1, [sp, #20]
   80a3c:	1d08      	adds	r0, r1, #4
   80a3e:	9005      	str	r0, [sp, #20]
   80a40:	6809      	ldr	r1, [r1, #0]
   80a42:	2061      	movs	r0, #97	; 0x61
   80a44:	9002      	str	r0, [sp, #8]
   80a46:	9301      	str	r3, [sp, #4]
   80a48:	9200      	str	r2, [sp, #0]
   80a4a:	2300      	movs	r3, #0
   80a4c:	2210      	movs	r2, #16
   80a4e:	4630      	mov	r0, r6
   80a50:	4f21      	ldr	r7, [pc, #132]	; (80ad8 <print+0x148>)
   80a52:	47b8      	blx	r7
   80a54:	4405      	add	r5, r0
				continue;
   80a56:	e023      	b.n	80aa0 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80a58:	9905      	ldr	r1, [sp, #20]
   80a5a:	1d08      	adds	r0, r1, #4
   80a5c:	9005      	str	r0, [sp, #20]
   80a5e:	6809      	ldr	r1, [r1, #0]
   80a60:	2041      	movs	r0, #65	; 0x41
   80a62:	9002      	str	r0, [sp, #8]
   80a64:	9301      	str	r3, [sp, #4]
   80a66:	9200      	str	r2, [sp, #0]
   80a68:	2300      	movs	r3, #0
   80a6a:	2210      	movs	r2, #16
   80a6c:	4630      	mov	r0, r6
   80a6e:	4f1a      	ldr	r7, [pc, #104]	; (80ad8 <print+0x148>)
   80a70:	47b8      	blx	r7
   80a72:	4405      	add	r5, r0
				continue;
   80a74:	e014      	b.n	80aa0 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80a76:	9905      	ldr	r1, [sp, #20]
   80a78:	1d08      	adds	r0, r1, #4
   80a7a:	9005      	str	r0, [sp, #20]
   80a7c:	6809      	ldr	r1, [r1, #0]
   80a7e:	2061      	movs	r0, #97	; 0x61
   80a80:	9002      	str	r0, [sp, #8]
   80a82:	9301      	str	r3, [sp, #4]
   80a84:	9200      	str	r2, [sp, #0]
   80a86:	2300      	movs	r3, #0
   80a88:	220a      	movs	r2, #10
   80a8a:	4630      	mov	r0, r6
   80a8c:	4f12      	ldr	r7, [pc, #72]	; (80ad8 <print+0x148>)
   80a8e:	47b8      	blx	r7
   80a90:	4405      	add	r5, r0
				continue;
   80a92:	e005      	b.n	80aa0 <print+0x110>
			++format;
   80a94:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80a96:	7821      	ldrb	r1, [r4, #0]
   80a98:	4630      	mov	r0, r6
   80a9a:	4b10      	ldr	r3, [pc, #64]	; (80adc <print+0x14c>)
   80a9c:	4798      	blx	r3
			++pc;
   80a9e:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80aa0:	3401      	adds	r4, #1
   80aa2:	7823      	ldrb	r3, [r4, #0]
   80aa4:	b163      	cbz	r3, 80ac0 <print+0x130>
		if (*format == '%') {
   80aa6:	2b25      	cmp	r3, #37	; 0x25
   80aa8:	d1f5      	bne.n	80a96 <print+0x106>
			++format;
   80aaa:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80aac:	7863      	ldrb	r3, [r4, #1]
   80aae:	b13b      	cbz	r3, 80ac0 <print+0x130>
			if (*format == '%') goto out;
   80ab0:	2b25      	cmp	r3, #37	; 0x25
   80ab2:	d0ef      	beq.n	80a94 <print+0x104>
			if (*format == '-') {
   80ab4:	2b2d      	cmp	r3, #45	; 0x2d
   80ab6:	f43f af72 	beq.w	8099e <print+0xe>
			width = pad = 0;
   80aba:	2300      	movs	r3, #0
   80abc:	4614      	mov	r4, r2
   80abe:	e774      	b.n	809aa <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80ac0:	b116      	cbz	r6, 80ac8 <print+0x138>
   80ac2:	6833      	ldr	r3, [r6, #0]
   80ac4:	2200      	movs	r2, #0
   80ac6:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80ac8:	4628      	mov	r0, r5
   80aca:	b009      	add	sp, #36	; 0x24
   80acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80ace:	bf00      	nop
   80ad0:	00080861 	.word	0x00080861
   80ad4:	00081d30 	.word	0x00081d30
   80ad8:	000808e5 	.word	0x000808e5
   80adc:	00080851 	.word	0x00080851

00080ae0 <printf>:

int printf(const char *format, ...)
{
   80ae0:	b40f      	push	{r0, r1, r2, r3}
   80ae2:	b500      	push	{lr}
   80ae4:	b083      	sub	sp, #12
   80ae6:	aa04      	add	r2, sp, #16
   80ae8:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80aec:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80aee:	2000      	movs	r0, #0
   80af0:	4b03      	ldr	r3, [pc, #12]	; (80b00 <printf+0x20>)
   80af2:	4798      	blx	r3
}
   80af4:	b003      	add	sp, #12
   80af6:	f85d eb04 	ldr.w	lr, [sp], #4
   80afa:	b004      	add	sp, #16
   80afc:	4770      	bx	lr
   80afe:	bf00      	nop
   80b00:	00080991 	.word	0x00080991
   80b04:	00000000 	.word	0x00000000

00080b08 <pos_to_duty>:
	// printf("%d    ",joystick_x);
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
}

float pos_to_duty(uint8_t pos)
{
   80b08:	b510      	push	{r4, lr}
	return (float)CLAMP(pos, 0, 255) / 255.0 * 0.05 + 0.05;
   80b0a:	4b0f      	ldr	r3, [pc, #60]	; (80b48 <pos_to_duty+0x40>)
   80b0c:	4798      	blx	r3
   80b0e:	4b0f      	ldr	r3, [pc, #60]	; (80b4c <pos_to_duty+0x44>)
   80b10:	4798      	blx	r3
   80b12:	a309      	add	r3, pc, #36	; (adr r3, 80b38 <pos_to_duty+0x30>)
   80b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b18:	4c0d      	ldr	r4, [pc, #52]	; (80b50 <pos_to_duty+0x48>)
   80b1a:	47a0      	blx	r4
   80b1c:	a308      	add	r3, pc, #32	; (adr r3, 80b40 <pos_to_duty+0x38>)
   80b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b22:	4c0c      	ldr	r4, [pc, #48]	; (80b54 <pos_to_duty+0x4c>)
   80b24:	47a0      	blx	r4
   80b26:	a306      	add	r3, pc, #24	; (adr r3, 80b40 <pos_to_duty+0x38>)
   80b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b2c:	4c0a      	ldr	r4, [pc, #40]	; (80b58 <pos_to_duty+0x50>)
   80b2e:	47a0      	blx	r4
   80b30:	4b0a      	ldr	r3, [pc, #40]	; (80b5c <pos_to_duty+0x54>)
   80b32:	4798      	blx	r3
}
   80b34:	bd10      	pop	{r4, pc}
   80b36:	bf00      	nop
   80b38:	00000000 	.word	0x00000000
   80b3c:	406fe000 	.word	0x406fe000
   80b40:	9999999a 	.word	0x9999999a
   80b44:	3fa99999 	.word	0x3fa99999
   80b48:	00081705 	.word	0x00081705
   80b4c:	00081025 	.word	0x00081025
   80b50:	00081321 	.word	0x00081321
   80b54:	000810cd 	.word	0x000810cd
   80b58:	00080d69 	.word	0x00080d69
   80b5c:	000814f1 	.word	0x000814f1

00080b60 <set_servo_duty>:
{
   80b60:	b510      	push	{r4, lr}
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80b62:	4b0d      	ldr	r3, [pc, #52]	; (80b98 <set_servo_duty+0x38>)
   80b64:	6818      	ldr	r0, [r3, #0]
   80b66:	4b0d      	ldr	r3, [pc, #52]	; (80b9c <set_servo_duty+0x3c>)
   80b68:	4798      	blx	r3
   80b6a:	4604      	mov	r4, r0
   80b6c:	4b0c      	ldr	r3, [pc, #48]	; (80ba0 <set_servo_duty+0x40>)
   80b6e:	7818      	ldrb	r0, [r3, #0]
   80b70:	4b0c      	ldr	r3, [pc, #48]	; (80ba4 <set_servo_duty+0x44>)
   80b72:	4798      	blx	r3
   80b74:	4601      	mov	r1, r0
   80b76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80b7a:	4b0b      	ldr	r3, [pc, #44]	; (80ba8 <set_servo_duty+0x48>)
   80b7c:	4798      	blx	r3
   80b7e:	4601      	mov	r1, r0
   80b80:	4620      	mov	r0, r4
   80b82:	4b0a      	ldr	r3, [pc, #40]	; (80bac <set_servo_duty+0x4c>)
   80b84:	4798      	blx	r3
   80b86:	4b0a      	ldr	r3, [pc, #40]	; (80bb0 <set_servo_duty+0x50>)
   80b88:	4798      	blx	r3
   80b8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80b8e:	4b09      	ldr	r3, [pc, #36]	; (80bb4 <set_servo_duty+0x54>)
   80b90:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   80b94:	bd10      	pop	{r4, pc}
   80b96:	bf00      	nop
   80b98:	20000454 	.word	0x20000454
   80b9c:	000816fd 	.word	0x000816fd
   80ba0:	20000451 	.word	0x20000451
   80ba4:	00080b09 	.word	0x00080b09
   80ba8:	00081599 	.word	0x00081599
   80bac:	000817ad 	.word	0x000817ad
   80bb0:	00081b39 	.word	0x00081b39
   80bb4:	40094000 	.word	0x40094000

00080bb8 <pwm_init>:
{
   80bb8:	b510      	push	{r4, lr}
	PIOC->PIO_PDR |= PIO_PDR_P19;
   80bba:	4b20      	ldr	r3, [pc, #128]	; (80c3c <pwm_init+0x84>)
   80bbc:	685a      	ldr	r2, [r3, #4]
   80bbe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80bc2:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   80bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bc6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80bca:	671a      	str	r2, [r3, #112]	; 0x70
	PMC->PMC_PCR |= (ID_PWM << PMC_PCR_PID_Pos) | PMC_PCR_DIV_PERIPH_DIV_MCK | PMC_PCR_EN;
   80bcc:	491c      	ldr	r1, [pc, #112]	; (80c40 <pwm_init+0x88>)
   80bce:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
   80bd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80bd6:	f042 0224 	orr.w	r2, r2, #36	; 0x24
   80bda:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
	PMC->PMC_PCER1 |= (1 << (ID_PWM-32));
   80bde:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80be2:	f042 0210 	orr.w	r2, r2, #16
   80be6:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	PIOC->PIO_WPMR = 0;
   80bea:	2200      	movs	r2, #0
   80bec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_WPCR = 0;
   80bf0:	4c14      	ldr	r4, [pc, #80]	; (80c44 <pwm_init+0x8c>)
   80bf2:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	PWM->PWM_CLK = PWM_CLK_DIVA(84) | PWM_CLK_PREA(0);
   80bf6:	2354      	movs	r3, #84	; 0x54
   80bf8:	6023      	str	r3, [r4, #0]
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_CLKA;
   80bfa:	230b      	movs	r3, #11
   80bfc:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
	servo_period = 20E-3 * F_CPU / 84;
   80c00:	f644 6320 	movw	r3, #20000	; 0x4e20
   80c04:	4a10      	ldr	r2, [pc, #64]	; (80c48 <pwm_init+0x90>)
   80c06:	6013      	str	r3, [r2, #0]
	PWM->PWM_CH_NUM[5].PWM_CPRD = PWM_CPRD_CPRD(servo_period);
   80c08:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = PWM_CDTY_CDTY((uint32_t)((float)servo_period * (1 - pos_to_duty(joystick_x))));
   80c0c:	4b0f      	ldr	r3, [pc, #60]	; (80c4c <pwm_init+0x94>)
   80c0e:	7818      	ldrb	r0, [r3, #0]
   80c10:	4b0f      	ldr	r3, [pc, #60]	; (80c50 <pwm_init+0x98>)
   80c12:	4798      	blx	r3
   80c14:	4601      	mov	r1, r0
   80c16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80c1a:	4b0e      	ldr	r3, [pc, #56]	; (80c54 <pwm_init+0x9c>)
   80c1c:	4798      	blx	r3
   80c1e:	490e      	ldr	r1, [pc, #56]	; (80c58 <pwm_init+0xa0>)
   80c20:	4b0e      	ldr	r3, [pc, #56]	; (80c5c <pwm_init+0xa4>)
   80c22:	4798      	blx	r3
   80c24:	4b0e      	ldr	r3, [pc, #56]	; (80c60 <pwm_init+0xa8>)
   80c26:	4798      	blx	r3
   80c28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80c2c:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
	set_servo_duty();
   80c30:	4b0c      	ldr	r3, [pc, #48]	; (80c64 <pwm_init+0xac>)
   80c32:	4798      	blx	r3
	PWM->PWM_ENA = PWM_ENA_CHID5;
   80c34:	2320      	movs	r3, #32
   80c36:	6063      	str	r3, [r4, #4]
   80c38:	bd10      	pop	{r4, pc}
   80c3a:	bf00      	nop
   80c3c:	400e1200 	.word	0x400e1200
   80c40:	400e0600 	.word	0x400e0600
   80c44:	40094000 	.word	0x40094000
   80c48:	20000454 	.word	0x20000454
   80c4c:	20000451 	.word	0x20000451
   80c50:	00080b09 	.word	0x00080b09
   80c54:	00081599 	.word	0x00081599
   80c58:	469c4000 	.word	0x469c4000
   80c5c:	000817ad 	.word	0x000817ad
   80c60:	00081b39 	.word	0x00081b39
   80c64:	00080b61 	.word	0x00080b61

00080c68 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80c68:	4b16      	ldr	r3, [pc, #88]	; (80cc4 <configure_uart+0x5c>)
   80c6a:	2200      	movs	r2, #0
   80c6c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80c6e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c70:	4b15      	ldr	r3, [pc, #84]	; (80cc8 <configure_uart+0x60>)
   80c72:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c76:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c78:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c7c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c7e:	4002      	ands	r2, r0
   80c80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80c84:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c86:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80c88:	f44f 7280 	mov.w	r2, #256	; 0x100
   80c8c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80c90:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80c92:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80c96:	21ac      	movs	r1, #172	; 0xac
   80c98:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = (int)(MCK/(16*BAUDRATE)); // MCK / (16 * x) = BaudRate (write x into UART_BRGR, which is 547) 
   80c9a:	f240 2122 	movw	r1, #546	; 0x222
   80c9e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80ca4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80ca6:	f240 2102 	movw	r1, #514	; 0x202
   80caa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80cae:	f04f 31ff 	mov.w	r1, #4294967295
   80cb2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80cb4:	21e1      	movs	r1, #225	; 0xe1
   80cb6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80cb8:	4904      	ldr	r1, [pc, #16]	; (80ccc <configure_uart+0x64>)
   80cba:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80cbc:	2250      	movs	r2, #80	; 0x50
   80cbe:	601a      	str	r2, [r3, #0]
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop
   80cc4:	20000458 	.word	0x20000458
   80cc8:	400e0e00 	.word	0x400e0e00
   80ccc:	e000e100 	.word	0xe000e100

00080cd0 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80cd0:	4b07      	ldr	r3, [pc, #28]	; (80cf0 <uart_putchar+0x20>)
   80cd2:	695b      	ldr	r3, [r3, #20]
   80cd4:	f013 0f02 	tst.w	r3, #2
   80cd8:	d008      	beq.n	80cec <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80cda:	4b05      	ldr	r3, [pc, #20]	; (80cf0 <uart_putchar+0x20>)
   80cdc:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80cde:	4b04      	ldr	r3, [pc, #16]	; (80cf0 <uart_putchar+0x20>)
   80ce0:	695b      	ldr	r3, [r3, #20]
   80ce2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ce6:	d0fa      	beq.n	80cde <uart_putchar+0xe>
	return 0;
   80ce8:	2000      	movs	r0, #0
   80cea:	4770      	bx	lr
	return 1;
   80cec:	2001      	movs	r0, #1
}
   80cee:	4770      	bx	lr
   80cf0:	400e0800 	.word	0x400e0800

00080cf4 <UART_Handler>:

void UART_Handler(void)
{
   80cf4:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80cf6:	4b15      	ldr	r3, [pc, #84]	; (80d4c <UART_Handler+0x58>)
   80cf8:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80cfa:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80cfe:	d003      	beq.n	80d08 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80d00:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d04:	4a11      	ldr	r2, [pc, #68]	; (80d4c <UART_Handler+0x58>)
   80d06:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80d08:	f013 0f01 	tst.w	r3, #1
   80d0c:	d012      	beq.n	80d34 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80d0e:	4810      	ldr	r0, [pc, #64]	; (80d50 <UART_Handler+0x5c>)
   80d10:	7842      	ldrb	r2, [r0, #1]
   80d12:	1c53      	adds	r3, r2, #1
   80d14:	4259      	negs	r1, r3
   80d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d1e:	bf58      	it	pl
   80d20:	424b      	negpl	r3, r1
   80d22:	7801      	ldrb	r1, [r0, #0]
   80d24:	428b      	cmp	r3, r1
   80d26:	d006      	beq.n	80d36 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80d28:	4908      	ldr	r1, [pc, #32]	; (80d4c <UART_Handler+0x58>)
   80d2a:	6988      	ldr	r0, [r1, #24]
   80d2c:	4908      	ldr	r1, [pc, #32]	; (80d50 <UART_Handler+0x5c>)
   80d2e:	440a      	add	r2, r1
   80d30:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80d32:	704b      	strb	r3, [r1, #1]
   80d34:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80d36:	4807      	ldr	r0, [pc, #28]	; (80d54 <UART_Handler+0x60>)
   80d38:	4b07      	ldr	r3, [pc, #28]	; (80d58 <UART_Handler+0x64>)
   80d3a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80d3c:	4b04      	ldr	r3, [pc, #16]	; (80d50 <UART_Handler+0x5c>)
   80d3e:	7859      	ldrb	r1, [r3, #1]
   80d40:	4a02      	ldr	r2, [pc, #8]	; (80d4c <UART_Handler+0x58>)
   80d42:	6992      	ldr	r2, [r2, #24]
   80d44:	440b      	add	r3, r1
   80d46:	709a      	strb	r2, [r3, #2]
			return;
   80d48:	bd08      	pop	{r3, pc}
   80d4a:	bf00      	nop
   80d4c:	400e0800 	.word	0x400e0800
   80d50:	20000458 	.word	0x20000458
   80d54:	00081d38 	.word	0x00081d38
   80d58:	00080ae1 	.word	0x00080ae1

00080d5c <__aeabi_drsub>:
   80d5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80d60:	e002      	b.n	80d68 <__adddf3>
   80d62:	bf00      	nop

00080d64 <__aeabi_dsub>:
   80d64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080d68 <__adddf3>:
   80d68:	b530      	push	{r4, r5, lr}
   80d6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80d6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80d72:	ea94 0f05 	teq	r4, r5
   80d76:	bf08      	it	eq
   80d78:	ea90 0f02 	teqeq	r0, r2
   80d7c:	bf1f      	itttt	ne
   80d7e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80d82:	ea55 0c02 	orrsne.w	ip, r5, r2
   80d86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80d8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80d8e:	f000 80e2 	beq.w	80f56 <__adddf3+0x1ee>
   80d92:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80d96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80d9a:	bfb8      	it	lt
   80d9c:	426d      	neglt	r5, r5
   80d9e:	dd0c      	ble.n	80dba <__adddf3+0x52>
   80da0:	442c      	add	r4, r5
   80da2:	ea80 0202 	eor.w	r2, r0, r2
   80da6:	ea81 0303 	eor.w	r3, r1, r3
   80daa:	ea82 0000 	eor.w	r0, r2, r0
   80dae:	ea83 0101 	eor.w	r1, r3, r1
   80db2:	ea80 0202 	eor.w	r2, r0, r2
   80db6:	ea81 0303 	eor.w	r3, r1, r3
   80dba:	2d36      	cmp	r5, #54	; 0x36
   80dbc:	bf88      	it	hi
   80dbe:	bd30      	pophi	{r4, r5, pc}
   80dc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80dc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80dc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80dcc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80dd0:	d002      	beq.n	80dd8 <__adddf3+0x70>
   80dd2:	4240      	negs	r0, r0
   80dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80dd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80ddc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80de0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80de4:	d002      	beq.n	80dec <__adddf3+0x84>
   80de6:	4252      	negs	r2, r2
   80de8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80dec:	ea94 0f05 	teq	r4, r5
   80df0:	f000 80a7 	beq.w	80f42 <__adddf3+0x1da>
   80df4:	f1a4 0401 	sub.w	r4, r4, #1
   80df8:	f1d5 0e20 	rsbs	lr, r5, #32
   80dfc:	db0d      	blt.n	80e1a <__adddf3+0xb2>
   80dfe:	fa02 fc0e 	lsl.w	ip, r2, lr
   80e02:	fa22 f205 	lsr.w	r2, r2, r5
   80e06:	1880      	adds	r0, r0, r2
   80e08:	f141 0100 	adc.w	r1, r1, #0
   80e0c:	fa03 f20e 	lsl.w	r2, r3, lr
   80e10:	1880      	adds	r0, r0, r2
   80e12:	fa43 f305 	asr.w	r3, r3, r5
   80e16:	4159      	adcs	r1, r3
   80e18:	e00e      	b.n	80e38 <__adddf3+0xd0>
   80e1a:	f1a5 0520 	sub.w	r5, r5, #32
   80e1e:	f10e 0e20 	add.w	lr, lr, #32
   80e22:	2a01      	cmp	r2, #1
   80e24:	fa03 fc0e 	lsl.w	ip, r3, lr
   80e28:	bf28      	it	cs
   80e2a:	f04c 0c02 	orrcs.w	ip, ip, #2
   80e2e:	fa43 f305 	asr.w	r3, r3, r5
   80e32:	18c0      	adds	r0, r0, r3
   80e34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80e3c:	d507      	bpl.n	80e4e <__adddf3+0xe6>
   80e3e:	f04f 0e00 	mov.w	lr, #0
   80e42:	f1dc 0c00 	rsbs	ip, ip, #0
   80e46:	eb7e 0000 	sbcs.w	r0, lr, r0
   80e4a:	eb6e 0101 	sbc.w	r1, lr, r1
   80e4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80e52:	d31b      	bcc.n	80e8c <__adddf3+0x124>
   80e54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80e58:	d30c      	bcc.n	80e74 <__adddf3+0x10c>
   80e5a:	0849      	lsrs	r1, r1, #1
   80e5c:	ea5f 0030 	movs.w	r0, r0, rrx
   80e60:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80e64:	f104 0401 	add.w	r4, r4, #1
   80e68:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80e6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80e70:	f080 809a 	bcs.w	80fa8 <__adddf3+0x240>
   80e74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80e78:	bf08      	it	eq
   80e7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80e7e:	f150 0000 	adcs.w	r0, r0, #0
   80e82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e86:	ea41 0105 	orr.w	r1, r1, r5
   80e8a:	bd30      	pop	{r4, r5, pc}
   80e8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80e90:	4140      	adcs	r0, r0
   80e92:	eb41 0101 	adc.w	r1, r1, r1
   80e96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80e9a:	f1a4 0401 	sub.w	r4, r4, #1
   80e9e:	d1e9      	bne.n	80e74 <__adddf3+0x10c>
   80ea0:	f091 0f00 	teq	r1, #0
   80ea4:	bf04      	itt	eq
   80ea6:	4601      	moveq	r1, r0
   80ea8:	2000      	moveq	r0, #0
   80eaa:	fab1 f381 	clz	r3, r1
   80eae:	bf08      	it	eq
   80eb0:	3320      	addeq	r3, #32
   80eb2:	f1a3 030b 	sub.w	r3, r3, #11
   80eb6:	f1b3 0220 	subs.w	r2, r3, #32
   80eba:	da0c      	bge.n	80ed6 <__adddf3+0x16e>
   80ebc:	320c      	adds	r2, #12
   80ebe:	dd08      	ble.n	80ed2 <__adddf3+0x16a>
   80ec0:	f102 0c14 	add.w	ip, r2, #20
   80ec4:	f1c2 020c 	rsb	r2, r2, #12
   80ec8:	fa01 f00c 	lsl.w	r0, r1, ip
   80ecc:	fa21 f102 	lsr.w	r1, r1, r2
   80ed0:	e00c      	b.n	80eec <__adddf3+0x184>
   80ed2:	f102 0214 	add.w	r2, r2, #20
   80ed6:	bfd8      	it	le
   80ed8:	f1c2 0c20 	rsble	ip, r2, #32
   80edc:	fa01 f102 	lsl.w	r1, r1, r2
   80ee0:	fa20 fc0c 	lsr.w	ip, r0, ip
   80ee4:	bfdc      	itt	le
   80ee6:	ea41 010c 	orrle.w	r1, r1, ip
   80eea:	4090      	lslle	r0, r2
   80eec:	1ae4      	subs	r4, r4, r3
   80eee:	bfa2      	ittt	ge
   80ef0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80ef4:	4329      	orrge	r1, r5
   80ef6:	bd30      	popge	{r4, r5, pc}
   80ef8:	ea6f 0404 	mvn.w	r4, r4
   80efc:	3c1f      	subs	r4, #31
   80efe:	da1c      	bge.n	80f3a <__adddf3+0x1d2>
   80f00:	340c      	adds	r4, #12
   80f02:	dc0e      	bgt.n	80f22 <__adddf3+0x1ba>
   80f04:	f104 0414 	add.w	r4, r4, #20
   80f08:	f1c4 0220 	rsb	r2, r4, #32
   80f0c:	fa20 f004 	lsr.w	r0, r0, r4
   80f10:	fa01 f302 	lsl.w	r3, r1, r2
   80f14:	ea40 0003 	orr.w	r0, r0, r3
   80f18:	fa21 f304 	lsr.w	r3, r1, r4
   80f1c:	ea45 0103 	orr.w	r1, r5, r3
   80f20:	bd30      	pop	{r4, r5, pc}
   80f22:	f1c4 040c 	rsb	r4, r4, #12
   80f26:	f1c4 0220 	rsb	r2, r4, #32
   80f2a:	fa20 f002 	lsr.w	r0, r0, r2
   80f2e:	fa01 f304 	lsl.w	r3, r1, r4
   80f32:	ea40 0003 	orr.w	r0, r0, r3
   80f36:	4629      	mov	r1, r5
   80f38:	bd30      	pop	{r4, r5, pc}
   80f3a:	fa21 f004 	lsr.w	r0, r1, r4
   80f3e:	4629      	mov	r1, r5
   80f40:	bd30      	pop	{r4, r5, pc}
   80f42:	f094 0f00 	teq	r4, #0
   80f46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80f4a:	bf06      	itte	eq
   80f4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80f50:	3401      	addeq	r4, #1
   80f52:	3d01      	subne	r5, #1
   80f54:	e74e      	b.n	80df4 <__adddf3+0x8c>
   80f56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80f5a:	bf18      	it	ne
   80f5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f60:	d029      	beq.n	80fb6 <__adddf3+0x24e>
   80f62:	ea94 0f05 	teq	r4, r5
   80f66:	bf08      	it	eq
   80f68:	ea90 0f02 	teqeq	r0, r2
   80f6c:	d005      	beq.n	80f7a <__adddf3+0x212>
   80f6e:	ea54 0c00 	orrs.w	ip, r4, r0
   80f72:	bf04      	itt	eq
   80f74:	4619      	moveq	r1, r3
   80f76:	4610      	moveq	r0, r2
   80f78:	bd30      	pop	{r4, r5, pc}
   80f7a:	ea91 0f03 	teq	r1, r3
   80f7e:	bf1e      	ittt	ne
   80f80:	2100      	movne	r1, #0
   80f82:	2000      	movne	r0, #0
   80f84:	bd30      	popne	{r4, r5, pc}
   80f86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80f8a:	d105      	bne.n	80f98 <__adddf3+0x230>
   80f8c:	0040      	lsls	r0, r0, #1
   80f8e:	4149      	adcs	r1, r1
   80f90:	bf28      	it	cs
   80f92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80f96:	bd30      	pop	{r4, r5, pc}
   80f98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80f9c:	bf3c      	itt	cc
   80f9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80fa2:	bd30      	popcc	{r4, r5, pc}
   80fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80fa8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80fac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80fb0:	f04f 0000 	mov.w	r0, #0
   80fb4:	bd30      	pop	{r4, r5, pc}
   80fb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80fba:	bf1a      	itte	ne
   80fbc:	4619      	movne	r1, r3
   80fbe:	4610      	movne	r0, r2
   80fc0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80fc4:	bf1c      	itt	ne
   80fc6:	460b      	movne	r3, r1
   80fc8:	4602      	movne	r2, r0
   80fca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80fce:	bf06      	itte	eq
   80fd0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80fd4:	ea91 0f03 	teqeq	r1, r3
   80fd8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80fdc:	bd30      	pop	{r4, r5, pc}
   80fde:	bf00      	nop

00080fe0 <__aeabi_ui2d>:
   80fe0:	f090 0f00 	teq	r0, #0
   80fe4:	bf04      	itt	eq
   80fe6:	2100      	moveq	r1, #0
   80fe8:	4770      	bxeq	lr
   80fea:	b530      	push	{r4, r5, lr}
   80fec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80ff0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80ff4:	f04f 0500 	mov.w	r5, #0
   80ff8:	f04f 0100 	mov.w	r1, #0
   80ffc:	e750      	b.n	80ea0 <__adddf3+0x138>
   80ffe:	bf00      	nop

00081000 <__aeabi_i2d>:
   81000:	f090 0f00 	teq	r0, #0
   81004:	bf04      	itt	eq
   81006:	2100      	moveq	r1, #0
   81008:	4770      	bxeq	lr
   8100a:	b530      	push	{r4, r5, lr}
   8100c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81010:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81014:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81018:	bf48      	it	mi
   8101a:	4240      	negmi	r0, r0
   8101c:	f04f 0100 	mov.w	r1, #0
   81020:	e73e      	b.n	80ea0 <__adddf3+0x138>
   81022:	bf00      	nop

00081024 <__aeabi_f2d>:
   81024:	0042      	lsls	r2, r0, #1
   81026:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8102a:	ea4f 0131 	mov.w	r1, r1, rrx
   8102e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81032:	bf1f      	itttt	ne
   81034:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81038:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8103c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81040:	4770      	bxne	lr
   81042:	f092 0f00 	teq	r2, #0
   81046:	bf14      	ite	ne
   81048:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8104c:	4770      	bxeq	lr
   8104e:	b530      	push	{r4, r5, lr}
   81050:	f44f 7460 	mov.w	r4, #896	; 0x380
   81054:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8105c:	e720      	b.n	80ea0 <__adddf3+0x138>
   8105e:	bf00      	nop

00081060 <__aeabi_ul2d>:
   81060:	ea50 0201 	orrs.w	r2, r0, r1
   81064:	bf08      	it	eq
   81066:	4770      	bxeq	lr
   81068:	b530      	push	{r4, r5, lr}
   8106a:	f04f 0500 	mov.w	r5, #0
   8106e:	e00a      	b.n	81086 <__aeabi_l2d+0x16>

00081070 <__aeabi_l2d>:
   81070:	ea50 0201 	orrs.w	r2, r0, r1
   81074:	bf08      	it	eq
   81076:	4770      	bxeq	lr
   81078:	b530      	push	{r4, r5, lr}
   8107a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8107e:	d502      	bpl.n	81086 <__aeabi_l2d+0x16>
   81080:	4240      	negs	r0, r0
   81082:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81086:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8108a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8108e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81092:	f43f aedc 	beq.w	80e4e <__adddf3+0xe6>
   81096:	f04f 0203 	mov.w	r2, #3
   8109a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8109e:	bf18      	it	ne
   810a0:	3203      	addne	r2, #3
   810a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   810a6:	bf18      	it	ne
   810a8:	3203      	addne	r2, #3
   810aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   810ae:	f1c2 0320 	rsb	r3, r2, #32
   810b2:	fa00 fc03 	lsl.w	ip, r0, r3
   810b6:	fa20 f002 	lsr.w	r0, r0, r2
   810ba:	fa01 fe03 	lsl.w	lr, r1, r3
   810be:	ea40 000e 	orr.w	r0, r0, lr
   810c2:	fa21 f102 	lsr.w	r1, r1, r2
   810c6:	4414      	add	r4, r2
   810c8:	e6c1      	b.n	80e4e <__adddf3+0xe6>
   810ca:	bf00      	nop

000810cc <__aeabi_dmul>:
   810cc:	b570      	push	{r4, r5, r6, lr}
   810ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   810d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   810d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   810da:	bf1d      	ittte	ne
   810dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   810e0:	ea94 0f0c 	teqne	r4, ip
   810e4:	ea95 0f0c 	teqne	r5, ip
   810e8:	f000 f8de 	bleq	812a8 <__aeabi_dmul+0x1dc>
   810ec:	442c      	add	r4, r5
   810ee:	ea81 0603 	eor.w	r6, r1, r3
   810f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   810f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   810fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   810fe:	bf18      	it	ne
   81100:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81104:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8110c:	d038      	beq.n	81180 <__aeabi_dmul+0xb4>
   8110e:	fba0 ce02 	umull	ip, lr, r0, r2
   81112:	f04f 0500 	mov.w	r5, #0
   81116:	fbe1 e502 	umlal	lr, r5, r1, r2
   8111a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8111e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81122:	f04f 0600 	mov.w	r6, #0
   81126:	fbe1 5603 	umlal	r5, r6, r1, r3
   8112a:	f09c 0f00 	teq	ip, #0
   8112e:	bf18      	it	ne
   81130:	f04e 0e01 	orrne.w	lr, lr, #1
   81134:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81138:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8113c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81140:	d204      	bcs.n	8114c <__aeabi_dmul+0x80>
   81142:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81146:	416d      	adcs	r5, r5
   81148:	eb46 0606 	adc.w	r6, r6, r6
   8114c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81150:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81154:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81158:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8115c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81160:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81164:	bf88      	it	hi
   81166:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8116a:	d81e      	bhi.n	811aa <__aeabi_dmul+0xde>
   8116c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81170:	bf08      	it	eq
   81172:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81176:	f150 0000 	adcs.w	r0, r0, #0
   8117a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8117e:	bd70      	pop	{r4, r5, r6, pc}
   81180:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81184:	ea46 0101 	orr.w	r1, r6, r1
   81188:	ea40 0002 	orr.w	r0, r0, r2
   8118c:	ea81 0103 	eor.w	r1, r1, r3
   81190:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81194:	bfc2      	ittt	gt
   81196:	ebd4 050c 	rsbsgt	r5, r4, ip
   8119a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8119e:	bd70      	popgt	{r4, r5, r6, pc}
   811a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811a4:	f04f 0e00 	mov.w	lr, #0
   811a8:	3c01      	subs	r4, #1
   811aa:	f300 80ab 	bgt.w	81304 <__aeabi_dmul+0x238>
   811ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   811b2:	bfde      	ittt	le
   811b4:	2000      	movle	r0, #0
   811b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   811ba:	bd70      	pople	{r4, r5, r6, pc}
   811bc:	f1c4 0400 	rsb	r4, r4, #0
   811c0:	3c20      	subs	r4, #32
   811c2:	da35      	bge.n	81230 <__aeabi_dmul+0x164>
   811c4:	340c      	adds	r4, #12
   811c6:	dc1b      	bgt.n	81200 <__aeabi_dmul+0x134>
   811c8:	f104 0414 	add.w	r4, r4, #20
   811cc:	f1c4 0520 	rsb	r5, r4, #32
   811d0:	fa00 f305 	lsl.w	r3, r0, r5
   811d4:	fa20 f004 	lsr.w	r0, r0, r4
   811d8:	fa01 f205 	lsl.w	r2, r1, r5
   811dc:	ea40 0002 	orr.w	r0, r0, r2
   811e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   811e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   811e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   811ec:	fa21 f604 	lsr.w	r6, r1, r4
   811f0:	eb42 0106 	adc.w	r1, r2, r6
   811f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   811f8:	bf08      	it	eq
   811fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   811fe:	bd70      	pop	{r4, r5, r6, pc}
   81200:	f1c4 040c 	rsb	r4, r4, #12
   81204:	f1c4 0520 	rsb	r5, r4, #32
   81208:	fa00 f304 	lsl.w	r3, r0, r4
   8120c:	fa20 f005 	lsr.w	r0, r0, r5
   81210:	fa01 f204 	lsl.w	r2, r1, r4
   81214:	ea40 0002 	orr.w	r0, r0, r2
   81218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8121c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81220:	f141 0100 	adc.w	r1, r1, #0
   81224:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81228:	bf08      	it	eq
   8122a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8122e:	bd70      	pop	{r4, r5, r6, pc}
   81230:	f1c4 0520 	rsb	r5, r4, #32
   81234:	fa00 f205 	lsl.w	r2, r0, r5
   81238:	ea4e 0e02 	orr.w	lr, lr, r2
   8123c:	fa20 f304 	lsr.w	r3, r0, r4
   81240:	fa01 f205 	lsl.w	r2, r1, r5
   81244:	ea43 0302 	orr.w	r3, r3, r2
   81248:	fa21 f004 	lsr.w	r0, r1, r4
   8124c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81250:	fa21 f204 	lsr.w	r2, r1, r4
   81254:	ea20 0002 	bic.w	r0, r0, r2
   81258:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8125c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81260:	bf08      	it	eq
   81262:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81266:	bd70      	pop	{r4, r5, r6, pc}
   81268:	f094 0f00 	teq	r4, #0
   8126c:	d10f      	bne.n	8128e <__aeabi_dmul+0x1c2>
   8126e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81272:	0040      	lsls	r0, r0, #1
   81274:	eb41 0101 	adc.w	r1, r1, r1
   81278:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8127c:	bf08      	it	eq
   8127e:	3c01      	subeq	r4, #1
   81280:	d0f7      	beq.n	81272 <__aeabi_dmul+0x1a6>
   81282:	ea41 0106 	orr.w	r1, r1, r6
   81286:	f095 0f00 	teq	r5, #0
   8128a:	bf18      	it	ne
   8128c:	4770      	bxne	lr
   8128e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81292:	0052      	lsls	r2, r2, #1
   81294:	eb43 0303 	adc.w	r3, r3, r3
   81298:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8129c:	bf08      	it	eq
   8129e:	3d01      	subeq	r5, #1
   812a0:	d0f7      	beq.n	81292 <__aeabi_dmul+0x1c6>
   812a2:	ea43 0306 	orr.w	r3, r3, r6
   812a6:	4770      	bx	lr
   812a8:	ea94 0f0c 	teq	r4, ip
   812ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   812b0:	bf18      	it	ne
   812b2:	ea95 0f0c 	teqne	r5, ip
   812b6:	d00c      	beq.n	812d2 <__aeabi_dmul+0x206>
   812b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   812bc:	bf18      	it	ne
   812be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   812c2:	d1d1      	bne.n	81268 <__aeabi_dmul+0x19c>
   812c4:	ea81 0103 	eor.w	r1, r1, r3
   812c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812cc:	f04f 0000 	mov.w	r0, #0
   812d0:	bd70      	pop	{r4, r5, r6, pc}
   812d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   812d6:	bf06      	itte	eq
   812d8:	4610      	moveq	r0, r2
   812da:	4619      	moveq	r1, r3
   812dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   812e0:	d019      	beq.n	81316 <__aeabi_dmul+0x24a>
   812e2:	ea94 0f0c 	teq	r4, ip
   812e6:	d102      	bne.n	812ee <__aeabi_dmul+0x222>
   812e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   812ec:	d113      	bne.n	81316 <__aeabi_dmul+0x24a>
   812ee:	ea95 0f0c 	teq	r5, ip
   812f2:	d105      	bne.n	81300 <__aeabi_dmul+0x234>
   812f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   812f8:	bf1c      	itt	ne
   812fa:	4610      	movne	r0, r2
   812fc:	4619      	movne	r1, r3
   812fe:	d10a      	bne.n	81316 <__aeabi_dmul+0x24a>
   81300:	ea81 0103 	eor.w	r1, r1, r3
   81304:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81308:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8130c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81310:	f04f 0000 	mov.w	r0, #0
   81314:	bd70      	pop	{r4, r5, r6, pc}
   81316:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8131a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8131e:	bd70      	pop	{r4, r5, r6, pc}

00081320 <__aeabi_ddiv>:
   81320:	b570      	push	{r4, r5, r6, lr}
   81322:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81326:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8132a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8132e:	bf1d      	ittte	ne
   81330:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81334:	ea94 0f0c 	teqne	r4, ip
   81338:	ea95 0f0c 	teqne	r5, ip
   8133c:	f000 f8a7 	bleq	8148e <__aeabi_ddiv+0x16e>
   81340:	eba4 0405 	sub.w	r4, r4, r5
   81344:	ea81 0e03 	eor.w	lr, r1, r3
   81348:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8134c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81350:	f000 8088 	beq.w	81464 <__aeabi_ddiv+0x144>
   81354:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81358:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8135c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81360:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81364:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81368:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8136c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81370:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81374:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81378:	429d      	cmp	r5, r3
   8137a:	bf08      	it	eq
   8137c:	4296      	cmpeq	r6, r2
   8137e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81382:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81386:	d202      	bcs.n	8138e <__aeabi_ddiv+0x6e>
   81388:	085b      	lsrs	r3, r3, #1
   8138a:	ea4f 0232 	mov.w	r2, r2, rrx
   8138e:	1ab6      	subs	r6, r6, r2
   81390:	eb65 0503 	sbc.w	r5, r5, r3
   81394:	085b      	lsrs	r3, r3, #1
   81396:	ea4f 0232 	mov.w	r2, r2, rrx
   8139a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8139e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   813a2:	ebb6 0e02 	subs.w	lr, r6, r2
   813a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   813aa:	bf22      	ittt	cs
   813ac:	1ab6      	subcs	r6, r6, r2
   813ae:	4675      	movcs	r5, lr
   813b0:	ea40 000c 	orrcs.w	r0, r0, ip
   813b4:	085b      	lsrs	r3, r3, #1
   813b6:	ea4f 0232 	mov.w	r2, r2, rrx
   813ba:	ebb6 0e02 	subs.w	lr, r6, r2
   813be:	eb75 0e03 	sbcs.w	lr, r5, r3
   813c2:	bf22      	ittt	cs
   813c4:	1ab6      	subcs	r6, r6, r2
   813c6:	4675      	movcs	r5, lr
   813c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   813cc:	085b      	lsrs	r3, r3, #1
   813ce:	ea4f 0232 	mov.w	r2, r2, rrx
   813d2:	ebb6 0e02 	subs.w	lr, r6, r2
   813d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   813da:	bf22      	ittt	cs
   813dc:	1ab6      	subcs	r6, r6, r2
   813de:	4675      	movcs	r5, lr
   813e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   813e4:	085b      	lsrs	r3, r3, #1
   813e6:	ea4f 0232 	mov.w	r2, r2, rrx
   813ea:	ebb6 0e02 	subs.w	lr, r6, r2
   813ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   813f2:	bf22      	ittt	cs
   813f4:	1ab6      	subcs	r6, r6, r2
   813f6:	4675      	movcs	r5, lr
   813f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   813fc:	ea55 0e06 	orrs.w	lr, r5, r6
   81400:	d018      	beq.n	81434 <__aeabi_ddiv+0x114>
   81402:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81406:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8140a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8140e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81412:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81416:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8141a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8141e:	d1c0      	bne.n	813a2 <__aeabi_ddiv+0x82>
   81420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81424:	d10b      	bne.n	8143e <__aeabi_ddiv+0x11e>
   81426:	ea41 0100 	orr.w	r1, r1, r0
   8142a:	f04f 0000 	mov.w	r0, #0
   8142e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81432:	e7b6      	b.n	813a2 <__aeabi_ddiv+0x82>
   81434:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81438:	bf04      	itt	eq
   8143a:	4301      	orreq	r1, r0
   8143c:	2000      	moveq	r0, #0
   8143e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81442:	bf88      	it	hi
   81444:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81448:	f63f aeaf 	bhi.w	811aa <__aeabi_dmul+0xde>
   8144c:	ebb5 0c03 	subs.w	ip, r5, r3
   81450:	bf04      	itt	eq
   81452:	ebb6 0c02 	subseq.w	ip, r6, r2
   81456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8145a:	f150 0000 	adcs.w	r0, r0, #0
   8145e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81462:	bd70      	pop	{r4, r5, r6, pc}
   81464:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81468:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8146c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81470:	bfc2      	ittt	gt
   81472:	ebd4 050c 	rsbsgt	r5, r4, ip
   81476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8147a:	bd70      	popgt	{r4, r5, r6, pc}
   8147c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81480:	f04f 0e00 	mov.w	lr, #0
   81484:	3c01      	subs	r4, #1
   81486:	e690      	b.n	811aa <__aeabi_dmul+0xde>
   81488:	ea45 0e06 	orr.w	lr, r5, r6
   8148c:	e68d      	b.n	811aa <__aeabi_dmul+0xde>
   8148e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81492:	ea94 0f0c 	teq	r4, ip
   81496:	bf08      	it	eq
   81498:	ea95 0f0c 	teqeq	r5, ip
   8149c:	f43f af3b 	beq.w	81316 <__aeabi_dmul+0x24a>
   814a0:	ea94 0f0c 	teq	r4, ip
   814a4:	d10a      	bne.n	814bc <__aeabi_ddiv+0x19c>
   814a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   814aa:	f47f af34 	bne.w	81316 <__aeabi_dmul+0x24a>
   814ae:	ea95 0f0c 	teq	r5, ip
   814b2:	f47f af25 	bne.w	81300 <__aeabi_dmul+0x234>
   814b6:	4610      	mov	r0, r2
   814b8:	4619      	mov	r1, r3
   814ba:	e72c      	b.n	81316 <__aeabi_dmul+0x24a>
   814bc:	ea95 0f0c 	teq	r5, ip
   814c0:	d106      	bne.n	814d0 <__aeabi_ddiv+0x1b0>
   814c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   814c6:	f43f aefd 	beq.w	812c4 <__aeabi_dmul+0x1f8>
   814ca:	4610      	mov	r0, r2
   814cc:	4619      	mov	r1, r3
   814ce:	e722      	b.n	81316 <__aeabi_dmul+0x24a>
   814d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814d4:	bf18      	it	ne
   814d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814da:	f47f aec5 	bne.w	81268 <__aeabi_dmul+0x19c>
   814de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   814e2:	f47f af0d 	bne.w	81300 <__aeabi_dmul+0x234>
   814e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   814ea:	f47f aeeb 	bne.w	812c4 <__aeabi_dmul+0x1f8>
   814ee:	e712      	b.n	81316 <__aeabi_dmul+0x24a>

000814f0 <__aeabi_d2f>:
   814f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   814f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   814f8:	bf24      	itt	cs
   814fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   814fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   81502:	d90d      	bls.n	81520 <__aeabi_d2f+0x30>
   81504:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81508:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   8150c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   81510:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   81514:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   81518:	bf08      	it	eq
   8151a:	f020 0001 	biceq.w	r0, r0, #1
   8151e:	4770      	bx	lr
   81520:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   81524:	d121      	bne.n	8156a <__aeabi_d2f+0x7a>
   81526:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8152a:	bfbc      	itt	lt
   8152c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   81530:	4770      	bxlt	lr
   81532:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81536:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8153a:	f1c2 0218 	rsb	r2, r2, #24
   8153e:	f1c2 0c20 	rsb	ip, r2, #32
   81542:	fa10 f30c 	lsls.w	r3, r0, ip
   81546:	fa20 f002 	lsr.w	r0, r0, r2
   8154a:	bf18      	it	ne
   8154c:	f040 0001 	orrne.w	r0, r0, #1
   81550:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81554:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81558:	fa03 fc0c 	lsl.w	ip, r3, ip
   8155c:	ea40 000c 	orr.w	r0, r0, ip
   81560:	fa23 f302 	lsr.w	r3, r3, r2
   81564:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81568:	e7cc      	b.n	81504 <__aeabi_d2f+0x14>
   8156a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8156e:	d107      	bne.n	81580 <__aeabi_d2f+0x90>
   81570:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81574:	bf1e      	ittt	ne
   81576:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8157a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8157e:	4770      	bxne	lr
   81580:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81584:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81588:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8158c:	4770      	bx	lr
   8158e:	bf00      	nop

00081590 <__aeabi_frsub>:
   81590:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81594:	e002      	b.n	8159c <__addsf3>
   81596:	bf00      	nop

00081598 <__aeabi_fsub>:
   81598:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008159c <__addsf3>:
   8159c:	0042      	lsls	r2, r0, #1
   8159e:	bf1f      	itttt	ne
   815a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   815a4:	ea92 0f03 	teqne	r2, r3
   815a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   815ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   815b0:	d06a      	beq.n	81688 <__addsf3+0xec>
   815b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   815b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   815ba:	bfc1      	itttt	gt
   815bc:	18d2      	addgt	r2, r2, r3
   815be:	4041      	eorgt	r1, r0
   815c0:	4048      	eorgt	r0, r1
   815c2:	4041      	eorgt	r1, r0
   815c4:	bfb8      	it	lt
   815c6:	425b      	neglt	r3, r3
   815c8:	2b19      	cmp	r3, #25
   815ca:	bf88      	it	hi
   815cc:	4770      	bxhi	lr
   815ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   815d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   815d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   815da:	bf18      	it	ne
   815dc:	4240      	negne	r0, r0
   815de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   815e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   815e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   815ea:	bf18      	it	ne
   815ec:	4249      	negne	r1, r1
   815ee:	ea92 0f03 	teq	r2, r3
   815f2:	d03f      	beq.n	81674 <__addsf3+0xd8>
   815f4:	f1a2 0201 	sub.w	r2, r2, #1
   815f8:	fa41 fc03 	asr.w	ip, r1, r3
   815fc:	eb10 000c 	adds.w	r0, r0, ip
   81600:	f1c3 0320 	rsb	r3, r3, #32
   81604:	fa01 f103 	lsl.w	r1, r1, r3
   81608:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8160c:	d502      	bpl.n	81614 <__addsf3+0x78>
   8160e:	4249      	negs	r1, r1
   81610:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81614:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81618:	d313      	bcc.n	81642 <__addsf3+0xa6>
   8161a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8161e:	d306      	bcc.n	8162e <__addsf3+0x92>
   81620:	0840      	lsrs	r0, r0, #1
   81622:	ea4f 0131 	mov.w	r1, r1, rrx
   81626:	f102 0201 	add.w	r2, r2, #1
   8162a:	2afe      	cmp	r2, #254	; 0xfe
   8162c:	d251      	bcs.n	816d2 <__addsf3+0x136>
   8162e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81632:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81636:	bf08      	it	eq
   81638:	f020 0001 	biceq.w	r0, r0, #1
   8163c:	ea40 0003 	orr.w	r0, r0, r3
   81640:	4770      	bx	lr
   81642:	0049      	lsls	r1, r1, #1
   81644:	eb40 0000 	adc.w	r0, r0, r0
   81648:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   8164c:	f1a2 0201 	sub.w	r2, r2, #1
   81650:	d1ed      	bne.n	8162e <__addsf3+0x92>
   81652:	fab0 fc80 	clz	ip, r0
   81656:	f1ac 0c08 	sub.w	ip, ip, #8
   8165a:	ebb2 020c 	subs.w	r2, r2, ip
   8165e:	fa00 f00c 	lsl.w	r0, r0, ip
   81662:	bfaa      	itet	ge
   81664:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81668:	4252      	neglt	r2, r2
   8166a:	4318      	orrge	r0, r3
   8166c:	bfbc      	itt	lt
   8166e:	40d0      	lsrlt	r0, r2
   81670:	4318      	orrlt	r0, r3
   81672:	4770      	bx	lr
   81674:	f092 0f00 	teq	r2, #0
   81678:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   8167c:	bf06      	itte	eq
   8167e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81682:	3201      	addeq	r2, #1
   81684:	3b01      	subne	r3, #1
   81686:	e7b5      	b.n	815f4 <__addsf3+0x58>
   81688:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8168c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81690:	bf18      	it	ne
   81692:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81696:	d021      	beq.n	816dc <__addsf3+0x140>
   81698:	ea92 0f03 	teq	r2, r3
   8169c:	d004      	beq.n	816a8 <__addsf3+0x10c>
   8169e:	f092 0f00 	teq	r2, #0
   816a2:	bf08      	it	eq
   816a4:	4608      	moveq	r0, r1
   816a6:	4770      	bx	lr
   816a8:	ea90 0f01 	teq	r0, r1
   816ac:	bf1c      	itt	ne
   816ae:	2000      	movne	r0, #0
   816b0:	4770      	bxne	lr
   816b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   816b6:	d104      	bne.n	816c2 <__addsf3+0x126>
   816b8:	0040      	lsls	r0, r0, #1
   816ba:	bf28      	it	cs
   816bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   816c0:	4770      	bx	lr
   816c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   816c6:	bf3c      	itt	cc
   816c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   816cc:	4770      	bxcc	lr
   816ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   816d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   816d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   816da:	4770      	bx	lr
   816dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   816e0:	bf16      	itet	ne
   816e2:	4608      	movne	r0, r1
   816e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   816e8:	4601      	movne	r1, r0
   816ea:	0242      	lsls	r2, r0, #9
   816ec:	bf06      	itte	eq
   816ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   816f2:	ea90 0f01 	teqeq	r0, r1
   816f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   816fa:	4770      	bx	lr

000816fc <__aeabi_ui2f>:
   816fc:	f04f 0300 	mov.w	r3, #0
   81700:	e004      	b.n	8170c <__aeabi_i2f+0x8>
   81702:	bf00      	nop

00081704 <__aeabi_i2f>:
   81704:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81708:	bf48      	it	mi
   8170a:	4240      	negmi	r0, r0
   8170c:	ea5f 0c00 	movs.w	ip, r0
   81710:	bf08      	it	eq
   81712:	4770      	bxeq	lr
   81714:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81718:	4601      	mov	r1, r0
   8171a:	f04f 0000 	mov.w	r0, #0
   8171e:	e01c      	b.n	8175a <__aeabi_l2f+0x2a>

00081720 <__aeabi_ul2f>:
   81720:	ea50 0201 	orrs.w	r2, r0, r1
   81724:	bf08      	it	eq
   81726:	4770      	bxeq	lr
   81728:	f04f 0300 	mov.w	r3, #0
   8172c:	e00a      	b.n	81744 <__aeabi_l2f+0x14>
   8172e:	bf00      	nop

00081730 <__aeabi_l2f>:
   81730:	ea50 0201 	orrs.w	r2, r0, r1
   81734:	bf08      	it	eq
   81736:	4770      	bxeq	lr
   81738:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   8173c:	d502      	bpl.n	81744 <__aeabi_l2f+0x14>
   8173e:	4240      	negs	r0, r0
   81740:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81744:	ea5f 0c01 	movs.w	ip, r1
   81748:	bf02      	ittt	eq
   8174a:	4684      	moveq	ip, r0
   8174c:	4601      	moveq	r1, r0
   8174e:	2000      	moveq	r0, #0
   81750:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81754:	bf08      	it	eq
   81756:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8175a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8175e:	fabc f28c 	clz	r2, ip
   81762:	3a08      	subs	r2, #8
   81764:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81768:	db10      	blt.n	8178c <__aeabi_l2f+0x5c>
   8176a:	fa01 fc02 	lsl.w	ip, r1, r2
   8176e:	4463      	add	r3, ip
   81770:	fa00 fc02 	lsl.w	ip, r0, r2
   81774:	f1c2 0220 	rsb	r2, r2, #32
   81778:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8177c:	fa20 f202 	lsr.w	r2, r0, r2
   81780:	eb43 0002 	adc.w	r0, r3, r2
   81784:	bf08      	it	eq
   81786:	f020 0001 	biceq.w	r0, r0, #1
   8178a:	4770      	bx	lr
   8178c:	f102 0220 	add.w	r2, r2, #32
   81790:	fa01 fc02 	lsl.w	ip, r1, r2
   81794:	f1c2 0220 	rsb	r2, r2, #32
   81798:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   8179c:	fa21 f202 	lsr.w	r2, r1, r2
   817a0:	eb43 0002 	adc.w	r0, r3, r2
   817a4:	bf08      	it	eq
   817a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   817aa:	4770      	bx	lr

000817ac <__aeabi_fmul>:
   817ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
   817b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   817b4:	bf1e      	ittt	ne
   817b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   817ba:	ea92 0f0c 	teqne	r2, ip
   817be:	ea93 0f0c 	teqne	r3, ip
   817c2:	d06f      	beq.n	818a4 <__aeabi_fmul+0xf8>
   817c4:	441a      	add	r2, r3
   817c6:	ea80 0c01 	eor.w	ip, r0, r1
   817ca:	0240      	lsls	r0, r0, #9
   817cc:	bf18      	it	ne
   817ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   817d2:	d01e      	beq.n	81812 <__aeabi_fmul+0x66>
   817d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   817d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   817dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   817e0:	fba0 3101 	umull	r3, r1, r0, r1
   817e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   817e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   817ec:	bf3e      	ittt	cc
   817ee:	0049      	lslcc	r1, r1, #1
   817f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   817f4:	005b      	lslcc	r3, r3, #1
   817f6:	ea40 0001 	orr.w	r0, r0, r1
   817fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   817fe:	2afd      	cmp	r2, #253	; 0xfd
   81800:	d81d      	bhi.n	8183e <__aeabi_fmul+0x92>
   81802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81806:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8180a:	bf08      	it	eq
   8180c:	f020 0001 	biceq.w	r0, r0, #1
   81810:	4770      	bx	lr
   81812:	f090 0f00 	teq	r0, #0
   81816:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8181a:	bf08      	it	eq
   8181c:	0249      	lsleq	r1, r1, #9
   8181e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81822:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81826:	3a7f      	subs	r2, #127	; 0x7f
   81828:	bfc2      	ittt	gt
   8182a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8182e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81832:	4770      	bxgt	lr
   81834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81838:	f04f 0300 	mov.w	r3, #0
   8183c:	3a01      	subs	r2, #1
   8183e:	dc5d      	bgt.n	818fc <__aeabi_fmul+0x150>
   81840:	f112 0f19 	cmn.w	r2, #25
   81844:	bfdc      	itt	le
   81846:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8184a:	4770      	bxle	lr
   8184c:	f1c2 0200 	rsb	r2, r2, #0
   81850:	0041      	lsls	r1, r0, #1
   81852:	fa21 f102 	lsr.w	r1, r1, r2
   81856:	f1c2 0220 	rsb	r2, r2, #32
   8185a:	fa00 fc02 	lsl.w	ip, r0, r2
   8185e:	ea5f 0031 	movs.w	r0, r1, rrx
   81862:	f140 0000 	adc.w	r0, r0, #0
   81866:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8186a:	bf08      	it	eq
   8186c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81870:	4770      	bx	lr
   81872:	f092 0f00 	teq	r2, #0
   81876:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8187a:	bf02      	ittt	eq
   8187c:	0040      	lsleq	r0, r0, #1
   8187e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81882:	3a01      	subeq	r2, #1
   81884:	d0f9      	beq.n	8187a <__aeabi_fmul+0xce>
   81886:	ea40 000c 	orr.w	r0, r0, ip
   8188a:	f093 0f00 	teq	r3, #0
   8188e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81892:	bf02      	ittt	eq
   81894:	0049      	lsleq	r1, r1, #1
   81896:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8189a:	3b01      	subeq	r3, #1
   8189c:	d0f9      	beq.n	81892 <__aeabi_fmul+0xe6>
   8189e:	ea41 010c 	orr.w	r1, r1, ip
   818a2:	e78f      	b.n	817c4 <__aeabi_fmul+0x18>
   818a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   818a8:	ea92 0f0c 	teq	r2, ip
   818ac:	bf18      	it	ne
   818ae:	ea93 0f0c 	teqne	r3, ip
   818b2:	d00a      	beq.n	818ca <__aeabi_fmul+0x11e>
   818b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   818b8:	bf18      	it	ne
   818ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   818be:	d1d8      	bne.n	81872 <__aeabi_fmul+0xc6>
   818c0:	ea80 0001 	eor.w	r0, r0, r1
   818c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   818c8:	4770      	bx	lr
   818ca:	f090 0f00 	teq	r0, #0
   818ce:	bf17      	itett	ne
   818d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   818d4:	4608      	moveq	r0, r1
   818d6:	f091 0f00 	teqne	r1, #0
   818da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   818de:	d014      	beq.n	8190a <__aeabi_fmul+0x15e>
   818e0:	ea92 0f0c 	teq	r2, ip
   818e4:	d101      	bne.n	818ea <__aeabi_fmul+0x13e>
   818e6:	0242      	lsls	r2, r0, #9
   818e8:	d10f      	bne.n	8190a <__aeabi_fmul+0x15e>
   818ea:	ea93 0f0c 	teq	r3, ip
   818ee:	d103      	bne.n	818f8 <__aeabi_fmul+0x14c>
   818f0:	024b      	lsls	r3, r1, #9
   818f2:	bf18      	it	ne
   818f4:	4608      	movne	r0, r1
   818f6:	d108      	bne.n	8190a <__aeabi_fmul+0x15e>
   818f8:	ea80 0001 	eor.w	r0, r0, r1
   818fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81908:	4770      	bx	lr
   8190a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8190e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81912:	4770      	bx	lr

00081914 <__aeabi_fdiv>:
   81914:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81918:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8191c:	bf1e      	ittt	ne
   8191e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81922:	ea92 0f0c 	teqne	r2, ip
   81926:	ea93 0f0c 	teqne	r3, ip
   8192a:	d069      	beq.n	81a00 <__aeabi_fdiv+0xec>
   8192c:	eba2 0203 	sub.w	r2, r2, r3
   81930:	ea80 0c01 	eor.w	ip, r0, r1
   81934:	0249      	lsls	r1, r1, #9
   81936:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8193a:	d037      	beq.n	819ac <__aeabi_fdiv+0x98>
   8193c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81940:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81944:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81948:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8194c:	428b      	cmp	r3, r1
   8194e:	bf38      	it	cc
   81950:	005b      	lslcc	r3, r3, #1
   81952:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81956:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8195a:	428b      	cmp	r3, r1
   8195c:	bf24      	itt	cs
   8195e:	1a5b      	subcs	r3, r3, r1
   81960:	ea40 000c 	orrcs.w	r0, r0, ip
   81964:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81968:	bf24      	itt	cs
   8196a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8196e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81972:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81976:	bf24      	itt	cs
   81978:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   8197c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81980:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81984:	bf24      	itt	cs
   81986:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8198a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8198e:	011b      	lsls	r3, r3, #4
   81990:	bf18      	it	ne
   81992:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81996:	d1e0      	bne.n	8195a <__aeabi_fdiv+0x46>
   81998:	2afd      	cmp	r2, #253	; 0xfd
   8199a:	f63f af50 	bhi.w	8183e <__aeabi_fmul+0x92>
   8199e:	428b      	cmp	r3, r1
   819a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   819a4:	bf08      	it	eq
   819a6:	f020 0001 	biceq.w	r0, r0, #1
   819aa:	4770      	bx	lr
   819ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   819b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   819b4:	327f      	adds	r2, #127	; 0x7f
   819b6:	bfc2      	ittt	gt
   819b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   819bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   819c0:	4770      	bxgt	lr
   819c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   819c6:	f04f 0300 	mov.w	r3, #0
   819ca:	3a01      	subs	r2, #1
   819cc:	e737      	b.n	8183e <__aeabi_fmul+0x92>
   819ce:	f092 0f00 	teq	r2, #0
   819d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   819d6:	bf02      	ittt	eq
   819d8:	0040      	lsleq	r0, r0, #1
   819da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   819de:	3a01      	subeq	r2, #1
   819e0:	d0f9      	beq.n	819d6 <__aeabi_fdiv+0xc2>
   819e2:	ea40 000c 	orr.w	r0, r0, ip
   819e6:	f093 0f00 	teq	r3, #0
   819ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   819ee:	bf02      	ittt	eq
   819f0:	0049      	lsleq	r1, r1, #1
   819f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   819f6:	3b01      	subeq	r3, #1
   819f8:	d0f9      	beq.n	819ee <__aeabi_fdiv+0xda>
   819fa:	ea41 010c 	orr.w	r1, r1, ip
   819fe:	e795      	b.n	8192c <__aeabi_fdiv+0x18>
   81a00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81a04:	ea92 0f0c 	teq	r2, ip
   81a08:	d108      	bne.n	81a1c <__aeabi_fdiv+0x108>
   81a0a:	0242      	lsls	r2, r0, #9
   81a0c:	f47f af7d 	bne.w	8190a <__aeabi_fmul+0x15e>
   81a10:	ea93 0f0c 	teq	r3, ip
   81a14:	f47f af70 	bne.w	818f8 <__aeabi_fmul+0x14c>
   81a18:	4608      	mov	r0, r1
   81a1a:	e776      	b.n	8190a <__aeabi_fmul+0x15e>
   81a1c:	ea93 0f0c 	teq	r3, ip
   81a20:	d104      	bne.n	81a2c <__aeabi_fdiv+0x118>
   81a22:	024b      	lsls	r3, r1, #9
   81a24:	f43f af4c 	beq.w	818c0 <__aeabi_fmul+0x114>
   81a28:	4608      	mov	r0, r1
   81a2a:	e76e      	b.n	8190a <__aeabi_fmul+0x15e>
   81a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81a30:	bf18      	it	ne
   81a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81a36:	d1ca      	bne.n	819ce <__aeabi_fdiv+0xba>
   81a38:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81a3c:	f47f af5c 	bne.w	818f8 <__aeabi_fmul+0x14c>
   81a40:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81a44:	f47f af3c 	bne.w	818c0 <__aeabi_fmul+0x114>
   81a48:	e75f      	b.n	8190a <__aeabi_fmul+0x15e>
   81a4a:	bf00      	nop

00081a4c <__gesf2>:
   81a4c:	f04f 3cff 	mov.w	ip, #4294967295
   81a50:	e006      	b.n	81a60 <__cmpsf2+0x4>
   81a52:	bf00      	nop

00081a54 <__lesf2>:
   81a54:	f04f 0c01 	mov.w	ip, #1
   81a58:	e002      	b.n	81a60 <__cmpsf2+0x4>
   81a5a:	bf00      	nop

00081a5c <__cmpsf2>:
   81a5c:	f04f 0c01 	mov.w	ip, #1
   81a60:	f84d cd04 	str.w	ip, [sp, #-4]!
   81a64:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81a68:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81a6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81a70:	bf18      	it	ne
   81a72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81a76:	d011      	beq.n	81a9c <__cmpsf2+0x40>
   81a78:	b001      	add	sp, #4
   81a7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81a7e:	bf18      	it	ne
   81a80:	ea90 0f01 	teqne	r0, r1
   81a84:	bf58      	it	pl
   81a86:	ebb2 0003 	subspl.w	r0, r2, r3
   81a8a:	bf88      	it	hi
   81a8c:	17c8      	asrhi	r0, r1, #31
   81a8e:	bf38      	it	cc
   81a90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81a94:	bf18      	it	ne
   81a96:	f040 0001 	orrne.w	r0, r0, #1
   81a9a:	4770      	bx	lr
   81a9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81aa0:	d102      	bne.n	81aa8 <__cmpsf2+0x4c>
   81aa2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81aa6:	d105      	bne.n	81ab4 <__cmpsf2+0x58>
   81aa8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81aac:	d1e4      	bne.n	81a78 <__cmpsf2+0x1c>
   81aae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81ab2:	d0e1      	beq.n	81a78 <__cmpsf2+0x1c>
   81ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
   81ab8:	4770      	bx	lr
   81aba:	bf00      	nop

00081abc <__aeabi_cfrcmple>:
   81abc:	4684      	mov	ip, r0
   81abe:	4608      	mov	r0, r1
   81ac0:	4661      	mov	r1, ip
   81ac2:	e7ff      	b.n	81ac4 <__aeabi_cfcmpeq>

00081ac4 <__aeabi_cfcmpeq>:
   81ac4:	b50f      	push	{r0, r1, r2, r3, lr}
   81ac6:	f7ff ffc9 	bl	81a5c <__cmpsf2>
   81aca:	2800      	cmp	r0, #0
   81acc:	bf48      	it	mi
   81ace:	f110 0f00 	cmnmi.w	r0, #0
   81ad2:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081ad4 <__aeabi_fcmpeq>:
   81ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ad8:	f7ff fff4 	bl	81ac4 <__aeabi_cfcmpeq>
   81adc:	bf0c      	ite	eq
   81ade:	2001      	moveq	r0, #1
   81ae0:	2000      	movne	r0, #0
   81ae2:	f85d fb08 	ldr.w	pc, [sp], #8
   81ae6:	bf00      	nop

00081ae8 <__aeabi_fcmplt>:
   81ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81aec:	f7ff ffea 	bl	81ac4 <__aeabi_cfcmpeq>
   81af0:	bf34      	ite	cc
   81af2:	2001      	movcc	r0, #1
   81af4:	2000      	movcs	r0, #0
   81af6:	f85d fb08 	ldr.w	pc, [sp], #8
   81afa:	bf00      	nop

00081afc <__aeabi_fcmple>:
   81afc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81b00:	f7ff ffe0 	bl	81ac4 <__aeabi_cfcmpeq>
   81b04:	bf94      	ite	ls
   81b06:	2001      	movls	r0, #1
   81b08:	2000      	movhi	r0, #0
   81b0a:	f85d fb08 	ldr.w	pc, [sp], #8
   81b0e:	bf00      	nop

00081b10 <__aeabi_fcmpge>:
   81b10:	f84d ed08 	str.w	lr, [sp, #-8]!
   81b14:	f7ff ffd2 	bl	81abc <__aeabi_cfrcmple>
   81b18:	bf94      	ite	ls
   81b1a:	2001      	movls	r0, #1
   81b1c:	2000      	movhi	r0, #0
   81b1e:	f85d fb08 	ldr.w	pc, [sp], #8
   81b22:	bf00      	nop

00081b24 <__aeabi_fcmpgt>:
   81b24:	f84d ed08 	str.w	lr, [sp, #-8]!
   81b28:	f7ff ffc8 	bl	81abc <__aeabi_cfrcmple>
   81b2c:	bf34      	ite	cc
   81b2e:	2001      	movcc	r0, #1
   81b30:	2000      	movcs	r0, #0
   81b32:	f85d fb08 	ldr.w	pc, [sp], #8
   81b36:	bf00      	nop

00081b38 <__aeabi_f2uiz>:
   81b38:	0042      	lsls	r2, r0, #1
   81b3a:	d20e      	bcs.n	81b5a <__aeabi_f2uiz+0x22>
   81b3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81b40:	d30b      	bcc.n	81b5a <__aeabi_f2uiz+0x22>
   81b42:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81b46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81b4a:	d409      	bmi.n	81b60 <__aeabi_f2uiz+0x28>
   81b4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81b54:	fa23 f002 	lsr.w	r0, r3, r2
   81b58:	4770      	bx	lr
   81b5a:	f04f 0000 	mov.w	r0, #0
   81b5e:	4770      	bx	lr
   81b60:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81b64:	d101      	bne.n	81b6a <__aeabi_f2uiz+0x32>
   81b66:	0242      	lsls	r2, r0, #9
   81b68:	d102      	bne.n	81b70 <__aeabi_f2uiz+0x38>
   81b6a:	f04f 30ff 	mov.w	r0, #4294967295
   81b6e:	4770      	bx	lr
   81b70:	f04f 0000 	mov.w	r0, #0
   81b74:	4770      	bx	lr
   81b76:	bf00      	nop

00081b78 <__libc_init_array>:
   81b78:	b570      	push	{r4, r5, r6, lr}
   81b7a:	4e0f      	ldr	r6, [pc, #60]	; (81bb8 <__libc_init_array+0x40>)
   81b7c:	4d0f      	ldr	r5, [pc, #60]	; (81bbc <__libc_init_array+0x44>)
   81b7e:	1b76      	subs	r6, r6, r5
   81b80:	10b6      	asrs	r6, r6, #2
   81b82:	bf18      	it	ne
   81b84:	2400      	movne	r4, #0
   81b86:	d005      	beq.n	81b94 <__libc_init_array+0x1c>
   81b88:	3401      	adds	r4, #1
   81b8a:	f855 3b04 	ldr.w	r3, [r5], #4
   81b8e:	4798      	blx	r3
   81b90:	42a6      	cmp	r6, r4
   81b92:	d1f9      	bne.n	81b88 <__libc_init_array+0x10>
   81b94:	4e0a      	ldr	r6, [pc, #40]	; (81bc0 <__libc_init_array+0x48>)
   81b96:	4d0b      	ldr	r5, [pc, #44]	; (81bc4 <__libc_init_array+0x4c>)
   81b98:	f000 f8e0 	bl	81d5c <_init>
   81b9c:	1b76      	subs	r6, r6, r5
   81b9e:	10b6      	asrs	r6, r6, #2
   81ba0:	bf18      	it	ne
   81ba2:	2400      	movne	r4, #0
   81ba4:	d006      	beq.n	81bb4 <__libc_init_array+0x3c>
   81ba6:	3401      	adds	r4, #1
   81ba8:	f855 3b04 	ldr.w	r3, [r5], #4
   81bac:	4798      	blx	r3
   81bae:	42a6      	cmp	r6, r4
   81bb0:	d1f9      	bne.n	81ba6 <__libc_init_array+0x2e>
   81bb2:	bd70      	pop	{r4, r5, r6, pc}
   81bb4:	bd70      	pop	{r4, r5, r6, pc}
   81bb6:	bf00      	nop
   81bb8:	00081d68 	.word	0x00081d68
   81bbc:	00081d68 	.word	0x00081d68
   81bc0:	00081d70 	.word	0x00081d70
   81bc4:	00081d68 	.word	0x00081d68

00081bc8 <register_fini>:
   81bc8:	4b02      	ldr	r3, [pc, #8]	; (81bd4 <register_fini+0xc>)
   81bca:	b113      	cbz	r3, 81bd2 <register_fini+0xa>
   81bcc:	4802      	ldr	r0, [pc, #8]	; (81bd8 <register_fini+0x10>)
   81bce:	f000 b805 	b.w	81bdc <atexit>
   81bd2:	4770      	bx	lr
   81bd4:	00000000 	.word	0x00000000
   81bd8:	00081be9 	.word	0x00081be9

00081bdc <atexit>:
   81bdc:	2300      	movs	r3, #0
   81bde:	4601      	mov	r1, r0
   81be0:	461a      	mov	r2, r3
   81be2:	4618      	mov	r0, r3
   81be4:	f000 b81e 	b.w	81c24 <__register_exitproc>

00081be8 <__libc_fini_array>:
   81be8:	b538      	push	{r3, r4, r5, lr}
   81bea:	4c0a      	ldr	r4, [pc, #40]	; (81c14 <__libc_fini_array+0x2c>)
   81bec:	4d0a      	ldr	r5, [pc, #40]	; (81c18 <__libc_fini_array+0x30>)
   81bee:	1b64      	subs	r4, r4, r5
   81bf0:	10a4      	asrs	r4, r4, #2
   81bf2:	d00a      	beq.n	81c0a <__libc_fini_array+0x22>
   81bf4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81bf8:	3b01      	subs	r3, #1
   81bfa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81bfe:	3c01      	subs	r4, #1
   81c00:	f855 3904 	ldr.w	r3, [r5], #-4
   81c04:	4798      	blx	r3
   81c06:	2c00      	cmp	r4, #0
   81c08:	d1f9      	bne.n	81bfe <__libc_fini_array+0x16>
   81c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81c0e:	f000 b8af 	b.w	81d70 <_fini>
   81c12:	bf00      	nop
   81c14:	00081d80 	.word	0x00081d80
   81c18:	00081d7c 	.word	0x00081d7c

00081c1c <__retarget_lock_acquire_recursive>:
   81c1c:	4770      	bx	lr
   81c1e:	bf00      	nop

00081c20 <__retarget_lock_release_recursive>:
   81c20:	4770      	bx	lr
   81c22:	bf00      	nop

00081c24 <__register_exitproc>:
   81c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81c28:	4d2c      	ldr	r5, [pc, #176]	; (81cdc <__register_exitproc+0xb8>)
   81c2a:	4606      	mov	r6, r0
   81c2c:	6828      	ldr	r0, [r5, #0]
   81c2e:	4698      	mov	r8, r3
   81c30:	460f      	mov	r7, r1
   81c32:	4691      	mov	r9, r2
   81c34:	f7ff fff2 	bl	81c1c <__retarget_lock_acquire_recursive>
   81c38:	4b29      	ldr	r3, [pc, #164]	; (81ce0 <__register_exitproc+0xbc>)
   81c3a:	681c      	ldr	r4, [r3, #0]
   81c3c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81c40:	2b00      	cmp	r3, #0
   81c42:	d03e      	beq.n	81cc2 <__register_exitproc+0x9e>
   81c44:	685a      	ldr	r2, [r3, #4]
   81c46:	2a1f      	cmp	r2, #31
   81c48:	dc1c      	bgt.n	81c84 <__register_exitproc+0x60>
   81c4a:	f102 0e01 	add.w	lr, r2, #1
   81c4e:	b176      	cbz	r6, 81c6e <__register_exitproc+0x4a>
   81c50:	2101      	movs	r1, #1
   81c52:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81c56:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81c5a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81c5e:	4091      	lsls	r1, r2
   81c60:	4308      	orrs	r0, r1
   81c62:	2e02      	cmp	r6, #2
   81c64:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81c68:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81c6c:	d023      	beq.n	81cb6 <__register_exitproc+0x92>
   81c6e:	3202      	adds	r2, #2
   81c70:	f8c3 e004 	str.w	lr, [r3, #4]
   81c74:	6828      	ldr	r0, [r5, #0]
   81c76:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81c7a:	f7ff ffd1 	bl	81c20 <__retarget_lock_release_recursive>
   81c7e:	2000      	movs	r0, #0
   81c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c84:	4b17      	ldr	r3, [pc, #92]	; (81ce4 <__register_exitproc+0xc0>)
   81c86:	b30b      	cbz	r3, 81ccc <__register_exitproc+0xa8>
   81c88:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81c8c:	f3af 8000 	nop.w
   81c90:	4603      	mov	r3, r0
   81c92:	b1d8      	cbz	r0, 81ccc <__register_exitproc+0xa8>
   81c94:	2000      	movs	r0, #0
   81c96:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81c9a:	f04f 0e01 	mov.w	lr, #1
   81c9e:	6058      	str	r0, [r3, #4]
   81ca0:	6019      	str	r1, [r3, #0]
   81ca2:	4602      	mov	r2, r0
   81ca4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81ca8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81cac:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81cb0:	2e00      	cmp	r6, #0
   81cb2:	d0dc      	beq.n	81c6e <__register_exitproc+0x4a>
   81cb4:	e7cc      	b.n	81c50 <__register_exitproc+0x2c>
   81cb6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81cba:	4301      	orrs	r1, r0
   81cbc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81cc0:	e7d5      	b.n	81c6e <__register_exitproc+0x4a>
   81cc2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81cc6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81cca:	e7bb      	b.n	81c44 <__register_exitproc+0x20>
   81ccc:	6828      	ldr	r0, [r5, #0]
   81cce:	f7ff ffa7 	bl	81c20 <__retarget_lock_release_recursive>
   81cd2:	f04f 30ff 	mov.w	r0, #4294967295
   81cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81cda:	bf00      	nop
   81cdc:	20000430 	.word	0x20000430
   81ce0:	00081d58 	.word	0x00081d58
   81ce4:	00000000 	.word	0x00000000
   81ce8:	304e4143 	.word	0x304e4143
   81cec:	73656d20 	.word	0x73656d20
   81cf0:	65676173 	.word	0x65676173
   81cf4:	72726120 	.word	0x72726120
   81cf8:	64657669 	.word	0x64657669
   81cfc:	206e6920 	.word	0x206e6920
   81d00:	2d6e6f6e 	.word	0x2d6e6f6e
   81d04:	64657375 	.word	0x64657375
   81d08:	69616d20 	.word	0x69616d20
   81d0c:	786f626c 	.word	0x786f626c
   81d10:	00000d0a 	.word	0x00000d0a
   81d14:	6c6c6548 	.word	0x6c6c6548
   81d18:	6f77206f 	.word	0x6f77206f
   81d1c:	00646c72 	.word	0x00646c72
   81d20:	004c4f47 	.word	0x004c4f47
   81d24:	00006425 	.word	0x00006425
   81d28:	20642520 	.word	0x20642520
   81d2c:	00000000 	.word	0x00000000
   81d30:	6c756e28 	.word	0x6c756e28
   81d34:	0000296c 	.word	0x0000296c
   81d38:	3a525245 	.word	0x3a525245
   81d3c:	52415520 	.word	0x52415520
   81d40:	58522054 	.word	0x58522054
   81d44:	66756220 	.word	0x66756220
   81d48:	20726566 	.word	0x20726566
   81d4c:	66207369 	.word	0x66207369
   81d50:	0a6c6c75 	.word	0x0a6c6c75
   81d54:	0000000d 	.word	0x0000000d

00081d58 <_global_impure_ptr>:
   81d58:	20000008                                ... 

00081d5c <_init>:
   81d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d5e:	bf00      	nop
   81d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d62:	bc08      	pop	{r3}
   81d64:	469e      	mov	lr, r3
   81d66:	4770      	bx	lr

00081d68 <__init_array_start>:
   81d68:	00081bc9 	.word	0x00081bc9

00081d6c <__frame_dummy_init_array_entry>:
   81d6c:	00080119                                ....

00081d70 <_fini>:
   81d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81d72:	bf00      	nop
   81d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81d76:	bc08      	pop	{r3}
   81d78:	469e      	mov	lr, r3
   81d7a:	4770      	bx	lr

00081d7c <__fini_array_start>:
   81d7c:	000800f5 	.word	0x000800f5
