
microchip_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00002014  000020a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008001b2  008001b2  0000215a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000265e  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131d  00000000  00000000  00004a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012da  00000000  00000000  00005db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00007094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e9  00000000  00000000  000075dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cfd  00000000  00000000  00007ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00008bc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__ctors_end>
       4:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
       8:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
       c:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_3>
      10:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      14:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      18:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      1c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      20:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      24:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      28:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      2c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      30:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      34:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      38:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      3c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      40:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      44:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      48:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      4c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      50:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      54:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      58:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      5c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      60:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      64:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      68:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      6c:	0c 94 12 02 	jmp	0x424	; 0x424 <__bad_interrupt>
      70:	07 63       	ori	r16, 0x37	; 55
      72:	42 36       	cpi	r20, 0x62	; 98
      74:	b7 9b       	sbis	0x16, 7	; 22
      76:	d8 a7       	std	Y+40, r29	; 0x28
      78:	1a 39       	cpi	r17, 0x9A	; 154
      7a:	68 56       	subi	r22, 0x68	; 104
      7c:	18 ae       	std	Y+56, r1	; 0x38
      7e:	ba ab       	std	Y+50, r27	; 0x32
      80:	55 8c       	ldd	r5, Z+29	; 0x1d
      82:	1d 3c       	cpi	r17, 0xCD	; 205
      84:	b7 cc       	rjmp	.-1682   	; 0xfffff9f4 <__eeprom_end+0xff7ef9f4>
      86:	57 63       	ori	r21, 0x37	; 55
      88:	bd 6d       	ori	r27, 0xDD	; 221
      8a:	ed fd       	.word	0xfded	; ????
      8c:	75 3e       	cpi	r23, 0xE5	; 229
      8e:	f6 17       	cp	r31, r22
      90:	72 31       	cpi	r23, 0x12	; 18
      92:	bf 00       	.word	0x00bf	; ????
      94:	00 00       	nop
      96:	80 3f       	cpi	r24, 0xF0	; 240
      98:	08 00       	.word	0x0008	; ????
      9a:	00 00       	nop
      9c:	be 92       	st	-X, r11
      9e:	24 49       	sbci	r18, 0x94	; 148
      a0:	12 3e       	cpi	r17, 0xE2	; 226
      a2:	ab aa       	std	Y+51, r10	; 0x33
      a4:	aa 2a       	or	r10, r26
      a6:	be cd       	rjmp	.-1156   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
      a8:	cc cc       	rjmp	.-1640   	; 0xfffffa42 <__eeprom_end+0xff7efa42>
      aa:	4c 3e       	cpi	r20, 0xEC	; 236
      ac:	00 00       	nop
      ae:	00 80       	ld	r0, Z
      b0:	be ab       	std	Y+54, r27	; 0x36
      b2:	aa aa       	std	Y+50, r10	; 0x32
      b4:	aa 3e       	cpi	r26, 0xEA	; 234
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	bf 00       	.word	0x00bf	; ????
      bc:	00 00       	nop
      be:	80 3f       	cpi	r24, 0xF0	; 240
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	41 78       	andi	r20, 0x81	; 129
      c8:	d3 bb       	out	0x13, r29	; 19
      ca:	43 87       	std	Z+11, r20	; 0x0b
      cc:	d1 13       	cpse	r29, r17
      ce:	3d 19       	sub	r19, r13
      d0:	0e 3c       	cpi	r16, 0xCE	; 206
      d2:	c3 bd       	out	0x23, r28	; 35
      d4:	42 82       	std	Z+2, r4	; 0x02
      d6:	ad 2b       	or	r26, r29
      d8:	3e 68       	ori	r19, 0x8E	; 142
      da:	ec 82       	std	Y+4, r14	; 0x04
      dc:	76 be       	out	0x36, r7	; 54
      de:	d9 8f       	std	Y+25, r29	; 0x19
      e0:	e1 a9       	ldd	r30, Z+49	; 0x31
      e2:	3e 4c       	sbci	r19, 0xCE	; 206
      e4:	80 ef       	ldi	r24, 0xF0	; 240
      e6:	ff be       	out	0x3f, r15	; 63
      e8:	01 c4       	rjmp	.+2050   	; 0x8ec <menu_input_loop+0x72>
      ea:	ff 7f       	andi	r31, 0xFF	; 255
      ec:	3f 00       	.word	0x003f	; ????
      ee:	00 00       	nop
	...

000000f2 <__trampolines_end>:
	...
      fa:	00 06       	cpc	r0, r16
      fc:	5f 5f       	subi	r21, 0xFF	; 255
      fe:	06 00       	.word	0x0006	; ????
     100:	00 00       	nop
     102:	00 07       	cpc	r16, r16
     104:	07 00       	.word	0x0007	; ????
     106:	07 07       	cpc	r16, r23
     108:	00 00       	nop
     10a:	14 7f       	andi	r17, 0xF4	; 244
     10c:	7f 14       	cp	r7, r15
     10e:	7f 7f       	andi	r23, 0xFF	; 255
     110:	14 00       	.word	0x0014	; ????
     112:	24 2e       	mov	r2, r20
     114:	6b 6b       	ori	r22, 0xBB	; 187
     116:	3a 12       	cpse	r3, r26
     118:	00 00       	nop
     11a:	46 66       	ori	r20, 0x66	; 102
     11c:	30 18       	sub	r3, r0
     11e:	0c 66       	ori	r16, 0x6C	; 108
     120:	62 00       	.word	0x0062	; ????
     122:	30 7a       	andi	r19, 0xA0	; 160
     124:	4f 5d       	subi	r20, 0xDF	; 223
     126:	37 7a       	andi	r19, 0xA7	; 167
     128:	48 00       	.word	0x0048	; ????
     12a:	04 07       	cpc	r16, r20
     12c:	03 00       	.word	0x0003	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	00 1c       	adc	r0, r0
     134:	3e 63       	ori	r19, 0x3E	; 62
     136:	41 00       	.word	0x0041	; ????
     138:	00 00       	nop
     13a:	00 41       	sbci	r16, 0x10	; 16
     13c:	63 3e       	cpi	r22, 0xE3	; 227
     13e:	1c 00       	.word	0x001c	; ????
     140:	00 00       	nop
     142:	08 2a       	or	r0, r24
     144:	3e 1c       	adc	r3, r14
     146:	1c 3e       	cpi	r17, 0xEC	; 236
     148:	2a 08       	sbc	r2, r10
     14a:	08 08       	sbc	r0, r8
     14c:	3e 3e       	cpi	r19, 0xEE	; 238
     14e:	08 08       	sbc	r0, r8
     150:	00 00       	nop
     152:	00 a0       	ldd	r0, Z+32	; 0x20
     154:	e0 60       	ori	r30, 0x00	; 0
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	08 08       	sbc	r0, r8
     15c:	08 08       	sbc	r0, r8
     15e:	08 08       	sbc	r0, r8
     160:	00 00       	nop
     162:	00 00       	nop
     164:	60 60       	ori	r22, 0x00	; 0
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	60 30       	cpi	r22, 0x00	; 0
     16c:	18 0c       	add	r1, r8
     16e:	06 03       	mulsu	r16, r22
     170:	01 00       	.word	0x0001	; ????
     172:	3e 7f       	andi	r19, 0xFE	; 254
     174:	59 4d       	sbci	r21, 0xD9	; 217
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	00 00       	nop
     17a:	42 42       	sbci	r20, 0x22	; 34
     17c:	7f 7f       	andi	r23, 0xFF	; 255
     17e:	40 40       	sbci	r20, 0x00	; 0
     180:	00 00       	nop
     182:	62 73       	andi	r22, 0x32	; 50
     184:	59 49       	sbci	r21, 0x99	; 153
     186:	6f 66       	ori	r22, 0x6F	; 111
     188:	00 00       	nop
     18a:	22 63       	ori	r18, 0x32	; 50
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	7f 36       	cpi	r23, 0x6F	; 111
     190:	00 00       	nop
     192:	18 1c       	adc	r1, r8
     194:	16 13       	cpse	r17, r22
     196:	7f 7f       	andi	r23, 0xFF	; 255
     198:	10 00       	.word	0x0010	; ????
     19a:	27 67       	ori	r18, 0x77	; 119
     19c:	45 45       	sbci	r20, 0x55	; 85
     19e:	7d 39       	cpi	r23, 0x9D	; 157
     1a0:	00 00       	nop
     1a2:	3c 7e       	andi	r19, 0xEC	; 236
     1a4:	4b 49       	sbci	r20, 0x9B	; 155
     1a6:	79 30       	cpi	r23, 0x09	; 9
     1a8:	00 00       	nop
     1aa:	03 63       	ori	r16, 0x33	; 51
     1ac:	71 19       	sub	r23, r1
     1ae:	0f 07       	cpc	r16, r31
     1b0:	00 00       	nop
     1b2:	36 7f       	andi	r19, 0xF6	; 246
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	7f 36       	cpi	r23, 0x6F	; 111
     1b8:	00 00       	nop
     1ba:	06 4f       	sbci	r16, 0xF6	; 246
     1bc:	49 69       	ori	r20, 0x99	; 153
     1be:	3f 1e       	adc	r3, r31
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	6c 6c       	ori	r22, 0xCC	; 204
     1c6:	00 00       	nop
     1c8:	00 00       	nop
     1ca:	00 a0       	ldd	r0, Z+32	; 0x20
     1cc:	ec 6c       	ori	r30, 0xCC	; 204
     1ce:	00 00       	nop
     1d0:	00 00       	nop
     1d2:	08 1c       	adc	r0, r8
     1d4:	36 63       	ori	r19, 0x36	; 54
     1d6:	41 00       	.word	0x0041	; ????
     1d8:	00 00       	nop
     1da:	14 14       	cp	r1, r4
     1dc:	14 14       	cp	r1, r4
     1de:	14 14       	cp	r1, r4
     1e0:	00 00       	nop
     1e2:	00 41       	sbci	r16, 0x10	; 16
     1e4:	63 36       	cpi	r22, 0x63	; 99
     1e6:	1c 08       	sbc	r1, r12
     1e8:	00 00       	nop
     1ea:	02 03       	mulsu	r16, r18
     1ec:	51 59       	subi	r21, 0x91	; 145
     1ee:	0f 06       	cpc	r0, r31
     1f0:	00 00       	nop
     1f2:	3e 7f       	andi	r19, 0xFE	; 254
     1f4:	41 5d       	subi	r20, 0xD1	; 209
     1f6:	5d 1f       	adc	r21, r29
     1f8:	1e 00       	.word	0x001e	; ????
     1fa:	7c 7e       	andi	r23, 0xEC	; 236
     1fc:	13 13       	cpse	r17, r19
     1fe:	7e 7c       	andi	r23, 0xCE	; 206
     200:	00 00       	nop
     202:	41 7f       	andi	r20, 0xF1	; 241
     204:	7f 49       	sbci	r23, 0x9F	; 159
     206:	49 7f       	andi	r20, 0xF9	; 249
     208:	36 00       	.word	0x0036	; ????
     20a:	1c 3e       	cpi	r17, 0xEC	; 236
     20c:	63 41       	sbci	r22, 0x13	; 19
     20e:	41 63       	ori	r20, 0x31	; 49
     210:	22 00       	.word	0x0022	; ????
     212:	41 7f       	andi	r20, 0xF1	; 241
     214:	7f 41       	sbci	r23, 0x1F	; 31
     216:	63 7f       	andi	r22, 0xF3	; 243
     218:	1c 00       	.word	0x001c	; ????
     21a:	41 7f       	andi	r20, 0xF1	; 241
     21c:	7f 49       	sbci	r23, 0x9F	; 159
     21e:	5d 41       	sbci	r21, 0x1D	; 29
     220:	63 00       	.word	0x0063	; ????
     222:	41 7f       	andi	r20, 0xF1	; 241
     224:	7f 49       	sbci	r23, 0x9F	; 159
     226:	1d 01       	movw	r2, r26
     228:	03 00       	.word	0x0003	; ????
     22a:	1c 3e       	cpi	r17, 0xEC	; 236
     22c:	63 41       	sbci	r22, 0x13	; 19
     22e:	51 73       	andi	r21, 0x31	; 49
     230:	72 00       	.word	0x0072	; ????
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	08 08       	sbc	r0, r8
     236:	7f 7f       	andi	r23, 0xFF	; 255
     238:	00 00       	nop
     23a:	00 41       	sbci	r16, 0x10	; 16
     23c:	7f 7f       	andi	r23, 0xFF	; 255
     23e:	41 00       	.word	0x0041	; ????
     240:	00 00       	nop
     242:	30 70       	andi	r19, 0x00	; 0
     244:	40 41       	sbci	r20, 0x10	; 16
     246:	7f 3f       	cpi	r23, 0xFF	; 255
     248:	01 00       	.word	0x0001	; ????
     24a:	41 7f       	andi	r20, 0xF1	; 241
     24c:	7f 08       	sbc	r7, r15
     24e:	1c 77       	andi	r17, 0x7C	; 124
     250:	63 00       	.word	0x0063	; ????
     252:	41 7f       	andi	r20, 0xF1	; 241
     254:	7f 41       	sbci	r23, 0x1F	; 31
     256:	40 60       	ori	r20, 0x00	; 0
     258:	70 00       	.word	0x0070	; ????
     25a:	7f 7f       	andi	r23, 0xFF	; 255
     25c:	06 0c       	add	r0, r6
     25e:	06 7f       	andi	r16, 0xF6	; 246
     260:	7f 00       	.word	0x007f	; ????
     262:	7f 7f       	andi	r23, 0xFF	; 255
     264:	06 0c       	add	r0, r6
     266:	18 7f       	andi	r17, 0xF8	; 248
     268:	7f 00       	.word	0x007f	; ????
     26a:	1c 3e       	cpi	r17, 0xEC	; 236
     26c:	63 41       	sbci	r22, 0x13	; 19
     26e:	63 3e       	cpi	r22, 0xE3	; 227
     270:	1c 00       	.word	0x001c	; ????
     272:	41 7f       	andi	r20, 0xF1	; 241
     274:	7f 49       	sbci	r23, 0x9F	; 159
     276:	09 0f       	add	r16, r25
     278:	06 00       	.word	0x0006	; ????
     27a:	1e 3f       	cpi	r17, 0xFE	; 254
     27c:	21 71       	andi	r18, 0x11	; 17
     27e:	7f 5e       	subi	r23, 0xEF	; 239
     280:	00 00       	nop
     282:	41 7f       	andi	r20, 0xF1	; 241
     284:	7f 19       	sub	r23, r15
     286:	39 6f       	ori	r19, 0xF9	; 249
     288:	46 00       	.word	0x0046	; ????
     28a:	26 67       	ori	r18, 0x76	; 118
     28c:	4d 59       	subi	r20, 0x9D	; 157
     28e:	7b 32       	cpi	r23, 0x2B	; 43
     290:	00 00       	nop
     292:	03 41       	sbci	r16, 0x13	; 19
     294:	7f 7f       	andi	r23, 0xFF	; 255
     296:	41 03       	mulsu	r20, r17
     298:	00 00       	nop
     29a:	7f 7f       	andi	r23, 0xFF	; 255
     29c:	40 40       	sbci	r20, 0x00	; 0
     29e:	7f 7f       	andi	r23, 0xFF	; 255
     2a0:	00 00       	nop
     2a2:	1f 3f       	cpi	r17, 0xFF	; 255
     2a4:	60 60       	ori	r22, 0x00	; 0
     2a6:	3f 1f       	adc	r19, r31
     2a8:	00 00       	nop
     2aa:	7f 7f       	andi	r23, 0xFF	; 255
     2ac:	30 18       	sub	r3, r0
     2ae:	30 7f       	andi	r19, 0xF0	; 240
     2b0:	7f 00       	.word	0x007f	; ????
     2b2:	63 77       	andi	r22, 0x73	; 115
     2b4:	1c 08       	sbc	r1, r12
     2b6:	1c 77       	andi	r17, 0x7C	; 124
     2b8:	63 00       	.word	0x0063	; ????
     2ba:	07 4f       	sbci	r16, 0xF7	; 247
     2bc:	78 78       	andi	r23, 0x88	; 136
     2be:	4f 07       	cpc	r20, r31
     2c0:	00 00       	nop
     2c2:	67 73       	andi	r22, 0x37	; 55
     2c4:	59 4d       	sbci	r21, 0xD9	; 217
     2c6:	47 63       	ori	r20, 0x37	; 55
     2c8:	71 00       	.word	0x0071	; ????
     2ca:	00 7f       	andi	r16, 0xF0	; 240
     2cc:	7f 41       	sbci	r23, 0x1F	; 31
     2ce:	41 00       	.word	0x0041	; ????
     2d0:	00 00       	nop
     2d2:	01 03       	mulsu	r16, r17
     2d4:	06 0c       	add	r0, r6
     2d6:	18 30       	cpi	r17, 0x08	; 8
     2d8:	60 00       	.word	0x0060	; ????
     2da:	00 41       	sbci	r16, 0x10	; 16
     2dc:	41 7f       	andi	r20, 0xF1	; 241
     2de:	7f 00       	.word	0x007f	; ????
     2e0:	00 00       	nop
     2e2:	08 0c       	add	r0, r8
     2e4:	06 03       	mulsu	r16, r22
     2e6:	06 0c       	add	r0, r6
     2e8:	08 00       	.word	0x0008	; ????
     2ea:	80 80       	ld	r8, Z
     2ec:	80 80       	ld	r8, Z
     2ee:	80 80       	ld	r8, Z
     2f0:	80 80       	ld	r8, Z
     2f2:	00 00       	nop
     2f4:	03 07       	cpc	r16, r19
     2f6:	04 00       	.word	0x0004	; ????
     2f8:	00 00       	nop
     2fa:	20 74       	andi	r18, 0x40	; 64
     2fc:	54 54       	subi	r21, 0x44	; 68
     2fe:	3c 78       	andi	r19, 0x8C	; 140
     300:	40 00       	.word	0x0040	; ????
     302:	41 3f       	cpi	r20, 0xF1	; 241
     304:	7f 44       	sbci	r23, 0x4F	; 79
     306:	44 7c       	andi	r20, 0xC4	; 196
     308:	38 00       	.word	0x0038	; ????
     30a:	38 7c       	andi	r19, 0xC8	; 200
     30c:	44 44       	sbci	r20, 0x44	; 68
     30e:	6c 28       	or	r6, r12
     310:	00 00       	nop
     312:	30 78       	andi	r19, 0x80	; 128
     314:	48 49       	sbci	r20, 0x98	; 152
     316:	3f 7f       	andi	r19, 0xFF	; 255
     318:	40 00       	.word	0x0040	; ????
     31a:	38 7c       	andi	r19, 0xC8	; 200
     31c:	54 54       	subi	r21, 0x44	; 68
     31e:	5c 18       	sub	r5, r12
     320:	00 00       	nop
     322:	48 7e       	andi	r20, 0xE8	; 232
     324:	7f 49       	sbci	r23, 0x9F	; 159
     326:	03 02       	muls	r16, r19
     328:	00 00       	nop
     32a:	98 bc       	out	0x28, r9	; 40
     32c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     32e:	f8 7c       	andi	r31, 0xC8	; 200
     330:	04 00       	.word	0x0004	; ????
     332:	41 7f       	andi	r20, 0xF1	; 241
     334:	7f 08       	sbc	r7, r15
     336:	04 7c       	andi	r16, 0xC4	; 196
     338:	78 00       	.word	0x0078	; ????
     33a:	00 44       	sbci	r16, 0x40	; 64
     33c:	7d 7d       	andi	r23, 0xDD	; 221
     33e:	40 00       	.word	0x0040	; ????
     340:	00 00       	nop
     342:	40 c4       	rjmp	.+2176   	; 0xbc4 <SPI_read>
     344:	84 fd       	sbrc	r24, 4
     346:	7d 00       	.word	0x007d	; ????
     348:	00 00       	nop
     34a:	41 7f       	andi	r20, 0xF1	; 241
     34c:	7f 10       	cpse	r7, r15
     34e:	38 6c       	ori	r19, 0xC8	; 200
     350:	44 00       	.word	0x0044	; ????
     352:	00 41       	sbci	r16, 0x10	; 16
     354:	7f 7f       	andi	r23, 0xFF	; 255
     356:	40 00       	.word	0x0040	; ????
     358:	00 00       	nop
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	0c 18       	sub	r0, r12
     35e:	0c 7c       	andi	r16, 0xCC	; 204
     360:	78 00       	.word	0x0078	; ????
     362:	7c 7c       	andi	r23, 0xCC	; 204
     364:	04 04       	cpc	r0, r4
     366:	7c 78       	andi	r23, 0x8C	; 140
     368:	00 00       	nop
     36a:	38 7c       	andi	r19, 0xC8	; 200
     36c:	44 44       	sbci	r20, 0x44	; 68
     36e:	7c 38       	cpi	r23, 0x8C	; 140
     370:	00 00       	nop
     372:	84 fc       	sbrc	r8, 4
     374:	f8 a4       	ldd	r15, Y+40	; 0x28
     376:	24 3c       	cpi	r18, 0xC4	; 196
     378:	18 00       	.word	0x0018	; ????
     37a:	18 3c       	cpi	r17, 0xC8	; 200
     37c:	24 a4       	ldd	r2, Z+44	; 0x2c
     37e:	f8 fc       	.word	0xfcf8	; ????
     380:	84 00       	.word	0x0084	; ????
     382:	44 7c       	andi	r20, 0xC4	; 196
     384:	78 44       	sbci	r23, 0x48	; 72
     386:	1c 18       	sub	r1, r12
     388:	00 00       	nop
     38a:	48 5c       	subi	r20, 0xC8	; 200
     38c:	54 54       	subi	r21, 0x44	; 68
     38e:	74 24       	eor	r7, r4
     390:	00 00       	nop
     392:	00 04       	cpc	r0, r0
     394:	3e 7f       	andi	r19, 0xFE	; 254
     396:	44 24       	eor	r4, r4
     398:	00 00       	nop
     39a:	3c 7c       	andi	r19, 0xCC	; 204
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3c 7c       	andi	r19, 0xCC	; 204
     3a0:	40 00       	.word	0x0040	; ????
     3a2:	1c 3c       	cpi	r17, 0xCC	; 204
     3a4:	60 60       	ori	r22, 0x00	; 0
     3a6:	3c 1c       	adc	r3, r12
     3a8:	00 00       	nop
     3aa:	3c 7c       	andi	r19, 0xCC	; 204
     3ac:	60 30       	cpi	r22, 0x00	; 0
     3ae:	60 7c       	andi	r22, 0xC0	; 192
     3b0:	3c 00       	.word	0x003c	; ????
     3b2:	44 6c       	ori	r20, 0xC4	; 196
     3b4:	38 10       	cpse	r3, r8
     3b6:	38 6c       	ori	r19, 0xC8	; 200
     3b8:	44 00       	.word	0x0044	; ????
     3ba:	9c bc       	out	0x2c, r9	; 44
     3bc:	a0 a0       	ldd	r10, Z+32	; 0x20
     3be:	fc 7c       	andi	r31, 0xCC	; 204
     3c0:	00 00       	nop
     3c2:	4c 64       	ori	r20, 0x4C	; 76
     3c4:	74 5c       	subi	r23, 0xC4	; 196
     3c6:	4c 64       	ori	r20, 0x4C	; 76
     3c8:	00 00       	nop
     3ca:	08 08       	sbc	r0, r8
     3cc:	3e 77       	andi	r19, 0x7E	; 126
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	00 00       	nop
     3d2:	00 00       	nop
     3d4:	00 77       	andi	r16, 0x70	; 112
     3d6:	77 00       	.word	0x0077	; ????
     3d8:	00 00       	nop
     3da:	41 41       	sbci	r20, 0x11	; 17
     3dc:	77 3e       	cpi	r23, 0xE7	; 231
     3de:	08 08       	sbc	r0, r8
     3e0:	00 00       	nop
     3e2:	02 03       	mulsu	r16, r18
     3e4:	01 03       	mulsu	r16, r17
     3e6:	02 03       	mulsu	r16, r18
     3e8:	01 00       	.word	0x0001	; ????

000003ea <__ctors_end>:
     3ea:	11 24       	eor	r1, r1
     3ec:	1f be       	out	0x3f, r1	; 63
     3ee:	cf ef       	ldi	r28, 0xFF	; 255
     3f0:	d4 e0       	ldi	r29, 0x04	; 4
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	cd bf       	out	0x3d, r28	; 61

000003f6 <__do_copy_data>:
     3f6:	11 e0       	ldi	r17, 0x01	; 1
     3f8:	a0 e0       	ldi	r26, 0x00	; 0
     3fa:	b1 e0       	ldi	r27, 0x01	; 1
     3fc:	e4 e1       	ldi	r30, 0x14	; 20
     3fe:	f0 e2       	ldi	r31, 0x20	; 32
     400:	02 c0       	rjmp	.+4      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
     402:	05 90       	lpm	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	a2 3b       	cpi	r26, 0xB2	; 178
     408:	b1 07       	cpc	r27, r17
     40a:	d9 f7       	brne	.-10     	; 0x402 <__DATA_REGION_LENGTH__+0x2>

0000040c <__do_clear_bss>:
     40c:	22 e0       	ldi	r18, 0x02	; 2
     40e:	a2 eb       	ldi	r26, 0xB2	; 178
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	01 c0       	rjmp	.+2      	; 0x416 <.do_clear_bss_start>

00000414 <.do_clear_bss_loop>:
     414:	1d 92       	st	X+, r1

00000416 <.do_clear_bss_start>:
     416:	ad 30       	cpi	r26, 0x0D	; 13
     418:	b2 07       	cpc	r27, r18
     41a:	e1 f7       	brne	.-8      	; 0x414 <.do_clear_bss_loop>
     41c:	0e 94 29 03 	call	0x652	; 0x652 <main>
     420:	0c 94 08 10 	jmp	0x2010	; 0x2010 <_exit>

00000424 <__bad_interrupt>:
     424:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000428 <can_init>:
#include "can.h"

void can_init()
{
    // Set to loopback mode
    mcp2515_init();
     428:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	60 ee       	ldi	r22, 0xE0	; 224
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
     436:	08 95       	ret

00000438 <can_message_send>:
	//TODO: Make some acknowledge action happen, or something like this. Node 2 cant send to node 1
	
	
}
void can_message_send(can_message message)
{
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	2b 97       	sbiw	r28, 0x0b	; 11
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	e9 82       	std	Y+1, r14	; 0x01
     456:	fa 82       	std	Y+2, r15	; 0x02
     458:	0b 83       	std	Y+3, r16	; 0x03
     45a:	1c 83       	std	Y+4, r17	; 0x04
     45c:	2d 83       	std	Y+5, r18	; 0x05
     45e:	3e 83       	std	Y+6, r19	; 0x06
     460:	4f 83       	std	Y+7, r20	; 0x07
     462:	58 87       	std	Y+8, r21	; 0x08
     464:	69 87       	std	Y+9, r22	; 0x09
     466:	7a 87       	std	Y+10, r23	; 0x0a
     468:	8b 87       	std	Y+11, r24	; 0x0b
    // In order to initiate message transmission, the
    // TXBnCTRL.TXREQ bit must be set for each buffer to
    // be transmitted. This can be accomplished by:
    // • Writing to the register via the SPI write command
    
    mcp2515_write(MCP_TXB0SIDH, message.id >> 8);
     46a:	6f 2d       	mov	r22, r15
     46c:	81 e3       	ldi	r24, 0x31	; 49
     46e:	0e 94 90 03 	call	0x720	; 0x720 <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL, message.id);
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	82 e3       	ldi	r24, 0x32	; 50
     476:	0e 94 90 03 	call	0x720	; 0x720 <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC, message.data_length);
     47a:	6b 81       	ldd	r22, Y+3	; 0x03
     47c:	85 e3       	ldi	r24, 0x35	; 53
     47e:	0e 94 90 03 	call	0x720	; 0x720 <mcp2515_write>

    mcp2515_write_bytes(MCP_TXB0D0, message.data, message.data_length);
     482:	4b 81       	ldd	r20, Y+3	; 0x03
     484:	be 01       	movw	r22, r28
     486:	6c 5f       	subi	r22, 0xFC	; 252
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	86 e3       	ldi	r24, 0x36	; 54
     48c:	0e 94 a6 03 	call	0x74c	; 0x74c <mcp2515_write_bytes>
	
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);
     490:	48 e0       	ldi	r20, 0x08	; 8
     492:	68 e0       	ldi	r22, 0x08	; 8
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
    
    // • Sending the SPI RTS command
    mcp2515_request_to_send();
     49a:	0e 94 cf 03 	call	0x79e	; 0x79e <mcp2515_request_to_send>
    // • Setting the TXnRTS pin low for the particular transmit buffer(s) that are to be transmitted
    // If configured to operate as a request-to-send pin, the pin is mapped into the respective TXBnCTRL.TXREQ bit for the transmit buffer
}
     49e:	2b 96       	adiw	r28, 0x0b	; 11
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	08 95       	ret

000004b8 <can_data_receive>:
can_message can_data_receive()
{
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	8c 01       	movw	r16, r24
    can_message message;

    message.id = mcp2515_read(MCP_RXB0SIDH) << 8 | mcp2515_read(MCP_RXB0SIDL);
     4c2:	81 e6       	ldi	r24, 0x61	; 97
     4c4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mcp2515_read>
     4c8:	c8 2f       	mov	r28, r24
     4ca:	d0 e0       	ldi	r29, 0x00	; 0
     4cc:	dc 2f       	mov	r29, r28
     4ce:	cc 27       	eor	r28, r28
     4d0:	82 e6       	ldi	r24, 0x62	; 98
     4d2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mcp2515_read>
     4d6:	c8 2b       	or	r28, r24
     4d8:	f8 01       	movw	r30, r16
     4da:	d1 83       	std	Z+1, r29	; 0x01
     4dc:	c0 83       	st	Z, r28
    message.data[0] = mcp2515_read(MCP_RXB0D0);
     4de:	86 e6       	ldi	r24, 0x66	; 102
     4e0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mcp2515_read>
     4e4:	f8 01       	movw	r30, r16
     4e6:	83 83       	std	Z+3, r24	; 0x03
    message.data_length = mcp2515_read(MCP_RXB0DLC);
     4e8:	85 e6       	ldi	r24, 0x65	; 101
     4ea:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mcp2515_read>
     4ee:	f8 01       	movw	r30, r16
     4f0:	82 83       	std	Z+2, r24	; 0x02

    return message;
}
     4f2:	c8 01       	movw	r24, r16
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	08 95       	ret

000004fe <interrupt_init>:

#include "interrupts.h"

interrupt_init(){
	
	GICR &= ~(1 << INT2); // Disable External Interrupt 2
     4fe:	8b b7       	in	r24, 0x3b	; 59
     500:	8f 7d       	andi	r24, 0xDF	; 223
     502:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7); // Enable global interrupts
     504:	8f b7       	in	r24, 0x3f	; 63
     506:	80 68       	ori	r24, 0x80	; 128
     508:	8f bf       	out	0x3f, r24	; 63
	EMCUCR &= ~(1 << ISC2); // Interrupt on Falling edge
     50a:	86 b7       	in	r24, 0x36	; 54
     50c:	8e 7f       	andi	r24, 0xFE	; 254
     50e:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT2); // Enable External Interrupt 2
     510:	8b b7       	in	r24, 0x3b	; 59
     512:	80 62       	ori	r24, 0x20	; 32
     514:	8b bf       	out	0x3b, r24	; 59
     516:	08 95       	ret

00000518 <__vector_3>:

}

ISR(INT2_vect){
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	ac 97       	sbiw	r28, 0x2c	; 44
     548:	de bf       	out	0x3e, r29	; 62
     54a:	cd bf       	out	0x3d, r28	; 61
	printf("received message");
     54c:	82 e1       	ldi	r24, 0x12	; 18
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
	printf("%d ", can_data_receive().data[0]);
     558:	ce 01       	movw	r24, r28
     55a:	82 96       	adiw	r24, 0x22	; 34
     55c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <can_data_receive>
     560:	8d a1       	ldd	r24, Y+37	; 0x25
     562:	1f 92       	push	r1
     564:	8f 93       	push	r24
     566:	03 e2       	ldi	r16, 0x23	; 35
     568:	11 e0       	ldi	r17, 0x01	; 1
     56a:	1f 93       	push	r17
     56c:	0f 93       	push	r16
     56e:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
	printf("%d ", can_data_receive().data[1]);
     572:	ce 01       	movw	r24, r28
     574:	47 96       	adiw	r24, 0x17	; 23
     576:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <can_data_receive>
     57a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     57c:	1f 92       	push	r1
     57e:	8f 93       	push	r24
     580:	1f 93       	push	r17
     582:	0f 93       	push	r16
     584:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
	printf("%d ", can_data_receive().data[2]);
     588:	ce 01       	movw	r24, r28
     58a:	0c 96       	adiw	r24, 0x0c	; 12
     58c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <can_data_receive>
     590:	89 89       	ldd	r24, Y+17	; 0x11
     592:	1f 92       	push	r1
     594:	8f 93       	push	r24
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
	printf("%d ", can_data_receive().data[3]);
     59e:	ce 01       	movw	r24, r28
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <can_data_receive>
     5a6:	8f 81       	ldd	r24, Y+7	; 0x07
     5a8:	1f 92       	push	r1
     5aa:	8f 93       	push	r24
     5ac:	1f 93       	push	r17
     5ae:	0f 93       	push	r16
     5b0:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
    mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000);
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	8c e2       	ldi	r24, 0x2C	; 44
     5ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	ac 96       	adiw	r28, 0x2c	; 44
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <joystick_loop>:

#include "joystick_transceiver.h"

void joystick_loop(input_t input)
{
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	62 97       	sbiw	r28, 0x12	; 18
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id = 0;
     61a:	1a 82       	std	Y+2, r1	; 0x02
     61c:	19 82       	std	Y+1, r1	; 0x01
	msg.data_length = 2;
	
	msg.data[0] = input.joystick_x;
     61e:	12 2f       	mov	r17, r18
	msg.data[1] = input.joystick_y;
     620:	23 2f       	mov	r18, r19
	
	//printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	//printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	//printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);
	
	can_message_send(msg);
     622:	e1 2c       	mov	r14, r1
     624:	fa 80       	ldd	r15, Y+2	; 0x02
     626:	02 e0       	ldi	r16, 0x02	; 2
     628:	3e 81       	ldd	r19, Y+6	; 0x06
     62a:	4f 81       	ldd	r20, Y+7	; 0x07
     62c:	58 85       	ldd	r21, Y+8	; 0x08
     62e:	69 85       	ldd	r22, Y+9	; 0x09
     630:	7a 85       	ldd	r23, Y+10	; 0x0a
     632:	8b 85       	ldd	r24, Y+11	; 0x0b
     634:	0e 94 1c 02 	call	0x438	; 0x438 <can_message_send>
}
     638:	62 96       	adiw	r28, 0x12	; 18
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	08 95       	ret

00000652 <main>:
#include "adc.h"
#include "can.h"
#include "interrupts.h"

int main(void)
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	27 97       	sbiw	r28, 0x07	; 7
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
	usart_init(USART_BAUD_RATE_REGISTER);
     666:	8f e1       	ldi	r24, 0x1F	; 31
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <usart_init>
	printf("hello world ");
     66e:	87 e2       	ldi	r24, 0x27	; 39
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>

	xmem_init();
     67a:	0e 94 a4 07 	call	0xf48	; 0xf48 <xmem_init>
	adc_init();
     67e:	0e 94 04 06 	call	0xc08	; 0xc08 <adc_init>
	OLED_init();
     682:	0e 94 41 05 	call	0xa82	; 0xa82 <OLED_init>
	menu_init();
     686:	0e 94 30 04 	call	0x860	; 0x860 <menu_init>
	interrupt_init();
     68a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <interrupt_init>
	can_init();
     68e:	0e 94 14 02 	call	0x428	; 0x428 <can_init>
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
	
	int j = 0;
	while(1)
	{
		input_t input;
		for(int i = 0; i < 10; i++)
     696:	00 e0       	ldi	r16, 0x00	; 0
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	23 c0       	rjmp	.+70     	; 0x6e2 <main+0x90>
		{
			input = input_read();
     69c:	0e 94 26 06 	call	0xc4c	; 0xc4c <input_read>
     6a0:	29 83       	std	Y+1, r18	; 0x01
     6a2:	3a 83       	std	Y+2, r19	; 0x02
     6a4:	4b 83       	std	Y+3, r20	; 0x03
     6a6:	5c 83       	std	Y+4, r21	; 0x04
     6a8:	6d 83       	std	Y+5, r22	; 0x05
     6aa:	7e 83       	std	Y+6, r23	; 0x06
     6ac:	8f 83       	std	Y+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ae:	89 e6       	ldi	r24, 0x69	; 105
     6b0:	98 e1       	ldi	r25, 0x18	; 24
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0x60>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x66>
     6b8:	00 00       	nop
			_delay_ms(25);
			joystick_loop(input);
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	3a 81       	ldd	r19, Y+2	; 0x02
     6be:	4b 81       	ldd	r20, Y+3	; 0x03
     6c0:	5c 81       	ldd	r21, Y+4	; 0x04
     6c2:	6d 81       	ldd	r22, Y+5	; 0x05
     6c4:	7e 81       	ldd	r23, Y+6	; 0x06
     6c6:	8f 81       	ldd	r24, Y+7	; 0x07
     6c8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <joystick_loop>
			menu_input_loop(input);
     6cc:	29 81       	ldd	r18, Y+1	; 0x01
     6ce:	3a 81       	ldd	r19, Y+2	; 0x02
     6d0:	4b 81       	ldd	r20, Y+3	; 0x03
     6d2:	5c 81       	ldd	r21, Y+4	; 0x04
     6d4:	6d 81       	ldd	r22, Y+5	; 0x05
     6d6:	7e 81       	ldd	r23, Y+6	; 0x06
     6d8:	8f 81       	ldd	r24, Y+7	; 0x07
     6da:	0e 94 3d 04 	call	0x87a	; 0x87a <menu_input_loop>
	
	int j = 0;
	while(1)
	{
		input_t input;
		for(int i = 0; i < 10; i++)
     6de:	0f 5f       	subi	r16, 0xFF	; 255
     6e0:	1f 4f       	sbci	r17, 0xFF	; 255
     6e2:	0a 30       	cpi	r16, 0x0A	; 10
     6e4:	11 05       	cpc	r17, r1
     6e6:	d4 f2       	brlt	.-76     	; 0x69c <main+0x4a>
			input = input_read();
			_delay_ms(25);
			joystick_loop(input);
			menu_input_loop(input);
		}
		menu_draw_loop(input);
     6e8:	29 81       	ldd	r18, Y+1	; 0x01
     6ea:	3a 81       	ldd	r19, Y+2	; 0x02
     6ec:	4b 81       	ldd	r20, Y+3	; 0x03
     6ee:	5c 81       	ldd	r21, Y+4	; 0x04
     6f0:	6d 81       	ldd	r22, Y+5	; 0x05
     6f2:	7e 81       	ldd	r23, Y+6	; 0x06
     6f4:	8f 81       	ldd	r24, Y+7	; 0x07
     6f6:	0e 94 b5 04 	call	0x96a	; 0x96a <menu_draw_loop>
	}
     6fa:	cd cf       	rjmp	.-102    	; 0x696 <main+0x44>

000006fc <mcp2515_read>:
    
    // More initialization
    return 0;
}
uint8_t mcp2515_read ( uint8_t address )
{
     6fc:	cf 93       	push	r28
     6fe:	c8 2f       	mov	r28, r24
    uint8_t result ;
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     700:	88 b3       	in	r24, 0x18	; 24
     702:	8f 7e       	andi	r24, 0xEF	; 239
     704:	88 bb       	out	0x18, r24	; 24
    SPI_write ( MCP_READ ); // Send read instruction
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write ( address ); // Send address
     70c:	8c 2f       	mov	r24, r28
     70e:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    result = SPI_read () ; // Read result
     712:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <SPI_read>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     716:	98 b3       	in	r25, 0x18	; 24
     718:	90 61       	ori	r25, 0x10	; 16
     71a:	98 bb       	out	0x18, r25	; 24
    return result ;
}
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data)
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	d8 2f       	mov	r29, r24
     726:	c6 2f       	mov	r28, r22
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     728:	88 b3       	in	r24, 0x18	; 24
     72a:	8f 7e       	andi	r24, 0xEF	; 239
     72c:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write (address);
     734:	8d 2f       	mov	r24, r29
     736:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write (data);
     73a:	8c 2f       	mov	r24, r28
     73c:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     740:	88 b3       	in	r24, 0x18	; 24
     742:	80 61       	ori	r24, 0x10	; 16
     744:	88 bb       	out	0x18, r24	; 24
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <mcp2515_write_bytes>:

void mcp2515_write_bytes(uint8_t address, uint8_t* data, uint8_t data_length)
{
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	c8 2f       	mov	r28, r24
     758:	7b 01       	movw	r14, r22
     75a:	14 2f       	mov	r17, r20
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     75c:	88 b3       	in	r24, 0x18	; 24
     75e:	8f 7e       	andi	r24, 0xEF	; 239
     760:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write (address);
     768:	8c 2f       	mov	r24, r28
     76a:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    for(int i = 0; i < data_length; i++)
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	07 c0       	rjmp	.+14     	; 0x782 <mcp2515_write_bytes+0x36>
    {
        SPI_write (data[i]);
     774:	f7 01       	movw	r30, r14
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	80 81       	ld	r24, Z
     77c:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
    
    SPI_write (MCP_WRITE);
    SPI_write (address);
    for(int i = 0; i < data_length; i++)
     780:	21 96       	adiw	r28, 0x01	; 1
     782:	81 2f       	mov	r24, r17
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	c8 17       	cp	r28, r24
     788:	d9 07       	cpc	r29, r25
     78a:	a4 f3       	brlt	.-24     	; 0x774 <mcp2515_write_bytes+0x28>
    {
        SPI_write (data[i]);
    }
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     78c:	88 b3       	in	r24, 0x18	; 24
     78e:	80 61       	ori	r24, 0x10	; 16
     790:	88 bb       	out	0x18, r24	; 24
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	08 95       	ret

0000079e <mcp2515_request_to_send>:

void mcp2515_request_to_send()
{
    SPI_write(MCP_RTS_TX0);
     79e:	81 e8       	ldi	r24, 0x81	; 129
     7a0:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
     7a4:	08 95       	ret

000007a6 <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	18 2f       	mov	r17, r24
     7ae:	d6 2f       	mov	r29, r22
     7b0:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
     7b2:	88 b3       	in	r24, 0x18	; 24
     7b4:	8f 7e       	andi	r24, 0xEF	; 239
     7b6:	88 bb       	out	0x18, r24	; 24
    SPI_write(MCP_BITMOD);
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write(address);
     7be:	81 2f       	mov	r24, r17
     7c0:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write(mask);
     7c4:	8d 2f       	mov	r24, r29
     7c6:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    SPI_write(data);
     7ca:	8c 2f       	mov	r24, r28
     7cc:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     7d0:	88 b3       	in	r24, 0x18	; 24
     7d2:	80 61       	ori	r24, 0x10	; 16
     7d4:	88 bb       	out	0x18, r24	; 24
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	08 95       	ret

000007de <mcp2515_reset>:
void mcp2515_reset()
{
    SPI_write(MCP_RESET);
     7de:	80 ec       	ldi	r24, 0xC0	; 192
     7e0:	0e 94 de 05 	call	0xbbc	; 0xbbc <SPI_write>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
     7e4:	40 e8       	ldi	r20, 0x80	; 128
     7e6:	60 ee       	ldi	r22, 0xE0	; 224
     7e8:	8f e0       	ldi	r24, 0x0F	; 15
     7ea:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
     7ee:	08 95       	ret

000007f0 <mcp2515_init>:
#include "mcp.h"

uint8_t mcp2515_init ()
{
    DDRB |= (1 << PB4 ); // Set CS - pin as output
     7f0:	87 b3       	in	r24, 0x17	; 23
     7f2:	80 61       	ori	r24, 0x10	; 16
     7f4:	87 bb       	out	0x17, r24	; 23

    
    SPI_init () ; // Initialize SPI
     7f6:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_init>
    mcp2515_reset () ; // Send reset - command
     7fa:	0e 94 ef 03 	call	0x7de	; 0x7de <mcp2515_reset>
    // Self - test
	
    uint8_t value = mcp2515_read ( MCP_CANSTAT  );
     7fe:	8e e0       	ldi	r24, 0x0E	; 14
     800:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mcp2515_read>
	
    if (( value & MODE_MASK ) != MODE_CONFIG ) {
     804:	80 7e       	andi	r24, 0xE0	; 224
     806:	80 38       	cpi	r24, 0x80	; 128
     808:	31 f0       	breq	.+12     	; 0x816 <mcp2515_init+0x26>
        printf (" MCP2515 is NOT in configuration mode after reset !\n");
     80a:	84 e3       	ldi	r24, 0x34	; 52
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <puts>
        return 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	08 95       	ret
    }
    mcp2515_bit_modify(MCP_TXRTSCTRL, 0b00000001, 0b00000001);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	8d e0       	ldi	r24, 0x0D	; 13
     81c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	
    mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0b00000001); // Enable Message received interrupt
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	8b e2       	ldi	r24, 0x2B	; 43
     826:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	
	// Can bus Bit timing
	mcp2515_bit_modify(MCP_CNF1, 0b00111111, 0b00000011); // T_Q = 500ns
     82a:	43 e0       	ldi	r20, 0x03	; 3
     82c:	6f e3       	ldi	r22, 0x3F	; 63
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF1, 0b11000000, 0b00000000); // Synchronization Jump Width Length = 1*T_Q
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	60 ec       	ldi	r22, 0xC0	; 192
     838:	8a e2       	ldi	r24, 0x2A	; 42
     83a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2, 0b11111111, 0b10110001); // Phase 1 length = 7*T_Q, Propagation Segment = 2*T_Q, BUs Line sampled once and Length of Phase 2 determined by CNF3
     83e:	41 eb       	ldi	r20, 0xB1	; 177
     840:	6f ef       	ldi	r22, 0xFF	; 255
     842:	89 e2       	ldi	r24, 0x29	; 41
     844:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3, 0b00000111, 0b00000101); // Phase 2 length = 6*T_Q
     848:	45 e0       	ldi	r20, 0x05	; 5
     84a:	67 e0       	ldi	r22, 0x07	; 7
     84c:	88 e2       	ldi	r24, 0x28	; 40
     84e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Disable masks - receive all messages
     852:	40 e6       	ldi	r20, 0x60	; 96
     854:	60 e6       	ldi	r22, 0x60	; 96
     856:	80 e6       	ldi	r24, 0x60	; 96
     858:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_bit_modify>
	//printf("%02x ", mcp2515_read(MCP_CNF2));
	//printf("%02x ", mcp2515_read(MCP_CNF3));
	
    
    // More initialization
    return 0;
     85c:	80 e0       	ldi	r24, 0x00	; 0
}
     85e:	08 95       	ret

00000860 <menu_init>:
#include "menu.h"

void menu_init()
{
	selected_position = 0;
     860:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <selected_position>
	current_menu = 0;
     864:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <current_menu>
	OLED_pos(0, 0);
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 2d 05 	call	0xa5a	; 0xa5a <OLED_pos>
	OLED_reset();
     874:	0e 94 08 05 	call	0xa10	; 0xa10 <OLED_reset>
     878:	08 95       	ret

0000087a <menu_input_loop>:
}
void menu_input_loop(input_t input)
{
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	27 97       	sbiw	r28, 0x07	; 7
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	29 83       	std	Y+1, r18	; 0x01
     892:	3a 83       	std	Y+2, r19	; 0x02
     894:	4b 83       	std	Y+3, r20	; 0x03
     896:	5c 83       	std	Y+4, r21	; 0x04
     898:	6d 83       	std	Y+5, r22	; 0x05
     89a:	7e 83       	std	Y+6, r23	; 0x06
     89c:	8f 83       	std	Y+7, r24	; 0x07
	if(input.direction == UP && last_input.direction != UP)
     89e:	18 2f       	mov	r17, r24
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	c9 f4       	brne	.+50     	; 0x8d6 <menu_input_loop+0x5c>
     8a4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <last_input+0x6>
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	a9 f0       	breq	.+42     	; 0x8d6 <menu_input_loop+0x5c>
	{
		selected_position = MAX(selected_position-1, 0);
     8ac:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <selected_position>
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	12 f4       	brpl	.+4      	; 0x8ba <menu_input_loop+0x40>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <selected_position>
		printf("UP %d", selected_position);
     8be:	1f 92       	push	r1
     8c0:	8f 93       	push	r24
     8c2:	88 e6       	ldi	r24, 0x68	; 104
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
	}
	if(input.direction == DOWN && last_input.direction != DOWN)
     8d6:	13 30       	cpi	r17, 0x03	; 3
     8d8:	d9 f4       	brne	.+54     	; 0x910 <menu_input_loop+0x96>
     8da:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <last_input+0x6>
     8de:	83 30       	cpi	r24, 0x03	; 3
     8e0:	b9 f0       	breq	.+46     	; 0x910 <menu_input_loop+0x96>
	{
		selected_position = MIN(selected_position+1, 2);
     8e2:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <selected_position>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	83 30       	cpi	r24, 0x03	; 3
     8ec:	91 05       	cpc	r25, r1
     8ee:	14 f0       	brlt	.+4      	; 0x8f4 <menu_input_loop+0x7a>
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <selected_position>
		printf("DOWN %d", selected_position);
     8f8:	1f 92       	push	r1
     8fa:	8f 93       	push	r24
     8fc:	8e e6       	ldi	r24, 0x6E	; 110
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
	}
	
	if(input.button_left && (!last_input.button_left))
     910:	8e 81       	ldd	r24, Y+6	; 0x06
     912:	88 23       	and	r24, r24
     914:	b9 f0       	breq	.+46     	; 0x944 <menu_input_loop+0xca>
     916:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <last_input+0x5>
     91a:	81 11       	cpse	r24, r1
     91c:	13 c0       	rjmp	.+38     	; 0x944 <menu_input_loop+0xca>
	{
		current_menu = menu_info[current_menu].select_jump[selected_position];
     91e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <current_menu>
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <selected_position>
     928:	fc 01       	movw	r30, r24
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	e8 0f       	add	r30, r24
     930:	f9 1f       	adc	r31, r25
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	e0 56       	subi	r30, 0x60	; 96
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	e2 0f       	add	r30, r18
     93c:	f1 1d       	adc	r31, r1
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <current_menu>
	}
	
	/*printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);*/
	last_input = input;
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	fe 01       	movw	r30, r28
     948:	31 96       	adiw	r30, 0x01	; 1
     94a:	ac ef       	ldi	r26, 0xFC	; 252
     94c:	b1 e0       	ldi	r27, 0x01	; 1
     94e:	01 90       	ld	r0, Z+
     950:	0d 92       	st	X+, r0
     952:	8a 95       	dec	r24
     954:	e1 f7       	brne	.-8      	; 0x94e <menu_input_loop+0xd4>
}
     956:	27 96       	adiw	r28, 0x07	; 7
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	08 95       	ret

0000096a <menu_draw_loop>:
void menu_draw_loop(input_t input)
{
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	27 97       	sbiw	r28, 0x07	; 7
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
     982:	0e 94 08 05 	call	0xa10	; 0xa10 <OLED_reset>
	//}
	
	for(int row = 0; row < 3; row++)
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	20 c0       	rjmp	.+64     	; 0x9cc <menu_draw_loop+0x62>
	{
		OLED_pos(10 + row*8, 10);
     98c:	c8 01       	movw	r24, r16
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	6a e0       	ldi	r22, 0x0A	; 10
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0a 96       	adiw	r24, 0x0a	; 10
     9a0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <OLED_pos>
		OLED_print(menu_items[current_menu][row]);
     9a4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <current_menu>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	e8 0f       	add	r30, r24
     9b2:	f9 1f       	adc	r31, r25
     9b4:	e0 0f       	add	r30, r16
     9b6:	f1 1f       	adc	r31, r17
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	ea 5f       	subi	r30, 0xFA	; 250
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	0e 94 a8 05 	call	0xb50	; 0xb50 <OLED_print>
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
	//}
	
	for(int row = 0; row < 3; row++)
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	03 30       	cpi	r16, 0x03	; 3
     9ce:	11 05       	cpc	r17, r1
     9d0:	ec f2       	brlt	.-70     	; 0x98c <menu_draw_loop+0x22>
	{
		OLED_pos(10 + row*8, 10);
		OLED_print(menu_items[current_menu][row]);
	}
	OLED_print_arrow(10 + selected_position*8, 0);
     9d2:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <selected_position>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	0a 96       	adiw	r24, 0x0a	; 10
     9ea:	0e 94 bf 05 	call	0xb7e	; 0xb7e <OLED_print_arrow>
     9ee:	27 96       	adiw	r28, 0x07	; 7
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <OLED_write_data>:
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
}
void OLED_write_data(char data)
{
	volatile char* oled_data_register = (char*) BASE_ADDRESS_OLED_DATA;
	oled_data_register[0] = data;
     a04:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xff3>
     a08:	08 95       	ret

00000a0a <OLED_write_command>:
}
void OLED_write_command(char data)
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
     a0a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdf3>
     a0e:	08 95       	ret

00000a10 <OLED_reset>:
} // PDF:"OLED LY190-128064" section 9.4



void OLED_reset()
{
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
	for (int page = 0; page < 8; page++)
     a18:	00 e0       	ldi	r16, 0x00	; 0
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	16 c0       	rjmp	.+44     	; 0xa4a <OLED_reset+0x3a>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
     a1e:	80 eb       	ldi	r24, 0xB0	; 176
     a20:	80 0f       	add	r24, r16
     a22:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
		
		for (int i = 0; i < 128; i++)
     a32:	c0 e0       	ldi	r28, 0x00	; 0
     a34:	d0 e0       	ldi	r29, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <OLED_reset+0x30>
		{
			OLED_write_data(0);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
		
		for (int i = 0; i < 128; i++)
     a3e:	21 96       	adiw	r28, 0x01	; 1
     a40:	c0 38       	cpi	r28, 0x80	; 128
     a42:	d1 05       	cpc	r29, r1
     a44:	cc f3       	brlt	.-14     	; 0xa38 <OLED_reset+0x28>



void OLED_reset()
{
	for (int page = 0; page < 8; page++)
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	08 30       	cpi	r16, 0x08	; 8
     a4c:	11 05       	cpc	r17, r1
     a4e:	3c f3       	brlt	.-50     	; 0xa1e <OLED_reset+0xe>
		for (int i = 0; i < 128; i++)
		{
			OLED_write_data(0);
		}
	}
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <OLED_pos>:
void OLED_clear_line(uint8_t line)
{
	
}
void OLED_pos(uint8_t row, uint8_t column)
{
     a5a:	cf 93       	push	r28
     a5c:	c6 2f       	mov	r28, r22
	OLED_write_command(0xb0 + row / 8); // Set the page start address of the target display location by command B0h to B7h
     a5e:	86 95       	lsr	r24
     a60:	86 95       	lsr	r24
     a62:	86 95       	lsr	r24
     a64:	80 55       	subi	r24, 0x50	; 80
     a66:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x00 + column % 16); // Set the lower start column address of pointer by command 00h~0Fh.
     a6a:	8c 2f       	mov	r24, r28
     a6c:	8f 70       	andi	r24, 0x0F	; 15
     a6e:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
     a72:	8c 2f       	mov	r24, r28
     a74:	82 95       	swap	r24
     a76:	8f 70       	andi	r24, 0x0F	; 15
     a78:	80 5f       	subi	r24, 0xF0	; 240
     a7a:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
}
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <OLED_init>:
#include <avr/pgmspace.h>

void OLED_init()
{
	
	OLED_write_command(0xae); // display off
     a82:	8e ea       	ldi	r24, 0xAE	; 174
     a84:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xa1); //segment remap
     a88:	81 ea       	ldi	r24, 0xA1	; 161
     a8a:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xda); //common pads hardware: alternative
     a8e:	8a ed       	ldi	r24, 0xDA	; 218
     a90:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x12);
     a94:	82 e1       	ldi	r24, 0x12	; 18
     a96:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xc8); //common output scan direction:com63~com0
     a9a:	88 ec       	ldi	r24, 0xC8	; 200
     a9c:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xa8); //multiplex ration mode:63
     aa0:	88 ea       	ldi	r24, 0xA8	; 168
     aa2:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x3f);
     aa6:	8f e3       	ldi	r24, 0x3F	; 63
     aa8:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xd5); //display divide ratio/osc. freq. mode
     aac:	85 ed       	ldi	r24, 0xD5	; 213
     aae:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x80);
     ab2:	80 e8       	ldi	r24, 0x80	; 128
     ab4:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x81); //contrast control
     ab8:	81 e8       	ldi	r24, 0x81	; 129
     aba:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x50);
     abe:	80 e5       	ldi	r24, 0x50	; 80
     ac0:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xd9); //set pre-charge period
     ac4:	89 ed       	ldi	r24, 0xD9	; 217
     ac6:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x21);
     aca:	81 e2       	ldi	r24, 0x21	; 33
     acc:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x20); //Set Memory Addressing Mode
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x02);
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xdb); //VCOM deselect level mode
     adc:	8b ed       	ldi	r24, 0xDB	; 219
     ade:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x30);
     ae2:	80 e3       	ldi	r24, 0x30	; 48
     ae4:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xad); //master configuration
     ae8:	8d ea       	ldi	r24, 0xAD	; 173
     aea:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0x00);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xa4); //out follows RAM content
     af4:	84 ea       	ldi	r24, 0xA4	; 164
     af6:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xa6); //set normal display
     afa:	86 ea       	ldi	r24, 0xA6	; 166
     afc:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	OLED_write_command(0xaf); // display on
     b00:	8f ea       	ldi	r24, 0xAF	; 175
     b02:	0e 94 05 05 	call	0xa0a	; 0xa0a <OLED_write_command>
	//OLED_write_command(0xa5);
	/*OLED_write_command(0xb0); // Set the page start address of the target display location by command B0h to B7h
	OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
	OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh*/
	
	OLED_reset();
     b06:	0e 94 08 05 	call	0xa10	; 0xa10 <OLED_reset>
	OLED_pos(0, 0);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <OLED_pos>
     b12:	08 95       	ret

00000b14 <OLED_print_character>:
		i++;
	}
}

void OLED_print_character(char character)
{
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	18 2f       	mov	r17, r24
	for (int row = 0; row < 8; row++)
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
     b20:	10 c0       	rjmp	.+32     	; 0xb42 <OLED_print_character+0x2e>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
     b22:	e1 2f       	mov	r30, r17
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	ec 0f       	add	r30, r28
     b34:	fd 1f       	adc	r31, r29
     b36:	ee 50       	subi	r30, 0x0E	; 14
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	84 91       	lpm	r24, Z
     b3c:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
	}
}

void OLED_print_character(char character)
{
	for (int row = 0; row < 8; row++)
     b40:	21 96       	adiw	r28, 0x01	; 1
     b42:	c8 30       	cpi	r28, 0x08	; 8
     b44:	d1 05       	cpc	r29, r1
     b46:	6c f3       	brlt	.-38     	; 0xb22 <OLED_print_character+0xe>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
	}
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	08 95       	ret

00000b50 <OLED_print>:
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	8c 01       	movw	r16, r24
	int i = 0;
     b5a:	c0 e0       	ldi	r28, 0x00	; 0
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i] != '\0')
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <OLED_print+0x18>
	{
		OLED_print_character(string[i] - 32);
     b60:	80 52       	subi	r24, 0x20	; 32
     b62:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_character>
		i++;
     b66:	21 96       	adiw	r28, 0x01	; 1
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
	int i = 0;
	while(string[i] != '\0')
     b68:	f8 01       	movw	r30, r16
     b6a:	ec 0f       	add	r30, r28
     b6c:	fd 1f       	adc	r31, r29
     b6e:	80 81       	ld	r24, Z
     b70:	81 11       	cpse	r24, r1
     b72:	f6 cf       	rjmp	.-20     	; 0xb60 <OLED_print+0x10>
	{
		OLED_print_character(string[i] - 32);
		i++;
	}
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <OLED_print_arrow>:
void OLED_set_brightness(uint8_t lvl);


void OLED_print_arrow ( uint8_t row , uint8_t col )
{
	OLED_pos ( row , col );
     b7e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <OLED_pos>
	OLED_write_data (0b00011000 );
     b82:	88 e1       	ldi	r24, 0x18	; 24
     b84:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
	OLED_write_data (0b00011000 );
     b88:	88 e1       	ldi	r24, 0x18	; 24
     b8a:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
	OLED_write_data (0b01111110 );
     b8e:	8e e7       	ldi	r24, 0x7E	; 126
     b90:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
	OLED_write_data (0b00111100 );
     b94:	8c e3       	ldi	r24, 0x3C	; 60
     b96:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
	OLED_write_data (0b00011000 );
     b9a:	88 e1       	ldi	r24, 0x18	; 24
     b9c:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_write_data>
     ba0:	08 95       	ret

00000ba2 <SPI_init>:
#include <avr/io.h>

void SPI_init(){
	
	/* Set MOSI, SCK output, all others input */
	DDRB |= (1 << PB5) | (1 << PB7);
     ba2:	87 b3       	in	r24, 0x17	; 23
     ba4:	80 6a       	ori	r24, 0xA0	; 160
     ba6:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	//SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPIE) ;
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) ;
     ba8:	8d b1       	in	r24, 0x0d	; 13
     baa:	81 65       	ori	r24, 0x51	; 81
     bac:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << SPR1) ;
     bae:	8d b1       	in	r24, 0x0d	; 13
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1 << SPI2X) ;
     bb4:	8e b1       	in	r24, 0x0e	; 14
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	8e b9       	out	0x0e, r24	; 14
     bba:	08 95       	ret

00000bbc <SPI_write>:
}

void SPI_write(char cData){
	
	/* Start transmission */
	SPDR = cData;
     bbc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     bbe:	77 9b       	sbis	0x0e, 7	; 14
     bc0:	fe cf       	rjmp	.-4      	; 0xbbe <SPI_write+0x2>
	;
	
	
	
}
     bc2:	08 95       	ret

00000bc4 <SPI_read>:

char SPI_read(){
	
	/* Start transmission */
	SPDR = 0b00000000;
     bc4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     bc6:	77 9b       	sbis	0x0e, 7	; 14
     bc8:	fe cf       	rjmp	.-4      	; 0xbc6 <SPI_read+0x2>
	;
	/* Received byte is found on the same register */
	return SPDR;
     bca:	8f b1       	in	r24, 0x0f	; 15

     bcc:	08 95       	ret

00000bce <USART_Transmit>:
    
}
void USART_Transmit(unsigned char data)
{
    // Wait until the transmitter buffer is empty
    while ( !( UCSR0A & (1<<UDRE0)) ); // USART Control and Status Register A, USART Data Register Empty
     bce:	5d 9b       	sbis	0x0b, 5	; 11
     bd0:	fe cf       	rjmp	.-4      	; 0xbce <USART_Transmit>
    // Send data
    UDR0 = data; // USART Data Register
     bd2:	8c b9       	out	0x0c, r24	; 12
     bd4:	08 95       	ret

00000bd6 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
     bd6:	5f 9b       	sbis	0x0b, 7	; 11
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <USART_Receive+0x8>
        return '\0';
    // Return data received
    return UDR0; // USART Data Register
     bda:	8c b1       	in	r24, 0x0c	; 12
     bdc:	08 95       	ret

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
        return '\0';
     bde:	80 e0       	ldi	r24, 0x00	; 0
    // Return data received
    return UDR0; // USART Data Register
     be0:	08 95       	ret

00000be2 <usart_init>:

// static FILE usart_stream_write = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
// static FILE usart_stream_read = FDEV_SETUP_STREAM(NULL, USART_Transmit, _FDEV_SETUP_READ);

void usart_init(unsigned int usart_baud_rate_register)
{
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	c8 2f       	mov	r28, r24
     be8:	d9 2f       	mov	r29, r25
    // Open read/write stream over USART https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html#gab599ddf60819df4cc993c724a83cb1a4
    fdevopen(USART_Transmit, USART_Receive);
     bea:	6b ee       	ldi	r22, 0xEB	; 235
     bec:	75 e0       	ldi	r23, 0x05	; 5
     bee:	87 ee       	ldi	r24, 0xE7	; 231
     bf0:	95 e0       	ldi	r25, 0x05	; 5
     bf2:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fdevopen>
    // Set baud rate registers
    UBRR0H = (unsigned char)(usart_baud_rate_register>>8); // usart_baud_rate_register_high
     bf6:	d0 bd       	out	0x20, r29	; 32
    UBRR0L = (unsigned char)usart_baud_rate_register; // usart_baud_rate_register_low
     bf8:	c9 b9       	out	0x09, r28	; 9
    
    // Enable RX and TX registers
    UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Universal Synchronous Asynchronous Receiver Transmitter Register B, RX Enable, TX Enable
     bfa:	88 e1       	ldi	r24, 0x18	; 24
     bfc:	8a b9       	out	0x0a, r24	; 10
    
	
    // Set frame format to 8 data bits, 2 stop bits
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // Universal Synchronous Asynchronous Receiver Transmitter Register C, USART Register Select, USART Stop Bit Select, USART Character Size Select
     bfe:	8e e8       	ldi	r24, 0x8E	; 142
     c00:	80 bd       	out	0x20, r24	; 32
    
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <adc_init>:
}

uint8_t joystick_angle_from_voltage(uint8_t voltage)
{
	return voltage;
}
     c08:	81 b3       	in	r24, 0x11	; 17
     c0a:	80 61       	ori	r24, 0x10	; 16
     c0c:	81 bb       	out	0x11, r24	; 17
     c0e:	ab e8       	ldi	r26, 0x8B	; 139
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	8c 91       	ld	r24, X
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8c 93       	st	X, r24
     c18:	ea e8       	ldi	r30, 0x8A	; 138
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	88 61       	ori	r24, 0x18	; 24
     c20:	80 83       	st	Z, r24
     c22:	8c 91       	ld	r24, X
     c24:	83 60       	ori	r24, 0x03	; 3
     c26:	8c 93       	st	X, r24
     c28:	80 81       	ld	r24, Z
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	80 83       	st	Z, r24
     c2e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     c32:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     c36:	81 b3       	in	r24, 0x11	; 17
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	81 bb       	out	0x11, r24	; 17
     c3c:	81 b3       	in	r24, 0x11	; 17
     c3e:	87 7f       	andi	r24, 0xF7	; 247
     c40:	81 bb       	out	0x11, r24	; 17
     c42:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <input_head+0x1>
     c46:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <input_head>
     c4a:	08 95       	ret

00000c4c <input_read>:

input_t input_read(){
     c4c:	2f 92       	push	r2
     c4e:	3f 92       	push	r3
     c50:	4f 92       	push	r4
     c52:	5f 92       	push	r5
     c54:	6f 92       	push	r6
     c56:	7f 92       	push	r7
     c58:	8f 92       	push	r8
     c5a:	9f 92       	push	r9
     c5c:	af 92       	push	r10
     c5e:	bf 92       	push	r11
     c60:	cf 92       	push	r12
     c62:	df 92       	push	r13
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	69 97       	sbiw	r28, 0x19	; 25
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
	volatile char* adc_out = (char*) BASE_ADDRESS_ADC;
	adc_out[0] = 0;
     c80:	e0 e0       	ldi	r30, 0x00	; 0
     c82:	f4 e1       	ldi	r31, 0x14	; 20
     c84:	10 82       	st	Z, r1
     c86:	83 ef       	ldi	r24, 0xF3	; 243
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <input_read+0x3e>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <input_read+0x44>
     c90:	00 00       	nop
	
	// Wait for busy
	_delay_ms(2);
	
	input_t input;
	uint8_t y_raw = *adc_out;
     c92:	d0 80       	ld	r13, Z
	uint8_t x_raw = *adc_out;
     c94:	00 81       	ld	r16, Z
	uint8_t slider1_raw = *adc_out;
     c96:	e0 80       	ld	r14, Z
	uint8_t slider2_raw = *adc_out;
     c98:	f0 80       	ld	r15, Z
	
	const double PI =  3.1415926;	
	
	uint8_t y_positive = MAX(y_raw, 175) - 175;
     c9a:	9f ea       	ldi	r25, 0xAF	; 175
     c9c:	9d 15       	cp	r25, r13
     c9e:	18 f4       	brcc	.+6      	; 0xca6 <input_read+0x5a>
     ca0:	61 e5       	ldi	r22, 0x51	; 81
     ca2:	6d 0d       	add	r22, r13
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <input_read+0x5c>
     ca6:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_positive = MAX(x_raw, 198) - 198;
     ca8:	07 3c       	cpi	r16, 0xC7	; 199
     caa:	18 f0       	brcs	.+6      	; 0xcb2 <input_read+0x66>
     cac:	1a e3       	ldi	r17, 0x3A	; 58
     cae:	10 0f       	add	r17, r16
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <input_read+0x68>
     cb2:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t y_positive_scaled = (uint8_t)((float)y_positive * ((float)127/(float)80));
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatunsisf>
     cbe:	23 e3       	ldi	r18, 0x33	; 51
     cc0:	33 e3       	ldi	r19, 0x33	; 51
     cc2:	4b ec       	ldi	r20, 0xCB	; 203
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     cca:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
     cce:	b6 2e       	mov	r11, r22
	uint8_t x_positive_scaled = (uint8_t)((float)x_positive * ((float)127/(float)57));
     cd0:	61 2f       	mov	r22, r17
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatunsisf>
     cdc:	24 eb       	ldi	r18, 0xB4	; 180
     cde:	38 e9       	ldi	r19, 0x98	; 152
     ce0:	4e e0       	ldi	r20, 0x0E	; 14
     ce2:	50 e4       	ldi	r21, 0x40	; 64
     ce4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     ce8:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
     cec:	16 2f       	mov	r17, r22
	
	uint8_t y_negative = 175 - MIN(y_raw, 175);
     cee:	ee ea       	ldi	r30, 0xAE	; 174
     cf0:	ed 15       	cp	r30, r13
     cf2:	18 f0       	brcs	.+6      	; 0xcfa <input_read+0xae>
     cf4:	6f ea       	ldi	r22, 0xAF	; 175
     cf6:	6d 19       	sub	r22, r13
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <input_read+0xb0>
     cfa:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_negative = 198 - MIN(x_raw, 198);
     cfc:	06 3c       	cpi	r16, 0xC6	; 198
     cfe:	20 f4       	brcc	.+8      	; 0xd08 <input_read+0xbc>
     d00:	86 ec       	ldi	r24, 0xC6	; 198
     d02:	d8 2e       	mov	r13, r24
     d04:	d0 1a       	sub	r13, r16
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <input_read+0xbe>
     d08:	d1 2c       	mov	r13, r1
	
	uint8_t y_negative_scaled = (uint8_t)((float)y_negative * ((float)127/(float)175));
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatunsisf>
     d14:	29 e6       	ldi	r18, 0x69	; 105
     d16:	38 ec       	ldi	r19, 0xC8	; 200
     d18:	49 e3       	ldi	r20, 0x39	; 57
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     d20:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
     d24:	c6 2e       	mov	r12, r22
	uint8_t x_negative_scaled = (uint8_t)((float)x_negative * ((float)127/(float)198));
     d26:	6d 2d       	mov	r22, r13
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatunsisf>
     d32:	28 eb       	ldi	r18, 0xB8	; 184
     d34:	33 e3       	ldi	r19, 0x33	; 51
     d36:	44 e2       	ldi	r20, 0x24	; 36
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     d3e:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
	
	input.joystick_y = (uint8_t)((128 - y_negative_scaled) + y_positive_scaled);
     d42:	9b 2d       	mov	r25, r11
     d44:	9c 19       	sub	r25, r12
     d46:	90 58       	subi	r25, 0x80	; 128
     d48:	99 87       	std	Y+9, r25	; 0x09
	input.joystick_x = (uint8_t)((128 - x_negative_scaled) + x_positive_scaled);
     d4a:	81 2f       	mov	r24, r17
     d4c:	86 1b       	sub	r24, r22
     d4e:	80 58       	subi	r24, 0x80	; 128
     d50:	88 87       	std	Y+8, r24	; 0x08
	
	input.direction = CENTER;
     d52:	1e 86       	std	Y+14, r1	; 0x0e
	if(input.joystick_y > 198)
     d54:	97 3c       	cpi	r25, 0xC7	; 199
     d56:	10 f0       	brcs	.+4      	; 0xd5c <input_read+0x110>
		input.direction = UP;
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_x > 198)
     d5c:	87 3c       	cpi	r24, 0xC7	; 199
     d5e:	10 f0       	brcs	.+4      	; 0xd64 <input_read+0x118>
		input.direction = RIGHT;
     d60:	22 e0       	ldi	r18, 0x02	; 2
     d62:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_y < 68)
     d64:	94 34       	cpi	r25, 0x44	; 68
     d66:	10 f4       	brcc	.+4      	; 0xd6c <input_read+0x120>
		input.direction = DOWN;
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	9e 87       	std	Y+14, r25	; 0x0e
	if(input.joystick_x < 68)
     d6c:	84 34       	cpi	r24, 0x44	; 68
     d6e:	10 f4       	brcc	.+4      	; 0xd74 <input_read+0x128>
		input.direction = LEFT;
     d70:	84 e0       	ldi	r24, 0x04	; 4
     d72:	8e 87       	std	Y+14, r24	; 0x0e
	
	input.slider_1 = slider1_raw;
     d74:	ea 86       	std	Y+10, r14	; 0x0a
	input.slider_2 = slider2_raw;
     d76:	fb 86       	std	Y+11, r15	; 0x0b
	
	input.button_left = PIND & (1 << PD2);
     d78:	80 b3       	in	r24, 0x10	; 16
     d7a:	84 70       	andi	r24, 0x04	; 4
     d7c:	8d 87       	std	Y+13, r24	; 0x0d
	input.button_right= PIND & (1 << PD3);
     d7e:	80 b3       	in	r24, 0x10	; 16
     d80:	88 70       	andi	r24, 0x08	; 8
     d82:	8c 87       	std	Y+12, r24	; 0x0c
	
	input_buffer[input_head] = input;
     d84:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <input_head>
     d88:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <input_head+0x1>
     d8c:	dc 01       	movw	r26, r24
     d8e:	aa 0f       	add	r26, r26
     d90:	bb 1f       	adc	r27, r27
     d92:	aa 0f       	add	r26, r26
     d94:	bb 1f       	adc	r27, r27
     d96:	aa 0f       	add	r26, r26
     d98:	bb 1f       	adc	r27, r27
     d9a:	a8 1b       	sub	r26, r24
     d9c:	b9 0b       	sbc	r27, r25
     d9e:	ae 54       	subi	r26, 0x4E	; 78
     da0:	be 4f       	sbci	r27, 0xFE	; 254
     da2:	27 e0       	ldi	r18, 0x07	; 7
     da4:	fe 01       	movw	r30, r28
     da6:	38 96       	adiw	r30, 0x08	; 8
     da8:	01 90       	ld	r0, Z+
     daa:	0d 92       	st	X+, r0
     dac:	2a 95       	dec	r18
     dae:	e1 f7       	brne	.-8      	; 0xda8 <input_read+0x15c>
	input_head = (input_head + 1) % 10;
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	6a e0       	ldi	r22, 0x0A	; 10
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	0e 94 43 0b 	call	0x1686	; 0x1686 <__divmodhi4>
     dba:	68 2e       	mov	r6, r24
     dbc:	79 2e       	mov	r7, r25
     dbe:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <input_head>
     dc2:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <input_head+0x1>
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
     dc6:	27 e0       	ldi	r18, 0x07	; 7
     dc8:	fe 01       	movw	r30, r28
     dca:	38 96       	adiw	r30, 0x08	; 8
     dcc:	de 01       	movw	r26, r28
     dce:	1f 96       	adiw	r26, 0x0f	; 15
     dd0:	01 90       	ld	r0, Z+
     dd2:	0d 92       	st	X+, r0
     dd4:	2a 95       	dec	r18
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <input_read+0x184>
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	for(int i = input_head; i != (input_head - 1 + 10) % 10; i = (i + 1) % 10)
     dd8:	08 2f       	mov	r16, r24
     dda:	19 2f       	mov	r17, r25
	input_head = (input_head + 1) % 10;
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
     ddc:	c1 2c       	mov	r12, r1
     dde:	d1 2c       	mov	r13, r1
     de0:	76 01       	movw	r14, r12
	input_buffer[input_head] = input;
	input_head = (input_head + 1) % 10;
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
     de2:	46 01       	movw	r8, r12
     de4:	57 01       	movw	r10, r14
	float smooth_joystick_y = 0;
	for(int i = input_head; i != (input_head - 1 + 10) % 10; i = (i + 1) % 10)
     de6:	64 c0       	rjmp	.+200    	; 0xeb0 <input_read+0x264>
	{
		int age = (input_head - i + 10) % 10 + 1;
     de8:	c3 01       	movw	r24, r6
     dea:	80 1b       	sub	r24, r16
     dec:	91 0b       	sbc	r25, r17
     dee:	0a 96       	adiw	r24, 0x0a	; 10
     df0:	0f 2e       	mov	r0, r31
     df2:	fa e0       	ldi	r31, 0x0A	; 10
     df4:	2f 2e       	mov	r2, r31
     df6:	31 2c       	mov	r3, r1
     df8:	f0 2d       	mov	r31, r0
     dfa:	b1 01       	movw	r22, r2
     dfc:	0e 94 43 0b 	call	0x1686	; 0x1686 <__divmodhi4>
     e00:	bc 01       	movw	r22, r24
     e02:	6f 5f       	subi	r22, 0xFF	; 255
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
		//printf("%d   ", (int)(pow(0.5, (float)age) * (float)input_buffer[i % 10].joystick_x * 100.0));
		smooth_joystick_x += pow(0.5, (float)age) * (float)input_buffer[i % 10].joystick_x;
     e06:	07 2e       	mov	r0, r23
     e08:	00 0c       	add	r0, r0
     e0a:	88 0b       	sbc	r24, r24
     e0c:	99 0b       	sbc	r25, r25
     e0e:	0e 94 c5 08 	call	0x118a	; 0x118a <__floatsisf>
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	9f e3       	ldi	r25, 0x3F	; 63
     e1e:	0e 94 be 09 	call	0x137c	; 0x137c <pow>
     e22:	6e 8b       	std	Y+22, r22	; 0x16
     e24:	7f 8b       	std	Y+23, r23	; 0x17
     e26:	88 8f       	std	Y+24, r24	; 0x18
     e28:	99 8f       	std	Y+25, r25	; 0x19
     e2a:	c8 01       	movw	r24, r16
     e2c:	b1 01       	movw	r22, r2
     e2e:	0e 94 43 0b 	call	0x1686	; 0x1686 <__divmodhi4>
     e32:	9c 01       	movw	r18, r24
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	a9 01       	movw	r20, r18
     e42:	48 1b       	sub	r20, r24
     e44:	59 0b       	sbc	r21, r25
     e46:	fa 01       	movw	r30, r20
     e48:	ee 54       	subi	r30, 0x4E	; 78
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	2f 01       	movw	r4, r30
     e4e:	60 81       	ld	r22, Z
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatunsisf>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	6e 89       	ldd	r22, Y+22	; 0x16
     e60:	7f 89       	ldd	r23, Y+23	; 0x17
     e62:	88 8d       	ldd	r24, Y+24	; 0x18
     e64:	99 8d       	ldd	r25, Y+25	; 0x19
     e66:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     e6a:	9b 01       	movw	r18, r22
     e6c:	ac 01       	movw	r20, r24
     e6e:	c5 01       	movw	r24, r10
     e70:	b4 01       	movw	r22, r8
     e72:	0e 94 af 07 	call	0xf5e	; 0xf5e <__addsf3>
     e76:	4b 01       	movw	r8, r22
     e78:	5c 01       	movw	r10, r24
		smooth_joystick_y += (float)input_buffer[i % 10].joystick_y / 10.0;
     e7a:	f2 01       	movw	r30, r4
     e7c:	61 81       	ldd	r22, Z+1	; 0x01
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 c3 08 	call	0x1186	; 0x1186 <__floatunsisf>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e2       	ldi	r20, 0x20	; 32
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 1b 08 	call	0x1036	; 0x1036 <__divsf3>
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	0e 94 af 07 	call	0xf5e	; 0xf5e <__addsf3>
     ea0:	6b 01       	movw	r12, r22
     ea2:	7c 01       	movw	r14, r24
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	for(int i = input_head; i != (input_head - 1 + 10) % 10; i = (i + 1) % 10)
     ea4:	c8 01       	movw	r24, r16
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	b1 01       	movw	r22, r2
     eaa:	0e 94 43 0b 	call	0x1686	; 0x1686 <__divmodhi4>
     eae:	8c 01       	movw	r16, r24
     eb0:	c3 01       	movw	r24, r6
     eb2:	09 96       	adiw	r24, 0x09	; 9
     eb4:	6a e0       	ldi	r22, 0x0A	; 10
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	0e 94 43 0b 	call	0x1686	; 0x1686 <__divmodhi4>
     ebc:	08 17       	cp	r16, r24
     ebe:	19 07       	cpc	r17, r25
     ec0:	09 f0       	breq	.+2      	; 0xec4 <input_read+0x278>
     ec2:	92 cf       	rjmp	.-220    	; 0xde8 <input_read+0x19c>
		int age = (input_head - i + 10) % 10 + 1;
		//printf("%d   ", (int)(pow(0.5, (float)age) * (float)input_buffer[i % 10].joystick_x * 100.0));
		smooth_joystick_x += pow(0.5, (float)age) * (float)input_buffer[i % 10].joystick_x;
		smooth_joystick_y += (float)input_buffer[i % 10].joystick_y / 10.0;
	}
	smooth_input.joystick_x = (int)smooth_joystick_x;
     ec4:	c5 01       	movw	r24, r10
     ec6:	b4 01       	movw	r22, r8
     ec8:	0e 94 8d 08 	call	0x111a	; 0x111a <__fixsfsi>
     ecc:	16 2f       	mov	r17, r22
     ece:	07 2f       	mov	r16, r23
     ed0:	6f 87       	std	Y+15, r22	; 0x0f
	smooth_input.joystick_y = (int)smooth_joystick_y;
     ed2:	c7 01       	movw	r24, r14
     ed4:	b6 01       	movw	r22, r12
     ed6:	0e 94 8d 08 	call	0x111a	; 0x111a <__fixsfsi>
     eda:	68 8b       	std	Y+16, r22	; 0x10
	
	printf("%d   ", (int)(smooth_joystick_x));
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	8c ea       	ldi	r24, 0xAC	; 172
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	0e 94 b6 0b 	call	0x176c	; 0x176c <printf>

	return smooth_input;
     eec:	87 e0       	ldi	r24, 0x07	; 7
     eee:	fe 01       	movw	r30, r28
     ef0:	3f 96       	adiw	r30, 0x0f	; 15
     ef2:	de 01       	movw	r26, r28
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	01 90       	ld	r0, Z+
     ef8:	0d 92       	st	X+, r0
     efa:	8a 95       	dec	r24
     efc:	e1 f7       	brne	.-8      	; 0xef6 <input_read+0x2aa>
     efe:	29 81       	ldd	r18, Y+1	; 0x01
     f00:	3a 81       	ldd	r19, Y+2	; 0x02
     f02:	4b 81       	ldd	r20, Y+3	; 0x03
     f04:	5c 81       	ldd	r21, Y+4	; 0x04
     f06:	6d 81       	ldd	r22, Y+5	; 0x05
     f08:	7e 81       	ldd	r23, Y+6	; 0x06
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
}
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	69 96       	adiw	r28, 0x19	; 25
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	9f 90       	pop	r9
     f38:	8f 90       	pop	r8
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	5f 90       	pop	r5
     f40:	4f 90       	pop	r4
     f42:	3f 90       	pop	r3
     f44:	2f 90       	pop	r2
     f46:	08 95       	ret

00000f48 <xmem_init>:
#include "xmem.h"

// From lab lecture
void xmem_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     f48:	85 b7       	in	r24, 0x35	; 53
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	85 bf       	out	0x35, r24	; 53
	// Mask out some port C address pins for JTAG (datasheet page 32)
	SFIOR |= 1 << XMM2;
     f4e:	80 b7       	in	r24, 0x30	; 48
     f50:	80 62       	ori	r24, 0x20	; 32
     f52:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 | 1 << XMM1);
     f54:	80 b7       	in	r24, 0x30	; 48
     f56:	87 7e       	andi	r24, 0xE7	; 231
     f58:	80 bf       	out	0x30, r24	; 48
     f5a:	08 95       	ret

00000f5c <__subsf3>:
     f5c:	50 58       	subi	r21, 0x80	; 128

00000f5e <__addsf3>:
     f5e:	bb 27       	eor	r27, r27
     f60:	aa 27       	eor	r26, r26
     f62:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3x>
     f66:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>
     f6a:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
     f6e:	38 f0       	brcs	.+14     	; 0xf7e <__addsf3+0x20>
     f70:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
     f74:	20 f0       	brcs	.+8      	; 0xf7e <__addsf3+0x20>
     f76:	39 f4       	brne	.+14     	; 0xf86 <__addsf3+0x28>
     f78:	9f 3f       	cpi	r25, 0xFF	; 255
     f7a:	19 f4       	brne	.+6      	; 0xf82 <__addsf3+0x24>
     f7c:	26 f4       	brtc	.+8      	; 0xf86 <__addsf3+0x28>
     f7e:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_nan>
     f82:	0e f4       	brtc	.+2      	; 0xf86 <__addsf3+0x28>
     f84:	e0 95       	com	r30
     f86:	e7 fb       	bst	r30, 7
     f88:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>

00000f8c <__addsf3x>:
     f8c:	e9 2f       	mov	r30, r25
     f8e:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
     f92:	58 f3       	brcs	.-42     	; 0xf6a <__addsf3+0xc>
     f94:	ba 17       	cp	r27, r26
     f96:	62 07       	cpc	r22, r18
     f98:	73 07       	cpc	r23, r19
     f9a:	84 07       	cpc	r24, r20
     f9c:	95 07       	cpc	r25, r21
     f9e:	20 f0       	brcs	.+8      	; 0xfa8 <__addsf3x+0x1c>
     fa0:	79 f4       	brne	.+30     	; 0xfc0 <__addsf3x+0x34>
     fa2:	a6 f5       	brtc	.+104    	; 0x100c <__addsf3x+0x80>
     fa4:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_zero>
     fa8:	0e f4       	brtc	.+2      	; 0xfac <__addsf3x+0x20>
     faa:	e0 95       	com	r30
     fac:	0b 2e       	mov	r0, r27
     fae:	ba 2f       	mov	r27, r26
     fb0:	a0 2d       	mov	r26, r0
     fb2:	0b 01       	movw	r0, r22
     fb4:	b9 01       	movw	r22, r18
     fb6:	90 01       	movw	r18, r0
     fb8:	0c 01       	movw	r0, r24
     fba:	ca 01       	movw	r24, r20
     fbc:	a0 01       	movw	r20, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	ff 27       	eor	r31, r31
     fc2:	59 1b       	sub	r21, r25
     fc4:	99 f0       	breq	.+38     	; 0xfec <__addsf3x+0x60>
     fc6:	59 3f       	cpi	r21, 0xF9	; 249
     fc8:	50 f4       	brcc	.+20     	; 0xfde <__addsf3x+0x52>
     fca:	50 3e       	cpi	r21, 0xE0	; 224
     fcc:	68 f1       	brcs	.+90     	; 0x1028 <__addsf3x+0x9c>
     fce:	1a 16       	cp	r1, r26
     fd0:	f0 40       	sbci	r31, 0x00	; 0
     fd2:	a2 2f       	mov	r26, r18
     fd4:	23 2f       	mov	r18, r19
     fd6:	34 2f       	mov	r19, r20
     fd8:	44 27       	eor	r20, r20
     fda:	58 5f       	subi	r21, 0xF8	; 248
     fdc:	f3 cf       	rjmp	.-26     	; 0xfc4 <__addsf3x+0x38>
     fde:	46 95       	lsr	r20
     fe0:	37 95       	ror	r19
     fe2:	27 95       	ror	r18
     fe4:	a7 95       	ror	r26
     fe6:	f0 40       	sbci	r31, 0x00	; 0
     fe8:	53 95       	inc	r21
     fea:	c9 f7       	brne	.-14     	; 0xfde <__addsf3x+0x52>
     fec:	7e f4       	brtc	.+30     	; 0x100c <__addsf3x+0x80>
     fee:	1f 16       	cp	r1, r31
     ff0:	ba 0b       	sbc	r27, r26
     ff2:	62 0b       	sbc	r22, r18
     ff4:	73 0b       	sbc	r23, r19
     ff6:	84 0b       	sbc	r24, r20
     ff8:	ba f0       	brmi	.+46     	; 0x1028 <__addsf3x+0x9c>
     ffa:	91 50       	subi	r25, 0x01	; 1
     ffc:	a1 f0       	breq	.+40     	; 0x1026 <__addsf3x+0x9a>
     ffe:	ff 0f       	add	r31, r31
    1000:	bb 1f       	adc	r27, r27
    1002:	66 1f       	adc	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	c2 f7       	brpl	.-16     	; 0xffa <__addsf3x+0x6e>
    100a:	0e c0       	rjmp	.+28     	; 0x1028 <__addsf3x+0x9c>
    100c:	ba 0f       	add	r27, r26
    100e:	62 1f       	adc	r22, r18
    1010:	73 1f       	adc	r23, r19
    1012:	84 1f       	adc	r24, r20
    1014:	48 f4       	brcc	.+18     	; 0x1028 <__addsf3x+0x9c>
    1016:	87 95       	ror	r24
    1018:	77 95       	ror	r23
    101a:	67 95       	ror	r22
    101c:	b7 95       	ror	r27
    101e:	f7 95       	ror	r31
    1020:	9e 3f       	cpi	r25, 0xFE	; 254
    1022:	08 f0       	brcs	.+2      	; 0x1026 <__addsf3x+0x9a>
    1024:	b0 cf       	rjmp	.-160    	; 0xf86 <__addsf3+0x28>
    1026:	93 95       	inc	r25
    1028:	88 0f       	add	r24, r24
    102a:	08 f0       	brcs	.+2      	; 0x102e <__addsf3x+0xa2>
    102c:	99 27       	eor	r25, r25
    102e:	ee 0f       	add	r30, r30
    1030:	97 95       	ror	r25
    1032:	87 95       	ror	r24
    1034:	08 95       	ret

00001036 <__divsf3>:
    1036:	0e 94 2f 08 	call	0x105e	; 0x105e <__divsf3x>
    103a:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>
    103e:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
    1042:	58 f0       	brcs	.+22     	; 0x105a <__divsf3+0x24>
    1044:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
    1048:	40 f0       	brcs	.+16     	; 0x105a <__divsf3+0x24>
    104a:	29 f4       	brne	.+10     	; 0x1056 <__divsf3+0x20>
    104c:	5f 3f       	cpi	r21, 0xFF	; 255
    104e:	29 f0       	breq	.+10     	; 0x105a <__divsf3+0x24>
    1050:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>
    1054:	51 11       	cpse	r21, r1
    1056:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    105a:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_nan>

0000105e <__divsf3x>:
    105e:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
    1062:	68 f3       	brcs	.-38     	; 0x103e <__divsf3+0x8>

00001064 <__divsf3_pse>:
    1064:	99 23       	and	r25, r25
    1066:	b1 f3       	breq	.-20     	; 0x1054 <__divsf3+0x1e>
    1068:	55 23       	and	r21, r21
    106a:	91 f3       	breq	.-28     	; 0x1050 <__divsf3+0x1a>
    106c:	95 1b       	sub	r25, r21
    106e:	55 0b       	sbc	r21, r21
    1070:	bb 27       	eor	r27, r27
    1072:	aa 27       	eor	r26, r26
    1074:	62 17       	cp	r22, r18
    1076:	73 07       	cpc	r23, r19
    1078:	84 07       	cpc	r24, r20
    107a:	38 f0       	brcs	.+14     	; 0x108a <__divsf3_pse+0x26>
    107c:	9f 5f       	subi	r25, 0xFF	; 255
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	44 1f       	adc	r20, r20
    1086:	aa 1f       	adc	r26, r26
    1088:	a9 f3       	breq	.-22     	; 0x1074 <__divsf3_pse+0x10>
    108a:	35 d0       	rcall	.+106    	; 0x10f6 <__divsf3_pse+0x92>
    108c:	0e 2e       	mov	r0, r30
    108e:	3a f0       	brmi	.+14     	; 0x109e <__divsf3_pse+0x3a>
    1090:	e0 e8       	ldi	r30, 0x80	; 128
    1092:	32 d0       	rcall	.+100    	; 0x10f8 <__divsf3_pse+0x94>
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	e6 95       	lsr	r30
    109a:	00 1c       	adc	r0, r0
    109c:	ca f7       	brpl	.-14     	; 0x1090 <__divsf3_pse+0x2c>
    109e:	2b d0       	rcall	.+86     	; 0x10f6 <__divsf3_pse+0x92>
    10a0:	fe 2f       	mov	r31, r30
    10a2:	29 d0       	rcall	.+82     	; 0x10f6 <__divsf3_pse+0x92>
    10a4:	66 0f       	add	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	bb 1f       	adc	r27, r27
    10ac:	26 17       	cp	r18, r22
    10ae:	37 07       	cpc	r19, r23
    10b0:	48 07       	cpc	r20, r24
    10b2:	ab 07       	cpc	r26, r27
    10b4:	b0 e8       	ldi	r27, 0x80	; 128
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__divsf3_pse+0x56>
    10b8:	bb 0b       	sbc	r27, r27
    10ba:	80 2d       	mov	r24, r0
    10bc:	bf 01       	movw	r22, r30
    10be:	ff 27       	eor	r31, r31
    10c0:	93 58       	subi	r25, 0x83	; 131
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	3a f0       	brmi	.+14     	; 0x10d4 <__divsf3_pse+0x70>
    10c6:	9e 3f       	cpi	r25, 0xFE	; 254
    10c8:	51 05       	cpc	r21, r1
    10ca:	78 f0       	brcs	.+30     	; 0x10ea <__divsf3_pse+0x86>
    10cc:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>
    10d0:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    10d4:	5f 3f       	cpi	r21, 0xFF	; 255
    10d6:	e4 f3       	brlt	.-8      	; 0x10d0 <__divsf3_pse+0x6c>
    10d8:	98 3e       	cpi	r25, 0xE8	; 232
    10da:	d4 f3       	brlt	.-12     	; 0x10d0 <__divsf3_pse+0x6c>
    10dc:	86 95       	lsr	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f7 95       	ror	r31
    10e6:	9f 5f       	subi	r25, 0xFF	; 255
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__divsf3_pse+0x78>
    10ea:	88 0f       	add	r24, r24
    10ec:	91 1d       	adc	r25, r1
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	97 f9       	bld	r25, 7
    10f4:	08 95       	ret
    10f6:	e1 e0       	ldi	r30, 0x01	; 1
    10f8:	66 0f       	add	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	bb 1f       	adc	r27, r27
    1100:	62 17       	cp	r22, r18
    1102:	73 07       	cpc	r23, r19
    1104:	84 07       	cpc	r24, r20
    1106:	ba 07       	cpc	r27, r26
    1108:	20 f0       	brcs	.+8      	; 0x1112 <__divsf3_pse+0xae>
    110a:	62 1b       	sub	r22, r18
    110c:	73 0b       	sbc	r23, r19
    110e:	84 0b       	sbc	r24, r20
    1110:	ba 0b       	sbc	r27, r26
    1112:	ee 1f       	adc	r30, r30
    1114:	88 f7       	brcc	.-30     	; 0x10f8 <__divsf3_pse+0x94>
    1116:	e0 95       	com	r30
    1118:	08 95       	ret

0000111a <__fixsfsi>:
    111a:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
    111e:	68 94       	set
    1120:	b1 11       	cpse	r27, r1
    1122:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    1126:	08 95       	ret

00001128 <__fixunssfsi>:
    1128:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_splitA>
    112c:	88 f0       	brcs	.+34     	; 0x1150 <__fixunssfsi+0x28>
    112e:	9f 57       	subi	r25, 0x7F	; 127
    1130:	98 f0       	brcs	.+38     	; 0x1158 <__fixunssfsi+0x30>
    1132:	b9 2f       	mov	r27, r25
    1134:	99 27       	eor	r25, r25
    1136:	b7 51       	subi	r27, 0x17	; 23
    1138:	b0 f0       	brcs	.+44     	; 0x1166 <__fixunssfsi+0x3e>
    113a:	e1 f0       	breq	.+56     	; 0x1174 <__fixunssfsi+0x4c>
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	88 1f       	adc	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	1a f0       	brmi	.+6      	; 0x114c <__fixunssfsi+0x24>
    1146:	ba 95       	dec	r27
    1148:	c9 f7       	brne	.-14     	; 0x113c <__fixunssfsi+0x14>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <__fixunssfsi+0x4c>
    114c:	b1 30       	cpi	r27, 0x01	; 1
    114e:	91 f0       	breq	.+36     	; 0x1174 <__fixunssfsi+0x4c>
    1150:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fp_zero>
    1154:	b1 e0       	ldi	r27, 0x01	; 1
    1156:	08 95       	ret
    1158:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_zero>
    115c:	67 2f       	mov	r22, r23
    115e:	78 2f       	mov	r23, r24
    1160:	88 27       	eor	r24, r24
    1162:	b8 5f       	subi	r27, 0xF8	; 248
    1164:	39 f0       	breq	.+14     	; 0x1174 <__fixunssfsi+0x4c>
    1166:	b9 3f       	cpi	r27, 0xF9	; 249
    1168:	cc f3       	brlt	.-14     	; 0x115c <__fixunssfsi+0x34>
    116a:	86 95       	lsr	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b3 95       	inc	r27
    1172:	d9 f7       	brne	.-10     	; 0x116a <__fixunssfsi+0x42>
    1174:	3e f4       	brtc	.+14     	; 0x1184 <__fixunssfsi+0x5c>
    1176:	90 95       	com	r25
    1178:	80 95       	com	r24
    117a:	70 95       	com	r23
    117c:	61 95       	neg	r22
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__floatunsisf>:
    1186:	e8 94       	clt
    1188:	09 c0       	rjmp	.+18     	; 0x119c <__floatsisf+0x12>

0000118a <__floatsisf>:
    118a:	97 fb       	bst	r25, 7
    118c:	3e f4       	brtc	.+14     	; 0x119c <__floatsisf+0x12>
    118e:	90 95       	com	r25
    1190:	80 95       	com	r24
    1192:	70 95       	com	r23
    1194:	61 95       	neg	r22
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	8f 4f       	sbci	r24, 0xFF	; 255
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	99 23       	and	r25, r25
    119e:	a9 f0       	breq	.+42     	; 0x11ca <__floatsisf+0x40>
    11a0:	f9 2f       	mov	r31, r25
    11a2:	96 e9       	ldi	r25, 0x96	; 150
    11a4:	bb 27       	eor	r27, r27
    11a6:	93 95       	inc	r25
    11a8:	f6 95       	lsr	r31
    11aa:	87 95       	ror	r24
    11ac:	77 95       	ror	r23
    11ae:	67 95       	ror	r22
    11b0:	b7 95       	ror	r27
    11b2:	f1 11       	cpse	r31, r1
    11b4:	f8 cf       	rjmp	.-16     	; 0x11a6 <__floatsisf+0x1c>
    11b6:	fa f4       	brpl	.+62     	; 0x11f6 <__floatsisf+0x6c>
    11b8:	bb 0f       	add	r27, r27
    11ba:	11 f4       	brne	.+4      	; 0x11c0 <__floatsisf+0x36>
    11bc:	60 ff       	sbrs	r22, 0
    11be:	1b c0       	rjmp	.+54     	; 0x11f6 <__floatsisf+0x6c>
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	16 c0       	rjmp	.+44     	; 0x11f6 <__floatsisf+0x6c>
    11ca:	88 23       	and	r24, r24
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <__floatsisf+0x48>
    11ce:	96 e9       	ldi	r25, 0x96	; 150
    11d0:	11 c0       	rjmp	.+34     	; 0x11f4 <__floatsisf+0x6a>
    11d2:	77 23       	and	r23, r23
    11d4:	21 f0       	breq	.+8      	; 0x11de <__floatsisf+0x54>
    11d6:	9e e8       	ldi	r25, 0x8E	; 142
    11d8:	87 2f       	mov	r24, r23
    11da:	76 2f       	mov	r23, r22
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <__floatsisf+0x5e>
    11de:	66 23       	and	r22, r22
    11e0:	71 f0       	breq	.+28     	; 0x11fe <__floatsisf+0x74>
    11e2:	96 e8       	ldi	r25, 0x86	; 134
    11e4:	86 2f       	mov	r24, r22
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	2a f0       	brmi	.+10     	; 0x11f6 <__floatsisf+0x6c>
    11ec:	9a 95       	dec	r25
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	da f7       	brpl	.-10     	; 0x11ec <__floatsisf+0x62>
    11f6:	88 0f       	add	r24, r24
    11f8:	96 95       	lsr	r25
    11fa:	87 95       	ror	r24
    11fc:	97 f9       	bld	r25, 7
    11fe:	08 95       	ret

00001200 <__fp_inf>:
    1200:	97 f9       	bld	r25, 7
    1202:	9f 67       	ori	r25, 0x7F	; 127
    1204:	80 e8       	ldi	r24, 0x80	; 128
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	08 95       	ret

0000120c <__fp_nan>:
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	80 ec       	ldi	r24, 0xC0	; 192
    1210:	08 95       	ret

00001212 <__fp_pscA>:
    1212:	00 24       	eor	r0, r0
    1214:	0a 94       	dec	r0
    1216:	16 16       	cp	r1, r22
    1218:	17 06       	cpc	r1, r23
    121a:	18 06       	cpc	r1, r24
    121c:	09 06       	cpc	r0, r25
    121e:	08 95       	ret

00001220 <__fp_pscB>:
    1220:	00 24       	eor	r0, r0
    1222:	0a 94       	dec	r0
    1224:	12 16       	cp	r1, r18
    1226:	13 06       	cpc	r1, r19
    1228:	14 06       	cpc	r1, r20
    122a:	05 06       	cpc	r0, r21
    122c:	08 95       	ret

0000122e <__fp_round>:
    122e:	09 2e       	mov	r0, r25
    1230:	03 94       	inc	r0
    1232:	00 0c       	add	r0, r0
    1234:	11 f4       	brne	.+4      	; 0x123a <__fp_round+0xc>
    1236:	88 23       	and	r24, r24
    1238:	52 f0       	brmi	.+20     	; 0x124e <__fp_round+0x20>
    123a:	bb 0f       	add	r27, r27
    123c:	40 f4       	brcc	.+16     	; 0x124e <__fp_round+0x20>
    123e:	bf 2b       	or	r27, r31
    1240:	11 f4       	brne	.+4      	; 0x1246 <__fp_round+0x18>
    1242:	60 ff       	sbrs	r22, 0
    1244:	04 c0       	rjmp	.+8      	; 0x124e <__fp_round+0x20>
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__fp_split3>:
    1250:	57 fd       	sbrc	r21, 7
    1252:	90 58       	subi	r25, 0x80	; 128
    1254:	44 0f       	add	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	59 f0       	breq	.+22     	; 0x1270 <__fp_splitA+0x10>
    125a:	5f 3f       	cpi	r21, 0xFF	; 255
    125c:	71 f0       	breq	.+28     	; 0x127a <__fp_splitA+0x1a>
    125e:	47 95       	ror	r20

00001260 <__fp_splitA>:
    1260:	88 0f       	add	r24, r24
    1262:	97 fb       	bst	r25, 7
    1264:	99 1f       	adc	r25, r25
    1266:	61 f0       	breq	.+24     	; 0x1280 <__fp_splitA+0x20>
    1268:	9f 3f       	cpi	r25, 0xFF	; 255
    126a:	79 f0       	breq	.+30     	; 0x128a <__fp_splitA+0x2a>
    126c:	87 95       	ror	r24
    126e:	08 95       	ret
    1270:	12 16       	cp	r1, r18
    1272:	13 06       	cpc	r1, r19
    1274:	14 06       	cpc	r1, r20
    1276:	55 1f       	adc	r21, r21
    1278:	f2 cf       	rjmp	.-28     	; 0x125e <__fp_split3+0xe>
    127a:	46 95       	lsr	r20
    127c:	f1 df       	rcall	.-30     	; 0x1260 <__fp_splitA>
    127e:	08 c0       	rjmp	.+16     	; 0x1290 <__fp_splitA+0x30>
    1280:	16 16       	cp	r1, r22
    1282:	17 06       	cpc	r1, r23
    1284:	18 06       	cpc	r1, r24
    1286:	99 1f       	adc	r25, r25
    1288:	f1 cf       	rjmp	.-30     	; 0x126c <__fp_splitA+0xc>
    128a:	86 95       	lsr	r24
    128c:	71 05       	cpc	r23, r1
    128e:	61 05       	cpc	r22, r1
    1290:	08 94       	sec
    1292:	08 95       	ret

00001294 <__fp_zero>:
    1294:	e8 94       	clt

00001296 <__fp_szero>:
    1296:	bb 27       	eor	r27, r27
    1298:	66 27       	eor	r22, r22
    129a:	77 27       	eor	r23, r23
    129c:	cb 01       	movw	r24, r22
    129e:	97 f9       	bld	r25, 7
    12a0:	08 95       	ret

000012a2 <__mulsf3>:
    12a2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__mulsf3x>
    12a6:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>
    12aa:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
    12ae:	38 f0       	brcs	.+14     	; 0x12be <__mulsf3+0x1c>
    12b0:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__mulsf3+0x1c>
    12b6:	95 23       	and	r25, r21
    12b8:	11 f0       	breq	.+4      	; 0x12be <__mulsf3+0x1c>
    12ba:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>
    12be:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_nan>
    12c2:	11 24       	eor	r1, r1
    12c4:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>

000012c8 <__mulsf3x>:
    12c8:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
    12cc:	70 f3       	brcs	.-36     	; 0x12aa <__mulsf3+0x8>

000012ce <__mulsf3_pse>:
    12ce:	95 9f       	mul	r25, r21
    12d0:	c1 f3       	breq	.-16     	; 0x12c2 <__mulsf3+0x20>
    12d2:	95 0f       	add	r25, r21
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	55 1f       	adc	r21, r21
    12d8:	62 9f       	mul	r22, r18
    12da:	f0 01       	movw	r30, r0
    12dc:	72 9f       	mul	r23, r18
    12de:	bb 27       	eor	r27, r27
    12e0:	f0 0d       	add	r31, r0
    12e2:	b1 1d       	adc	r27, r1
    12e4:	63 9f       	mul	r22, r19
    12e6:	aa 27       	eor	r26, r26
    12e8:	f0 0d       	add	r31, r0
    12ea:	b1 1d       	adc	r27, r1
    12ec:	aa 1f       	adc	r26, r26
    12ee:	64 9f       	mul	r22, r20
    12f0:	66 27       	eor	r22, r22
    12f2:	b0 0d       	add	r27, r0
    12f4:	a1 1d       	adc	r26, r1
    12f6:	66 1f       	adc	r22, r22
    12f8:	82 9f       	mul	r24, r18
    12fa:	22 27       	eor	r18, r18
    12fc:	b0 0d       	add	r27, r0
    12fe:	a1 1d       	adc	r26, r1
    1300:	62 1f       	adc	r22, r18
    1302:	73 9f       	mul	r23, r19
    1304:	b0 0d       	add	r27, r0
    1306:	a1 1d       	adc	r26, r1
    1308:	62 1f       	adc	r22, r18
    130a:	83 9f       	mul	r24, r19
    130c:	a0 0d       	add	r26, r0
    130e:	61 1d       	adc	r22, r1
    1310:	22 1f       	adc	r18, r18
    1312:	74 9f       	mul	r23, r20
    1314:	33 27       	eor	r19, r19
    1316:	a0 0d       	add	r26, r0
    1318:	61 1d       	adc	r22, r1
    131a:	23 1f       	adc	r18, r19
    131c:	84 9f       	mul	r24, r20
    131e:	60 0d       	add	r22, r0
    1320:	21 1d       	adc	r18, r1
    1322:	82 2f       	mov	r24, r18
    1324:	76 2f       	mov	r23, r22
    1326:	6a 2f       	mov	r22, r26
    1328:	11 24       	eor	r1, r1
    132a:	9f 57       	subi	r25, 0x7F	; 127
    132c:	50 40       	sbci	r21, 0x00	; 0
    132e:	9a f0       	brmi	.+38     	; 0x1356 <__mulsf3_pse+0x88>
    1330:	f1 f0       	breq	.+60     	; 0x136e <__mulsf3_pse+0xa0>
    1332:	88 23       	and	r24, r24
    1334:	4a f0       	brmi	.+18     	; 0x1348 <__mulsf3_pse+0x7a>
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	bb 1f       	adc	r27, r27
    133c:	66 1f       	adc	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	91 50       	subi	r25, 0x01	; 1
    1344:	50 40       	sbci	r21, 0x00	; 0
    1346:	a9 f7       	brne	.-22     	; 0x1332 <__mulsf3_pse+0x64>
    1348:	9e 3f       	cpi	r25, 0xFE	; 254
    134a:	51 05       	cpc	r21, r1
    134c:	80 f0       	brcs	.+32     	; 0x136e <__mulsf3_pse+0xa0>
    134e:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>
    1352:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	e4 f3       	brlt	.-8      	; 0x1352 <__mulsf3_pse+0x84>
    135a:	98 3e       	cpi	r25, 0xE8	; 232
    135c:	d4 f3       	brlt	.-12     	; 0x1352 <__mulsf3_pse+0x84>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b7 95       	ror	r27
    1366:	f7 95       	ror	r31
    1368:	e7 95       	ror	r30
    136a:	9f 5f       	subi	r25, 0xFF	; 255
    136c:	c1 f7       	brne	.-16     	; 0x135e <__mulsf3_pse+0x90>
    136e:	fe 2b       	or	r31, r30
    1370:	88 0f       	add	r24, r24
    1372:	91 1d       	adc	r25, r1
    1374:	96 95       	lsr	r25
    1376:	87 95       	ror	r24
    1378:	97 f9       	bld	r25, 7
    137a:	08 95       	ret

0000137c <pow>:
    137c:	fa 01       	movw	r30, r20
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	30 96       	adiw	r30, 0x00	; 0
    1384:	21 05       	cpc	r18, r1
    1386:	31 05       	cpc	r19, r1
    1388:	a1 f1       	breq	.+104    	; 0x13f2 <pow+0x76>
    138a:	61 15       	cp	r22, r1
    138c:	71 05       	cpc	r23, r1
    138e:	61 f4       	brne	.+24     	; 0x13a8 <pow+0x2c>
    1390:	80 38       	cpi	r24, 0x80	; 128
    1392:	bf e3       	ldi	r27, 0x3F	; 63
    1394:	9b 07       	cpc	r25, r27
    1396:	49 f1       	breq	.+82     	; 0x13ea <pow+0x6e>
    1398:	68 94       	set
    139a:	90 38       	cpi	r25, 0x80	; 128
    139c:	81 05       	cpc	r24, r1
    139e:	61 f0       	breq	.+24     	; 0x13b8 <pow+0x3c>
    13a0:	80 38       	cpi	r24, 0x80	; 128
    13a2:	bf ef       	ldi	r27, 0xFF	; 255
    13a4:	9b 07       	cpc	r25, r27
    13a6:	41 f0       	breq	.+16     	; 0x13b8 <pow+0x3c>
    13a8:	99 23       	and	r25, r25
    13aa:	4a f5       	brpl	.+82     	; 0x13fe <pow+0x82>
    13ac:	ff 3f       	cpi	r31, 0xFF	; 255
    13ae:	e1 05       	cpc	r30, r1
    13b0:	31 05       	cpc	r19, r1
    13b2:	21 05       	cpc	r18, r1
    13b4:	19 f1       	breq	.+70     	; 0x13fc <pow+0x80>
    13b6:	e8 94       	clt
    13b8:	08 94       	sec
    13ba:	e7 95       	ror	r30
    13bc:	d9 01       	movw	r26, r18
    13be:	aa 23       	and	r26, r26
    13c0:	29 f4       	brne	.+10     	; 0x13cc <pow+0x50>
    13c2:	ab 2f       	mov	r26, r27
    13c4:	be 2f       	mov	r27, r30
    13c6:	f8 5f       	subi	r31, 0xF8	; 248
    13c8:	d0 f3       	brcs	.-12     	; 0x13be <pow+0x42>
    13ca:	10 c0       	rjmp	.+32     	; 0x13ec <pow+0x70>
    13cc:	ff 5f       	subi	r31, 0xFF	; 255
    13ce:	70 f4       	brcc	.+28     	; 0x13ec <pow+0x70>
    13d0:	a6 95       	lsr	r26
    13d2:	e0 f7       	brcc	.-8      	; 0x13cc <pow+0x50>
    13d4:	f7 39       	cpi	r31, 0x97	; 151
    13d6:	50 f0       	brcs	.+20     	; 0x13ec <pow+0x70>
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <pow+0x64>
    13da:	ff 3a       	cpi	r31, 0xAF	; 175
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <pow+0x70>
    13de:	9f 77       	andi	r25, 0x7F	; 127
    13e0:	9f 93       	push	r25
    13e2:	0d d0       	rcall	.+26     	; 0x13fe <pow+0x82>
    13e4:	0f 90       	pop	r0
    13e6:	07 fc       	sbrc	r0, 7
    13e8:	90 58       	subi	r25, 0x80	; 128
    13ea:	08 95       	ret
    13ec:	46 f0       	brts	.+16     	; 0x13fe <pow+0x82>
    13ee:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_nan>
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	80 e8       	ldi	r24, 0x80	; 128
    13f8:	9f e3       	ldi	r25, 0x3F	; 63
    13fa:	08 95       	ret
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	9f 77       	andi	r25, 0x7F	; 127
    1400:	5f 93       	push	r21
    1402:	4f 93       	push	r20
    1404:	3f 93       	push	r19
    1406:	2f 93       	push	r18
    1408:	0e 94 b9 0a 	call	0x1572	; 0x1572 <log>
    140c:	2f 91       	pop	r18
    140e:	3f 91       	pop	r19
    1410:	4f 91       	pop	r20
    1412:	5f 91       	pop	r21
    1414:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
    1418:	0c 94 16 0a 	jmp	0x142c	; 0x142c <exp>
    141c:	29 f4       	brne	.+10     	; 0x1428 <pow+0xac>
    141e:	16 f0       	brts	.+4      	; 0x1424 <pow+0xa8>
    1420:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>
    1424:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_zero>
    1428:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_nan>

0000142c <exp>:
    142c:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_splitA>
    1430:	a8 f3       	brcs	.-22     	; 0x141c <pow+0xa0>
    1432:	96 38       	cpi	r25, 0x86	; 134
    1434:	a0 f7       	brcc	.-24     	; 0x141e <pow+0xa2>
    1436:	07 f8       	bld	r0, 7
    1438:	0f 92       	push	r0
    143a:	e8 94       	clt
    143c:	2b e3       	ldi	r18, 0x3B	; 59
    143e:	3a ea       	ldi	r19, 0xAA	; 170
    1440:	48 eb       	ldi	r20, 0xB8	; 184
    1442:	5f e7       	ldi	r21, 0x7F	; 127
    1444:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3_pse>
    1448:	0f 92       	push	r0
    144a:	0f 92       	push	r0
    144c:	0f 92       	push	r0
    144e:	4d b7       	in	r20, 0x3d	; 61
    1450:	5e b7       	in	r21, 0x3e	; 62
    1452:	0f 92       	push	r0
    1454:	0e 94 01 0b 	call	0x1602	; 0x1602 <modf>
    1458:	e0 e7       	ldi	r30, 0x70	; 112
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_powser>
    1460:	4f 91       	pop	r20
    1462:	5f 91       	pop	r21
    1464:	ef 91       	pop	r30
    1466:	ff 91       	pop	r31
    1468:	e5 95       	asr	r30
    146a:	ee 1f       	adc	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	49 f0       	breq	.+18     	; 0x1482 <exp+0x56>
    1470:	fe 57       	subi	r31, 0x7E	; 126
    1472:	e0 68       	ori	r30, 0x80	; 128
    1474:	44 27       	eor	r20, r20
    1476:	ee 0f       	add	r30, r30
    1478:	44 1f       	adc	r20, r20
    147a:	fa 95       	dec	r31
    147c:	e1 f7       	brne	.-8      	; 0x1476 <exp+0x4a>
    147e:	41 95       	neg	r20
    1480:	55 0b       	sbc	r21, r21
    1482:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <ldexp>
    1486:	0f 90       	pop	r0
    1488:	07 fe       	sbrs	r0, 7
    148a:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <inverse>
    148e:	08 95       	ret

00001490 <__fp_powser>:
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	1f 93       	push	r17
    1496:	0f 93       	push	r16
    1498:	ff 92       	push	r15
    149a:	ef 92       	push	r14
    149c:	df 92       	push	r13
    149e:	7b 01       	movw	r14, r22
    14a0:	8c 01       	movw	r16, r24
    14a2:	68 94       	set
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <__fp_powser+0x22>
    14a6:	da 2e       	mov	r13, r26
    14a8:	ef 01       	movw	r28, r30
    14aa:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__mulsf3x>
    14ae:	fe 01       	movw	r30, r28
    14b0:	e8 94       	clt
    14b2:	a5 91       	lpm	r26, Z+
    14b4:	25 91       	lpm	r18, Z+
    14b6:	35 91       	lpm	r19, Z+
    14b8:	45 91       	lpm	r20, Z+
    14ba:	55 91       	lpm	r21, Z+
    14bc:	a6 f3       	brts	.-24     	; 0x14a6 <__fp_powser+0x16>
    14be:	ef 01       	movw	r28, r30
    14c0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3x>
    14c4:	fe 01       	movw	r30, r28
    14c6:	97 01       	movw	r18, r14
    14c8:	a8 01       	movw	r20, r16
    14ca:	da 94       	dec	r13
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <__fp_powser+0x18>
    14ce:	df 90       	pop	r13
    14d0:	ef 90       	pop	r14
    14d2:	ff 90       	pop	r15
    14d4:	0f 91       	pop	r16
    14d6:	1f 91       	pop	r17
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <inverse>:
    14de:	9b 01       	movw	r18, r22
    14e0:	ac 01       	movw	r20, r24
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	9f e3       	ldi	r25, 0x3F	; 63
    14ea:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__divsf3>
    14ee:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>
    14f2:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_mpack>

000014f6 <ldexp>:
    14f6:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_splitA>
    14fa:	d8 f3       	brcs	.-10     	; 0x14f2 <inverse+0x14>
    14fc:	99 23       	and	r25, r25
    14fe:	c9 f3       	breq	.-14     	; 0x14f2 <inverse+0x14>
    1500:	94 0f       	add	r25, r20
    1502:	51 1d       	adc	r21, r1
    1504:	a3 f3       	brvs	.-24     	; 0x14ee <inverse+0x10>
    1506:	91 50       	subi	r25, 0x01	; 1
    1508:	50 40       	sbci	r21, 0x00	; 0
    150a:	94 f0       	brlt	.+36     	; 0x1530 <ldexp+0x3a>
    150c:	59 f0       	breq	.+22     	; 0x1524 <ldexp+0x2e>
    150e:	88 23       	and	r24, r24
    1510:	32 f0       	brmi	.+12     	; 0x151e <ldexp+0x28>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	91 50       	subi	r25, 0x01	; 1
    151a:	50 40       	sbci	r21, 0x00	; 0
    151c:	c1 f7       	brne	.-16     	; 0x150e <ldexp+0x18>
    151e:	9e 3f       	cpi	r25, 0xFE	; 254
    1520:	51 05       	cpc	r21, r1
    1522:	2c f7       	brge	.-54     	; 0x14ee <inverse+0x10>
    1524:	88 0f       	add	r24, r24
    1526:	91 1d       	adc	r25, r1
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	97 f9       	bld	r25, 7
    152e:	08 95       	ret
    1530:	5f 3f       	cpi	r21, 0xFF	; 255
    1532:	ac f0       	brlt	.+42     	; 0x155e <ldexp+0x68>
    1534:	98 3e       	cpi	r25, 0xE8	; 232
    1536:	9c f0       	brlt	.+38     	; 0x155e <ldexp+0x68>
    1538:	bb 27       	eor	r27, r27
    153a:	86 95       	lsr	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	b7 95       	ror	r27
    1542:	08 f4       	brcc	.+2      	; 0x1546 <ldexp+0x50>
    1544:	b1 60       	ori	r27, 0x01	; 1
    1546:	93 95       	inc	r25
    1548:	c1 f7       	brne	.-16     	; 0x153a <ldexp+0x44>
    154a:	bb 0f       	add	r27, r27
    154c:	58 f7       	brcc	.-42     	; 0x1524 <ldexp+0x2e>
    154e:	11 f4       	brne	.+4      	; 0x1554 <ldexp+0x5e>
    1550:	60 ff       	sbrs	r22, 0
    1552:	e8 cf       	rjmp	.-48     	; 0x1524 <ldexp+0x2e>
    1554:	6f 5f       	subi	r22, 0xFF	; 255
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	e3 cf       	rjmp	.-58     	; 0x1524 <ldexp+0x2e>
    155e:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    1562:	16 f0       	brts	.+4      	; 0x1568 <ldexp+0x72>
    1564:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_mpack>
    1568:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_nan>
    156c:	68 94       	set
    156e:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_inf>

00001572 <log>:
    1572:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_splitA>
    1576:	a8 f3       	brcs	.-22     	; 0x1562 <ldexp+0x6c>
    1578:	99 23       	and	r25, r25
    157a:	c1 f3       	breq	.-16     	; 0x156c <ldexp+0x76>
    157c:	ae f3       	brts	.-22     	; 0x1568 <ldexp+0x72>
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	1f 93       	push	r17
    1584:	0f 93       	push	r16
    1586:	ff 92       	push	r15
    1588:	c9 2f       	mov	r28, r25
    158a:	dd 27       	eor	r29, r29
    158c:	88 23       	and	r24, r24
    158e:	2a f0       	brmi	.+10     	; 0x159a <log+0x28>
    1590:	21 97       	sbiw	r28, 0x01	; 1
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	da f7       	brpl	.-10     	; 0x1590 <log+0x1e>
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f eb       	ldi	r21, 0xBF	; 191
    15a2:	9f e3       	ldi	r25, 0x3F	; 63
    15a4:	88 39       	cpi	r24, 0x98	; 152
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <log+0x3e>
    15a8:	80 3e       	cpi	r24, 0xE0	; 224
    15aa:	38 f0       	brcs	.+14     	; 0x15ba <log+0x48>
    15ac:	21 96       	adiw	r28, 0x01	; 1
    15ae:	8f 77       	andi	r24, 0x7F	; 127
    15b0:	0e 94 af 07 	call	0xf5e	; 0xf5e <__addsf3>
    15b4:	e8 e9       	ldi	r30, 0x98	; 152
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <log+0x50>
    15ba:	0e 94 af 07 	call	0xf5e	; 0xf5e <__addsf3>
    15be:	e5 ec       	ldi	r30, 0xC5	; 197
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_powser>
    15c6:	8b 01       	movw	r16, r22
    15c8:	be 01       	movw	r22, r28
    15ca:	ec 01       	movw	r28, r24
    15cc:	fb 2e       	mov	r15, r27
    15ce:	6f 57       	subi	r22, 0x7F	; 127
    15d0:	71 09       	sbc	r23, r1
    15d2:	75 95       	asr	r23
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 0b       	sbc	r24, r24
    15d8:	99 0b       	sbc	r25, r25
    15da:	0e 94 c5 08 	call	0x118a	; 0x118a <__floatsisf>
    15de:	28 e1       	ldi	r18, 0x18	; 24
    15e0:	32 e7       	ldi	r19, 0x72	; 114
    15e2:	41 e3       	ldi	r20, 0x31	; 49
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__mulsf3x>
    15ea:	af 2d       	mov	r26, r15
    15ec:	98 01       	movw	r18, r16
    15ee:	ae 01       	movw	r20, r28
    15f0:	ff 90       	pop	r15
    15f2:	0f 91       	pop	r16
    15f4:	1f 91       	pop	r17
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__addsf3x>
    15fe:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>

00001602 <modf>:
    1602:	fa 01       	movw	r30, r20
    1604:	dc 01       	movw	r26, r24
    1606:	aa 0f       	add	r26, r26
    1608:	bb 1f       	adc	r27, r27
    160a:	9b 01       	movw	r18, r22
    160c:	ac 01       	movw	r20, r24
    160e:	bf 57       	subi	r27, 0x7F	; 127
    1610:	28 f4       	brcc	.+10     	; 0x161c <modf+0x1a>
    1612:	22 27       	eor	r18, r18
    1614:	33 27       	eor	r19, r19
    1616:	44 27       	eor	r20, r20
    1618:	50 78       	andi	r21, 0x80	; 128
    161a:	20 c0       	rjmp	.+64     	; 0x165c <modf+0x5a>
    161c:	b7 51       	subi	r27, 0x17	; 23
    161e:	90 f4       	brcc	.+36     	; 0x1644 <modf+0x42>
    1620:	ab 2f       	mov	r26, r27
    1622:	00 24       	eor	r0, r0
    1624:	46 95       	lsr	r20
    1626:	37 95       	ror	r19
    1628:	27 95       	ror	r18
    162a:	01 1c       	adc	r0, r1
    162c:	a3 95       	inc	r26
    162e:	d2 f3       	brmi	.-12     	; 0x1624 <modf+0x22>
    1630:	00 20       	and	r0, r0
    1632:	71 f0       	breq	.+28     	; 0x1650 <modf+0x4e>
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	44 1f       	adc	r20, r20
    163a:	b3 95       	inc	r27
    163c:	da f3       	brmi	.-10     	; 0x1634 <modf+0x32>
    163e:	0e d0       	rcall	.+28     	; 0x165c <modf+0x5a>
    1640:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__subsf3>
    1644:	61 30       	cpi	r22, 0x01	; 1
    1646:	71 05       	cpc	r23, r1
    1648:	a0 e8       	ldi	r26, 0x80	; 128
    164a:	8a 07       	cpc	r24, r26
    164c:	b9 46       	sbci	r27, 0x69	; 105
    164e:	30 f4       	brcc	.+12     	; 0x165c <modf+0x5a>
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	66 27       	eor	r22, r22
    1656:	77 27       	eor	r23, r23
    1658:	88 27       	eor	r24, r24
    165a:	90 78       	andi	r25, 0x80	; 128
    165c:	30 96       	adiw	r30, 0x00	; 0
    165e:	21 f0       	breq	.+8      	; 0x1668 <modf+0x66>
    1660:	20 83       	st	Z, r18
    1662:	31 83       	std	Z+1, r19	; 0x01
    1664:	42 83       	std	Z+2, r20	; 0x02
    1666:	53 83       	std	Z+3, r21	; 0x03
    1668:	08 95       	ret

0000166a <__fp_mpack>:
    166a:	9f 3f       	cpi	r25, 0xFF	; 255
    166c:	31 f0       	breq	.+12     	; 0x167a <__fp_mpack_finite+0xc>

0000166e <__fp_mpack_finite>:
    166e:	91 50       	subi	r25, 0x01	; 1
    1670:	20 f4       	brcc	.+8      	; 0x167a <__fp_mpack_finite+0xc>
    1672:	87 95       	ror	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	88 0f       	add	r24, r24
    167c:	91 1d       	adc	r25, r1
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <__divmodhi4>:
    1686:	97 fb       	bst	r25, 7
    1688:	07 2e       	mov	r0, r23
    168a:	16 f4       	brtc	.+4      	; 0x1690 <__divmodhi4+0xa>
    168c:	00 94       	com	r0
    168e:	07 d0       	rcall	.+14     	; 0x169e <__divmodhi4_neg1>
    1690:	77 fd       	sbrc	r23, 7
    1692:	09 d0       	rcall	.+18     	; 0x16a6 <__divmodhi4_neg2>
    1694:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__udivmodhi4>
    1698:	07 fc       	sbrc	r0, 7
    169a:	05 d0       	rcall	.+10     	; 0x16a6 <__divmodhi4_neg2>
    169c:	3e f4       	brtc	.+14     	; 0x16ac <__divmodhi4_exit>

0000169e <__divmodhi4_neg1>:
    169e:	90 95       	com	r25
    16a0:	81 95       	neg	r24
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	08 95       	ret

000016a6 <__divmodhi4_neg2>:
    16a6:	70 95       	com	r23
    16a8:	61 95       	neg	r22
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255

000016ac <__divmodhi4_exit>:
    16ac:	08 95       	ret

000016ae <__udivmodhi4>:
    16ae:	aa 1b       	sub	r26, r26
    16b0:	bb 1b       	sub	r27, r27
    16b2:	51 e1       	ldi	r21, 0x11	; 17
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <__udivmodhi4_ep>

000016b6 <__udivmodhi4_loop>:
    16b6:	aa 1f       	adc	r26, r26
    16b8:	bb 1f       	adc	r27, r27
    16ba:	a6 17       	cp	r26, r22
    16bc:	b7 07       	cpc	r27, r23
    16be:	10 f0       	brcs	.+4      	; 0x16c4 <__udivmodhi4_ep>
    16c0:	a6 1b       	sub	r26, r22
    16c2:	b7 0b       	sbc	r27, r23

000016c4 <__udivmodhi4_ep>:
    16c4:	88 1f       	adc	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	5a 95       	dec	r21
    16ca:	a9 f7       	brne	.-22     	; 0x16b6 <__udivmodhi4_loop>
    16cc:	80 95       	com	r24
    16ce:	90 95       	com	r25
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	08 95       	ret

000016d6 <fdevopen>:
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	31 f4       	brne	.+12     	; 0x16ee <fdevopen+0x18>
    16e2:	61 15       	cp	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	19 f4       	brne	.+6      	; 0x16ee <fdevopen+0x18>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	3a c0       	rjmp	.+116    	; 0x1762 <fdevopen+0x8c>
    16ee:	8b 01       	movw	r16, r22
    16f0:	ec 01       	movw	r28, r24
    16f2:	6e e0       	ldi	r22, 0x0E	; 14
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <calloc>
    16fe:	fc 01       	movw	r30, r24
    1700:	89 2b       	or	r24, r25
    1702:	91 f3       	breq	.-28     	; 0x16e8 <fdevopen+0x12>
    1704:	80 e8       	ldi	r24, 0x80	; 128
    1706:	83 83       	std	Z+3, r24	; 0x03
    1708:	01 15       	cp	r16, r1
    170a:	11 05       	cpc	r17, r1
    170c:	71 f0       	breq	.+28     	; 0x172a <fdevopen+0x54>
    170e:	13 87       	std	Z+11, r17	; 0x0b
    1710:	02 87       	std	Z+10, r16	; 0x0a
    1712:	81 e8       	ldi	r24, 0x81	; 129
    1714:	83 83       	std	Z+3, r24	; 0x03
    1716:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <__iob>
    171a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <__iob+0x1>
    171e:	89 2b       	or	r24, r25
    1720:	21 f4       	brne	.+8      	; 0x172a <fdevopen+0x54>
    1722:	f0 93 04 02 	sts	0x0204, r31	; 0x800204 <__iob+0x1>
    1726:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__iob>
    172a:	20 97       	sbiw	r28, 0x00	; 0
    172c:	c9 f0       	breq	.+50     	; 0x1760 <fdevopen+0x8a>
    172e:	d1 87       	std	Z+9, r29	; 0x09
    1730:	c0 87       	std	Z+8, r28	; 0x08
    1732:	83 81       	ldd	r24, Z+3	; 0x03
    1734:	82 60       	ori	r24, 0x02	; 2
    1736:	83 83       	std	Z+3, r24	; 0x03
    1738:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <__iob+0x2>
    173c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__iob+0x3>
    1740:	89 2b       	or	r24, r25
    1742:	71 f4       	brne	.+28     	; 0x1760 <fdevopen+0x8a>
    1744:	f0 93 06 02 	sts	0x0206, r31	; 0x800206 <__iob+0x3>
    1748:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <__iob+0x2>
    174c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <__iob+0x4>
    1750:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <__iob+0x5>
    1754:	89 2b       	or	r24, r25
    1756:	21 f4       	brne	.+8      	; 0x1760 <fdevopen+0x8a>
    1758:	f0 93 08 02 	sts	0x0208, r31	; 0x800208 <__iob+0x5>
    175c:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <__iob+0x4>
    1760:	cf 01       	movw	r24, r30
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <printf>:
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ec eb       	ldi	r30, 0xBC	; 188
    1772:	fb e0       	ldi	r31, 0x0B	; 11
    1774:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__prologue_saves__+0x20>
    1778:	ae 01       	movw	r20, r28
    177a:	4b 5f       	subi	r20, 0xFB	; 251
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	fa 01       	movw	r30, r20
    1780:	61 91       	ld	r22, Z+
    1782:	71 91       	ld	r23, Z+
    1784:	af 01       	movw	r20, r30
    1786:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <__iob+0x2>
    178a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__iob+0x3>
    178e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <vfprintf>
    1792:	e2 e0       	ldi	r30, 0x02	; 2
    1794:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__epilogue_restores__+0x20>

00001798 <puts>:
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <__iob+0x2>
    17a4:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <__iob+0x3>
    17a8:	23 81       	ldd	r18, Z+3	; 0x03
    17aa:	21 ff       	sbrs	r18, 1
    17ac:	1b c0       	rjmp	.+54     	; 0x17e4 <puts+0x4c>
    17ae:	8c 01       	movw	r16, r24
    17b0:	d0 e0       	ldi	r29, 0x00	; 0
    17b2:	c0 e0       	ldi	r28, 0x00	; 0
    17b4:	f8 01       	movw	r30, r16
    17b6:	81 91       	ld	r24, Z+
    17b8:	8f 01       	movw	r16, r30
    17ba:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <__iob+0x2>
    17be:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <__iob+0x3>
    17c2:	db 01       	movw	r26, r22
    17c4:	18 96       	adiw	r26, 0x08	; 8
    17c6:	ed 91       	ld	r30, X+
    17c8:	fc 91       	ld	r31, X
    17ca:	19 97       	sbiw	r26, 0x09	; 9
    17cc:	88 23       	and	r24, r24
    17ce:	31 f0       	breq	.+12     	; 0x17dc <puts+0x44>
    17d0:	09 95       	icall
    17d2:	89 2b       	or	r24, r25
    17d4:	79 f3       	breq	.-34     	; 0x17b4 <puts+0x1c>
    17d6:	df ef       	ldi	r29, 0xFF	; 255
    17d8:	cf ef       	ldi	r28, 0xFF	; 255
    17da:	ec cf       	rjmp	.-40     	; 0x17b4 <puts+0x1c>
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	09 95       	icall
    17e0:	89 2b       	or	r24, r25
    17e2:	19 f0       	breq	.+6      	; 0x17ea <puts+0x52>
    17e4:	8f ef       	ldi	r24, 0xFF	; 255
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <puts+0x56>
    17ea:	8d 2f       	mov	r24, r29
    17ec:	9c 2f       	mov	r25, r28
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <vfprintf>:
    17f8:	ab e0       	ldi	r26, 0x0B	; 11
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e2 e0       	ldi	r30, 0x02	; 2
    17fe:	fc e0       	ldi	r31, 0x0C	; 12
    1800:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__>
    1804:	6c 01       	movw	r12, r24
    1806:	7b 01       	movw	r14, r22
    1808:	8a 01       	movw	r16, r20
    180a:	fc 01       	movw	r30, r24
    180c:	17 82       	std	Z+7, r1	; 0x07
    180e:	16 82       	std	Z+6, r1	; 0x06
    1810:	83 81       	ldd	r24, Z+3	; 0x03
    1812:	81 ff       	sbrs	r24, 1
    1814:	cc c1       	rjmp	.+920    	; 0x1bae <vfprintf+0x3b6>
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	3c 01       	movw	r6, r24
    181c:	f6 01       	movw	r30, r12
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	f7 01       	movw	r30, r14
    1822:	93 fd       	sbrc	r25, 3
    1824:	85 91       	lpm	r24, Z+
    1826:	93 ff       	sbrs	r25, 3
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <vfprintf+0x3a>
    1830:	ba c1       	rjmp	.+884    	; 0x1ba6 <vfprintf+0x3ae>
    1832:	85 32       	cpi	r24, 0x25	; 37
    1834:	39 f4       	brne	.+14     	; 0x1844 <vfprintf+0x4c>
    1836:	93 fd       	sbrc	r25, 3
    1838:	85 91       	lpm	r24, Z+
    183a:	93 ff       	sbrs	r25, 3
    183c:	81 91       	ld	r24, Z+
    183e:	7f 01       	movw	r14, r30
    1840:	85 32       	cpi	r24, 0x25	; 37
    1842:	29 f4       	brne	.+10     	; 0x184e <vfprintf+0x56>
    1844:	b6 01       	movw	r22, r12
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    184c:	e7 cf       	rjmp	.-50     	; 0x181c <vfprintf+0x24>
    184e:	91 2c       	mov	r9, r1
    1850:	21 2c       	mov	r2, r1
    1852:	31 2c       	mov	r3, r1
    1854:	ff e1       	ldi	r31, 0x1F	; 31
    1856:	f3 15       	cp	r31, r3
    1858:	d8 f0       	brcs	.+54     	; 0x1890 <vfprintf+0x98>
    185a:	8b 32       	cpi	r24, 0x2B	; 43
    185c:	79 f0       	breq	.+30     	; 0x187c <vfprintf+0x84>
    185e:	38 f4       	brcc	.+14     	; 0x186e <vfprintf+0x76>
    1860:	80 32       	cpi	r24, 0x20	; 32
    1862:	79 f0       	breq	.+30     	; 0x1882 <vfprintf+0x8a>
    1864:	83 32       	cpi	r24, 0x23	; 35
    1866:	a1 f4       	brne	.+40     	; 0x1890 <vfprintf+0x98>
    1868:	23 2d       	mov	r18, r3
    186a:	20 61       	ori	r18, 0x10	; 16
    186c:	1d c0       	rjmp	.+58     	; 0x18a8 <vfprintf+0xb0>
    186e:	8d 32       	cpi	r24, 0x2D	; 45
    1870:	61 f0       	breq	.+24     	; 0x188a <vfprintf+0x92>
    1872:	80 33       	cpi	r24, 0x30	; 48
    1874:	69 f4       	brne	.+26     	; 0x1890 <vfprintf+0x98>
    1876:	23 2d       	mov	r18, r3
    1878:	21 60       	ori	r18, 0x01	; 1
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <vfprintf+0xb0>
    187c:	83 2d       	mov	r24, r3
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	38 2e       	mov	r3, r24
    1882:	e3 2d       	mov	r30, r3
    1884:	e4 60       	ori	r30, 0x04	; 4
    1886:	3e 2e       	mov	r3, r30
    1888:	2a c0       	rjmp	.+84     	; 0x18de <vfprintf+0xe6>
    188a:	f3 2d       	mov	r31, r3
    188c:	f8 60       	ori	r31, 0x08	; 8
    188e:	1d c0       	rjmp	.+58     	; 0x18ca <vfprintf+0xd2>
    1890:	37 fc       	sbrc	r3, 7
    1892:	2d c0       	rjmp	.+90     	; 0x18ee <vfprintf+0xf6>
    1894:	20 ed       	ldi	r18, 0xD0	; 208
    1896:	28 0f       	add	r18, r24
    1898:	2a 30       	cpi	r18, 0x0A	; 10
    189a:	40 f0       	brcs	.+16     	; 0x18ac <vfprintf+0xb4>
    189c:	8e 32       	cpi	r24, 0x2E	; 46
    189e:	b9 f4       	brne	.+46     	; 0x18ce <vfprintf+0xd6>
    18a0:	36 fc       	sbrc	r3, 6
    18a2:	81 c1       	rjmp	.+770    	; 0x1ba6 <vfprintf+0x3ae>
    18a4:	23 2d       	mov	r18, r3
    18a6:	20 64       	ori	r18, 0x40	; 64
    18a8:	32 2e       	mov	r3, r18
    18aa:	19 c0       	rjmp	.+50     	; 0x18de <vfprintf+0xe6>
    18ac:	36 fe       	sbrs	r3, 6
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <vfprintf+0xc4>
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	98 9e       	mul	r9, r24
    18b4:	20 0d       	add	r18, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	92 2e       	mov	r9, r18
    18ba:	11 c0       	rjmp	.+34     	; 0x18de <vfprintf+0xe6>
    18bc:	ea e0       	ldi	r30, 0x0A	; 10
    18be:	2e 9e       	mul	r2, r30
    18c0:	20 0d       	add	r18, r0
    18c2:	11 24       	eor	r1, r1
    18c4:	22 2e       	mov	r2, r18
    18c6:	f3 2d       	mov	r31, r3
    18c8:	f0 62       	ori	r31, 0x20	; 32
    18ca:	3f 2e       	mov	r3, r31
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <vfprintf+0xe6>
    18ce:	8c 36       	cpi	r24, 0x6C	; 108
    18d0:	21 f4       	brne	.+8      	; 0x18da <vfprintf+0xe2>
    18d2:	83 2d       	mov	r24, r3
    18d4:	80 68       	ori	r24, 0x80	; 128
    18d6:	38 2e       	mov	r3, r24
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0xe6>
    18da:	88 36       	cpi	r24, 0x68	; 104
    18dc:	41 f4       	brne	.+16     	; 0x18ee <vfprintf+0xf6>
    18de:	f7 01       	movw	r30, r14
    18e0:	93 fd       	sbrc	r25, 3
    18e2:	85 91       	lpm	r24, Z+
    18e4:	93 ff       	sbrs	r25, 3
    18e6:	81 91       	ld	r24, Z+
    18e8:	7f 01       	movw	r14, r30
    18ea:	81 11       	cpse	r24, r1
    18ec:	b3 cf       	rjmp	.-154    	; 0x1854 <vfprintf+0x5c>
    18ee:	98 2f       	mov	r25, r24
    18f0:	9f 7d       	andi	r25, 0xDF	; 223
    18f2:	95 54       	subi	r25, 0x45	; 69
    18f4:	93 30       	cpi	r25, 0x03	; 3
    18f6:	28 f4       	brcc	.+10     	; 0x1902 <vfprintf+0x10a>
    18f8:	0c 5f       	subi	r16, 0xFC	; 252
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	9f e3       	ldi	r25, 0x3F	; 63
    18fe:	99 83       	std	Y+1, r25	; 0x01
    1900:	0d c0       	rjmp	.+26     	; 0x191c <vfprintf+0x124>
    1902:	83 36       	cpi	r24, 0x63	; 99
    1904:	31 f0       	breq	.+12     	; 0x1912 <vfprintf+0x11a>
    1906:	83 37       	cpi	r24, 0x73	; 115
    1908:	71 f0       	breq	.+28     	; 0x1926 <vfprintf+0x12e>
    190a:	83 35       	cpi	r24, 0x53	; 83
    190c:	09 f0       	breq	.+2      	; 0x1910 <vfprintf+0x118>
    190e:	59 c0       	rjmp	.+178    	; 0x19c2 <vfprintf+0x1ca>
    1910:	21 c0       	rjmp	.+66     	; 0x1954 <vfprintf+0x15c>
    1912:	f8 01       	movw	r30, r16
    1914:	80 81       	ld	r24, Z
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	0e 5f       	subi	r16, 0xFE	; 254
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	88 24       	eor	r8, r8
    191e:	83 94       	inc	r8
    1920:	91 2c       	mov	r9, r1
    1922:	53 01       	movw	r10, r6
    1924:	13 c0       	rjmp	.+38     	; 0x194c <vfprintf+0x154>
    1926:	28 01       	movw	r4, r16
    1928:	f2 e0       	ldi	r31, 0x02	; 2
    192a:	4f 0e       	add	r4, r31
    192c:	51 1c       	adc	r5, r1
    192e:	f8 01       	movw	r30, r16
    1930:	a0 80       	ld	r10, Z
    1932:	b1 80       	ldd	r11, Z+1	; 0x01
    1934:	36 fe       	sbrs	r3, 6
    1936:	03 c0       	rjmp	.+6      	; 0x193e <vfprintf+0x146>
    1938:	69 2d       	mov	r22, r9
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <vfprintf+0x14a>
    193e:	6f ef       	ldi	r22, 0xFF	; 255
    1940:	7f ef       	ldi	r23, 0xFF	; 255
    1942:	c5 01       	movw	r24, r10
    1944:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <strnlen>
    1948:	4c 01       	movw	r8, r24
    194a:	82 01       	movw	r16, r4
    194c:	f3 2d       	mov	r31, r3
    194e:	ff 77       	andi	r31, 0x7F	; 127
    1950:	3f 2e       	mov	r3, r31
    1952:	16 c0       	rjmp	.+44     	; 0x1980 <vfprintf+0x188>
    1954:	28 01       	movw	r4, r16
    1956:	22 e0       	ldi	r18, 0x02	; 2
    1958:	42 0e       	add	r4, r18
    195a:	51 1c       	adc	r5, r1
    195c:	f8 01       	movw	r30, r16
    195e:	a0 80       	ld	r10, Z
    1960:	b1 80       	ldd	r11, Z+1	; 0x01
    1962:	36 fe       	sbrs	r3, 6
    1964:	03 c0       	rjmp	.+6      	; 0x196c <vfprintf+0x174>
    1966:	69 2d       	mov	r22, r9
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x178>
    196c:	6f ef       	ldi	r22, 0xFF	; 255
    196e:	7f ef       	ldi	r23, 0xFF	; 255
    1970:	c5 01       	movw	r24, r10
    1972:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <strnlen_P>
    1976:	4c 01       	movw	r8, r24
    1978:	f3 2d       	mov	r31, r3
    197a:	f0 68       	ori	r31, 0x80	; 128
    197c:	3f 2e       	mov	r3, r31
    197e:	82 01       	movw	r16, r4
    1980:	33 fc       	sbrc	r3, 3
    1982:	1b c0       	rjmp	.+54     	; 0x19ba <vfprintf+0x1c2>
    1984:	82 2d       	mov	r24, r2
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	88 16       	cp	r8, r24
    198a:	99 06       	cpc	r9, r25
    198c:	b0 f4       	brcc	.+44     	; 0x19ba <vfprintf+0x1c2>
    198e:	b6 01       	movw	r22, r12
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1998:	2a 94       	dec	r2
    199a:	f4 cf       	rjmp	.-24     	; 0x1984 <vfprintf+0x18c>
    199c:	f5 01       	movw	r30, r10
    199e:	37 fc       	sbrc	r3, 7
    19a0:	85 91       	lpm	r24, Z+
    19a2:	37 fe       	sbrs	r3, 7
    19a4:	81 91       	ld	r24, Z+
    19a6:	5f 01       	movw	r10, r30
    19a8:	b6 01       	movw	r22, r12
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    19b0:	21 10       	cpse	r2, r1
    19b2:	2a 94       	dec	r2
    19b4:	21 e0       	ldi	r18, 0x01	; 1
    19b6:	82 1a       	sub	r8, r18
    19b8:	91 08       	sbc	r9, r1
    19ba:	81 14       	cp	r8, r1
    19bc:	91 04       	cpc	r9, r1
    19be:	71 f7       	brne	.-36     	; 0x199c <vfprintf+0x1a4>
    19c0:	e8 c0       	rjmp	.+464    	; 0x1b92 <vfprintf+0x39a>
    19c2:	84 36       	cpi	r24, 0x64	; 100
    19c4:	11 f0       	breq	.+4      	; 0x19ca <vfprintf+0x1d2>
    19c6:	89 36       	cpi	r24, 0x69	; 105
    19c8:	41 f5       	brne	.+80     	; 0x1a1a <vfprintf+0x222>
    19ca:	f8 01       	movw	r30, r16
    19cc:	37 fe       	sbrs	r3, 7
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <vfprintf+0x1e6>
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	0c 5f       	subi	r16, 0xFC	; 252
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	08 c0       	rjmp	.+16     	; 0x19ee <vfprintf+0x1f6>
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	07 2e       	mov	r0, r23
    19e4:	00 0c       	add	r0, r0
    19e6:	88 0b       	sbc	r24, r24
    19e8:	99 0b       	sbc	r25, r25
    19ea:	0e 5f       	subi	r16, 0xFE	; 254
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	f3 2d       	mov	r31, r3
    19f0:	ff 76       	andi	r31, 0x6F	; 111
    19f2:	3f 2e       	mov	r3, r31
    19f4:	97 ff       	sbrs	r25, 7
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <vfprintf+0x212>
    19f8:	90 95       	com	r25
    19fa:	80 95       	com	r24
    19fc:	70 95       	com	r23
    19fe:	61 95       	neg	r22
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	f0 68       	ori	r31, 0x80	; 128
    1a08:	3f 2e       	mov	r3, r31
    1a0a:	2a e0       	ldi	r18, 0x0A	; 10
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	a3 01       	movw	r20, r6
    1a10:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__ultoa_invert>
    1a14:	88 2e       	mov	r8, r24
    1a16:	86 18       	sub	r8, r6
    1a18:	45 c0       	rjmp	.+138    	; 0x1aa4 <vfprintf+0x2ac>
    1a1a:	85 37       	cpi	r24, 0x75	; 117
    1a1c:	31 f4       	brne	.+12     	; 0x1a2a <vfprintf+0x232>
    1a1e:	23 2d       	mov	r18, r3
    1a20:	2f 7e       	andi	r18, 0xEF	; 239
    1a22:	b2 2e       	mov	r11, r18
    1a24:	2a e0       	ldi	r18, 0x0A	; 10
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	25 c0       	rjmp	.+74     	; 0x1a74 <vfprintf+0x27c>
    1a2a:	93 2d       	mov	r25, r3
    1a2c:	99 7f       	andi	r25, 0xF9	; 249
    1a2e:	b9 2e       	mov	r11, r25
    1a30:	8f 36       	cpi	r24, 0x6F	; 111
    1a32:	c1 f0       	breq	.+48     	; 0x1a64 <vfprintf+0x26c>
    1a34:	18 f4       	brcc	.+6      	; 0x1a3c <vfprintf+0x244>
    1a36:	88 35       	cpi	r24, 0x58	; 88
    1a38:	79 f0       	breq	.+30     	; 0x1a58 <vfprintf+0x260>
    1a3a:	b5 c0       	rjmp	.+362    	; 0x1ba6 <vfprintf+0x3ae>
    1a3c:	80 37       	cpi	r24, 0x70	; 112
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <vfprintf+0x24e>
    1a40:	88 37       	cpi	r24, 0x78	; 120
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <vfprintf+0x254>
    1a44:	b0 c0       	rjmp	.+352    	; 0x1ba6 <vfprintf+0x3ae>
    1a46:	e9 2f       	mov	r30, r25
    1a48:	e0 61       	ori	r30, 0x10	; 16
    1a4a:	be 2e       	mov	r11, r30
    1a4c:	b4 fe       	sbrs	r11, 4
    1a4e:	0d c0       	rjmp	.+26     	; 0x1a6a <vfprintf+0x272>
    1a50:	fb 2d       	mov	r31, r11
    1a52:	f4 60       	ori	r31, 0x04	; 4
    1a54:	bf 2e       	mov	r11, r31
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <vfprintf+0x272>
    1a58:	34 fe       	sbrs	r3, 4
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <vfprintf+0x278>
    1a5c:	29 2f       	mov	r18, r25
    1a5e:	26 60       	ori	r18, 0x06	; 6
    1a60:	b2 2e       	mov	r11, r18
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <vfprintf+0x278>
    1a64:	28 e0       	ldi	r18, 0x08	; 8
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <vfprintf+0x27c>
    1a6a:	20 e1       	ldi	r18, 0x10	; 16
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <vfprintf+0x27c>
    1a70:	20 e1       	ldi	r18, 0x10	; 16
    1a72:	32 e0       	ldi	r19, 0x02	; 2
    1a74:	f8 01       	movw	r30, r16
    1a76:	b7 fe       	sbrs	r11, 7
    1a78:	07 c0       	rjmp	.+14     	; 0x1a88 <vfprintf+0x290>
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	0c 5f       	subi	r16, 0xFC	; 252
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	06 c0       	rjmp	.+12     	; 0x1a94 <vfprintf+0x29c>
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 5f       	subi	r16, 0xFE	; 254
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	a3 01       	movw	r20, r6
    1a96:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__ultoa_invert>
    1a9a:	88 2e       	mov	r8, r24
    1a9c:	86 18       	sub	r8, r6
    1a9e:	fb 2d       	mov	r31, r11
    1aa0:	ff 77       	andi	r31, 0x7F	; 127
    1aa2:	3f 2e       	mov	r3, r31
    1aa4:	36 fe       	sbrs	r3, 6
    1aa6:	0d c0       	rjmp	.+26     	; 0x1ac2 <vfprintf+0x2ca>
    1aa8:	23 2d       	mov	r18, r3
    1aaa:	2e 7f       	andi	r18, 0xFE	; 254
    1aac:	a2 2e       	mov	r10, r18
    1aae:	89 14       	cp	r8, r9
    1ab0:	58 f4       	brcc	.+22     	; 0x1ac8 <vfprintf+0x2d0>
    1ab2:	34 fe       	sbrs	r3, 4
    1ab4:	0b c0       	rjmp	.+22     	; 0x1acc <vfprintf+0x2d4>
    1ab6:	32 fc       	sbrc	r3, 2
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <vfprintf+0x2d4>
    1aba:	83 2d       	mov	r24, r3
    1abc:	8e 7e       	andi	r24, 0xEE	; 238
    1abe:	a8 2e       	mov	r10, r24
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <vfprintf+0x2d4>
    1ac2:	b8 2c       	mov	r11, r8
    1ac4:	a3 2c       	mov	r10, r3
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <vfprintf+0x2d6>
    1ac8:	b8 2c       	mov	r11, r8
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <vfprintf+0x2d6>
    1acc:	b9 2c       	mov	r11, r9
    1ace:	a4 fe       	sbrs	r10, 4
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <vfprintf+0x2f8>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e8 0d       	add	r30, r8
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 33       	cpi	r24, 0x30	; 48
    1adc:	21 f4       	brne	.+8      	; 0x1ae6 <vfprintf+0x2ee>
    1ade:	9a 2d       	mov	r25, r10
    1ae0:	99 7e       	andi	r25, 0xE9	; 233
    1ae2:	a9 2e       	mov	r10, r25
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <vfprintf+0x300>
    1ae6:	a2 fe       	sbrs	r10, 2
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <vfprintf+0x2fe>
    1aea:	b3 94       	inc	r11
    1aec:	b3 94       	inc	r11
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <vfprintf+0x300>
    1af0:	8a 2d       	mov	r24, r10
    1af2:	86 78       	andi	r24, 0x86	; 134
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <vfprintf+0x300>
    1af6:	b3 94       	inc	r11
    1af8:	a3 fc       	sbrc	r10, 3
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <vfprintf+0x326>
    1afc:	a0 fe       	sbrs	r10, 0
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <vfprintf+0x314>
    1b00:	b2 14       	cp	r11, r2
    1b02:	88 f4       	brcc	.+34     	; 0x1b26 <vfprintf+0x32e>
    1b04:	28 0c       	add	r2, r8
    1b06:	92 2c       	mov	r9, r2
    1b08:	9b 18       	sub	r9, r11
    1b0a:	0e c0       	rjmp	.+28     	; 0x1b28 <vfprintf+0x330>
    1b0c:	b2 14       	cp	r11, r2
    1b0e:	60 f4       	brcc	.+24     	; 0x1b28 <vfprintf+0x330>
    1b10:	b6 01       	movw	r22, r12
    1b12:	80 e2       	ldi	r24, 0x20	; 32
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1b1a:	b3 94       	inc	r11
    1b1c:	f7 cf       	rjmp	.-18     	; 0x1b0c <vfprintf+0x314>
    1b1e:	b2 14       	cp	r11, r2
    1b20:	18 f4       	brcc	.+6      	; 0x1b28 <vfprintf+0x330>
    1b22:	2b 18       	sub	r2, r11
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <vfprintf+0x332>
    1b26:	98 2c       	mov	r9, r8
    1b28:	21 2c       	mov	r2, r1
    1b2a:	a4 fe       	sbrs	r10, 4
    1b2c:	10 c0       	rjmp	.+32     	; 0x1b4e <vfprintf+0x356>
    1b2e:	b6 01       	movw	r22, r12
    1b30:	80 e3       	ldi	r24, 0x30	; 48
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1b38:	a2 fe       	sbrs	r10, 2
    1b3a:	17 c0       	rjmp	.+46     	; 0x1b6a <vfprintf+0x372>
    1b3c:	a1 fc       	sbrc	r10, 1
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <vfprintf+0x34e>
    1b40:	88 e7       	ldi	r24, 0x78	; 120
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <vfprintf+0x352>
    1b46:	88 e5       	ldi	r24, 0x58	; 88
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <vfprintf+0x36e>
    1b4e:	8a 2d       	mov	r24, r10
    1b50:	86 78       	andi	r24, 0x86	; 134
    1b52:	59 f0       	breq	.+22     	; 0x1b6a <vfprintf+0x372>
    1b54:	a1 fe       	sbrs	r10, 1
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x364>
    1b58:	8b e2       	ldi	r24, 0x2B	; 43
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <vfprintf+0x366>
    1b5c:	80 e2       	ldi	r24, 0x20	; 32
    1b5e:	a7 fc       	sbrc	r10, 7
    1b60:	8d e2       	ldi	r24, 0x2D	; 45
    1b62:	b6 01       	movw	r22, r12
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1b6a:	89 14       	cp	r8, r9
    1b6c:	38 f4       	brcc	.+14     	; 0x1b7c <vfprintf+0x384>
    1b6e:	b6 01       	movw	r22, r12
    1b70:	80 e3       	ldi	r24, 0x30	; 48
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1b78:	9a 94       	dec	r9
    1b7a:	f7 cf       	rjmp	.-18     	; 0x1b6a <vfprintf+0x372>
    1b7c:	8a 94       	dec	r8
    1b7e:	f3 01       	movw	r30, r6
    1b80:	e8 0d       	add	r30, r8
    1b82:	f1 1d       	adc	r31, r1
    1b84:	80 81       	ld	r24, Z
    1b86:	b6 01       	movw	r22, r12
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1b8e:	81 10       	cpse	r8, r1
    1b90:	f5 cf       	rjmp	.-22     	; 0x1b7c <vfprintf+0x384>
    1b92:	22 20       	and	r2, r2
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <vfprintf+0x3a0>
    1b96:	42 ce       	rjmp	.-892    	; 0x181c <vfprintf+0x24>
    1b98:	b6 01       	movw	r22, r12
    1b9a:	80 e2       	ldi	r24, 0x20	; 32
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <fputc>
    1ba2:	2a 94       	dec	r2
    1ba4:	f6 cf       	rjmp	.-20     	; 0x1b92 <vfprintf+0x39a>
    1ba6:	f6 01       	movw	r30, r12
    1ba8:	86 81       	ldd	r24, Z+6	; 0x06
    1baa:	97 81       	ldd	r25, Z+7	; 0x07
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x3ba>
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	9f ef       	ldi	r25, 0xFF	; 255
    1bb2:	2b 96       	adiw	r28, 0x0b	; 11
    1bb4:	e2 e1       	ldi	r30, 0x12	; 18
    1bb6:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__>

00001bba <calloc>:
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	86 9f       	mul	r24, r22
    1bc4:	80 01       	movw	r16, r0
    1bc6:	87 9f       	mul	r24, r23
    1bc8:	10 0d       	add	r17, r0
    1bca:	96 9f       	mul	r25, r22
    1bcc:	10 0d       	add	r17, r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <malloc>
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	29 f0       	breq	.+10     	; 0x1be6 <calloc+0x2c>
    1bdc:	a8 01       	movw	r20, r16
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <memset>
    1be6:	ce 01       	movw	r24, r28
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

00001bf2 <malloc>:
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	10 f4       	brcc	.+4      	; 0x1c04 <malloc+0x12>
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <__flp>
    1c08:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <__flp+0x1>
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	30 97       	sbiw	r30, 0x00	; 0
    1c16:	19 f1       	breq	.+70     	; 0x1c5e <malloc+0x6c>
    1c18:	40 81       	ld	r20, Z
    1c1a:	51 81       	ldd	r21, Z+1	; 0x01
    1c1c:	02 81       	ldd	r16, Z+2	; 0x02
    1c1e:	13 81       	ldd	r17, Z+3	; 0x03
    1c20:	48 17       	cp	r20, r24
    1c22:	59 07       	cpc	r21, r25
    1c24:	c8 f0       	brcs	.+50     	; 0x1c58 <malloc+0x66>
    1c26:	84 17       	cp	r24, r20
    1c28:	95 07       	cpc	r25, r21
    1c2a:	69 f4       	brne	.+26     	; 0x1c46 <malloc+0x54>
    1c2c:	10 97       	sbiw	r26, 0x00	; 0
    1c2e:	31 f0       	breq	.+12     	; 0x1c3c <malloc+0x4a>
    1c30:	12 96       	adiw	r26, 0x02	; 2
    1c32:	0c 93       	st	X, r16
    1c34:	12 97       	sbiw	r26, 0x02	; 2
    1c36:	13 96       	adiw	r26, 0x03	; 3
    1c38:	1c 93       	st	X, r17
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <malloc+0x98>
    1c3c:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <__flp>
    1c40:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <__flp+0x1>
    1c44:	22 c0       	rjmp	.+68     	; 0x1c8a <malloc+0x98>
    1c46:	21 15       	cp	r18, r1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	19 f0       	breq	.+6      	; 0x1c52 <malloc+0x60>
    1c4c:	42 17       	cp	r20, r18
    1c4e:	53 07       	cpc	r21, r19
    1c50:	18 f4       	brcc	.+6      	; 0x1c58 <malloc+0x66>
    1c52:	9a 01       	movw	r18, r20
    1c54:	bd 01       	movw	r22, r26
    1c56:	ef 01       	movw	r28, r30
    1c58:	df 01       	movw	r26, r30
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	db cf       	rjmp	.-74     	; 0x1c14 <malloc+0x22>
    1c5e:	21 15       	cp	r18, r1
    1c60:	31 05       	cpc	r19, r1
    1c62:	f9 f0       	breq	.+62     	; 0x1ca2 <malloc+0xb0>
    1c64:	28 1b       	sub	r18, r24
    1c66:	39 0b       	sbc	r19, r25
    1c68:	24 30       	cpi	r18, 0x04	; 4
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	80 f4       	brcc	.+32     	; 0x1c8e <malloc+0x9c>
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	9b 81       	ldd	r25, Y+3	; 0x03
    1c72:	61 15       	cp	r22, r1
    1c74:	71 05       	cpc	r23, r1
    1c76:	21 f0       	breq	.+8      	; 0x1c80 <malloc+0x8e>
    1c78:	fb 01       	movw	r30, r22
    1c7a:	93 83       	std	Z+3, r25	; 0x03
    1c7c:	82 83       	std	Z+2, r24	; 0x02
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <malloc+0x96>
    1c80:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <__flp+0x1>
    1c84:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <__flp>
    1c88:	fe 01       	movw	r30, r28
    1c8a:	32 96       	adiw	r30, 0x02	; 2
    1c8c:	44 c0       	rjmp	.+136    	; 0x1d16 <malloc+0x124>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e2 0f       	add	r30, r18
    1c92:	f3 1f       	adc	r31, r19
    1c94:	81 93       	st	Z+, r24
    1c96:	91 93       	st	Z+, r25
    1c98:	22 50       	subi	r18, 0x02	; 2
    1c9a:	31 09       	sbc	r19, r1
    1c9c:	39 83       	std	Y+1, r19	; 0x01
    1c9e:	28 83       	st	Y, r18
    1ca0:	3a c0       	rjmp	.+116    	; 0x1d16 <malloc+0x124>
    1ca2:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__brkval>
    1ca6:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <__brkval+0x1>
    1caa:	23 2b       	or	r18, r19
    1cac:	41 f4       	brne	.+16     	; 0x1cbe <malloc+0xcc>
    1cae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cb2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cb6:	30 93 0a 02 	sts	0x020A, r19	; 0x80020a <__brkval+0x1>
    1cba:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <__brkval>
    1cbe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cc2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1cc6:	21 15       	cp	r18, r1
    1cc8:	31 05       	cpc	r19, r1
    1cca:	41 f4       	brne	.+16     	; 0x1cdc <malloc+0xea>
    1ccc:	2d b7       	in	r18, 0x3d	; 61
    1cce:	3e b7       	in	r19, 0x3e	; 62
    1cd0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1cd4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1cd8:	24 1b       	sub	r18, r20
    1cda:	35 0b       	sbc	r19, r21
    1cdc:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <__brkval>
    1ce0:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <__brkval+0x1>
    1ce4:	e2 17       	cp	r30, r18
    1ce6:	f3 07       	cpc	r31, r19
    1ce8:	a0 f4       	brcc	.+40     	; 0x1d12 <malloc+0x120>
    1cea:	2e 1b       	sub	r18, r30
    1cec:	3f 0b       	sbc	r19, r31
    1cee:	28 17       	cp	r18, r24
    1cf0:	39 07       	cpc	r19, r25
    1cf2:	78 f0       	brcs	.+30     	; 0x1d12 <malloc+0x120>
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	4e 5f       	subi	r20, 0xFE	; 254
    1cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfa:	24 17       	cp	r18, r20
    1cfc:	35 07       	cpc	r19, r21
    1cfe:	48 f0       	brcs	.+18     	; 0x1d12 <malloc+0x120>
    1d00:	4e 0f       	add	r20, r30
    1d02:	5f 1f       	adc	r21, r31
    1d04:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <__brkval+0x1>
    1d08:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <__brkval>
    1d0c:	81 93       	st	Z+, r24
    1d0e:	91 93       	st	Z+, r25
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <malloc+0x124>
    1d12:	e0 e0       	ldi	r30, 0x00	; 0
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	cf 01       	movw	r24, r30
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <free>:
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <free+0xa>
    1d2a:	81 c0       	rjmp	.+258    	; 0x1e2e <free+0x10c>
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	32 97       	sbiw	r30, 0x02	; 2
    1d30:	13 82       	std	Z+3, r1	; 0x03
    1d32:	12 82       	std	Z+2, r1	; 0x02
    1d34:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <__flp>
    1d38:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <__flp+0x1>
    1d3c:	10 97       	sbiw	r26, 0x00	; 0
    1d3e:	81 f4       	brne	.+32     	; 0x1d60 <free+0x3e>
    1d40:	20 81       	ld	r18, Z
    1d42:	31 81       	ldd	r19, Z+1	; 0x01
    1d44:	82 0f       	add	r24, r18
    1d46:	93 1f       	adc	r25, r19
    1d48:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__brkval>
    1d4c:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <__brkval+0x1>
    1d50:	28 17       	cp	r18, r24
    1d52:	39 07       	cpc	r19, r25
    1d54:	51 f5       	brne	.+84     	; 0x1daa <free+0x88>
    1d56:	f0 93 0a 02 	sts	0x020A, r31	; 0x80020a <__brkval+0x1>
    1d5a:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <__brkval>
    1d5e:	67 c0       	rjmp	.+206    	; 0x1e2e <free+0x10c>
    1d60:	ed 01       	movw	r28, r26
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	ce 17       	cp	r28, r30
    1d68:	df 07       	cpc	r29, r31
    1d6a:	40 f4       	brcc	.+16     	; 0x1d7c <free+0x5a>
    1d6c:	4a 81       	ldd	r20, Y+2	; 0x02
    1d6e:	5b 81       	ldd	r21, Y+3	; 0x03
    1d70:	9e 01       	movw	r18, r28
    1d72:	41 15       	cp	r20, r1
    1d74:	51 05       	cpc	r21, r1
    1d76:	f1 f0       	breq	.+60     	; 0x1db4 <free+0x92>
    1d78:	ea 01       	movw	r28, r20
    1d7a:	f5 cf       	rjmp	.-22     	; 0x1d66 <free+0x44>
    1d7c:	d3 83       	std	Z+3, r29	; 0x03
    1d7e:	c2 83       	std	Z+2, r28	; 0x02
    1d80:	40 81       	ld	r20, Z
    1d82:	51 81       	ldd	r21, Z+1	; 0x01
    1d84:	84 0f       	add	r24, r20
    1d86:	95 1f       	adc	r25, r21
    1d88:	c8 17       	cp	r28, r24
    1d8a:	d9 07       	cpc	r29, r25
    1d8c:	59 f4       	brne	.+22     	; 0x1da4 <free+0x82>
    1d8e:	88 81       	ld	r24, Y
    1d90:	99 81       	ldd	r25, Y+1	; 0x01
    1d92:	84 0f       	add	r24, r20
    1d94:	95 1f       	adc	r25, r21
    1d96:	02 96       	adiw	r24, 0x02	; 2
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1da0:	93 83       	std	Z+3, r25	; 0x03
    1da2:	82 83       	std	Z+2, r24	; 0x02
    1da4:	21 15       	cp	r18, r1
    1da6:	31 05       	cpc	r19, r1
    1da8:	29 f4       	brne	.+10     	; 0x1db4 <free+0x92>
    1daa:	f0 93 0c 02 	sts	0x020C, r31	; 0x80020c <__flp+0x1>
    1dae:	e0 93 0b 02 	sts	0x020B, r30	; 0x80020b <__flp>
    1db2:	3d c0       	rjmp	.+122    	; 0x1e2e <free+0x10c>
    1db4:	e9 01       	movw	r28, r18
    1db6:	fb 83       	std	Y+3, r31	; 0x03
    1db8:	ea 83       	std	Y+2, r30	; 0x02
    1dba:	49 91       	ld	r20, Y+
    1dbc:	59 91       	ld	r21, Y+
    1dbe:	c4 0f       	add	r28, r20
    1dc0:	d5 1f       	adc	r29, r21
    1dc2:	ec 17       	cp	r30, r28
    1dc4:	fd 07       	cpc	r31, r29
    1dc6:	61 f4       	brne	.+24     	; 0x1de0 <free+0xbe>
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	84 0f       	add	r24, r20
    1dce:	95 1f       	adc	r25, r21
    1dd0:	02 96       	adiw	r24, 0x02	; 2
    1dd2:	e9 01       	movw	r28, r18
    1dd4:	99 83       	std	Y+1, r25	; 0x01
    1dd6:	88 83       	st	Y, r24
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	9b 83       	std	Y+3, r25	; 0x03
    1dde:	8a 83       	std	Y+2, r24	; 0x02
    1de0:	e0 e0       	ldi	r30, 0x00	; 0
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	12 96       	adiw	r26, 0x02	; 2
    1de6:	8d 91       	ld	r24, X+
    1de8:	9c 91       	ld	r25, X
    1dea:	13 97       	sbiw	r26, 0x03	; 3
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	19 f0       	breq	.+6      	; 0x1df6 <free+0xd4>
    1df0:	fd 01       	movw	r30, r26
    1df2:	dc 01       	movw	r26, r24
    1df4:	f7 cf       	rjmp	.-18     	; 0x1de4 <free+0xc2>
    1df6:	8d 91       	ld	r24, X+
    1df8:	9c 91       	ld	r25, X
    1dfa:	11 97       	sbiw	r26, 0x01	; 1
    1dfc:	9d 01       	movw	r18, r26
    1dfe:	2e 5f       	subi	r18, 0xFE	; 254
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	82 0f       	add	r24, r18
    1e04:	93 1f       	adc	r25, r19
    1e06:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__brkval>
    1e0a:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <__brkval+0x1>
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	69 f4       	brne	.+26     	; 0x1e2e <free+0x10c>
    1e14:	30 97       	sbiw	r30, 0x00	; 0
    1e16:	29 f4       	brne	.+10     	; 0x1e22 <free+0x100>
    1e18:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__flp+0x1>
    1e1c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__flp>
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <free+0x104>
    1e22:	13 82       	std	Z+3, r1	; 0x03
    1e24:	12 82       	std	Z+2, r1	; 0x02
    1e26:	b0 93 0a 02 	sts	0x020A, r27	; 0x80020a <__brkval+0x1>
    1e2a:	a0 93 09 02 	sts	0x0209, r26	; 0x800209 <__brkval>
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <strnlen_P>:
    1e34:	fc 01       	movw	r30, r24
    1e36:	05 90       	lpm	r0, Z+
    1e38:	61 50       	subi	r22, 0x01	; 1
    1e3a:	70 40       	sbci	r23, 0x00	; 0
    1e3c:	01 10       	cpse	r0, r1
    1e3e:	d8 f7       	brcc	.-10     	; 0x1e36 <strnlen_P+0x2>
    1e40:	80 95       	com	r24
    1e42:	90 95       	com	r25
    1e44:	8e 0f       	add	r24, r30
    1e46:	9f 1f       	adc	r25, r31
    1e48:	08 95       	ret

00001e4a <memset>:
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <memset+0x6>
    1e4e:	6d 93       	st	X+, r22
    1e50:	41 50       	subi	r20, 0x01	; 1
    1e52:	50 40       	sbci	r21, 0x00	; 0
    1e54:	e0 f7       	brcc	.-8      	; 0x1e4e <memset+0x4>
    1e56:	08 95       	ret

00001e58 <strnlen>:
    1e58:	fc 01       	movw	r30, r24
    1e5a:	61 50       	subi	r22, 0x01	; 1
    1e5c:	70 40       	sbci	r23, 0x00	; 0
    1e5e:	01 90       	ld	r0, Z+
    1e60:	01 10       	cpse	r0, r1
    1e62:	d8 f7       	brcc	.-10     	; 0x1e5a <strnlen+0x2>
    1e64:	80 95       	com	r24
    1e66:	90 95       	com	r25
    1e68:	8e 0f       	add	r24, r30
    1e6a:	9f 1f       	adc	r25, r31
    1e6c:	08 95       	ret

00001e6e <fputc>:
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	fb 01       	movw	r30, r22
    1e78:	23 81       	ldd	r18, Z+3	; 0x03
    1e7a:	21 fd       	sbrc	r18, 1
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <fputc+0x16>
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	9f ef       	ldi	r25, 0xFF	; 255
    1e82:	2c c0       	rjmp	.+88     	; 0x1edc <fputc+0x6e>
    1e84:	22 ff       	sbrs	r18, 2
    1e86:	16 c0       	rjmp	.+44     	; 0x1eb4 <fputc+0x46>
    1e88:	46 81       	ldd	r20, Z+6	; 0x06
    1e8a:	57 81       	ldd	r21, Z+7	; 0x07
    1e8c:	24 81       	ldd	r18, Z+4	; 0x04
    1e8e:	35 81       	ldd	r19, Z+5	; 0x05
    1e90:	42 17       	cp	r20, r18
    1e92:	53 07       	cpc	r21, r19
    1e94:	44 f4       	brge	.+16     	; 0x1ea6 <fputc+0x38>
    1e96:	a0 81       	ld	r26, Z
    1e98:	b1 81       	ldd	r27, Z+1	; 0x01
    1e9a:	9d 01       	movw	r18, r26
    1e9c:	2f 5f       	subi	r18, 0xFF	; 255
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	20 83       	st	Z, r18
    1ea4:	8c 93       	st	X, r24
    1ea6:	26 81       	ldd	r18, Z+6	; 0x06
    1ea8:	37 81       	ldd	r19, Z+7	; 0x07
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	37 83       	std	Z+7, r19	; 0x07
    1eb0:	26 83       	std	Z+6, r18	; 0x06
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <fputc+0x6e>
    1eb4:	8b 01       	movw	r16, r22
    1eb6:	ec 01       	movw	r28, r24
    1eb8:	fb 01       	movw	r30, r22
    1eba:	00 84       	ldd	r0, Z+8	; 0x08
    1ebc:	f1 85       	ldd	r31, Z+9	; 0x09
    1ebe:	e0 2d       	mov	r30, r0
    1ec0:	09 95       	icall
    1ec2:	89 2b       	or	r24, r25
    1ec4:	e1 f6       	brne	.-72     	; 0x1e7e <fputc+0x10>
    1ec6:	d8 01       	movw	r26, r16
    1ec8:	16 96       	adiw	r26, 0x06	; 6
    1eca:	8d 91       	ld	r24, X+
    1ecc:	9c 91       	ld	r25, X
    1ece:	17 97       	sbiw	r26, 0x07	; 7
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	17 96       	adiw	r26, 0x07	; 7
    1ed4:	9c 93       	st	X, r25
    1ed6:	8e 93       	st	-X, r24
    1ed8:	16 97       	sbiw	r26, 0x06	; 6
    1eda:	ce 01       	movw	r24, r28
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <__ultoa_invert>:
    1ee6:	fa 01       	movw	r30, r20
    1ee8:	aa 27       	eor	r26, r26
    1eea:	28 30       	cpi	r18, 0x08	; 8
    1eec:	51 f1       	breq	.+84     	; 0x1f42 <__ultoa_invert+0x5c>
    1eee:	20 31       	cpi	r18, 0x10	; 16
    1ef0:	81 f1       	breq	.+96     	; 0x1f52 <__ultoa_invert+0x6c>
    1ef2:	e8 94       	clt
    1ef4:	6f 93       	push	r22
    1ef6:	6e 7f       	andi	r22, 0xFE	; 254
    1ef8:	6e 5f       	subi	r22, 0xFE	; 254
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	8f 4f       	sbci	r24, 0xFF	; 255
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	af 4f       	sbci	r26, 0xFF	; 255
    1f02:	b1 e0       	ldi	r27, 0x01	; 1
    1f04:	3e d0       	rcall	.+124    	; 0x1f82 <__ultoa_invert+0x9c>
    1f06:	b4 e0       	ldi	r27, 0x04	; 4
    1f08:	3c d0       	rcall	.+120    	; 0x1f82 <__ultoa_invert+0x9c>
    1f0a:	67 0f       	add	r22, r23
    1f0c:	78 1f       	adc	r23, r24
    1f0e:	89 1f       	adc	r24, r25
    1f10:	9a 1f       	adc	r25, r26
    1f12:	a1 1d       	adc	r26, r1
    1f14:	68 0f       	add	r22, r24
    1f16:	79 1f       	adc	r23, r25
    1f18:	8a 1f       	adc	r24, r26
    1f1a:	91 1d       	adc	r25, r1
    1f1c:	a1 1d       	adc	r26, r1
    1f1e:	6a 0f       	add	r22, r26
    1f20:	71 1d       	adc	r23, r1
    1f22:	81 1d       	adc	r24, r1
    1f24:	91 1d       	adc	r25, r1
    1f26:	a1 1d       	adc	r26, r1
    1f28:	20 d0       	rcall	.+64     	; 0x1f6a <__ultoa_invert+0x84>
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <__ultoa_invert+0x48>
    1f2c:	68 94       	set
    1f2e:	3f 91       	pop	r19
    1f30:	2a e0       	ldi	r18, 0x0A	; 10
    1f32:	26 9f       	mul	r18, r22
    1f34:	11 24       	eor	r1, r1
    1f36:	30 19       	sub	r19, r0
    1f38:	30 5d       	subi	r19, 0xD0	; 208
    1f3a:	31 93       	st	Z+, r19
    1f3c:	de f6       	brtc	.-74     	; 0x1ef4 <__ultoa_invert+0xe>
    1f3e:	cf 01       	movw	r24, r30
    1f40:	08 95       	ret
    1f42:	46 2f       	mov	r20, r22
    1f44:	47 70       	andi	r20, 0x07	; 7
    1f46:	40 5d       	subi	r20, 0xD0	; 208
    1f48:	41 93       	st	Z+, r20
    1f4a:	b3 e0       	ldi	r27, 0x03	; 3
    1f4c:	0f d0       	rcall	.+30     	; 0x1f6c <__ultoa_invert+0x86>
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__ultoa_invert+0x5c>
    1f50:	f6 cf       	rjmp	.-20     	; 0x1f3e <__ultoa_invert+0x58>
    1f52:	46 2f       	mov	r20, r22
    1f54:	4f 70       	andi	r20, 0x0F	; 15
    1f56:	40 5d       	subi	r20, 0xD0	; 208
    1f58:	4a 33       	cpi	r20, 0x3A	; 58
    1f5a:	18 f0       	brcs	.+6      	; 0x1f62 <__ultoa_invert+0x7c>
    1f5c:	49 5d       	subi	r20, 0xD9	; 217
    1f5e:	31 fd       	sbrc	r19, 1
    1f60:	40 52       	subi	r20, 0x20	; 32
    1f62:	41 93       	st	Z+, r20
    1f64:	02 d0       	rcall	.+4      	; 0x1f6a <__ultoa_invert+0x84>
    1f66:	a9 f7       	brne	.-22     	; 0x1f52 <__ultoa_invert+0x6c>
    1f68:	ea cf       	rjmp	.-44     	; 0x1f3e <__ultoa_invert+0x58>
    1f6a:	b4 e0       	ldi	r27, 0x04	; 4
    1f6c:	a6 95       	lsr	r26
    1f6e:	97 95       	ror	r25
    1f70:	87 95       	ror	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	ba 95       	dec	r27
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__ultoa_invert+0x86>
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	61 05       	cpc	r22, r1
    1f7e:	71 05       	cpc	r23, r1
    1f80:	08 95       	ret
    1f82:	9b 01       	movw	r18, r22
    1f84:	ac 01       	movw	r20, r24
    1f86:	0a 2e       	mov	r0, r26
    1f88:	06 94       	lsr	r0
    1f8a:	57 95       	ror	r21
    1f8c:	47 95       	ror	r20
    1f8e:	37 95       	ror	r19
    1f90:	27 95       	ror	r18
    1f92:	ba 95       	dec	r27
    1f94:	c9 f7       	brne	.-14     	; 0x1f88 <__ultoa_invert+0xa2>
    1f96:	62 0f       	add	r22, r18
    1f98:	73 1f       	adc	r23, r19
    1f9a:	84 1f       	adc	r24, r20
    1f9c:	95 1f       	adc	r25, r21
    1f9e:	a0 1d       	adc	r26, r0
    1fa0:	08 95       	ret

00001fa2 <__prologue_saves__>:
    1fa2:	2f 92       	push	r2
    1fa4:	3f 92       	push	r3
    1fa6:	4f 92       	push	r4
    1fa8:	5f 92       	push	r5
    1faa:	6f 92       	push	r6
    1fac:	7f 92       	push	r7
    1fae:	8f 92       	push	r8
    1fb0:	9f 92       	push	r9
    1fb2:	af 92       	push	r10
    1fb4:	bf 92       	push	r11
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	ca 1b       	sub	r28, r26
    1fcc:	db 0b       	sbc	r29, r27
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	09 94       	ijmp

00001fda <__epilogue_restores__>:
    1fda:	2a 88       	ldd	r2, Y+18	; 0x12
    1fdc:	39 88       	ldd	r3, Y+17	; 0x11
    1fde:	48 88       	ldd	r4, Y+16	; 0x10
    1fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fea:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fec:	b9 84       	ldd	r11, Y+9	; 0x09
    1fee:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff0:	df 80       	ldd	r13, Y+7	; 0x07
    1ff2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ff8:	1b 81       	ldd	r17, Y+3	; 0x03
    1ffa:	aa 81       	ldd	r26, Y+2	; 0x02
    1ffc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ffe:	ce 0f       	add	r28, r30
    2000:	d1 1d       	adc	r29, r1
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	ed 01       	movw	r28, r26
    200e:	08 95       	ret

00002010 <_exit>:
    2010:	f8 94       	cli

00002012 <__stop_program>:
    2012:	ff cf       	rjmp	.-2      	; 0x2012 <__stop_program>
