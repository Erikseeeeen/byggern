
microchip_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00001c1a  00001cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008001b2  008001b2  00001d60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b5  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001295  00000000  00000000  000045f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125e  00000000  00000000  0000588a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00006ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f6  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cab  00000000  00000000  0000791e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000085c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <USART_Transmit+0x4>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e1       	ldi	r30, 0x1A	; 26
     37c:	fc e1       	ldi	r31, 0x1C	; 28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 3b       	cpi	r26, 0xB2	; 178
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 eb       	ldi	r26, 0xB2	; 178
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ad 30       	cpi	r26, 0x0D	; 13
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
     39e:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include "can.h"

void can_init()
{
    // Set to loopback mode
    mcp2515_init();
     3a6:	0e 94 b0 03 	call	0x760	; 0x760 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	60 ee       	ldi	r22, 0xE0	; 224
     3ae:	8f e0       	ldi	r24, 0x0F	; 15
     3b0:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
     3b4:	08 95       	ret

000003b6 <can_message_send>:
	//TODO: Make some acknowledge action happen, or something like this. Node 2 cant send to node 1
	
	
}
void can_message_send(can_message message)
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2b 97       	sbiw	r28, 0x0b	; 11
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	e9 82       	std	Y+1, r14	; 0x01
     3d4:	fa 82       	std	Y+2, r15	; 0x02
     3d6:	0b 83       	std	Y+3, r16	; 0x03
     3d8:	1c 83       	std	Y+4, r17	; 0x04
     3da:	2d 83       	std	Y+5, r18	; 0x05
     3dc:	3e 83       	std	Y+6, r19	; 0x06
     3de:	4f 83       	std	Y+7, r20	; 0x07
     3e0:	58 87       	std	Y+8, r21	; 0x08
     3e2:	69 87       	std	Y+9, r22	; 0x09
     3e4:	7a 87       	std	Y+10, r23	; 0x0a
     3e6:	8b 87       	std	Y+11, r24	; 0x0b
    // In order to initiate message transmission, the
    // TXBnCTRL.TXREQ bit must be set for each buffer to
    // be transmitted. This can be accomplished by:
    // • Writing to the register via the SPI write command
    
    mcp2515_write(MCP_TXB0SIDH, message.id >> 8);
     3e8:	6f 2d       	mov	r22, r15
     3ea:	81 e3       	ldi	r24, 0x31	; 49
     3ec:	0e 94 48 03 	call	0x690	; 0x690 <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL, message.id);
     3f0:	69 81       	ldd	r22, Y+1	; 0x01
     3f2:	82 e3       	ldi	r24, 0x32	; 50
     3f4:	0e 94 48 03 	call	0x690	; 0x690 <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC, message.data_length);
     3f8:	6b 81       	ldd	r22, Y+3	; 0x03
     3fa:	85 e3       	ldi	r24, 0x35	; 53
     3fc:	0e 94 48 03 	call	0x690	; 0x690 <mcp2515_write>

    mcp2515_write_bytes(MCP_TXB0D0, message.data, message.data_length);
     400:	4b 81       	ldd	r20, Y+3	; 0x03
     402:	be 01       	movw	r22, r28
     404:	6c 5f       	subi	r22, 0xFC	; 252
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	86 e3       	ldi	r24, 0x36	; 54
     40a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <mcp2515_write_bytes>
	
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);
     40e:	48 e0       	ldi	r20, 0x08	; 8
     410:	68 e0       	ldi	r22, 0x08	; 8
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
    
    // • Sending the SPI RTS command
    mcp2515_request_to_send();
     418:	0e 94 87 03 	call	0x70e	; 0x70e <mcp2515_request_to_send>
    // • Setting the TXnRTS pin low for the particular transmit buffer(s) that are to be transmitted
    // If configured to operate as a request-to-send pin, the pin is mapped into the respective TXBnCTRL.TXREQ bit for the transmit buffer
}
     41c:	2b 96       	adiw	r28, 0x0b	; 11
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	08 95       	ret

00000436 <can_data_receive>:
can_message can_data_receive()
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	8c 01       	movw	r16, r24
    can_message message;

    message.id = mcp2515_read(MCP_RXB0SIDH) << 8 | mcp2515_read(MCP_RXB0SIDL);
     440:	81 e6       	ldi	r24, 0x61	; 97
     442:	0e 94 36 03 	call	0x66c	; 0x66c <mcp2515_read>
     446:	c8 2f       	mov	r28, r24
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	dc 2f       	mov	r29, r28
     44c:	cc 27       	eor	r28, r28
     44e:	82 e6       	ldi	r24, 0x62	; 98
     450:	0e 94 36 03 	call	0x66c	; 0x66c <mcp2515_read>
     454:	c8 2b       	or	r28, r24
     456:	f8 01       	movw	r30, r16
     458:	d1 83       	std	Z+1, r29	; 0x01
     45a:	c0 83       	st	Z, r28
    message.data[0] = mcp2515_read(MCP_RXB0D0);
     45c:	86 e6       	ldi	r24, 0x66	; 102
     45e:	0e 94 36 03 	call	0x66c	; 0x66c <mcp2515_read>
     462:	f8 01       	movw	r30, r16
     464:	83 83       	std	Z+3, r24	; 0x03
    message.data_length = mcp2515_read(MCP_RXB0DLC);
     466:	85 e6       	ldi	r24, 0x65	; 101
     468:	0e 94 36 03 	call	0x66c	; 0x66c <mcp2515_read>
     46c:	f8 01       	movw	r30, r16
     46e:	82 83       	std	Z+2, r24	; 0x02

    return message;
}
     470:	c8 01       	movw	r24, r16
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <interrupt_init>:

#include "interrupts.h"

interrupt_init(){
	
	GICR &= ~(1 << INT2); // Disable External Interrupt 2
     47c:	8b b7       	in	r24, 0x3b	; 59
     47e:	8f 7d       	andi	r24, 0xDF	; 223
     480:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7); // Enable global interrupts
     482:	8f b7       	in	r24, 0x3f	; 63
     484:	80 68       	ori	r24, 0x80	; 128
     486:	8f bf       	out	0x3f, r24	; 63
	EMCUCR &= ~(1 << ISC2); // Interrupt on Falling edge
     488:	86 b7       	in	r24, 0x36	; 54
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT2); // Enable External Interrupt 2
     48e:	8b b7       	in	r24, 0x3b	; 59
     490:	80 62       	ori	r24, 0x20	; 32
     492:	8b bf       	out	0x3b, r24	; 59
     494:	08 95       	ret

00000496 <__vector_3>:

}

ISR(INT2_vect){
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	ac 97       	sbiw	r28, 0x2c	; 44
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	cd bf       	out	0x3d, r28	; 61
	printf("received message");
     4ca:	82 e1       	ldi	r24, 0x12	; 18
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
	printf("%d ", can_data_receive().data[0]);
     4d6:	ce 01       	movw	r24, r28
     4d8:	82 96       	adiw	r24, 0x22	; 34
     4da:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     4de:	8d a1       	ldd	r24, Y+37	; 0x25
     4e0:	1f 92       	push	r1
     4e2:	8f 93       	push	r24
     4e4:	03 e2       	ldi	r16, 0x23	; 35
     4e6:	11 e0       	ldi	r17, 0x01	; 1
     4e8:	1f 93       	push	r17
     4ea:	0f 93       	push	r16
     4ec:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
	printf("%d ", can_data_receive().data[1]);
     4f0:	ce 01       	movw	r24, r28
     4f2:	47 96       	adiw	r24, 0x17	; 23
     4f4:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     4f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4fa:	1f 92       	push	r1
     4fc:	8f 93       	push	r24
     4fe:	1f 93       	push	r17
     500:	0f 93       	push	r16
     502:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
	printf("%d ", can_data_receive().data[2]);
     506:	ce 01       	movw	r24, r28
     508:	0c 96       	adiw	r24, 0x0c	; 12
     50a:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     50e:	89 89       	ldd	r24, Y+17	; 0x11
     510:	1f 92       	push	r1
     512:	8f 93       	push	r24
     514:	1f 93       	push	r17
     516:	0f 93       	push	r16
     518:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
	printf("%d ", can_data_receive().data[3]);
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	1f 92       	push	r1
     528:	8f 93       	push	r24
     52a:	1f 93       	push	r17
     52c:	0f 93       	push	r16
     52e:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
    mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8c e2       	ldi	r24, 0x2C	; 44
     538:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	ac 96       	adiw	r28, 0x2c	; 44
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <joystick_loop>:

#include "joystick_transceiver.h"

void joystick_loop(input_t input)
{
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	62 97       	sbiw	r28, 0x12	; 18
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id = 0;
     598:	1a 82       	std	Y+2, r1	; 0x02
     59a:	19 82       	std	Y+1, r1	; 0x01
	msg.data_length = 2;
	
	msg.data[0] = input.joystick_x;
     59c:	12 2f       	mov	r17, r18
	msg.data[1] = input.joystick_y;
     59e:	23 2f       	mov	r18, r19
	
	//printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	//printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	//printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);
	
	can_message_send(msg);
     5a0:	e1 2c       	mov	r14, r1
     5a2:	fa 80       	ldd	r15, Y+2	; 0x02
     5a4:	02 e0       	ldi	r16, 0x02	; 2
     5a6:	3e 81       	ldd	r19, Y+6	; 0x06
     5a8:	4f 81       	ldd	r20, Y+7	; 0x07
     5aa:	58 85       	ldd	r21, Y+8	; 0x08
     5ac:	69 85       	ldd	r22, Y+9	; 0x09
     5ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     5b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <can_message_send>
}
     5b6:	62 96       	adiw	r28, 0x12	; 18
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <main>:
#include "adc.h"
#include "can.h"
#include "interrupts.h"

int main(void)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	27 97       	sbiw	r28, 0x07	; 7
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
	usart_init(USART_BAUD_RATE_REGISTER);
     5e4:	8f e1       	ldi	r24, 0x1F	; 31
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 a9 05 	call	0xb52	; 0xb52 <usart_init>
	printf("hello world ");
     5ec:	87 e2       	ldi	r24, 0x27	; 39
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>

	xmem_init();
     5f8:	0e 94 2c 07 	call	0xe58	; 0xe58 <xmem_init>
	adc_init();
     5fc:	0e 94 bc 05 	call	0xb78	; 0xb78 <adc_init>
	OLED_init();
     600:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <OLED_init>
	menu_init();
     604:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <menu_init>
	interrupt_init();
     608:	0e 94 3e 02 	call	0x47c	; 0x47c <interrupt_init>
	can_init();
     60c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
	
	int j = 0;
	while(1)
	{
		input_t input;
		for(int i = 0; i < 250; i++)
     614:	00 e0       	ldi	r16, 0x00	; 0
     616:	10 e0       	ldi	r17, 0x00	; 0
     618:	1c c0       	rjmp	.+56     	; 0x652 <main+0x82>
		{
			input = input_read();
     61a:	0e 94 de 05 	call	0xbbc	; 0xbbc <input_read>
     61e:	29 83       	std	Y+1, r18	; 0x01
     620:	3a 83       	std	Y+2, r19	; 0x02
     622:	4b 83       	std	Y+3, r20	; 0x03
     624:	5c 83       	std	Y+4, r21	; 0x04
     626:	6d 83       	std	Y+5, r22	; 0x05
     628:	7e 83       	std	Y+6, r23	; 0x06
     62a:	8f 83       	std	Y+7, r24	; 0x07
			joystick_loop(input);
     62c:	0e 94 be 02 	call	0x57c	; 0x57c <joystick_loop>
			menu_input_loop(input);
     630:	29 81       	ldd	r18, Y+1	; 0x01
     632:	3a 81       	ldd	r19, Y+2	; 0x02
     634:	4b 81       	ldd	r20, Y+3	; 0x03
     636:	5c 81       	ldd	r21, Y+4	; 0x04
     638:	6d 81       	ldd	r22, Y+5	; 0x05
     63a:	7e 81       	ldd	r23, Y+6	; 0x06
     63c:	8f 81       	ldd	r24, Y+7	; 0x07
     63e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <menu_input_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     642:	89 ef       	ldi	r24, 0xF9	; 249
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <main+0x76>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x7c>
     64c:	00 00       	nop
	
	int j = 0;
	while(1)
	{
		input_t input;
		for(int i = 0; i < 250; i++)
     64e:	0f 5f       	subi	r16, 0xFF	; 255
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	0a 3f       	cpi	r16, 0xFA	; 250
     654:	11 05       	cpc	r17, r1
     656:	0c f3       	brlt	.-62     	; 0x61a <main+0x4a>
			input = input_read();
			joystick_loop(input);
			menu_input_loop(input);
			_delay_ms(1);
		}
		menu_draw_loop(input);
     658:	29 81       	ldd	r18, Y+1	; 0x01
     65a:	3a 81       	ldd	r19, Y+2	; 0x02
     65c:	4b 81       	ldd	r20, Y+3	; 0x03
     65e:	5c 81       	ldd	r21, Y+4	; 0x04
     660:	6d 81       	ldd	r22, Y+5	; 0x05
     662:	7e 81       	ldd	r23, Y+6	; 0x06
     664:	8f 81       	ldd	r24, Y+7	; 0x07
     666:	0e 94 6d 04 	call	0x8da	; 0x8da <menu_draw_loop>
	}
     66a:	d4 cf       	rjmp	.-88     	; 0x614 <main+0x44>

0000066c <mcp2515_read>:
    
    // More initialization
    return 0;
}
uint8_t mcp2515_read ( uint8_t address )
{
     66c:	cf 93       	push	r28
     66e:	c8 2f       	mov	r28, r24
    uint8_t result ;
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     670:	88 b3       	in	r24, 0x18	; 24
     672:	8f 7e       	andi	r24, 0xEF	; 239
     674:	88 bb       	out	0x18, r24	; 24
    SPI_write ( MCP_READ ); // Send read instruction
     676:	83 e0       	ldi	r24, 0x03	; 3
     678:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write ( address ); // Send address
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    result = SPI_read () ; // Read result
     682:	0e 94 9a 05 	call	0xb34	; 0xb34 <SPI_read>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     686:	98 b3       	in	r25, 0x18	; 24
     688:	90 61       	ori	r25, 0x10	; 16
     68a:	98 bb       	out	0x18, r25	; 24
    return result ;
}
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	d8 2f       	mov	r29, r24
     696:	c6 2f       	mov	r28, r22
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     698:	88 b3       	in	r24, 0x18	; 24
     69a:	8f 7e       	andi	r24, 0xEF	; 239
     69c:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write (address);
     6a4:	8d 2f       	mov	r24, r29
     6a6:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write (data);
     6aa:	8c 2f       	mov	r24, r28
     6ac:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     6b0:	88 b3       	in	r24, 0x18	; 24
     6b2:	80 61       	ori	r24, 0x10	; 16
     6b4:	88 bb       	out	0x18, r24	; 24
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <mcp2515_write_bytes>:

void mcp2515_write_bytes(uint8_t address, uint8_t* data, uint8_t data_length)
{
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	c8 2f       	mov	r28, r24
     6c8:	7b 01       	movw	r14, r22
     6ca:	14 2f       	mov	r17, r20
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     6cc:	88 b3       	in	r24, 0x18	; 24
     6ce:	8f 7e       	andi	r24, 0xEF	; 239
     6d0:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write (address);
     6d8:	8c 2f       	mov	r24, r28
     6da:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    for(int i = 0; i < data_length; i++)
     6de:	c0 e0       	ldi	r28, 0x00	; 0
     6e0:	d0 e0       	ldi	r29, 0x00	; 0
     6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <mcp2515_write_bytes+0x36>
    {
        SPI_write (data[i]);
     6e4:	f7 01       	movw	r30, r14
     6e6:	ec 0f       	add	r30, r28
     6e8:	fd 1f       	adc	r31, r29
     6ea:	80 81       	ld	r24, Z
     6ec:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
    
    SPI_write (MCP_WRITE);
    SPI_write (address);
    for(int i = 0; i < data_length; i++)
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	81 2f       	mov	r24, r17
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	c8 17       	cp	r28, r24
     6f8:	d9 07       	cpc	r29, r25
     6fa:	a4 f3       	brlt	.-24     	; 0x6e4 <mcp2515_write_bytes+0x28>
    {
        SPI_write (data[i]);
    }
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     6fc:	88 b3       	in	r24, 0x18	; 24
     6fe:	80 61       	ori	r24, 0x10	; 16
     700:	88 bb       	out	0x18, r24	; 24
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	08 95       	ret

0000070e <mcp2515_request_to_send>:

void mcp2515_request_to_send()
{
    SPI_write(MCP_RTS_TX0);
     70e:	81 e8       	ldi	r24, 0x81	; 129
     710:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
     714:	08 95       	ret

00000716 <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	18 2f       	mov	r17, r24
     71e:	d6 2f       	mov	r29, r22
     720:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
     722:	88 b3       	in	r24, 0x18	; 24
     724:	8f 7e       	andi	r24, 0xEF	; 239
     726:	88 bb       	out	0x18, r24	; 24
    SPI_write(MCP_BITMOD);
     728:	85 e0       	ldi	r24, 0x05	; 5
     72a:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write(address);
     72e:	81 2f       	mov	r24, r17
     730:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write(mask);
     734:	8d 2f       	mov	r24, r29
     736:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    SPI_write(data);
     73a:	8c 2f       	mov	r24, r28
     73c:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     740:	88 b3       	in	r24, 0x18	; 24
     742:	80 61       	ori	r24, 0x10	; 16
     744:	88 bb       	out	0x18, r24	; 24
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	08 95       	ret

0000074e <mcp2515_reset>:
void mcp2515_reset()
{
    SPI_write(MCP_RESET);
     74e:	80 ec       	ldi	r24, 0xC0	; 192
     750:	0e 94 96 05 	call	0xb2c	; 0xb2c <SPI_write>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	60 ee       	ldi	r22, 0xE0	; 224
     758:	8f e0       	ldi	r24, 0x0F	; 15
     75a:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
     75e:	08 95       	ret

00000760 <mcp2515_init>:
#include "mcp.h"

uint8_t mcp2515_init ()
{
    DDRB |= (1 << PB4 ); // Set CS - pin as output
     760:	87 b3       	in	r24, 0x17	; 23
     762:	80 61       	ori	r24, 0x10	; 16
     764:	87 bb       	out	0x17, r24	; 23

    
    SPI_init () ; // Initialize SPI
     766:	0e 94 89 05 	call	0xb12	; 0xb12 <SPI_init>
    mcp2515_reset () ; // Send reset - command
     76a:	0e 94 a7 03 	call	0x74e	; 0x74e <mcp2515_reset>
    // Self - test
	
    uint8_t value = mcp2515_read ( MCP_CANSTAT  );
     76e:	8e e0       	ldi	r24, 0x0E	; 14
     770:	0e 94 36 03 	call	0x66c	; 0x66c <mcp2515_read>
	
    if (( value & MODE_MASK ) != MODE_CONFIG ) {
     774:	80 7e       	andi	r24, 0xE0	; 224
     776:	80 38       	cpi	r24, 0x80	; 128
     778:	31 f0       	breq	.+12     	; 0x786 <mcp2515_init+0x26>
        printf (" MCP2515 is NOT in configuration mode after reset !\n");
     77a:	84 e3       	ldi	r24, 0x34	; 52
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 cf 09 	call	0x139e	; 0x139e <puts>
        return 1;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	08 95       	ret
    }
    mcp2515_bit_modify(MCP_TXRTSCTRL, 0b00000001, 0b00000001);
     786:	41 e0       	ldi	r20, 0x01	; 1
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	8d e0       	ldi	r24, 0x0D	; 13
     78c:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	
    mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0b00000001); // Enable Message received interrupt
     790:	41 e0       	ldi	r20, 0x01	; 1
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	8b e2       	ldi	r24, 0x2B	; 43
     796:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	
	// Can bus Bit timing
	mcp2515_bit_modify(MCP_CNF1, 0b00111111, 0b00000011); // T_Q = 500ns
     79a:	43 e0       	ldi	r20, 0x03	; 3
     79c:	6f e3       	ldi	r22, 0x3F	; 63
     79e:	8a e2       	ldi	r24, 0x2A	; 42
     7a0:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF1, 0b11000000, 0b00000000); // Synchronization Jump Width Length = 1*T_Q
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	60 ec       	ldi	r22, 0xC0	; 192
     7a8:	8a e2       	ldi	r24, 0x2A	; 42
     7aa:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2, 0b11111111, 0b10110001); // Phase 1 length = 7*T_Q, Propagation Segment = 2*T_Q, BUs Line sampled once and Length of Phase 2 determined by CNF3
     7ae:	41 eb       	ldi	r20, 0xB1	; 177
     7b0:	6f ef       	ldi	r22, 0xFF	; 255
     7b2:	89 e2       	ldi	r24, 0x29	; 41
     7b4:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3, 0b00000111, 0b00000101); // Phase 2 length = 6*T_Q
     7b8:	45 e0       	ldi	r20, 0x05	; 5
     7ba:	67 e0       	ldi	r22, 0x07	; 7
     7bc:	88 e2       	ldi	r24, 0x28	; 40
     7be:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Disable masks - receive all messages
     7c2:	40 e6       	ldi	r20, 0x60	; 96
     7c4:	60 e6       	ldi	r22, 0x60	; 96
     7c6:	80 e6       	ldi	r24, 0x60	; 96
     7c8:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_bit_modify>
	//printf("%02x ", mcp2515_read(MCP_CNF2));
	//printf("%02x ", mcp2515_read(MCP_CNF3));
	
    
    // More initialization
    return 0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
}
     7ce:	08 95       	ret

000007d0 <menu_init>:
#include "menu.h"

void menu_init()
{
	selected_position = 0;
     7d0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <selected_position>
	current_menu = 0;
     7d4:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <current_menu>
	OLED_pos(0, 0);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <OLED_pos>
	OLED_reset();
     7e4:	0e 94 c0 04 	call	0x980	; 0x980 <OLED_reset>
     7e8:	08 95       	ret

000007ea <menu_input_loop>:
}
void menu_input_loop(input_t input)
{
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	27 97       	sbiw	r28, 0x07	; 7
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	29 83       	std	Y+1, r18	; 0x01
     802:	3a 83       	std	Y+2, r19	; 0x02
     804:	4b 83       	std	Y+3, r20	; 0x03
     806:	5c 83       	std	Y+4, r21	; 0x04
     808:	6d 83       	std	Y+5, r22	; 0x05
     80a:	7e 83       	std	Y+6, r23	; 0x06
     80c:	8f 83       	std	Y+7, r24	; 0x07
	if(input.direction == UP && last_input.direction != UP)
     80e:	18 2f       	mov	r17, r24
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	c9 f4       	brne	.+50     	; 0x846 <menu_input_loop+0x5c>
     814:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <last_input+0x6>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	a9 f0       	breq	.+42     	; 0x846 <menu_input_loop+0x5c>
	{
		selected_position = MAX(selected_position-1, 0);
     81c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <selected_position>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	12 f4       	brpl	.+4      	; 0x82a <menu_input_loop+0x40>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <selected_position>
		printf("UP %d", selected_position);
     82e:	1f 92       	push	r1
     830:	8f 93       	push	r24
     832:	88 e6       	ldi	r24, 0x68	; 104
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
	}
	if(input.direction == DOWN && last_input.direction != DOWN)
     846:	13 30       	cpi	r17, 0x03	; 3
     848:	d9 f4       	brne	.+54     	; 0x880 <menu_input_loop+0x96>
     84a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <last_input+0x6>
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	b9 f0       	breq	.+46     	; 0x880 <menu_input_loop+0x96>
	{
		selected_position = MIN(selected_position+1, 2);
     852:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <selected_position>
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	91 05       	cpc	r25, r1
     85e:	14 f0       	brlt	.+4      	; 0x864 <menu_input_loop+0x7a>
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <selected_position>
		printf("DOWN %d", selected_position);
     868:	1f 92       	push	r1
     86a:	8f 93       	push	r24
     86c:	8e e6       	ldi	r24, 0x6E	; 110
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
	}
	
	if(input.button_left && (!last_input.button_left))
     880:	8e 81       	ldd	r24, Y+6	; 0x06
     882:	88 23       	and	r24, r24
     884:	b9 f0       	breq	.+46     	; 0x8b4 <menu_input_loop+0xca>
     886:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <last_input+0x5>
     88a:	81 11       	cpse	r24, r1
     88c:	13 c0       	rjmp	.+38     	; 0x8b4 <menu_input_loop+0xca>
	{
		current_menu = menu_info[current_menu].select_jump[selected_position];
     88e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <current_menu>
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <selected_position>
     898:	fc 01       	movw	r30, r24
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e8 0f       	add	r30, r24
     8a0:	f9 1f       	adc	r31, r25
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	e0 56       	subi	r30, 0x60	; 96
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	e2 0f       	add	r30, r18
     8ac:	f1 1d       	adc	r31, r1
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <current_menu>
	}
	
	/*printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);*/
	last_input = input;
     8b4:	87 e0       	ldi	r24, 0x07	; 7
     8b6:	fe 01       	movw	r30, r28
     8b8:	31 96       	adiw	r30, 0x01	; 1
     8ba:	ac ef       	ldi	r26, 0xFC	; 252
     8bc:	b1 e0       	ldi	r27, 0x01	; 1
     8be:	01 90       	ld	r0, Z+
     8c0:	0d 92       	st	X+, r0
     8c2:	8a 95       	dec	r24
     8c4:	e1 f7       	brne	.-8      	; 0x8be <menu_input_loop+0xd4>
}
     8c6:	27 96       	adiw	r28, 0x07	; 7
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	08 95       	ret

000008da <menu_draw_loop>:
void menu_draw_loop(input_t input)
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	27 97       	sbiw	r28, 0x07	; 7
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
     8f2:	0e 94 c0 04 	call	0x980	; 0x980 <OLED_reset>
	//}
	
	for(int row = 0; row < 3; row++)
     8f6:	00 e0       	ldi	r16, 0x00	; 0
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	20 c0       	rjmp	.+64     	; 0x93c <menu_draw_loop+0x62>
	{
		OLED_pos(10 + row*8, 10);
     8fc:	c8 01       	movw	r24, r16
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	6a e0       	ldi	r22, 0x0A	; 10
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0a 96       	adiw	r24, 0x0a	; 10
     910:	0e 94 e5 04 	call	0x9ca	; 0x9ca <OLED_pos>
		OLED_print(menu_items[current_menu][row]);
     914:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <current_menu>
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	fc 01       	movw	r30, r24
     91c:	ee 0f       	add	r30, r30
     91e:	ff 1f       	adc	r31, r31
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
     924:	e0 0f       	add	r30, r16
     926:	f1 1f       	adc	r31, r17
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	ea 5f       	subi	r30, 0xFA	; 250
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	0e 94 60 05 	call	0xac0	; 0xac0 <OLED_print>
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
	//}
	
	for(int row = 0; row < 3; row++)
     938:	0f 5f       	subi	r16, 0xFF	; 255
     93a:	1f 4f       	sbci	r17, 0xFF	; 255
     93c:	03 30       	cpi	r16, 0x03	; 3
     93e:	11 05       	cpc	r17, r1
     940:	ec f2       	brlt	.-70     	; 0x8fc <menu_draw_loop+0x22>
	{
		OLED_pos(10 + row*8, 10);
		OLED_print(menu_items[current_menu][row]);
	}
	OLED_print_arrow(10 + selected_position*8, 0);
     942:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <selected_position>
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	0a 96       	adiw	r24, 0x0a	; 10
     95a:	0e 94 77 05 	call	0xaee	; 0xaee <OLED_print_arrow>
     95e:	27 96       	adiw	r28, 0x07	; 7
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <OLED_write_data>:
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
}
void OLED_write_data(char data)
{
	volatile char* oled_data_register = (char*) BASE_ADDRESS_OLED_DATA;
	oled_data_register[0] = data;
     974:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xff3>
     978:	08 95       	ret

0000097a <OLED_write_command>:
}
void OLED_write_command(char data)
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
     97a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xdf3>
     97e:	08 95       	ret

00000980 <OLED_reset>:
} // PDF:"OLED LY190-128064" section 9.4



void OLED_reset()
{
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	for (int page = 0; page < 8; page++)
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	10 e0       	ldi	r17, 0x00	; 0
     98c:	16 c0       	rjmp	.+44     	; 0x9ba <OLED_reset+0x3a>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
     98e:	80 eb       	ldi	r24, 0xB0	; 176
     990:	80 0f       	add	r24, r16
     992:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
		
		for (int i = 0; i < 128; i++)
     9a2:	c0 e0       	ldi	r28, 0x00	; 0
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <OLED_reset+0x30>
		{
			OLED_write_data(0);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
		
		for (int i = 0; i < 128; i++)
     9ae:	21 96       	adiw	r28, 0x01	; 1
     9b0:	c0 38       	cpi	r28, 0x80	; 128
     9b2:	d1 05       	cpc	r29, r1
     9b4:	cc f3       	brlt	.-14     	; 0x9a8 <OLED_reset+0x28>



void OLED_reset()
{
	for (int page = 0; page < 8; page++)
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	08 30       	cpi	r16, 0x08	; 8
     9bc:	11 05       	cpc	r17, r1
     9be:	3c f3       	brlt	.-50     	; 0x98e <OLED_reset+0xe>
		for (int i = 0; i < 128; i++)
		{
			OLED_write_data(0);
		}
	}
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	08 95       	ret

000009ca <OLED_pos>:
void OLED_clear_line(uint8_t line)
{
	
}
void OLED_pos(uint8_t row, uint8_t column)
{
     9ca:	cf 93       	push	r28
     9cc:	c6 2f       	mov	r28, r22
	OLED_write_command(0xb0 + row / 8); // Set the page start address of the target display location by command B0h to B7h
     9ce:	86 95       	lsr	r24
     9d0:	86 95       	lsr	r24
     9d2:	86 95       	lsr	r24
     9d4:	80 55       	subi	r24, 0x50	; 80
     9d6:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x00 + column % 16); // Set the lower start column address of pointer by command 00h~0Fh.
     9da:	8c 2f       	mov	r24, r28
     9dc:	8f 70       	andi	r24, 0x0F	; 15
     9de:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
     9e2:	8c 2f       	mov	r24, r28
     9e4:	82 95       	swap	r24
     9e6:	8f 70       	andi	r24, 0x0F	; 15
     9e8:	80 5f       	subi	r24, 0xF0	; 240
     9ea:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
}
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <OLED_init>:
#include <avr/pgmspace.h>

void OLED_init()
{
	
	OLED_write_command(0xae); // display off
     9f2:	8e ea       	ldi	r24, 0xAE	; 174
     9f4:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xa1); //segment remap
     9f8:	81 ea       	ldi	r24, 0xA1	; 161
     9fa:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xda); //common pads hardware: alternative
     9fe:	8a ed       	ldi	r24, 0xDA	; 218
     a00:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x12);
     a04:	82 e1       	ldi	r24, 0x12	; 18
     a06:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xc8); //common output scan direction:com63~com0
     a0a:	88 ec       	ldi	r24, 0xC8	; 200
     a0c:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xa8); //multiplex ration mode:63
     a10:	88 ea       	ldi	r24, 0xA8	; 168
     a12:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x3f);
     a16:	8f e3       	ldi	r24, 0x3F	; 63
     a18:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xd5); //display divide ratio/osc. freq. mode
     a1c:	85 ed       	ldi	r24, 0xD5	; 213
     a1e:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x80);
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x81); //contrast control
     a28:	81 e8       	ldi	r24, 0x81	; 129
     a2a:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x50);
     a2e:	80 e5       	ldi	r24, 0x50	; 80
     a30:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xd9); //set pre-charge period
     a34:	89 ed       	ldi	r24, 0xD9	; 217
     a36:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x21);
     a3a:	81 e2       	ldi	r24, 0x21	; 33
     a3c:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x20); //Set Memory Addressing Mode
     a40:	80 e2       	ldi	r24, 0x20	; 32
     a42:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x02);
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xdb); //VCOM deselect level mode
     a4c:	8b ed       	ldi	r24, 0xDB	; 219
     a4e:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x30);
     a52:	80 e3       	ldi	r24, 0x30	; 48
     a54:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xad); //master configuration
     a58:	8d ea       	ldi	r24, 0xAD	; 173
     a5a:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0x00);
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xa4); //out follows RAM content
     a64:	84 ea       	ldi	r24, 0xA4	; 164
     a66:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xa6); //set normal display
     a6a:	86 ea       	ldi	r24, 0xA6	; 166
     a6c:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	OLED_write_command(0xaf); // display on
     a70:	8f ea       	ldi	r24, 0xAF	; 175
     a72:	0e 94 bd 04 	call	0x97a	; 0x97a <OLED_write_command>
	//OLED_write_command(0xa5);
	/*OLED_write_command(0xb0); // Set the page start address of the target display location by command B0h to B7h
	OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
	OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh*/
	
	OLED_reset();
     a76:	0e 94 c0 04 	call	0x980	; 0x980 <OLED_reset>
	OLED_pos(0, 0);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <OLED_pos>
     a82:	08 95       	ret

00000a84 <OLED_print_character>:
		i++;
	}
}

void OLED_print_character(char character)
{
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	18 2f       	mov	r17, r24
	for (int row = 0; row < 8; row++)
     a8c:	c0 e0       	ldi	r28, 0x00	; 0
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	10 c0       	rjmp	.+32     	; 0xab2 <OLED_print_character+0x2e>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
     a92:	e1 2f       	mov	r30, r17
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	ec 0f       	add	r30, r28
     aa4:	fd 1f       	adc	r31, r29
     aa6:	e0 59       	subi	r30, 0x90	; 144
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	84 91       	lpm	r24, Z
     aac:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
	}
}

void OLED_print_character(char character)
{
	for (int row = 0; row < 8; row++)
     ab0:	21 96       	adiw	r28, 0x01	; 1
     ab2:	c8 30       	cpi	r28, 0x08	; 8
     ab4:	d1 05       	cpc	r29, r1
     ab6:	6c f3       	brlt	.-38     	; 0xa92 <OLED_print_character+0xe>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
	}
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	08 95       	ret

00000ac0 <OLED_print>:
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	8c 01       	movw	r16, r24
	int i = 0;
     aca:	c0 e0       	ldi	r28, 0x00	; 0
     acc:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i] != '\0')
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <OLED_print+0x18>
	{
		OLED_print_character(string[i] - 32);
     ad0:	80 52       	subi	r24, 0x20	; 32
     ad2:	0e 94 42 05 	call	0xa84	; 0xa84 <OLED_print_character>
		i++;
     ad6:	21 96       	adiw	r28, 0x01	; 1
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
	int i = 0;
	while(string[i] != '\0')
     ad8:	f8 01       	movw	r30, r16
     ada:	ec 0f       	add	r30, r28
     adc:	fd 1f       	adc	r31, r29
     ade:	80 81       	ld	r24, Z
     ae0:	81 11       	cpse	r24, r1
     ae2:	f6 cf       	rjmp	.-20     	; 0xad0 <OLED_print+0x10>
	{
		OLED_print_character(string[i] - 32);
		i++;
	}
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <OLED_print_arrow>:
void OLED_set_brightness(uint8_t lvl);


void OLED_print_arrow ( uint8_t row , uint8_t col )
{
	OLED_pos ( row , col );
     aee:	0e 94 e5 04 	call	0x9ca	; 0x9ca <OLED_pos>
	OLED_write_data (0b00011000 );
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
	OLED_write_data (0b00011000 );
     af8:	88 e1       	ldi	r24, 0x18	; 24
     afa:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
	OLED_write_data (0b01111110 );
     afe:	8e e7       	ldi	r24, 0x7E	; 126
     b00:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
	OLED_write_data (0b00111100 );
     b04:	8c e3       	ldi	r24, 0x3C	; 60
     b06:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
	OLED_write_data (0b00011000 );
     b0a:	88 e1       	ldi	r24, 0x18	; 24
     b0c:	0e 94 ba 04 	call	0x974	; 0x974 <OLED_write_data>
     b10:	08 95       	ret

00000b12 <SPI_init>:
#include <avr/io.h>

void SPI_init(){
	
	/* Set MOSI, SCK output, all others input */
	DDRB |= (1 << PB5) | (1 << PB7);
     b12:	87 b3       	in	r24, 0x17	; 23
     b14:	80 6a       	ori	r24, 0xA0	; 160
     b16:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	//SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPIE) ;
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) ;
     b18:	8d b1       	in	r24, 0x0d	; 13
     b1a:	81 65       	ori	r24, 0x51	; 81
     b1c:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << SPR1) ;
     b1e:	8d b1       	in	r24, 0x0d	; 13
     b20:	8d 7f       	andi	r24, 0xFD	; 253
     b22:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1 << SPI2X) ;
     b24:	8e b1       	in	r24, 0x0e	; 14
     b26:	8e 7f       	andi	r24, 0xFE	; 254
     b28:	8e b9       	out	0x0e, r24	; 14
     b2a:	08 95       	ret

00000b2c <SPI_write>:
}

void SPI_write(char cData){
	
	/* Start transmission */
	SPDR = cData;
     b2c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     b2e:	77 9b       	sbis	0x0e, 7	; 14
     b30:	fe cf       	rjmp	.-4      	; 0xb2e <SPI_write+0x2>
	;
	
	
	
}
     b32:	08 95       	ret

00000b34 <SPI_read>:

char SPI_read(){
	
	/* Start transmission */
	SPDR = 0b00000000;
     b34:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     b36:	77 9b       	sbis	0x0e, 7	; 14
     b38:	fe cf       	rjmp	.-4      	; 0xb36 <SPI_read+0x2>
	;
	/* Received byte is found on the same register */
	return SPDR;
     b3a:	8f b1       	in	r24, 0x0f	; 15

     b3c:	08 95       	ret

00000b3e <USART_Transmit>:
    
}
void USART_Transmit(unsigned char data)
{
    // Wait until the transmitter buffer is empty
    while ( !( UCSR0A & (1<<UDRE0)) ); // USART Control and Status Register A, USART Data Register Empty
     b3e:	5d 9b       	sbis	0x0b, 5	; 11
     b40:	fe cf       	rjmp	.-4      	; 0xb3e <USART_Transmit>
    // Send data
    UDR0 = data; // USART Data Register
     b42:	8c b9       	out	0x0c, r24	; 12
     b44:	08 95       	ret

00000b46 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
     b46:	5f 9b       	sbis	0x0b, 7	; 11
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <USART_Receive+0x8>
        return '\0';
    // Return data received
    return UDR0; // USART Data Register
     b4a:	8c b1       	in	r24, 0x0c	; 12
     b4c:	08 95       	ret

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
        return '\0';
     b4e:	80 e0       	ldi	r24, 0x00	; 0
    // Return data received
    return UDR0; // USART Data Register
     b50:	08 95       	ret

00000b52 <usart_init>:

// static FILE usart_stream_write = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
// static FILE usart_stream_read = FDEV_SETUP_STREAM(NULL, USART_Transmit, _FDEV_SETUP_READ);

void usart_init(unsigned int usart_baud_rate_register)
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	c8 2f       	mov	r28, r24
     b58:	d9 2f       	mov	r29, r25
    // Open read/write stream over USART https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html#gab599ddf60819df4cc993c724a83cb1a4
    fdevopen(USART_Transmit, USART_Receive);
     b5a:	63 ea       	ldi	r22, 0xA3	; 163
     b5c:	75 e0       	ldi	r23, 0x05	; 5
     b5e:	8f e9       	ldi	r24, 0x9F	; 159
     b60:	95 e0       	ldi	r25, 0x05	; 5
     b62:	0e 94 6e 09 	call	0x12dc	; 0x12dc <fdevopen>
    // Set baud rate registers
    UBRR0H = (unsigned char)(usart_baud_rate_register>>8); // usart_baud_rate_register_high
     b66:	d0 bd       	out	0x20, r29	; 32
    UBRR0L = (unsigned char)usart_baud_rate_register; // usart_baud_rate_register_low
     b68:	c9 b9       	out	0x09, r28	; 9
    
    // Enable RX and TX registers
    UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Universal Synchronous Asynchronous Receiver Transmitter Register B, RX Enable, TX Enable
     b6a:	88 e1       	ldi	r24, 0x18	; 24
     b6c:	8a b9       	out	0x0a, r24	; 10
    
	
    // Set frame format to 8 data bits, 2 stop bits
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // Universal Synchronous Asynchronous Receiver Transmitter Register C, USART Register Select, USART Stop Bit Select, USART Character Size Select
     b6e:	8e e8       	ldi	r24, 0x8E	; 142
     b70:	80 bd       	out	0x20, r24	; 32
    
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <adc_init>:
}

uint8_t joystick_angle_from_voltage(uint8_t voltage)
{
	return voltage;
}
     b78:	81 b3       	in	r24, 0x11	; 17
     b7a:	80 61       	ori	r24, 0x10	; 16
     b7c:	81 bb       	out	0x11, r24	; 17
     b7e:	ab e8       	ldi	r26, 0x8B	; 139
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	8c 91       	ld	r24, X
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
     b88:	ea e8       	ldi	r30, 0x8A	; 138
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 61       	ori	r24, 0x18	; 24
     b90:	80 83       	st	Z, r24
     b92:	8c 91       	ld	r24, X
     b94:	83 60       	ori	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	80 81       	ld	r24, Z
     b9a:	81 60       	ori	r24, 0x01	; 1
     b9c:	80 83       	st	Z, r24
     b9e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     ba2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     ba6:	81 b3       	in	r24, 0x11	; 17
     ba8:	8b 7f       	andi	r24, 0xFB	; 251
     baa:	81 bb       	out	0x11, r24	; 17
     bac:	81 b3       	in	r24, 0x11	; 17
     bae:	87 7f       	andi	r24, 0xF7	; 247
     bb0:	81 bb       	out	0x11, r24	; 17
     bb2:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <input_head+0x1>
     bb6:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <input_head>
     bba:	08 95       	ret

00000bbc <input_read>:

input_t input_read(){
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	65 97       	sbiw	r28, 0x15	; 21
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
	volatile char* adc_out = (char*) BASE_ADDRESS_ADC;
	adc_out[0] = 0;
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f4 e1       	ldi	r31, 0x14	; 20
     bf0:	10 82       	st	Z, r1
	
	// Wait for busy
	//_delay_ms(2);
	
	input_t input;
	uint8_t y_raw = *adc_out;
     bf2:	d0 80       	ld	r13, Z
	uint8_t x_raw = *adc_out;
     bf4:	00 81       	ld	r16, Z
	uint8_t slider1_raw = *adc_out;
     bf6:	e0 80       	ld	r14, Z
	uint8_t slider2_raw = *adc_out;
     bf8:	f0 80       	ld	r15, Z
	
	const double PI =  3.1415926;	
	
	uint8_t y_positive = MAX(y_raw, 175) - 175;
     bfa:	8f ea       	ldi	r24, 0xAF	; 175
     bfc:	8d 15       	cp	r24, r13
     bfe:	18 f4       	brcc	.+6      	; 0xc06 <input_read+0x4a>
     c00:	61 e5       	ldi	r22, 0x51	; 81
     c02:	6d 0d       	add	r22, r13
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <input_read+0x4c>
     c06:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_positive = MAX(x_raw, 198) - 198;
     c08:	07 3c       	cpi	r16, 0xC7	; 199
     c0a:	18 f0       	brcs	.+6      	; 0xc12 <input_read+0x56>
     c0c:	1a e3       	ldi	r17, 0x3A	; 58
     c0e:	10 0f       	add	r17, r16
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <input_read+0x58>
     c12:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t y_positive_scaled = (uint8_t)((float)y_positive * ((float)127/(float)80));
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 4b 08 	call	0x1096	; 0x1096 <__floatunsisf>
     c1e:	23 e3       	ldi	r18, 0x33	; 51
     c20:	33 e3       	ldi	r19, 0x33	; 51
     c22:	4b ec       	ldi	r20, 0xCB	; 203
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__mulsf3>
     c2a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
     c2e:	b6 2e       	mov	r11, r22
	uint8_t x_positive_scaled = (uint8_t)((float)x_positive * ((float)127/(float)57));
     c30:	61 2f       	mov	r22, r17
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 4b 08 	call	0x1096	; 0x1096 <__floatunsisf>
     c3c:	24 eb       	ldi	r18, 0xB4	; 180
     c3e:	38 e9       	ldi	r19, 0x98	; 152
     c40:	4e e0       	ldi	r20, 0x0E	; 14
     c42:	50 e4       	ldi	r21, 0x40	; 64
     c44:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__mulsf3>
     c48:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
     c4c:	16 2f       	mov	r17, r22
	
	uint8_t y_negative = 175 - MIN(y_raw, 175);
     c4e:	ee ea       	ldi	r30, 0xAE	; 174
     c50:	ed 15       	cp	r30, r13
     c52:	18 f0       	brcs	.+6      	; 0xc5a <input_read+0x9e>
     c54:	6f ea       	ldi	r22, 0xAF	; 175
     c56:	6d 19       	sub	r22, r13
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <input_read+0xa0>
     c5a:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_negative = 198 - MIN(x_raw, 198);
     c5c:	06 3c       	cpi	r16, 0xC6	; 198
     c5e:	20 f4       	brcc	.+8      	; 0xc68 <input_read+0xac>
     c60:	86 ec       	ldi	r24, 0xC6	; 198
     c62:	d8 2e       	mov	r13, r24
     c64:	d0 1a       	sub	r13, r16
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <input_read+0xae>
     c68:	d1 2c       	mov	r13, r1
	
	uint8_t y_negative_scaled = (uint8_t)((float)y_negative * ((float)127/(float)175));
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 4b 08 	call	0x1096	; 0x1096 <__floatunsisf>
     c74:	29 e6       	ldi	r18, 0x69	; 105
     c76:	38 ec       	ldi	r19, 0xC8	; 200
     c78:	49 e3       	ldi	r20, 0x39	; 57
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__mulsf3>
     c80:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
     c84:	c6 2e       	mov	r12, r22
	uint8_t x_negative_scaled = (uint8_t)((float)x_negative * ((float)127/(float)198));
     c86:	6d 2d       	mov	r22, r13
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 4b 08 	call	0x1096	; 0x1096 <__floatunsisf>
     c92:	28 eb       	ldi	r18, 0xB8	; 184
     c94:	33 e3       	ldi	r19, 0x33	; 51
     c96:	44 e2       	ldi	r20, 0x24	; 36
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__mulsf3>
     c9e:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
	
	input.joystick_y = (uint8_t)((128 - y_negative_scaled) + y_positive_scaled);
     ca2:	9b 2d       	mov	r25, r11
     ca4:	9c 19       	sub	r25, r12
     ca6:	90 58       	subi	r25, 0x80	; 128
     ca8:	99 87       	std	Y+9, r25	; 0x09
	input.joystick_x = (uint8_t)((128 - x_negative_scaled) + x_positive_scaled);
     caa:	81 2f       	mov	r24, r17
     cac:	86 1b       	sub	r24, r22
     cae:	80 58       	subi	r24, 0x80	; 128
     cb0:	88 87       	std	Y+8, r24	; 0x08
	
	input.direction = CENTER;
     cb2:	1e 86       	std	Y+14, r1	; 0x0e
	if(input.joystick_y > 198)
     cb4:	97 3c       	cpi	r25, 0xC7	; 199
     cb6:	10 f0       	brcs	.+4      	; 0xcbc <input_read+0x100>
		input.direction = UP;
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_x > 198)
     cbc:	87 3c       	cpi	r24, 0xC7	; 199
     cbe:	10 f0       	brcs	.+4      	; 0xcc4 <input_read+0x108>
		input.direction = RIGHT;
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_y < 68)
     cc4:	94 34       	cpi	r25, 0x44	; 68
     cc6:	10 f4       	brcc	.+4      	; 0xccc <input_read+0x110>
		input.direction = DOWN;
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	9e 87       	std	Y+14, r25	; 0x0e
	if(input.joystick_x < 68)
     ccc:	84 34       	cpi	r24, 0x44	; 68
     cce:	10 f4       	brcc	.+4      	; 0xcd4 <input_read+0x118>
		input.direction = LEFT;
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	8e 87       	std	Y+14, r24	; 0x0e
	
	input.slider_1 = slider1_raw;
     cd4:	ea 86       	std	Y+10, r14	; 0x0a
	input.slider_2 = slider2_raw;
     cd6:	fb 86       	std	Y+11, r15	; 0x0b
	
	input.button_left = PIND & (1 << PD2);
     cd8:	80 b3       	in	r24, 0x10	; 16
     cda:	84 70       	andi	r24, 0x04	; 4
     cdc:	8d 87       	std	Y+13, r24	; 0x0d
	input.button_right= PIND & (1 << PD3);
     cde:	80 b3       	in	r24, 0x10	; 16
     ce0:	88 70       	andi	r24, 0x08	; 8
     ce2:	8c 87       	std	Y+12, r24	; 0x0c
	
	input_buffer[input_head] = input;
     ce4:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <input_head>
     ce8:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <input_head+0x1>
     cec:	dc 01       	movw	r26, r24
     cee:	aa 0f       	add	r26, r26
     cf0:	bb 1f       	adc	r27, r27
     cf2:	aa 0f       	add	r26, r26
     cf4:	bb 1f       	adc	r27, r27
     cf6:	aa 0f       	add	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	a8 1b       	sub	r26, r24
     cfc:	b9 0b       	sbc	r27, r25
     cfe:	ae 54       	subi	r26, 0x4E	; 78
     d00:	be 4f       	sbci	r27, 0xFE	; 254
     d02:	27 e0       	ldi	r18, 0x07	; 7
     d04:	fe 01       	movw	r30, r28
     d06:	38 96       	adiw	r30, 0x08	; 8
     d08:	01 90       	ld	r0, Z+
     d0a:	0d 92       	st	X+, r0
     d0c:	2a 95       	dec	r18
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <input_read+0x14c>
	input_head = (input_head + 1) % INPUT_BUFFER_SIZE;
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	6a e0       	ldi	r22, 0x0A	; 10
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	0e 94 46 09 	call	0x128c	; 0x128c <__divmodhi4>
     d1a:	c8 2e       	mov	r12, r24
     d1c:	d9 2e       	mov	r13, r25
     d1e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <input_head>
     d22:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <input_head+0x1>
	
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
     d26:	87 e0       	ldi	r24, 0x07	; 7
     d28:	fe 01       	movw	r30, r28
     d2a:	38 96       	adiw	r30, 0x08	; 8
     d2c:	de 01       	movw	r26, r28
     d2e:	1f 96       	adiw	r26, 0x0f	; 15
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <input_read+0x174>
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	
	for(int age = 0; age < INPUT_BUFFER_SIZE; age++)
     d38:	e1 2c       	mov	r14, r1
     d3a:	f1 2c       	mov	r15, r1
	input_head = (input_head + 1) % INPUT_BUFFER_SIZE;
	
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
     d3c:	81 2c       	mov	r8, r1
     d3e:	91 2c       	mov	r9, r1
     d40:	54 01       	movw	r10, r8
	input_buffer[input_head] = input;
	input_head = (input_head + 1) % INPUT_BUFFER_SIZE;
	
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
     d42:	24 01       	movw	r4, r8
     d44:	35 01       	movw	r6, r10
	float smooth_joystick_y = 0;
	
	for(int age = 0; age < INPUT_BUFFER_SIZE; age++)
     d46:	43 c0       	rjmp	.+134    	; 0xdce <input_read+0x212>
	{
		int buffer_index = (input_head + age) % INPUT_BUFFER_SIZE;
     d48:	c7 01       	movw	r24, r14
     d4a:	8c 0d       	add	r24, r12
     d4c:	9d 1d       	adc	r25, r13
     d4e:	2a e0       	ldi	r18, 0x0A	; 10
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	b9 01       	movw	r22, r18
     d54:	0e 94 46 09 	call	0x128c	; 0x128c <__divmodhi4>
		smooth_joystick_x += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_x / INPUT_BUFFER_SIZE; //* pow(1/2, age);
     d58:	b9 01       	movw	r22, r18
     d5a:	0e 94 46 09 	call	0x128c	; 0x128c <__divmodhi4>
     d5e:	8c 01       	movw	r16, r24
     d60:	00 0f       	add	r16, r16
     d62:	11 1f       	adc	r17, r17
     d64:	00 0f       	add	r16, r16
     d66:	11 1f       	adc	r17, r17
     d68:	00 0f       	add	r16, r16
     d6a:	11 1f       	adc	r17, r17
     d6c:	08 1b       	sub	r16, r24
     d6e:	19 0b       	sbc	r17, r25
     d70:	0e 54       	subi	r16, 0x4E	; 78
     d72:	1e 4f       	sbci	r17, 0xFE	; 254
     d74:	f8 01       	movw	r30, r16
     d76:	60 81       	ld	r22, Z
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 4b 08 	call	0x1096	; 0x1096 <__floatunsisf>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divsf3>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	c3 01       	movw	r24, r6
     d94:	b2 01       	movw	r22, r4
     d96:	0e 94 37 07 	call	0xe6e	; 0xe6e <__addsf3>
     d9a:	2b 01       	movw	r4, r22
     d9c:	3c 01       	movw	r6, r24
		smooth_joystick_y += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_y / INPUT_BUFFER_SIZE;
     d9e:	f8 01       	movw	r30, r16
     da0:	61 81       	ldd	r22, Z+1	; 0x01
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 4b 08 	call	0x1096	; 0x1096 <__floatunsisf>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divsf3>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	c5 01       	movw	r24, r10
     dbe:	b4 01       	movw	r22, r8
     dc0:	0e 94 37 07 	call	0xe6e	; 0xe6e <__addsf3>
     dc4:	4b 01       	movw	r8, r22
     dc6:	5c 01       	movw	r10, r24
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	
	for(int age = 0; age < INPUT_BUFFER_SIZE; age++)
     dc8:	ff ef       	ldi	r31, 0xFF	; 255
     dca:	ef 1a       	sub	r14, r31
     dcc:	ff 0a       	sbc	r15, r31
     dce:	8a e0       	ldi	r24, 0x0A	; 10
     dd0:	e8 16       	cp	r14, r24
     dd2:	f1 04       	cpc	r15, r1
     dd4:	0c f4       	brge	.+2      	; 0xdd8 <input_read+0x21c>
     dd6:	b8 cf       	rjmp	.-144    	; 0xd48 <input_read+0x18c>
	{
		int buffer_index = (input_head + age) % INPUT_BUFFER_SIZE;
		smooth_joystick_x += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_x / INPUT_BUFFER_SIZE; //* pow(1/2, age);
		smooth_joystick_y += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_y / INPUT_BUFFER_SIZE;
	}
	smooth_input.joystick_x = (int)smooth_joystick_x;
     dd8:	c3 01       	movw	r24, r6
     dda:	b2 01       	movw	r22, r4
     ddc:	0e 94 15 08 	call	0x102a	; 0x102a <__fixsfsi>
     de0:	16 2f       	mov	r17, r22
     de2:	07 2f       	mov	r16, r23
     de4:	6f 87       	std	Y+15, r22	; 0x0f
	smooth_input.joystick_y = (int)smooth_joystick_y;
     de6:	c5 01       	movw	r24, r10
     de8:	b4 01       	movw	r22, r8
     dea:	0e 94 15 08 	call	0x102a	; 0x102a <__fixsfsi>
     dee:	68 8b       	std	Y+16, r22	; 0x10
	
	printf("%d   ", (int)(smooth_joystick_x));
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	8c ea       	ldi	r24, 0xAC	; 172
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	0e 94 b9 09 	call	0x1372	; 0x1372 <printf>

	return smooth_input;
     e00:	87 e0       	ldi	r24, 0x07	; 7
     e02:	fe 01       	movw	r30, r28
     e04:	3f 96       	adiw	r30, 0x0f	; 15
     e06:	de 01       	movw	r26, r28
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	01 90       	ld	r0, Z+
     e0c:	0d 92       	st	X+, r0
     e0e:	8a 95       	dec	r24
     e10:	e1 f7       	brne	.-8      	; 0xe0a <input_read+0x24e>
     e12:	29 81       	ldd	r18, Y+1	; 0x01
     e14:	3a 81       	ldd	r19, Y+2	; 0x02
     e16:	4b 81       	ldd	r20, Y+3	; 0x03
     e18:	5c 81       	ldd	r21, Y+4	; 0x04
     e1a:	6d 81       	ldd	r22, Y+5	; 0x05
     e1c:	7e 81       	ldd	r23, Y+6	; 0x06
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
}
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	65 96       	adiw	r28, 0x15	; 21
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	7f 90       	pop	r7
     e50:	6f 90       	pop	r6
     e52:	5f 90       	pop	r5
     e54:	4f 90       	pop	r4
     e56:	08 95       	ret

00000e58 <xmem_init>:
#include "xmem.h"

// From lab lecture
void xmem_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     e58:	85 b7       	in	r24, 0x35	; 53
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	85 bf       	out	0x35, r24	; 53
	// Mask out some port C address pins for JTAG (datasheet page 32)
	SFIOR |= 1 << XMM2;
     e5e:	80 b7       	in	r24, 0x30	; 48
     e60:	80 62       	ori	r24, 0x20	; 32
     e62:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 | 1 << XMM1);
     e64:	80 b7       	in	r24, 0x30	; 48
     e66:	87 7e       	andi	r24, 0xE7	; 231
     e68:	80 bf       	out	0x30, r24	; 48
     e6a:	08 95       	ret

00000e6c <__subsf3>:
     e6c:	50 58       	subi	r21, 0x80	; 128

00000e6e <__addsf3>:
     e6e:	bb 27       	eor	r27, r27
     e70:	aa 27       	eor	r26, r26
     e72:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__addsf3x>
     e76:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
     e7a:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
     e7e:	38 f0       	brcs	.+14     	; 0xe8e <__addsf3+0x20>
     e80:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
     e84:	20 f0       	brcs	.+8      	; 0xe8e <__addsf3+0x20>
     e86:	39 f4       	brne	.+14     	; 0xe96 <__addsf3+0x28>
     e88:	9f 3f       	cpi	r25, 0xFF	; 255
     e8a:	19 f4       	brne	.+6      	; 0xe92 <__addsf3+0x24>
     e8c:	26 f4       	brtc	.+8      	; 0xe96 <__addsf3+0x28>
     e8e:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
     e92:	0e f4       	brtc	.+2      	; 0xe96 <__addsf3+0x28>
     e94:	e0 95       	com	r30
     e96:	e7 fb       	bst	r30, 7
     e98:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>

00000e9c <__addsf3x>:
     e9c:	e9 2f       	mov	r30, r25
     e9e:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
     ea2:	58 f3       	brcs	.-42     	; 0xe7a <__addsf3+0xc>
     ea4:	ba 17       	cp	r27, r26
     ea6:	62 07       	cpc	r22, r18
     ea8:	73 07       	cpc	r23, r19
     eaa:	84 07       	cpc	r24, r20
     eac:	95 07       	cpc	r25, r21
     eae:	20 f0       	brcs	.+8      	; 0xeb8 <__addsf3x+0x1c>
     eb0:	79 f4       	brne	.+30     	; 0xed0 <__addsf3x+0x34>
     eb2:	a6 f5       	brtc	.+104    	; 0xf1c <__addsf3x+0x80>
     eb4:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
     eb8:	0e f4       	brtc	.+2      	; 0xebc <__addsf3x+0x20>
     eba:	e0 95       	com	r30
     ebc:	0b 2e       	mov	r0, r27
     ebe:	ba 2f       	mov	r27, r26
     ec0:	a0 2d       	mov	r26, r0
     ec2:	0b 01       	movw	r0, r22
     ec4:	b9 01       	movw	r22, r18
     ec6:	90 01       	movw	r18, r0
     ec8:	0c 01       	movw	r0, r24
     eca:	ca 01       	movw	r24, r20
     ecc:	a0 01       	movw	r20, r0
     ece:	11 24       	eor	r1, r1
     ed0:	ff 27       	eor	r31, r31
     ed2:	59 1b       	sub	r21, r25
     ed4:	99 f0       	breq	.+38     	; 0xefc <__addsf3x+0x60>
     ed6:	59 3f       	cpi	r21, 0xF9	; 249
     ed8:	50 f4       	brcc	.+20     	; 0xeee <__addsf3x+0x52>
     eda:	50 3e       	cpi	r21, 0xE0	; 224
     edc:	68 f1       	brcs	.+90     	; 0xf38 <__addsf3x+0x9c>
     ede:	1a 16       	cp	r1, r26
     ee0:	f0 40       	sbci	r31, 0x00	; 0
     ee2:	a2 2f       	mov	r26, r18
     ee4:	23 2f       	mov	r18, r19
     ee6:	34 2f       	mov	r19, r20
     ee8:	44 27       	eor	r20, r20
     eea:	58 5f       	subi	r21, 0xF8	; 248
     eec:	f3 cf       	rjmp	.-26     	; 0xed4 <__addsf3x+0x38>
     eee:	46 95       	lsr	r20
     ef0:	37 95       	ror	r19
     ef2:	27 95       	ror	r18
     ef4:	a7 95       	ror	r26
     ef6:	f0 40       	sbci	r31, 0x00	; 0
     ef8:	53 95       	inc	r21
     efa:	c9 f7       	brne	.-14     	; 0xeee <__addsf3x+0x52>
     efc:	7e f4       	brtc	.+30     	; 0xf1c <__addsf3x+0x80>
     efe:	1f 16       	cp	r1, r31
     f00:	ba 0b       	sbc	r27, r26
     f02:	62 0b       	sbc	r22, r18
     f04:	73 0b       	sbc	r23, r19
     f06:	84 0b       	sbc	r24, r20
     f08:	ba f0       	brmi	.+46     	; 0xf38 <__addsf3x+0x9c>
     f0a:	91 50       	subi	r25, 0x01	; 1
     f0c:	a1 f0       	breq	.+40     	; 0xf36 <__addsf3x+0x9a>
     f0e:	ff 0f       	add	r31, r31
     f10:	bb 1f       	adc	r27, r27
     f12:	66 1f       	adc	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	c2 f7       	brpl	.-16     	; 0xf0a <__addsf3x+0x6e>
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <__addsf3x+0x9c>
     f1c:	ba 0f       	add	r27, r26
     f1e:	62 1f       	adc	r22, r18
     f20:	73 1f       	adc	r23, r19
     f22:	84 1f       	adc	r24, r20
     f24:	48 f4       	brcc	.+18     	; 0xf38 <__addsf3x+0x9c>
     f26:	87 95       	ror	r24
     f28:	77 95       	ror	r23
     f2a:	67 95       	ror	r22
     f2c:	b7 95       	ror	r27
     f2e:	f7 95       	ror	r31
     f30:	9e 3f       	cpi	r25, 0xFE	; 254
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__addsf3x+0x9a>
     f34:	b0 cf       	rjmp	.-160    	; 0xe96 <__addsf3+0x28>
     f36:	93 95       	inc	r25
     f38:	88 0f       	add	r24, r24
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <__addsf3x+0xa2>
     f3c:	99 27       	eor	r25, r25
     f3e:	ee 0f       	add	r30, r30
     f40:	97 95       	ror	r25
     f42:	87 95       	ror	r24
     f44:	08 95       	ret

00000f46 <__divsf3>:
     f46:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__divsf3x>
     f4a:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
     f4e:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
     f52:	58 f0       	brcs	.+22     	; 0xf6a <__divsf3+0x24>
     f54:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
     f58:	40 f0       	brcs	.+16     	; 0xf6a <__divsf3+0x24>
     f5a:	29 f4       	brne	.+10     	; 0xf66 <__divsf3+0x20>
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	29 f0       	breq	.+10     	; 0xf6a <__divsf3+0x24>
     f60:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
     f64:	51 11       	cpse	r21, r1
     f66:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
     f6a:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>

00000f6e <__divsf3x>:
     f6e:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
     f72:	68 f3       	brcs	.-38     	; 0xf4e <__divsf3+0x8>

00000f74 <__divsf3_pse>:
     f74:	99 23       	and	r25, r25
     f76:	b1 f3       	breq	.-20     	; 0xf64 <__divsf3+0x1e>
     f78:	55 23       	and	r21, r21
     f7a:	91 f3       	breq	.-28     	; 0xf60 <__divsf3+0x1a>
     f7c:	95 1b       	sub	r25, r21
     f7e:	55 0b       	sbc	r21, r21
     f80:	bb 27       	eor	r27, r27
     f82:	aa 27       	eor	r26, r26
     f84:	62 17       	cp	r22, r18
     f86:	73 07       	cpc	r23, r19
     f88:	84 07       	cpc	r24, r20
     f8a:	38 f0       	brcs	.+14     	; 0xf9a <__divsf3_pse+0x26>
     f8c:	9f 5f       	subi	r25, 0xFF	; 255
     f8e:	5f 4f       	sbci	r21, 0xFF	; 255
     f90:	22 0f       	add	r18, r18
     f92:	33 1f       	adc	r19, r19
     f94:	44 1f       	adc	r20, r20
     f96:	aa 1f       	adc	r26, r26
     f98:	a9 f3       	breq	.-22     	; 0xf84 <__divsf3_pse+0x10>
     f9a:	35 d0       	rcall	.+106    	; 0x1006 <__divsf3_pse+0x92>
     f9c:	0e 2e       	mov	r0, r30
     f9e:	3a f0       	brmi	.+14     	; 0xfae <__divsf3_pse+0x3a>
     fa0:	e0 e8       	ldi	r30, 0x80	; 128
     fa2:	32 d0       	rcall	.+100    	; 0x1008 <__divsf3_pse+0x94>
     fa4:	91 50       	subi	r25, 0x01	; 1
     fa6:	50 40       	sbci	r21, 0x00	; 0
     fa8:	e6 95       	lsr	r30
     faa:	00 1c       	adc	r0, r0
     fac:	ca f7       	brpl	.-14     	; 0xfa0 <__divsf3_pse+0x2c>
     fae:	2b d0       	rcall	.+86     	; 0x1006 <__divsf3_pse+0x92>
     fb0:	fe 2f       	mov	r31, r30
     fb2:	29 d0       	rcall	.+82     	; 0x1006 <__divsf3_pse+0x92>
     fb4:	66 0f       	add	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	88 1f       	adc	r24, r24
     fba:	bb 1f       	adc	r27, r27
     fbc:	26 17       	cp	r18, r22
     fbe:	37 07       	cpc	r19, r23
     fc0:	48 07       	cpc	r20, r24
     fc2:	ab 07       	cpc	r26, r27
     fc4:	b0 e8       	ldi	r27, 0x80	; 128
     fc6:	09 f0       	breq	.+2      	; 0xfca <__divsf3_pse+0x56>
     fc8:	bb 0b       	sbc	r27, r27
     fca:	80 2d       	mov	r24, r0
     fcc:	bf 01       	movw	r22, r30
     fce:	ff 27       	eor	r31, r31
     fd0:	93 58       	subi	r25, 0x83	; 131
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	3a f0       	brmi	.+14     	; 0xfe4 <__divsf3_pse+0x70>
     fd6:	9e 3f       	cpi	r25, 0xFE	; 254
     fd8:	51 05       	cpc	r21, r1
     fda:	78 f0       	brcs	.+30     	; 0xffa <__divsf3_pse+0x86>
     fdc:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
     fe0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	e4 f3       	brlt	.-8      	; 0xfe0 <__divsf3_pse+0x6c>
     fe8:	98 3e       	cpi	r25, 0xE8	; 232
     fea:	d4 f3       	brlt	.-12     	; 0xfe0 <__divsf3_pse+0x6c>
     fec:	86 95       	lsr	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	b7 95       	ror	r27
     ff4:	f7 95       	ror	r31
     ff6:	9f 5f       	subi	r25, 0xFF	; 255
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__divsf3_pse+0x78>
     ffa:	88 0f       	add	r24, r24
     ffc:	91 1d       	adc	r25, r1
     ffe:	96 95       	lsr	r25
    1000:	87 95       	ror	r24
    1002:	97 f9       	bld	r25, 7
    1004:	08 95       	ret
    1006:	e1 e0       	ldi	r30, 0x01	; 1
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	bb 1f       	adc	r27, r27
    1010:	62 17       	cp	r22, r18
    1012:	73 07       	cpc	r23, r19
    1014:	84 07       	cpc	r24, r20
    1016:	ba 07       	cpc	r27, r26
    1018:	20 f0       	brcs	.+8      	; 0x1022 <__divsf3_pse+0xae>
    101a:	62 1b       	sub	r22, r18
    101c:	73 0b       	sbc	r23, r19
    101e:	84 0b       	sbc	r24, r20
    1020:	ba 0b       	sbc	r27, r26
    1022:	ee 1f       	adc	r30, r30
    1024:	88 f7       	brcc	.-30     	; 0x1008 <__divsf3_pse+0x94>
    1026:	e0 95       	com	r30
    1028:	08 95       	ret

0000102a <__fixsfsi>:
    102a:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fixunssfsi>
    102e:	68 94       	set
    1030:	b1 11       	cpse	r27, r1
    1032:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
    1036:	08 95       	ret

00001038 <__fixunssfsi>:
    1038:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_splitA>
    103c:	88 f0       	brcs	.+34     	; 0x1060 <__fixunssfsi+0x28>
    103e:	9f 57       	subi	r25, 0x7F	; 127
    1040:	98 f0       	brcs	.+38     	; 0x1068 <__fixunssfsi+0x30>
    1042:	b9 2f       	mov	r27, r25
    1044:	99 27       	eor	r25, r25
    1046:	b7 51       	subi	r27, 0x17	; 23
    1048:	b0 f0       	brcs	.+44     	; 0x1076 <__fixunssfsi+0x3e>
    104a:	e1 f0       	breq	.+56     	; 0x1084 <__fixunssfsi+0x4c>
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	1a f0       	brmi	.+6      	; 0x105c <__fixunssfsi+0x24>
    1056:	ba 95       	dec	r27
    1058:	c9 f7       	brne	.-14     	; 0x104c <__fixunssfsi+0x14>
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <__fixunssfsi+0x4c>
    105c:	b1 30       	cpi	r27, 0x01	; 1
    105e:	91 f0       	breq	.+36     	; 0x1084 <__fixunssfsi+0x4c>
    1060:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fp_zero>
    1064:	b1 e0       	ldi	r27, 0x01	; 1
    1066:	08 95       	ret
    1068:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_zero>
    106c:	67 2f       	mov	r22, r23
    106e:	78 2f       	mov	r23, r24
    1070:	88 27       	eor	r24, r24
    1072:	b8 5f       	subi	r27, 0xF8	; 248
    1074:	39 f0       	breq	.+14     	; 0x1084 <__fixunssfsi+0x4c>
    1076:	b9 3f       	cpi	r27, 0xF9	; 249
    1078:	cc f3       	brlt	.-14     	; 0x106c <__fixunssfsi+0x34>
    107a:	86 95       	lsr	r24
    107c:	77 95       	ror	r23
    107e:	67 95       	ror	r22
    1080:	b3 95       	inc	r27
    1082:	d9 f7       	brne	.-10     	; 0x107a <__fixunssfsi+0x42>
    1084:	3e f4       	brtc	.+14     	; 0x1094 <__fixunssfsi+0x5c>
    1086:	90 95       	com	r25
    1088:	80 95       	com	r24
    108a:	70 95       	com	r23
    108c:	61 95       	neg	r22
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	08 95       	ret

00001096 <__floatunsisf>:
    1096:	e8 94       	clt
    1098:	09 c0       	rjmp	.+18     	; 0x10ac <__floatsisf+0x12>

0000109a <__floatsisf>:
    109a:	97 fb       	bst	r25, 7
    109c:	3e f4       	brtc	.+14     	; 0x10ac <__floatsisf+0x12>
    109e:	90 95       	com	r25
    10a0:	80 95       	com	r24
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	99 23       	and	r25, r25
    10ae:	a9 f0       	breq	.+42     	; 0x10da <__floatsisf+0x40>
    10b0:	f9 2f       	mov	r31, r25
    10b2:	96 e9       	ldi	r25, 0x96	; 150
    10b4:	bb 27       	eor	r27, r27
    10b6:	93 95       	inc	r25
    10b8:	f6 95       	lsr	r31
    10ba:	87 95       	ror	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b7 95       	ror	r27
    10c2:	f1 11       	cpse	r31, r1
    10c4:	f8 cf       	rjmp	.-16     	; 0x10b6 <__floatsisf+0x1c>
    10c6:	fa f4       	brpl	.+62     	; 0x1106 <__floatsisf+0x6c>
    10c8:	bb 0f       	add	r27, r27
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__floatsisf+0x36>
    10cc:	60 ff       	sbrs	r22, 0
    10ce:	1b c0       	rjmp	.+54     	; 0x1106 <__floatsisf+0x6c>
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	16 c0       	rjmp	.+44     	; 0x1106 <__floatsisf+0x6c>
    10da:	88 23       	and	r24, r24
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <__floatsisf+0x48>
    10de:	96 e9       	ldi	r25, 0x96	; 150
    10e0:	11 c0       	rjmp	.+34     	; 0x1104 <__floatsisf+0x6a>
    10e2:	77 23       	and	r23, r23
    10e4:	21 f0       	breq	.+8      	; 0x10ee <__floatsisf+0x54>
    10e6:	9e e8       	ldi	r25, 0x8E	; 142
    10e8:	87 2f       	mov	r24, r23
    10ea:	76 2f       	mov	r23, r22
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <__floatsisf+0x5e>
    10ee:	66 23       	and	r22, r22
    10f0:	71 f0       	breq	.+28     	; 0x110e <__floatsisf+0x74>
    10f2:	96 e8       	ldi	r25, 0x86	; 134
    10f4:	86 2f       	mov	r24, r22
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	2a f0       	brmi	.+10     	; 0x1106 <__floatsisf+0x6c>
    10fc:	9a 95       	dec	r25
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	da f7       	brpl	.-10     	; 0x10fc <__floatsisf+0x62>
    1106:	88 0f       	add	r24, r24
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	97 f9       	bld	r25, 7
    110e:	08 95       	ret

00001110 <__fp_inf>:
    1110:	97 f9       	bld	r25, 7
    1112:	9f 67       	ori	r25, 0x7F	; 127
    1114:	80 e8       	ldi	r24, 0x80	; 128
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	08 95       	ret

0000111c <__fp_nan>:
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	80 ec       	ldi	r24, 0xC0	; 192
    1120:	08 95       	ret

00001122 <__fp_pscA>:
    1122:	00 24       	eor	r0, r0
    1124:	0a 94       	dec	r0
    1126:	16 16       	cp	r1, r22
    1128:	17 06       	cpc	r1, r23
    112a:	18 06       	cpc	r1, r24
    112c:	09 06       	cpc	r0, r25
    112e:	08 95       	ret

00001130 <__fp_pscB>:
    1130:	00 24       	eor	r0, r0
    1132:	0a 94       	dec	r0
    1134:	12 16       	cp	r1, r18
    1136:	13 06       	cpc	r1, r19
    1138:	14 06       	cpc	r1, r20
    113a:	05 06       	cpc	r0, r21
    113c:	08 95       	ret

0000113e <__fp_round>:
    113e:	09 2e       	mov	r0, r25
    1140:	03 94       	inc	r0
    1142:	00 0c       	add	r0, r0
    1144:	11 f4       	brne	.+4      	; 0x114a <__fp_round+0xc>
    1146:	88 23       	and	r24, r24
    1148:	52 f0       	brmi	.+20     	; 0x115e <__fp_round+0x20>
    114a:	bb 0f       	add	r27, r27
    114c:	40 f4       	brcc	.+16     	; 0x115e <__fp_round+0x20>
    114e:	bf 2b       	or	r27, r31
    1150:	11 f4       	brne	.+4      	; 0x1156 <__fp_round+0x18>
    1152:	60 ff       	sbrs	r22, 0
    1154:	04 c0       	rjmp	.+8      	; 0x115e <__fp_round+0x20>
    1156:	6f 5f       	subi	r22, 0xFF	; 255
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__fp_split3>:
    1160:	57 fd       	sbrc	r21, 7
    1162:	90 58       	subi	r25, 0x80	; 128
    1164:	44 0f       	add	r20, r20
    1166:	55 1f       	adc	r21, r21
    1168:	59 f0       	breq	.+22     	; 0x1180 <__fp_splitA+0x10>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	71 f0       	breq	.+28     	; 0x118a <__fp_splitA+0x1a>
    116e:	47 95       	ror	r20

00001170 <__fp_splitA>:
    1170:	88 0f       	add	r24, r24
    1172:	97 fb       	bst	r25, 7
    1174:	99 1f       	adc	r25, r25
    1176:	61 f0       	breq	.+24     	; 0x1190 <__fp_splitA+0x20>
    1178:	9f 3f       	cpi	r25, 0xFF	; 255
    117a:	79 f0       	breq	.+30     	; 0x119a <__fp_splitA+0x2a>
    117c:	87 95       	ror	r24
    117e:	08 95       	ret
    1180:	12 16       	cp	r1, r18
    1182:	13 06       	cpc	r1, r19
    1184:	14 06       	cpc	r1, r20
    1186:	55 1f       	adc	r21, r21
    1188:	f2 cf       	rjmp	.-28     	; 0x116e <__fp_split3+0xe>
    118a:	46 95       	lsr	r20
    118c:	f1 df       	rcall	.-30     	; 0x1170 <__fp_splitA>
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <__fp_splitA+0x30>
    1190:	16 16       	cp	r1, r22
    1192:	17 06       	cpc	r1, r23
    1194:	18 06       	cpc	r1, r24
    1196:	99 1f       	adc	r25, r25
    1198:	f1 cf       	rjmp	.-30     	; 0x117c <__fp_splitA+0xc>
    119a:	86 95       	lsr	r24
    119c:	71 05       	cpc	r23, r1
    119e:	61 05       	cpc	r22, r1
    11a0:	08 94       	sec
    11a2:	08 95       	ret

000011a4 <__fp_zero>:
    11a4:	e8 94       	clt

000011a6 <__fp_szero>:
    11a6:	bb 27       	eor	r27, r27
    11a8:	66 27       	eor	r22, r22
    11aa:	77 27       	eor	r23, r23
    11ac:	cb 01       	movw	r24, r22
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__mulsf3>:
    11b2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__mulsf3x>
    11b6:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_round>
    11ba:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscA>
    11be:	38 f0       	brcs	.+14     	; 0x11ce <__mulsf3+0x1c>
    11c0:	0e 94 98 08 	call	0x1130	; 0x1130 <__fp_pscB>
    11c4:	20 f0       	brcs	.+8      	; 0x11ce <__mulsf3+0x1c>
    11c6:	95 23       	and	r25, r21
    11c8:	11 f0       	breq	.+4      	; 0x11ce <__mulsf3+0x1c>
    11ca:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    11ce:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_nan>
    11d2:	11 24       	eor	r1, r1
    11d4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>

000011d8 <__mulsf3x>:
    11d8:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_split3>
    11dc:	70 f3       	brcs	.-36     	; 0x11ba <__mulsf3+0x8>

000011de <__mulsf3_pse>:
    11de:	95 9f       	mul	r25, r21
    11e0:	c1 f3       	breq	.-16     	; 0x11d2 <__mulsf3+0x20>
    11e2:	95 0f       	add	r25, r21
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	55 1f       	adc	r21, r21
    11e8:	62 9f       	mul	r22, r18
    11ea:	f0 01       	movw	r30, r0
    11ec:	72 9f       	mul	r23, r18
    11ee:	bb 27       	eor	r27, r27
    11f0:	f0 0d       	add	r31, r0
    11f2:	b1 1d       	adc	r27, r1
    11f4:	63 9f       	mul	r22, r19
    11f6:	aa 27       	eor	r26, r26
    11f8:	f0 0d       	add	r31, r0
    11fa:	b1 1d       	adc	r27, r1
    11fc:	aa 1f       	adc	r26, r26
    11fe:	64 9f       	mul	r22, r20
    1200:	66 27       	eor	r22, r22
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	66 1f       	adc	r22, r22
    1208:	82 9f       	mul	r24, r18
    120a:	22 27       	eor	r18, r18
    120c:	b0 0d       	add	r27, r0
    120e:	a1 1d       	adc	r26, r1
    1210:	62 1f       	adc	r22, r18
    1212:	73 9f       	mul	r23, r19
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	62 1f       	adc	r22, r18
    121a:	83 9f       	mul	r24, r19
    121c:	a0 0d       	add	r26, r0
    121e:	61 1d       	adc	r22, r1
    1220:	22 1f       	adc	r18, r18
    1222:	74 9f       	mul	r23, r20
    1224:	33 27       	eor	r19, r19
    1226:	a0 0d       	add	r26, r0
    1228:	61 1d       	adc	r22, r1
    122a:	23 1f       	adc	r18, r19
    122c:	84 9f       	mul	r24, r20
    122e:	60 0d       	add	r22, r0
    1230:	21 1d       	adc	r18, r1
    1232:	82 2f       	mov	r24, r18
    1234:	76 2f       	mov	r23, r22
    1236:	6a 2f       	mov	r22, r26
    1238:	11 24       	eor	r1, r1
    123a:	9f 57       	subi	r25, 0x7F	; 127
    123c:	50 40       	sbci	r21, 0x00	; 0
    123e:	9a f0       	brmi	.+38     	; 0x1266 <__mulsf3_pse+0x88>
    1240:	f1 f0       	breq	.+60     	; 0x127e <__mulsf3_pse+0xa0>
    1242:	88 23       	and	r24, r24
    1244:	4a f0       	brmi	.+18     	; 0x1258 <__mulsf3_pse+0x7a>
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	bb 1f       	adc	r27, r27
    124c:	66 1f       	adc	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	91 50       	subi	r25, 0x01	; 1
    1254:	50 40       	sbci	r21, 0x00	; 0
    1256:	a9 f7       	brne	.-22     	; 0x1242 <__mulsf3_pse+0x64>
    1258:	9e 3f       	cpi	r25, 0xFE	; 254
    125a:	51 05       	cpc	r21, r1
    125c:	80 f0       	brcs	.+32     	; 0x127e <__mulsf3_pse+0xa0>
    125e:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_inf>
    1262:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_szero>
    1266:	5f 3f       	cpi	r21, 0xFF	; 255
    1268:	e4 f3       	brlt	.-8      	; 0x1262 <__mulsf3_pse+0x84>
    126a:	98 3e       	cpi	r25, 0xE8	; 232
    126c:	d4 f3       	brlt	.-12     	; 0x1262 <__mulsf3_pse+0x84>
    126e:	86 95       	lsr	r24
    1270:	77 95       	ror	r23
    1272:	67 95       	ror	r22
    1274:	b7 95       	ror	r27
    1276:	f7 95       	ror	r31
    1278:	e7 95       	ror	r30
    127a:	9f 5f       	subi	r25, 0xFF	; 255
    127c:	c1 f7       	brne	.-16     	; 0x126e <__mulsf3_pse+0x90>
    127e:	fe 2b       	or	r31, r30
    1280:	88 0f       	add	r24, r24
    1282:	91 1d       	adc	r25, r1
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret

0000128c <__divmodhi4>:
    128c:	97 fb       	bst	r25, 7
    128e:	07 2e       	mov	r0, r23
    1290:	16 f4       	brtc	.+4      	; 0x1296 <__divmodhi4+0xa>
    1292:	00 94       	com	r0
    1294:	07 d0       	rcall	.+14     	; 0x12a4 <__divmodhi4_neg1>
    1296:	77 fd       	sbrc	r23, 7
    1298:	09 d0       	rcall	.+18     	; 0x12ac <__divmodhi4_neg2>
    129a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodhi4>
    129e:	07 fc       	sbrc	r0, 7
    12a0:	05 d0       	rcall	.+10     	; 0x12ac <__divmodhi4_neg2>
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__divmodhi4_exit>

000012a4 <__divmodhi4_neg1>:
    12a4:	90 95       	com	r25
    12a6:	81 95       	neg	r24
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__divmodhi4_neg2>:
    12ac:	70 95       	com	r23
    12ae:	61 95       	neg	r22
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255

000012b2 <__divmodhi4_exit>:
    12b2:	08 95       	ret

000012b4 <__udivmodhi4>:
    12b4:	aa 1b       	sub	r26, r26
    12b6:	bb 1b       	sub	r27, r27
    12b8:	51 e1       	ldi	r21, 0x11	; 17
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <__udivmodhi4_ep>

000012bc <__udivmodhi4_loop>:
    12bc:	aa 1f       	adc	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	a6 17       	cp	r26, r22
    12c2:	b7 07       	cpc	r27, r23
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <__udivmodhi4_ep>
    12c6:	a6 1b       	sub	r26, r22
    12c8:	b7 0b       	sbc	r27, r23

000012ca <__udivmodhi4_ep>:
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	5a 95       	dec	r21
    12d0:	a9 f7       	brne	.-22     	; 0x12bc <__udivmodhi4_loop>
    12d2:	80 95       	com	r24
    12d4:	90 95       	com	r25
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	08 95       	ret

000012dc <fdevopen>:
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	31 f4       	brne	.+12     	; 0x12f4 <fdevopen+0x18>
    12e8:	61 15       	cp	r22, r1
    12ea:	71 05       	cpc	r23, r1
    12ec:	19 f4       	brne	.+6      	; 0x12f4 <fdevopen+0x18>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	3a c0       	rjmp	.+116    	; 0x1368 <fdevopen+0x8c>
    12f4:	8b 01       	movw	r16, r22
    12f6:	ec 01       	movw	r28, r24
    12f8:	6e e0       	ldi	r22, 0x0E	; 14
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <calloc>
    1304:	fc 01       	movw	r30, r24
    1306:	89 2b       	or	r24, r25
    1308:	91 f3       	breq	.-28     	; 0x12ee <fdevopen+0x12>
    130a:	80 e8       	ldi	r24, 0x80	; 128
    130c:	83 83       	std	Z+3, r24	; 0x03
    130e:	01 15       	cp	r16, r1
    1310:	11 05       	cpc	r17, r1
    1312:	71 f0       	breq	.+28     	; 0x1330 <fdevopen+0x54>
    1314:	13 87       	std	Z+11, r17	; 0x0b
    1316:	02 87       	std	Z+10, r16	; 0x0a
    1318:	81 e8       	ldi	r24, 0x81	; 129
    131a:	83 83       	std	Z+3, r24	; 0x03
    131c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <__iob>
    1320:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <__iob+0x1>
    1324:	89 2b       	or	r24, r25
    1326:	21 f4       	brne	.+8      	; 0x1330 <fdevopen+0x54>
    1328:	f0 93 04 02 	sts	0x0204, r31	; 0x800204 <__iob+0x1>
    132c:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <__iob>
    1330:	20 97       	sbiw	r28, 0x00	; 0
    1332:	c9 f0       	breq	.+50     	; 0x1366 <fdevopen+0x8a>
    1334:	d1 87       	std	Z+9, r29	; 0x09
    1336:	c0 87       	std	Z+8, r28	; 0x08
    1338:	83 81       	ldd	r24, Z+3	; 0x03
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	83 83       	std	Z+3, r24	; 0x03
    133e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <__iob+0x2>
    1342:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__iob+0x3>
    1346:	89 2b       	or	r24, r25
    1348:	71 f4       	brne	.+28     	; 0x1366 <fdevopen+0x8a>
    134a:	f0 93 06 02 	sts	0x0206, r31	; 0x800206 <__iob+0x3>
    134e:	e0 93 05 02 	sts	0x0205, r30	; 0x800205 <__iob+0x2>
    1352:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <__iob+0x4>
    1356:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <__iob+0x5>
    135a:	89 2b       	or	r24, r25
    135c:	21 f4       	brne	.+8      	; 0x1366 <fdevopen+0x8a>
    135e:	f0 93 08 02 	sts	0x0208, r31	; 0x800208 <__iob+0x5>
    1362:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <__iob+0x4>
    1366:	cf 01       	movw	r24, r30
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <printf>:
    1372:	a0 e0       	ldi	r26, 0x00	; 0
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ef eb       	ldi	r30, 0xBF	; 191
    1378:	f9 e0       	ldi	r31, 0x09	; 9
    137a:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__prologue_saves__+0x20>
    137e:	ae 01       	movw	r20, r28
    1380:	4b 5f       	subi	r20, 0xFB	; 251
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	fa 01       	movw	r30, r20
    1386:	61 91       	ld	r22, Z+
    1388:	71 91       	ld	r23, Z+
    138a:	af 01       	movw	r20, r30
    138c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <__iob+0x2>
    1390:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <__iob+0x3>
    1394:	0e 94 ff 09 	call	0x13fe	; 0x13fe <vfprintf>
    1398:	e2 e0       	ldi	r30, 0x02	; 2
    139a:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__epilogue_restores__+0x20>

0000139e <puts>:
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <__iob+0x2>
    13aa:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <__iob+0x3>
    13ae:	23 81       	ldd	r18, Z+3	; 0x03
    13b0:	21 ff       	sbrs	r18, 1
    13b2:	1b c0       	rjmp	.+54     	; 0x13ea <puts+0x4c>
    13b4:	8c 01       	movw	r16, r24
    13b6:	d0 e0       	ldi	r29, 0x00	; 0
    13b8:	c0 e0       	ldi	r28, 0x00	; 0
    13ba:	f8 01       	movw	r30, r16
    13bc:	81 91       	ld	r24, Z+
    13be:	8f 01       	movw	r16, r30
    13c0:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <__iob+0x2>
    13c4:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <__iob+0x3>
    13c8:	db 01       	movw	r26, r22
    13ca:	18 96       	adiw	r26, 0x08	; 8
    13cc:	ed 91       	ld	r30, X+
    13ce:	fc 91       	ld	r31, X
    13d0:	19 97       	sbiw	r26, 0x09	; 9
    13d2:	88 23       	and	r24, r24
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <puts+0x44>
    13d6:	09 95       	icall
    13d8:	89 2b       	or	r24, r25
    13da:	79 f3       	breq	.-34     	; 0x13ba <puts+0x1c>
    13dc:	df ef       	ldi	r29, 0xFF	; 255
    13de:	cf ef       	ldi	r28, 0xFF	; 255
    13e0:	ec cf       	rjmp	.-40     	; 0x13ba <puts+0x1c>
    13e2:	8a e0       	ldi	r24, 0x0A	; 10
    13e4:	09 95       	icall
    13e6:	89 2b       	or	r24, r25
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <puts+0x52>
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <puts+0x56>
    13f0:	8d 2f       	mov	r24, r29
    13f2:	9c 2f       	mov	r25, r28
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

000013fe <vfprintf>:
    13fe:	ab e0       	ldi	r26, 0x0B	; 11
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e0       	ldi	r30, 0x05	; 5
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__prologue_saves__>
    140a:	6c 01       	movw	r12, r24
    140c:	7b 01       	movw	r14, r22
    140e:	8a 01       	movw	r16, r20
    1410:	fc 01       	movw	r30, r24
    1412:	17 82       	std	Z+7, r1	; 0x07
    1414:	16 82       	std	Z+6, r1	; 0x06
    1416:	83 81       	ldd	r24, Z+3	; 0x03
    1418:	81 ff       	sbrs	r24, 1
    141a:	cc c1       	rjmp	.+920    	; 0x17b4 <vfprintf+0x3b6>
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	3c 01       	movw	r6, r24
    1422:	f6 01       	movw	r30, r12
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	f7 01       	movw	r30, r14
    1428:	93 fd       	sbrc	r25, 3
    142a:	85 91       	lpm	r24, Z+
    142c:	93 ff       	sbrs	r25, 3
    142e:	81 91       	ld	r24, Z+
    1430:	7f 01       	movw	r14, r30
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <vfprintf+0x3a>
    1436:	ba c1       	rjmp	.+884    	; 0x17ac <vfprintf+0x3ae>
    1438:	85 32       	cpi	r24, 0x25	; 37
    143a:	39 f4       	brne	.+14     	; 0x144a <vfprintf+0x4c>
    143c:	93 fd       	sbrc	r25, 3
    143e:	85 91       	lpm	r24, Z+
    1440:	93 ff       	sbrs	r25, 3
    1442:	81 91       	ld	r24, Z+
    1444:	7f 01       	movw	r14, r30
    1446:	85 32       	cpi	r24, 0x25	; 37
    1448:	29 f4       	brne	.+10     	; 0x1454 <vfprintf+0x56>
    144a:	b6 01       	movw	r22, r12
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    1452:	e7 cf       	rjmp	.-50     	; 0x1422 <vfprintf+0x24>
    1454:	91 2c       	mov	r9, r1
    1456:	21 2c       	mov	r2, r1
    1458:	31 2c       	mov	r3, r1
    145a:	ff e1       	ldi	r31, 0x1F	; 31
    145c:	f3 15       	cp	r31, r3
    145e:	d8 f0       	brcs	.+54     	; 0x1496 <vfprintf+0x98>
    1460:	8b 32       	cpi	r24, 0x2B	; 43
    1462:	79 f0       	breq	.+30     	; 0x1482 <vfprintf+0x84>
    1464:	38 f4       	brcc	.+14     	; 0x1474 <vfprintf+0x76>
    1466:	80 32       	cpi	r24, 0x20	; 32
    1468:	79 f0       	breq	.+30     	; 0x1488 <vfprintf+0x8a>
    146a:	83 32       	cpi	r24, 0x23	; 35
    146c:	a1 f4       	brne	.+40     	; 0x1496 <vfprintf+0x98>
    146e:	23 2d       	mov	r18, r3
    1470:	20 61       	ori	r18, 0x10	; 16
    1472:	1d c0       	rjmp	.+58     	; 0x14ae <vfprintf+0xb0>
    1474:	8d 32       	cpi	r24, 0x2D	; 45
    1476:	61 f0       	breq	.+24     	; 0x1490 <vfprintf+0x92>
    1478:	80 33       	cpi	r24, 0x30	; 48
    147a:	69 f4       	brne	.+26     	; 0x1496 <vfprintf+0x98>
    147c:	23 2d       	mov	r18, r3
    147e:	21 60       	ori	r18, 0x01	; 1
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <vfprintf+0xb0>
    1482:	83 2d       	mov	r24, r3
    1484:	82 60       	ori	r24, 0x02	; 2
    1486:	38 2e       	mov	r3, r24
    1488:	e3 2d       	mov	r30, r3
    148a:	e4 60       	ori	r30, 0x04	; 4
    148c:	3e 2e       	mov	r3, r30
    148e:	2a c0       	rjmp	.+84     	; 0x14e4 <vfprintf+0xe6>
    1490:	f3 2d       	mov	r31, r3
    1492:	f8 60       	ori	r31, 0x08	; 8
    1494:	1d c0       	rjmp	.+58     	; 0x14d0 <vfprintf+0xd2>
    1496:	37 fc       	sbrc	r3, 7
    1498:	2d c0       	rjmp	.+90     	; 0x14f4 <vfprintf+0xf6>
    149a:	20 ed       	ldi	r18, 0xD0	; 208
    149c:	28 0f       	add	r18, r24
    149e:	2a 30       	cpi	r18, 0x0A	; 10
    14a0:	40 f0       	brcs	.+16     	; 0x14b2 <vfprintf+0xb4>
    14a2:	8e 32       	cpi	r24, 0x2E	; 46
    14a4:	b9 f4       	brne	.+46     	; 0x14d4 <vfprintf+0xd6>
    14a6:	36 fc       	sbrc	r3, 6
    14a8:	81 c1       	rjmp	.+770    	; 0x17ac <vfprintf+0x3ae>
    14aa:	23 2d       	mov	r18, r3
    14ac:	20 64       	ori	r18, 0x40	; 64
    14ae:	32 2e       	mov	r3, r18
    14b0:	19 c0       	rjmp	.+50     	; 0x14e4 <vfprintf+0xe6>
    14b2:	36 fe       	sbrs	r3, 6
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0xc4>
    14b6:	8a e0       	ldi	r24, 0x0A	; 10
    14b8:	98 9e       	mul	r9, r24
    14ba:	20 0d       	add	r18, r0
    14bc:	11 24       	eor	r1, r1
    14be:	92 2e       	mov	r9, r18
    14c0:	11 c0       	rjmp	.+34     	; 0x14e4 <vfprintf+0xe6>
    14c2:	ea e0       	ldi	r30, 0x0A	; 10
    14c4:	2e 9e       	mul	r2, r30
    14c6:	20 0d       	add	r18, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	22 2e       	mov	r2, r18
    14cc:	f3 2d       	mov	r31, r3
    14ce:	f0 62       	ori	r31, 0x20	; 32
    14d0:	3f 2e       	mov	r3, r31
    14d2:	08 c0       	rjmp	.+16     	; 0x14e4 <vfprintf+0xe6>
    14d4:	8c 36       	cpi	r24, 0x6C	; 108
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <vfprintf+0xe2>
    14d8:	83 2d       	mov	r24, r3
    14da:	80 68       	ori	r24, 0x80	; 128
    14dc:	38 2e       	mov	r3, r24
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <vfprintf+0xe6>
    14e0:	88 36       	cpi	r24, 0x68	; 104
    14e2:	41 f4       	brne	.+16     	; 0x14f4 <vfprintf+0xf6>
    14e4:	f7 01       	movw	r30, r14
    14e6:	93 fd       	sbrc	r25, 3
    14e8:	85 91       	lpm	r24, Z+
    14ea:	93 ff       	sbrs	r25, 3
    14ec:	81 91       	ld	r24, Z+
    14ee:	7f 01       	movw	r14, r30
    14f0:	81 11       	cpse	r24, r1
    14f2:	b3 cf       	rjmp	.-154    	; 0x145a <vfprintf+0x5c>
    14f4:	98 2f       	mov	r25, r24
    14f6:	9f 7d       	andi	r25, 0xDF	; 223
    14f8:	95 54       	subi	r25, 0x45	; 69
    14fa:	93 30       	cpi	r25, 0x03	; 3
    14fc:	28 f4       	brcc	.+10     	; 0x1508 <vfprintf+0x10a>
    14fe:	0c 5f       	subi	r16, 0xFC	; 252
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	9f e3       	ldi	r25, 0x3F	; 63
    1504:	99 83       	std	Y+1, r25	; 0x01
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <vfprintf+0x124>
    1508:	83 36       	cpi	r24, 0x63	; 99
    150a:	31 f0       	breq	.+12     	; 0x1518 <vfprintf+0x11a>
    150c:	83 37       	cpi	r24, 0x73	; 115
    150e:	71 f0       	breq	.+28     	; 0x152c <vfprintf+0x12e>
    1510:	83 35       	cpi	r24, 0x53	; 83
    1512:	09 f0       	breq	.+2      	; 0x1516 <vfprintf+0x118>
    1514:	59 c0       	rjmp	.+178    	; 0x15c8 <vfprintf+0x1ca>
    1516:	21 c0       	rjmp	.+66     	; 0x155a <vfprintf+0x15c>
    1518:	f8 01       	movw	r30, r16
    151a:	80 81       	ld	r24, Z
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	0e 5f       	subi	r16, 0xFE	; 254
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	88 24       	eor	r8, r8
    1524:	83 94       	inc	r8
    1526:	91 2c       	mov	r9, r1
    1528:	53 01       	movw	r10, r6
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <vfprintf+0x154>
    152c:	28 01       	movw	r4, r16
    152e:	f2 e0       	ldi	r31, 0x02	; 2
    1530:	4f 0e       	add	r4, r31
    1532:	51 1c       	adc	r5, r1
    1534:	f8 01       	movw	r30, r16
    1536:	a0 80       	ld	r10, Z
    1538:	b1 80       	ldd	r11, Z+1	; 0x01
    153a:	36 fe       	sbrs	r3, 6
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <vfprintf+0x146>
    153e:	69 2d       	mov	r22, r9
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <vfprintf+0x14a>
    1544:	6f ef       	ldi	r22, 0xFF	; 255
    1546:	7f ef       	ldi	r23, 0xFF	; 255
    1548:	c5 01       	movw	r24, r10
    154a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <strnlen>
    154e:	4c 01       	movw	r8, r24
    1550:	82 01       	movw	r16, r4
    1552:	f3 2d       	mov	r31, r3
    1554:	ff 77       	andi	r31, 0x7F	; 127
    1556:	3f 2e       	mov	r3, r31
    1558:	16 c0       	rjmp	.+44     	; 0x1586 <vfprintf+0x188>
    155a:	28 01       	movw	r4, r16
    155c:	22 e0       	ldi	r18, 0x02	; 2
    155e:	42 0e       	add	r4, r18
    1560:	51 1c       	adc	r5, r1
    1562:	f8 01       	movw	r30, r16
    1564:	a0 80       	ld	r10, Z
    1566:	b1 80       	ldd	r11, Z+1	; 0x01
    1568:	36 fe       	sbrs	r3, 6
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <vfprintf+0x174>
    156c:	69 2d       	mov	r22, r9
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <vfprintf+0x178>
    1572:	6f ef       	ldi	r22, 0xFF	; 255
    1574:	7f ef       	ldi	r23, 0xFF	; 255
    1576:	c5 01       	movw	r24, r10
    1578:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <strnlen_P>
    157c:	4c 01       	movw	r8, r24
    157e:	f3 2d       	mov	r31, r3
    1580:	f0 68       	ori	r31, 0x80	; 128
    1582:	3f 2e       	mov	r3, r31
    1584:	82 01       	movw	r16, r4
    1586:	33 fc       	sbrc	r3, 3
    1588:	1b c0       	rjmp	.+54     	; 0x15c0 <vfprintf+0x1c2>
    158a:	82 2d       	mov	r24, r2
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	88 16       	cp	r8, r24
    1590:	99 06       	cpc	r9, r25
    1592:	b0 f4       	brcc	.+44     	; 0x15c0 <vfprintf+0x1c2>
    1594:	b6 01       	movw	r22, r12
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    159e:	2a 94       	dec	r2
    15a0:	f4 cf       	rjmp	.-24     	; 0x158a <vfprintf+0x18c>
    15a2:	f5 01       	movw	r30, r10
    15a4:	37 fc       	sbrc	r3, 7
    15a6:	85 91       	lpm	r24, Z+
    15a8:	37 fe       	sbrs	r3, 7
    15aa:	81 91       	ld	r24, Z+
    15ac:	5f 01       	movw	r10, r30
    15ae:	b6 01       	movw	r22, r12
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    15b6:	21 10       	cpse	r2, r1
    15b8:	2a 94       	dec	r2
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	82 1a       	sub	r8, r18
    15be:	91 08       	sbc	r9, r1
    15c0:	81 14       	cp	r8, r1
    15c2:	91 04       	cpc	r9, r1
    15c4:	71 f7       	brne	.-36     	; 0x15a2 <vfprintf+0x1a4>
    15c6:	e8 c0       	rjmp	.+464    	; 0x1798 <vfprintf+0x39a>
    15c8:	84 36       	cpi	r24, 0x64	; 100
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <vfprintf+0x1d2>
    15cc:	89 36       	cpi	r24, 0x69	; 105
    15ce:	41 f5       	brne	.+80     	; 0x1620 <vfprintf+0x222>
    15d0:	f8 01       	movw	r30, r16
    15d2:	37 fe       	sbrs	r3, 7
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x1e6>
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	0c 5f       	subi	r16, 0xFC	; 252
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <vfprintf+0x1f6>
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	07 2e       	mov	r0, r23
    15ea:	00 0c       	add	r0, r0
    15ec:	88 0b       	sbc	r24, r24
    15ee:	99 0b       	sbc	r25, r25
    15f0:	0e 5f       	subi	r16, 0xFE	; 254
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	f3 2d       	mov	r31, r3
    15f6:	ff 76       	andi	r31, 0x6F	; 111
    15f8:	3f 2e       	mov	r3, r31
    15fa:	97 ff       	sbrs	r25, 7
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <vfprintf+0x212>
    15fe:	90 95       	com	r25
    1600:	80 95       	com	r24
    1602:	70 95       	com	r23
    1604:	61 95       	neg	r22
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	f0 68       	ori	r31, 0x80	; 128
    160e:	3f 2e       	mov	r3, r31
    1610:	2a e0       	ldi	r18, 0x0A	; 10
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	a3 01       	movw	r20, r6
    1616:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__ultoa_invert>
    161a:	88 2e       	mov	r8, r24
    161c:	86 18       	sub	r8, r6
    161e:	45 c0       	rjmp	.+138    	; 0x16aa <vfprintf+0x2ac>
    1620:	85 37       	cpi	r24, 0x75	; 117
    1622:	31 f4       	brne	.+12     	; 0x1630 <vfprintf+0x232>
    1624:	23 2d       	mov	r18, r3
    1626:	2f 7e       	andi	r18, 0xEF	; 239
    1628:	b2 2e       	mov	r11, r18
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	25 c0       	rjmp	.+74     	; 0x167a <vfprintf+0x27c>
    1630:	93 2d       	mov	r25, r3
    1632:	99 7f       	andi	r25, 0xF9	; 249
    1634:	b9 2e       	mov	r11, r25
    1636:	8f 36       	cpi	r24, 0x6F	; 111
    1638:	c1 f0       	breq	.+48     	; 0x166a <vfprintf+0x26c>
    163a:	18 f4       	brcc	.+6      	; 0x1642 <vfprintf+0x244>
    163c:	88 35       	cpi	r24, 0x58	; 88
    163e:	79 f0       	breq	.+30     	; 0x165e <vfprintf+0x260>
    1640:	b5 c0       	rjmp	.+362    	; 0x17ac <vfprintf+0x3ae>
    1642:	80 37       	cpi	r24, 0x70	; 112
    1644:	19 f0       	breq	.+6      	; 0x164c <vfprintf+0x24e>
    1646:	88 37       	cpi	r24, 0x78	; 120
    1648:	21 f0       	breq	.+8      	; 0x1652 <vfprintf+0x254>
    164a:	b0 c0       	rjmp	.+352    	; 0x17ac <vfprintf+0x3ae>
    164c:	e9 2f       	mov	r30, r25
    164e:	e0 61       	ori	r30, 0x10	; 16
    1650:	be 2e       	mov	r11, r30
    1652:	b4 fe       	sbrs	r11, 4
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <vfprintf+0x272>
    1656:	fb 2d       	mov	r31, r11
    1658:	f4 60       	ori	r31, 0x04	; 4
    165a:	bf 2e       	mov	r11, r31
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <vfprintf+0x272>
    165e:	34 fe       	sbrs	r3, 4
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <vfprintf+0x278>
    1662:	29 2f       	mov	r18, r25
    1664:	26 60       	ori	r18, 0x06	; 6
    1666:	b2 2e       	mov	r11, r18
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <vfprintf+0x278>
    166a:	28 e0       	ldi	r18, 0x08	; 8
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	05 c0       	rjmp	.+10     	; 0x167a <vfprintf+0x27c>
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x27c>
    1676:	20 e1       	ldi	r18, 0x10	; 16
    1678:	32 e0       	ldi	r19, 0x02	; 2
    167a:	f8 01       	movw	r30, r16
    167c:	b7 fe       	sbrs	r11, 7
    167e:	07 c0       	rjmp	.+14     	; 0x168e <vfprintf+0x290>
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	0c 5f       	subi	r16, 0xFC	; 252
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0x29c>
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 5f       	subi	r16, 0xFE	; 254
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	a3 01       	movw	r20, r6
    169c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__ultoa_invert>
    16a0:	88 2e       	mov	r8, r24
    16a2:	86 18       	sub	r8, r6
    16a4:	fb 2d       	mov	r31, r11
    16a6:	ff 77       	andi	r31, 0x7F	; 127
    16a8:	3f 2e       	mov	r3, r31
    16aa:	36 fe       	sbrs	r3, 6
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <vfprintf+0x2ca>
    16ae:	23 2d       	mov	r18, r3
    16b0:	2e 7f       	andi	r18, 0xFE	; 254
    16b2:	a2 2e       	mov	r10, r18
    16b4:	89 14       	cp	r8, r9
    16b6:	58 f4       	brcc	.+22     	; 0x16ce <vfprintf+0x2d0>
    16b8:	34 fe       	sbrs	r3, 4
    16ba:	0b c0       	rjmp	.+22     	; 0x16d2 <vfprintf+0x2d4>
    16bc:	32 fc       	sbrc	r3, 2
    16be:	09 c0       	rjmp	.+18     	; 0x16d2 <vfprintf+0x2d4>
    16c0:	83 2d       	mov	r24, r3
    16c2:	8e 7e       	andi	r24, 0xEE	; 238
    16c4:	a8 2e       	mov	r10, r24
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <vfprintf+0x2d4>
    16c8:	b8 2c       	mov	r11, r8
    16ca:	a3 2c       	mov	r10, r3
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <vfprintf+0x2d6>
    16ce:	b8 2c       	mov	r11, r8
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <vfprintf+0x2d6>
    16d2:	b9 2c       	mov	r11, r9
    16d4:	a4 fe       	sbrs	r10, 4
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <vfprintf+0x2f8>
    16d8:	fe 01       	movw	r30, r28
    16da:	e8 0d       	add	r30, r8
    16dc:	f1 1d       	adc	r31, r1
    16de:	80 81       	ld	r24, Z
    16e0:	80 33       	cpi	r24, 0x30	; 48
    16e2:	21 f4       	brne	.+8      	; 0x16ec <vfprintf+0x2ee>
    16e4:	9a 2d       	mov	r25, r10
    16e6:	99 7e       	andi	r25, 0xE9	; 233
    16e8:	a9 2e       	mov	r10, r25
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <vfprintf+0x300>
    16ec:	a2 fe       	sbrs	r10, 2
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0x2fe>
    16f0:	b3 94       	inc	r11
    16f2:	b3 94       	inc	r11
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <vfprintf+0x300>
    16f6:	8a 2d       	mov	r24, r10
    16f8:	86 78       	andi	r24, 0x86	; 134
    16fa:	09 f0       	breq	.+2      	; 0x16fe <vfprintf+0x300>
    16fc:	b3 94       	inc	r11
    16fe:	a3 fc       	sbrc	r10, 3
    1700:	11 c0       	rjmp	.+34     	; 0x1724 <vfprintf+0x326>
    1702:	a0 fe       	sbrs	r10, 0
    1704:	06 c0       	rjmp	.+12     	; 0x1712 <vfprintf+0x314>
    1706:	b2 14       	cp	r11, r2
    1708:	88 f4       	brcc	.+34     	; 0x172c <vfprintf+0x32e>
    170a:	28 0c       	add	r2, r8
    170c:	92 2c       	mov	r9, r2
    170e:	9b 18       	sub	r9, r11
    1710:	0e c0       	rjmp	.+28     	; 0x172e <vfprintf+0x330>
    1712:	b2 14       	cp	r11, r2
    1714:	60 f4       	brcc	.+24     	; 0x172e <vfprintf+0x330>
    1716:	b6 01       	movw	r22, r12
    1718:	80 e2       	ldi	r24, 0x20	; 32
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    1720:	b3 94       	inc	r11
    1722:	f7 cf       	rjmp	.-18     	; 0x1712 <vfprintf+0x314>
    1724:	b2 14       	cp	r11, r2
    1726:	18 f4       	brcc	.+6      	; 0x172e <vfprintf+0x330>
    1728:	2b 18       	sub	r2, r11
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vfprintf+0x332>
    172c:	98 2c       	mov	r9, r8
    172e:	21 2c       	mov	r2, r1
    1730:	a4 fe       	sbrs	r10, 4
    1732:	10 c0       	rjmp	.+32     	; 0x1754 <vfprintf+0x356>
    1734:	b6 01       	movw	r22, r12
    1736:	80 e3       	ldi	r24, 0x30	; 48
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    173e:	a2 fe       	sbrs	r10, 2
    1740:	17 c0       	rjmp	.+46     	; 0x1770 <vfprintf+0x372>
    1742:	a1 fc       	sbrc	r10, 1
    1744:	03 c0       	rjmp	.+6      	; 0x174c <vfprintf+0x34e>
    1746:	88 e7       	ldi	r24, 0x78	; 120
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <vfprintf+0x352>
    174c:	88 e5       	ldi	r24, 0x58	; 88
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	b6 01       	movw	r22, r12
    1752:	0c c0       	rjmp	.+24     	; 0x176c <vfprintf+0x36e>
    1754:	8a 2d       	mov	r24, r10
    1756:	86 78       	andi	r24, 0x86	; 134
    1758:	59 f0       	breq	.+22     	; 0x1770 <vfprintf+0x372>
    175a:	a1 fe       	sbrs	r10, 1
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x364>
    175e:	8b e2       	ldi	r24, 0x2B	; 43
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <vfprintf+0x366>
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	a7 fc       	sbrc	r10, 7
    1766:	8d e2       	ldi	r24, 0x2D	; 45
    1768:	b6 01       	movw	r22, r12
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    1770:	89 14       	cp	r8, r9
    1772:	38 f4       	brcc	.+14     	; 0x1782 <vfprintf+0x384>
    1774:	b6 01       	movw	r22, r12
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    177e:	9a 94       	dec	r9
    1780:	f7 cf       	rjmp	.-18     	; 0x1770 <vfprintf+0x372>
    1782:	8a 94       	dec	r8
    1784:	f3 01       	movw	r30, r6
    1786:	e8 0d       	add	r30, r8
    1788:	f1 1d       	adc	r31, r1
    178a:	80 81       	ld	r24, Z
    178c:	b6 01       	movw	r22, r12
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    1794:	81 10       	cpse	r8, r1
    1796:	f5 cf       	rjmp	.-22     	; 0x1782 <vfprintf+0x384>
    1798:	22 20       	and	r2, r2
    179a:	09 f4       	brne	.+2      	; 0x179e <vfprintf+0x3a0>
    179c:	42 ce       	rjmp	.-892    	; 0x1422 <vfprintf+0x24>
    179e:	b6 01       	movw	r22, r12
    17a0:	80 e2       	ldi	r24, 0x20	; 32
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <fputc>
    17a8:	2a 94       	dec	r2
    17aa:	f6 cf       	rjmp	.-20     	; 0x1798 <vfprintf+0x39a>
    17ac:	f6 01       	movw	r30, r12
    17ae:	86 81       	ldd	r24, Z+6	; 0x06
    17b0:	97 81       	ldd	r25, Z+7	; 0x07
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x3ba>
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
    17b8:	2b 96       	adiw	r28, 0x0b	; 11
    17ba:	e2 e1       	ldi	r30, 0x12	; 18
    17bc:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__epilogue_restores__>

000017c0 <calloc>:
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	86 9f       	mul	r24, r22
    17ca:	80 01       	movw	r16, r0
    17cc:	87 9f       	mul	r24, r23
    17ce:	10 0d       	add	r17, r0
    17d0:	96 9f       	mul	r25, r22
    17d2:	10 0d       	add	r17, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	c8 01       	movw	r24, r16
    17d8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <malloc>
    17dc:	ec 01       	movw	r28, r24
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	29 f0       	breq	.+10     	; 0x17ec <calloc+0x2c>
    17e2:	a8 01       	movw	r20, r16
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <memset>
    17ec:	ce 01       	movw	r24, r28
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <malloc>:
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	91 05       	cpc	r25, r1
    1804:	10 f4       	brcc	.+4      	; 0x180a <malloc+0x12>
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <__flp>
    180e:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <__flp+0x1>
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	19 f1       	breq	.+70     	; 0x1864 <malloc+0x6c>
    181e:	40 81       	ld	r20, Z
    1820:	51 81       	ldd	r21, Z+1	; 0x01
    1822:	02 81       	ldd	r16, Z+2	; 0x02
    1824:	13 81       	ldd	r17, Z+3	; 0x03
    1826:	48 17       	cp	r20, r24
    1828:	59 07       	cpc	r21, r25
    182a:	c8 f0       	brcs	.+50     	; 0x185e <malloc+0x66>
    182c:	84 17       	cp	r24, r20
    182e:	95 07       	cpc	r25, r21
    1830:	69 f4       	brne	.+26     	; 0x184c <malloc+0x54>
    1832:	10 97       	sbiw	r26, 0x00	; 0
    1834:	31 f0       	breq	.+12     	; 0x1842 <malloc+0x4a>
    1836:	12 96       	adiw	r26, 0x02	; 2
    1838:	0c 93       	st	X, r16
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	13 96       	adiw	r26, 0x03	; 3
    183e:	1c 93       	st	X, r17
    1840:	27 c0       	rjmp	.+78     	; 0x1890 <malloc+0x98>
    1842:	00 93 0b 02 	sts	0x020B, r16	; 0x80020b <__flp>
    1846:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <__flp+0x1>
    184a:	22 c0       	rjmp	.+68     	; 0x1890 <malloc+0x98>
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	19 f0       	breq	.+6      	; 0x1858 <malloc+0x60>
    1852:	42 17       	cp	r20, r18
    1854:	53 07       	cpc	r21, r19
    1856:	18 f4       	brcc	.+6      	; 0x185e <malloc+0x66>
    1858:	9a 01       	movw	r18, r20
    185a:	bd 01       	movw	r22, r26
    185c:	ef 01       	movw	r28, r30
    185e:	df 01       	movw	r26, r30
    1860:	f8 01       	movw	r30, r16
    1862:	db cf       	rjmp	.-74     	; 0x181a <malloc+0x22>
    1864:	21 15       	cp	r18, r1
    1866:	31 05       	cpc	r19, r1
    1868:	f9 f0       	breq	.+62     	; 0x18a8 <malloc+0xb0>
    186a:	28 1b       	sub	r18, r24
    186c:	39 0b       	sbc	r19, r25
    186e:	24 30       	cpi	r18, 0x04	; 4
    1870:	31 05       	cpc	r19, r1
    1872:	80 f4       	brcc	.+32     	; 0x1894 <malloc+0x9c>
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	61 15       	cp	r22, r1
    187a:	71 05       	cpc	r23, r1
    187c:	21 f0       	breq	.+8      	; 0x1886 <malloc+0x8e>
    187e:	fb 01       	movw	r30, r22
    1880:	93 83       	std	Z+3, r25	; 0x03
    1882:	82 83       	std	Z+2, r24	; 0x02
    1884:	04 c0       	rjmp	.+8      	; 0x188e <malloc+0x96>
    1886:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <__flp+0x1>
    188a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <__flp>
    188e:	fe 01       	movw	r30, r28
    1890:	32 96       	adiw	r30, 0x02	; 2
    1892:	44 c0       	rjmp	.+136    	; 0x191c <malloc+0x124>
    1894:	fe 01       	movw	r30, r28
    1896:	e2 0f       	add	r30, r18
    1898:	f3 1f       	adc	r31, r19
    189a:	81 93       	st	Z+, r24
    189c:	91 93       	st	Z+, r25
    189e:	22 50       	subi	r18, 0x02	; 2
    18a0:	31 09       	sbc	r19, r1
    18a2:	39 83       	std	Y+1, r19	; 0x01
    18a4:	28 83       	st	Y, r18
    18a6:	3a c0       	rjmp	.+116    	; 0x191c <malloc+0x124>
    18a8:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__brkval>
    18ac:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <__brkval+0x1>
    18b0:	23 2b       	or	r18, r19
    18b2:	41 f4       	brne	.+16     	; 0x18c4 <malloc+0xcc>
    18b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    18b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    18bc:	30 93 0a 02 	sts	0x020A, r19	; 0x80020a <__brkval+0x1>
    18c0:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <__brkval>
    18c4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    18c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    18cc:	21 15       	cp	r18, r1
    18ce:	31 05       	cpc	r19, r1
    18d0:	41 f4       	brne	.+16     	; 0x18e2 <malloc+0xea>
    18d2:	2d b7       	in	r18, 0x3d	; 61
    18d4:	3e b7       	in	r19, 0x3e	; 62
    18d6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    18da:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18de:	24 1b       	sub	r18, r20
    18e0:	35 0b       	sbc	r19, r21
    18e2:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <__brkval>
    18e6:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <__brkval+0x1>
    18ea:	e2 17       	cp	r30, r18
    18ec:	f3 07       	cpc	r31, r19
    18ee:	a0 f4       	brcc	.+40     	; 0x1918 <malloc+0x120>
    18f0:	2e 1b       	sub	r18, r30
    18f2:	3f 0b       	sbc	r19, r31
    18f4:	28 17       	cp	r18, r24
    18f6:	39 07       	cpc	r19, r25
    18f8:	78 f0       	brcs	.+30     	; 0x1918 <malloc+0x120>
    18fa:	ac 01       	movw	r20, r24
    18fc:	4e 5f       	subi	r20, 0xFE	; 254
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	24 17       	cp	r18, r20
    1902:	35 07       	cpc	r19, r21
    1904:	48 f0       	brcs	.+18     	; 0x1918 <malloc+0x120>
    1906:	4e 0f       	add	r20, r30
    1908:	5f 1f       	adc	r21, r31
    190a:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <__brkval+0x1>
    190e:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <__brkval>
    1912:	81 93       	st	Z+, r24
    1914:	91 93       	st	Z+, r25
    1916:	02 c0       	rjmp	.+4      	; 0x191c <malloc+0x124>
    1918:	e0 e0       	ldi	r30, 0x00	; 0
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	cf 01       	movw	r24, r30
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <free>:
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	09 f4       	brne	.+2      	; 0x1932 <free+0xa>
    1930:	81 c0       	rjmp	.+258    	; 0x1a34 <free+0x10c>
    1932:	fc 01       	movw	r30, r24
    1934:	32 97       	sbiw	r30, 0x02	; 2
    1936:	13 82       	std	Z+3, r1	; 0x03
    1938:	12 82       	std	Z+2, r1	; 0x02
    193a:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <__flp>
    193e:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <__flp+0x1>
    1942:	10 97       	sbiw	r26, 0x00	; 0
    1944:	81 f4       	brne	.+32     	; 0x1966 <free+0x3e>
    1946:	20 81       	ld	r18, Z
    1948:	31 81       	ldd	r19, Z+1	; 0x01
    194a:	82 0f       	add	r24, r18
    194c:	93 1f       	adc	r25, r19
    194e:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__brkval>
    1952:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <__brkval+0x1>
    1956:	28 17       	cp	r18, r24
    1958:	39 07       	cpc	r19, r25
    195a:	51 f5       	brne	.+84     	; 0x19b0 <free+0x88>
    195c:	f0 93 0a 02 	sts	0x020A, r31	; 0x80020a <__brkval+0x1>
    1960:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <__brkval>
    1964:	67 c0       	rjmp	.+206    	; 0x1a34 <free+0x10c>
    1966:	ed 01       	movw	r28, r26
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	ce 17       	cp	r28, r30
    196e:	df 07       	cpc	r29, r31
    1970:	40 f4       	brcc	.+16     	; 0x1982 <free+0x5a>
    1972:	4a 81       	ldd	r20, Y+2	; 0x02
    1974:	5b 81       	ldd	r21, Y+3	; 0x03
    1976:	9e 01       	movw	r18, r28
    1978:	41 15       	cp	r20, r1
    197a:	51 05       	cpc	r21, r1
    197c:	f1 f0       	breq	.+60     	; 0x19ba <free+0x92>
    197e:	ea 01       	movw	r28, r20
    1980:	f5 cf       	rjmp	.-22     	; 0x196c <free+0x44>
    1982:	d3 83       	std	Z+3, r29	; 0x03
    1984:	c2 83       	std	Z+2, r28	; 0x02
    1986:	40 81       	ld	r20, Z
    1988:	51 81       	ldd	r21, Z+1	; 0x01
    198a:	84 0f       	add	r24, r20
    198c:	95 1f       	adc	r25, r21
    198e:	c8 17       	cp	r28, r24
    1990:	d9 07       	cpc	r29, r25
    1992:	59 f4       	brne	.+22     	; 0x19aa <free+0x82>
    1994:	88 81       	ld	r24, Y
    1996:	99 81       	ldd	r25, Y+1	; 0x01
    1998:	84 0f       	add	r24, r20
    199a:	95 1f       	adc	r25, r21
    199c:	02 96       	adiw	r24, 0x02	; 2
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	93 83       	std	Z+3, r25	; 0x03
    19a8:	82 83       	std	Z+2, r24	; 0x02
    19aa:	21 15       	cp	r18, r1
    19ac:	31 05       	cpc	r19, r1
    19ae:	29 f4       	brne	.+10     	; 0x19ba <free+0x92>
    19b0:	f0 93 0c 02 	sts	0x020C, r31	; 0x80020c <__flp+0x1>
    19b4:	e0 93 0b 02 	sts	0x020B, r30	; 0x80020b <__flp>
    19b8:	3d c0       	rjmp	.+122    	; 0x1a34 <free+0x10c>
    19ba:	e9 01       	movw	r28, r18
    19bc:	fb 83       	std	Y+3, r31	; 0x03
    19be:	ea 83       	std	Y+2, r30	; 0x02
    19c0:	49 91       	ld	r20, Y+
    19c2:	59 91       	ld	r21, Y+
    19c4:	c4 0f       	add	r28, r20
    19c6:	d5 1f       	adc	r29, r21
    19c8:	ec 17       	cp	r30, r28
    19ca:	fd 07       	cpc	r31, r29
    19cc:	61 f4       	brne	.+24     	; 0x19e6 <free+0xbe>
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	84 0f       	add	r24, r20
    19d4:	95 1f       	adc	r25, r21
    19d6:	02 96       	adiw	r24, 0x02	; 2
    19d8:	e9 01       	movw	r28, r18
    19da:	99 83       	std	Y+1, r25	; 0x01
    19dc:	88 83       	st	Y, r24
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	9b 83       	std	Y+3, r25	; 0x03
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    19e6:	e0 e0       	ldi	r30, 0x00	; 0
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	8d 91       	ld	r24, X+
    19ee:	9c 91       	ld	r25, X
    19f0:	13 97       	sbiw	r26, 0x03	; 3
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	19 f0       	breq	.+6      	; 0x19fc <free+0xd4>
    19f6:	fd 01       	movw	r30, r26
    19f8:	dc 01       	movw	r26, r24
    19fa:	f7 cf       	rjmp	.-18     	; 0x19ea <free+0xc2>
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	9d 01       	movw	r18, r26
    1a04:	2e 5f       	subi	r18, 0xFE	; 254
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	82 0f       	add	r24, r18
    1a0a:	93 1f       	adc	r25, r19
    1a0c:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__brkval>
    1a10:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <__brkval+0x1>
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	69 f4       	brne	.+26     	; 0x1a34 <free+0x10c>
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <free+0x100>
    1a1e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__flp+0x1>
    1a22:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__flp>
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <free+0x104>
    1a28:	13 82       	std	Z+3, r1	; 0x03
    1a2a:	12 82       	std	Z+2, r1	; 0x02
    1a2c:	b0 93 0a 02 	sts	0x020A, r27	; 0x80020a <__brkval+0x1>
    1a30:	a0 93 09 02 	sts	0x0209, r26	; 0x800209 <__brkval>
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <strnlen_P>:
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	05 90       	lpm	r0, Z+
    1a3e:	61 50       	subi	r22, 0x01	; 1
    1a40:	70 40       	sbci	r23, 0x00	; 0
    1a42:	01 10       	cpse	r0, r1
    1a44:	d8 f7       	brcc	.-10     	; 0x1a3c <strnlen_P+0x2>
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	8e 0f       	add	r24, r30
    1a4c:	9f 1f       	adc	r25, r31
    1a4e:	08 95       	ret

00001a50 <memset>:
    1a50:	dc 01       	movw	r26, r24
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <memset+0x6>
    1a54:	6d 93       	st	X+, r22
    1a56:	41 50       	subi	r20, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	e0 f7       	brcc	.-8      	; 0x1a54 <memset+0x4>
    1a5c:	08 95       	ret

00001a5e <strnlen>:
    1a5e:	fc 01       	movw	r30, r24
    1a60:	61 50       	subi	r22, 0x01	; 1
    1a62:	70 40       	sbci	r23, 0x00	; 0
    1a64:	01 90       	ld	r0, Z+
    1a66:	01 10       	cpse	r0, r1
    1a68:	d8 f7       	brcc	.-10     	; 0x1a60 <strnlen+0x2>
    1a6a:	80 95       	com	r24
    1a6c:	90 95       	com	r25
    1a6e:	8e 0f       	add	r24, r30
    1a70:	9f 1f       	adc	r25, r31
    1a72:	08 95       	ret

00001a74 <fputc>:
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	fb 01       	movw	r30, r22
    1a7e:	23 81       	ldd	r18, Z+3	; 0x03
    1a80:	21 fd       	sbrc	r18, 1
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <fputc+0x16>
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	9f ef       	ldi	r25, 0xFF	; 255
    1a88:	2c c0       	rjmp	.+88     	; 0x1ae2 <fputc+0x6e>
    1a8a:	22 ff       	sbrs	r18, 2
    1a8c:	16 c0       	rjmp	.+44     	; 0x1aba <fputc+0x46>
    1a8e:	46 81       	ldd	r20, Z+6	; 0x06
    1a90:	57 81       	ldd	r21, Z+7	; 0x07
    1a92:	24 81       	ldd	r18, Z+4	; 0x04
    1a94:	35 81       	ldd	r19, Z+5	; 0x05
    1a96:	42 17       	cp	r20, r18
    1a98:	53 07       	cpc	r21, r19
    1a9a:	44 f4       	brge	.+16     	; 0x1aac <fputc+0x38>
    1a9c:	a0 81       	ld	r26, Z
    1a9e:	b1 81       	ldd	r27, Z+1	; 0x01
    1aa0:	9d 01       	movw	r18, r26
    1aa2:	2f 5f       	subi	r18, 0xFF	; 255
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	31 83       	std	Z+1, r19	; 0x01
    1aa8:	20 83       	st	Z, r18
    1aaa:	8c 93       	st	X, r24
    1aac:	26 81       	ldd	r18, Z+6	; 0x06
    1aae:	37 81       	ldd	r19, Z+7	; 0x07
    1ab0:	2f 5f       	subi	r18, 0xFF	; 255
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	37 83       	std	Z+7, r19	; 0x07
    1ab6:	26 83       	std	Z+6, r18	; 0x06
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <fputc+0x6e>
    1aba:	8b 01       	movw	r16, r22
    1abc:	ec 01       	movw	r28, r24
    1abe:	fb 01       	movw	r30, r22
    1ac0:	00 84       	ldd	r0, Z+8	; 0x08
    1ac2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ac4:	e0 2d       	mov	r30, r0
    1ac6:	09 95       	icall
    1ac8:	89 2b       	or	r24, r25
    1aca:	e1 f6       	brne	.-72     	; 0x1a84 <fputc+0x10>
    1acc:	d8 01       	movw	r26, r16
    1ace:	16 96       	adiw	r26, 0x06	; 6
    1ad0:	8d 91       	ld	r24, X+
    1ad2:	9c 91       	ld	r25, X
    1ad4:	17 97       	sbiw	r26, 0x07	; 7
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	17 96       	adiw	r26, 0x07	; 7
    1ada:	9c 93       	st	X, r25
    1adc:	8e 93       	st	-X, r24
    1ade:	16 97       	sbiw	r26, 0x06	; 6
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <__ultoa_invert>:
    1aec:	fa 01       	movw	r30, r20
    1aee:	aa 27       	eor	r26, r26
    1af0:	28 30       	cpi	r18, 0x08	; 8
    1af2:	51 f1       	breq	.+84     	; 0x1b48 <__ultoa_invert+0x5c>
    1af4:	20 31       	cpi	r18, 0x10	; 16
    1af6:	81 f1       	breq	.+96     	; 0x1b58 <__ultoa_invert+0x6c>
    1af8:	e8 94       	clt
    1afa:	6f 93       	push	r22
    1afc:	6e 7f       	andi	r22, 0xFE	; 254
    1afe:	6e 5f       	subi	r22, 0xFE	; 254
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	8f 4f       	sbci	r24, 0xFF	; 255
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	af 4f       	sbci	r26, 0xFF	; 255
    1b08:	b1 e0       	ldi	r27, 0x01	; 1
    1b0a:	3e d0       	rcall	.+124    	; 0x1b88 <__ultoa_invert+0x9c>
    1b0c:	b4 e0       	ldi	r27, 0x04	; 4
    1b0e:	3c d0       	rcall	.+120    	; 0x1b88 <__ultoa_invert+0x9c>
    1b10:	67 0f       	add	r22, r23
    1b12:	78 1f       	adc	r23, r24
    1b14:	89 1f       	adc	r24, r25
    1b16:	9a 1f       	adc	r25, r26
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	68 0f       	add	r22, r24
    1b1c:	79 1f       	adc	r23, r25
    1b1e:	8a 1f       	adc	r24, r26
    1b20:	91 1d       	adc	r25, r1
    1b22:	a1 1d       	adc	r26, r1
    1b24:	6a 0f       	add	r22, r26
    1b26:	71 1d       	adc	r23, r1
    1b28:	81 1d       	adc	r24, r1
    1b2a:	91 1d       	adc	r25, r1
    1b2c:	a1 1d       	adc	r26, r1
    1b2e:	20 d0       	rcall	.+64     	; 0x1b70 <__ultoa_invert+0x84>
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <__ultoa_invert+0x48>
    1b32:	68 94       	set
    1b34:	3f 91       	pop	r19
    1b36:	2a e0       	ldi	r18, 0x0A	; 10
    1b38:	26 9f       	mul	r18, r22
    1b3a:	11 24       	eor	r1, r1
    1b3c:	30 19       	sub	r19, r0
    1b3e:	30 5d       	subi	r19, 0xD0	; 208
    1b40:	31 93       	st	Z+, r19
    1b42:	de f6       	brtc	.-74     	; 0x1afa <__ultoa_invert+0xe>
    1b44:	cf 01       	movw	r24, r30
    1b46:	08 95       	ret
    1b48:	46 2f       	mov	r20, r22
    1b4a:	47 70       	andi	r20, 0x07	; 7
    1b4c:	40 5d       	subi	r20, 0xD0	; 208
    1b4e:	41 93       	st	Z+, r20
    1b50:	b3 e0       	ldi	r27, 0x03	; 3
    1b52:	0f d0       	rcall	.+30     	; 0x1b72 <__ultoa_invert+0x86>
    1b54:	c9 f7       	brne	.-14     	; 0x1b48 <__ultoa_invert+0x5c>
    1b56:	f6 cf       	rjmp	.-20     	; 0x1b44 <__ultoa_invert+0x58>
    1b58:	46 2f       	mov	r20, r22
    1b5a:	4f 70       	andi	r20, 0x0F	; 15
    1b5c:	40 5d       	subi	r20, 0xD0	; 208
    1b5e:	4a 33       	cpi	r20, 0x3A	; 58
    1b60:	18 f0       	brcs	.+6      	; 0x1b68 <__ultoa_invert+0x7c>
    1b62:	49 5d       	subi	r20, 0xD9	; 217
    1b64:	31 fd       	sbrc	r19, 1
    1b66:	40 52       	subi	r20, 0x20	; 32
    1b68:	41 93       	st	Z+, r20
    1b6a:	02 d0       	rcall	.+4      	; 0x1b70 <__ultoa_invert+0x84>
    1b6c:	a9 f7       	brne	.-22     	; 0x1b58 <__ultoa_invert+0x6c>
    1b6e:	ea cf       	rjmp	.-44     	; 0x1b44 <__ultoa_invert+0x58>
    1b70:	b4 e0       	ldi	r27, 0x04	; 4
    1b72:	a6 95       	lsr	r26
    1b74:	97 95       	ror	r25
    1b76:	87 95       	ror	r24
    1b78:	77 95       	ror	r23
    1b7a:	67 95       	ror	r22
    1b7c:	ba 95       	dec	r27
    1b7e:	c9 f7       	brne	.-14     	; 0x1b72 <__ultoa_invert+0x86>
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 05       	cpc	r22, r1
    1b84:	71 05       	cpc	r23, r1
    1b86:	08 95       	ret
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	0a 2e       	mov	r0, r26
    1b8e:	06 94       	lsr	r0
    1b90:	57 95       	ror	r21
    1b92:	47 95       	ror	r20
    1b94:	37 95       	ror	r19
    1b96:	27 95       	ror	r18
    1b98:	ba 95       	dec	r27
    1b9a:	c9 f7       	brne	.-14     	; 0x1b8e <__ultoa_invert+0xa2>
    1b9c:	62 0f       	add	r22, r18
    1b9e:	73 1f       	adc	r23, r19
    1ba0:	84 1f       	adc	r24, r20
    1ba2:	95 1f       	adc	r25, r21
    1ba4:	a0 1d       	adc	r26, r0
    1ba6:	08 95       	ret

00001ba8 <__prologue_saves__>:
    1ba8:	2f 92       	push	r2
    1baa:	3f 92       	push	r3
    1bac:	4f 92       	push	r4
    1bae:	5f 92       	push	r5
    1bb0:	6f 92       	push	r6
    1bb2:	7f 92       	push	r7
    1bb4:	8f 92       	push	r8
    1bb6:	9f 92       	push	r9
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	ca 1b       	sub	r28, r26
    1bd2:	db 0b       	sbc	r29, r27
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	09 94       	ijmp

00001be0 <__epilogue_restores__>:
    1be0:	2a 88       	ldd	r2, Y+18	; 0x12
    1be2:	39 88       	ldd	r3, Y+17	; 0x11
    1be4:	48 88       	ldd	r4, Y+16	; 0x10
    1be6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1be8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bf2:	b9 84       	ldd	r11, Y+9	; 0x09
    1bf4:	c8 84       	ldd	r12, Y+8	; 0x08
    1bf6:	df 80       	ldd	r13, Y+7	; 0x07
    1bf8:	ee 80       	ldd	r14, Y+6	; 0x06
    1bfa:	fd 80       	ldd	r15, Y+5	; 0x05
    1bfc:	0c 81       	ldd	r16, Y+4	; 0x04
    1bfe:	1b 81       	ldd	r17, Y+3	; 0x03
    1c00:	aa 81       	ldd	r26, Y+2	; 0x02
    1c02:	b9 81       	ldd	r27, Y+1	; 0x01
    1c04:	ce 0f       	add	r28, r30
    1c06:	d1 1d       	adc	r29, r1
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	ed 01       	movw	r28, r26
    1c14:	08 95       	ret

00001c16 <_exit>:
    1c16:	f8 94       	cli

00001c18 <__stop_program>:
    1c18:	ff cf       	rjmp	.-2      	; 0x1c18 <__stop_program>
