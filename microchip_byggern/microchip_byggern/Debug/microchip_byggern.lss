
microchip_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00001c7a  00001d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008001c4  008001c4  00001dd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002647  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f6  00000000  00000000  000046fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ca  00000000  00000000  000059f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00006cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e9  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc6  00000000  00000000  00007ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000087ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SPI_read>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e7       	ldi	r30, 0x7A	; 122
     37c:	fc e1       	ldi	r31, 0x1C	; 28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3c       	cpi	r26, 0xC4	; 196
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a4 ec       	ldi	r26, 0xC4	; 196
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	af 31       	cpi	r26, 0x1F	; 31
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
     39e:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include "can.h"

void can_init()
{
    // Set to loopback mode
    mcp2515_init();
     3a6:	0e 94 b7 03 	call	0x76e	; 0x76e <mcp2515_init>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	60 ee       	ldi	r22, 0xE0	; 224
     3ae:	8f e0       	ldi	r24, 0x0F	; 15
     3b0:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
     3b4:	08 95       	ret

000003b6 <can_message_send>:
	//TODO: Make some acknowledge action happen, or something like this. Node 2 cant send to node 1
	
	
}
void can_message_send(can_message message)
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2b 97       	sbiw	r28, 0x0b	; 11
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	e9 82       	std	Y+1, r14	; 0x01
     3d4:	fa 82       	std	Y+2, r15	; 0x02
     3d6:	0b 83       	std	Y+3, r16	; 0x03
     3d8:	1c 83       	std	Y+4, r17	; 0x04
     3da:	2d 83       	std	Y+5, r18	; 0x05
     3dc:	3e 83       	std	Y+6, r19	; 0x06
     3de:	4f 83       	std	Y+7, r20	; 0x07
     3e0:	58 87       	std	Y+8, r21	; 0x08
     3e2:	69 87       	std	Y+9, r22	; 0x09
     3e4:	7a 87       	std	Y+10, r23	; 0x0a
     3e6:	8b 87       	std	Y+11, r24	; 0x0b
    // In order to initiate message transmission, the
    // TXBnCTRL.TXREQ bit must be set for each buffer to
    // be transmitted. This can be accomplished by:
    // • Writing to the register via the SPI write command
    
    mcp2515_write(MCP_TXB0SIDH, message.id >> 8);
     3e8:	6f 2d       	mov	r22, r15
     3ea:	81 e3       	ldi	r24, 0x31	; 49
     3ec:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL, message.id);
     3f0:	69 81       	ldd	r22, Y+1	; 0x01
     3f2:	82 e3       	ldi	r24, 0x32	; 50
     3f4:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC, message.data_length);
     3f8:	6b 81       	ldd	r22, Y+3	; 0x03
     3fa:	85 e3       	ldi	r24, 0x35	; 53
     3fc:	0e 94 4f 03 	call	0x69e	; 0x69e <mcp2515_write>

    mcp2515_write_bytes(MCP_TXB0D0, message.data, message.data_length);
     400:	4b 81       	ldd	r20, Y+3	; 0x03
     402:	be 01       	movw	r22, r28
     404:	6c 5f       	subi	r22, 0xFC	; 252
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	86 e3       	ldi	r24, 0x36	; 54
     40a:	0e 94 65 03 	call	0x6ca	; 0x6ca <mcp2515_write_bytes>
	
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);
     40e:	48 e0       	ldi	r20, 0x08	; 8
     410:	68 e0       	ldi	r22, 0x08	; 8
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
    
    // • Sending the SPI RTS command
    mcp2515_request_to_send();
     418:	0e 94 8e 03 	call	0x71c	; 0x71c <mcp2515_request_to_send>
    // • Setting the TXnRTS pin low for the particular transmit buffer(s) that are to be transmitted
    // If configured to operate as a request-to-send pin, the pin is mapped into the respective TXBnCTRL.TXREQ bit for the transmit buffer
}
     41c:	2b 96       	adiw	r28, 0x0b	; 11
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	08 95       	ret

00000436 <can_data_receive>:
can_message can_data_receive()
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	8c 01       	movw	r16, r24
    can_message message;

    message.id = mcp2515_read(MCP_RXB0SIDH) << 8 | mcp2515_read(MCP_RXB0SIDL);
     440:	81 e6       	ldi	r24, 0x61	; 97
     442:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp2515_read>
     446:	c8 2f       	mov	r28, r24
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	dc 2f       	mov	r29, r28
     44c:	cc 27       	eor	r28, r28
     44e:	82 e6       	ldi	r24, 0x62	; 98
     450:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp2515_read>
     454:	c8 2b       	or	r28, r24
     456:	f8 01       	movw	r30, r16
     458:	d1 83       	std	Z+1, r29	; 0x01
     45a:	c0 83       	st	Z, r28
    message.data[0] = mcp2515_read(MCP_RXB0D0);
     45c:	86 e6       	ldi	r24, 0x66	; 102
     45e:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp2515_read>
     462:	f8 01       	movw	r30, r16
     464:	83 83       	std	Z+3, r24	; 0x03
    message.data_length = mcp2515_read(MCP_RXB0DLC);
     466:	85 e6       	ldi	r24, 0x65	; 101
     468:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp2515_read>
     46c:	f8 01       	movw	r30, r16
     46e:	82 83       	std	Z+2, r24	; 0x02

    return message;
}
     470:	c8 01       	movw	r24, r16
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <interrupt_init>:

#include "interrupts.h"

interrupt_init(){
	
	GICR &= ~(1 << INT2); // Disable External Interrupt 2
     47c:	8b b7       	in	r24, 0x3b	; 59
     47e:	8f 7d       	andi	r24, 0xDF	; 223
     480:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7); // Enable global interrupts
     482:	8f b7       	in	r24, 0x3f	; 63
     484:	80 68       	ori	r24, 0x80	; 128
     486:	8f bf       	out	0x3f, r24	; 63
	EMCUCR &= ~(1 << ISC2); // Interrupt on Falling edge
     488:	86 b7       	in	r24, 0x36	; 54
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT2); // Enable External Interrupt 2
     48e:	8b b7       	in	r24, 0x3b	; 59
     490:	80 62       	ori	r24, 0x20	; 32
     492:	8b bf       	out	0x3b, r24	; 59
     494:	08 95       	ret

00000496 <__vector_3>:

}

ISR(INT2_vect){
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	ac 97       	sbiw	r28, 0x2c	; 44
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	cd bf       	out	0x3d, r28	; 61
	printf("received message");
     4ca:	82 e1       	ldi	r24, 0x12	; 18
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
	printf("%d ", can_data_receive().data[0]);
     4d6:	ce 01       	movw	r24, r28
     4d8:	82 96       	adiw	r24, 0x22	; 34
     4da:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     4de:	8d a1       	ldd	r24, Y+37	; 0x25
     4e0:	1f 92       	push	r1
     4e2:	8f 93       	push	r24
     4e4:	03 e2       	ldi	r16, 0x23	; 35
     4e6:	11 e0       	ldi	r17, 0x01	; 1
     4e8:	1f 93       	push	r17
     4ea:	0f 93       	push	r16
     4ec:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
	printf("%d ", can_data_receive().data[1]);
     4f0:	ce 01       	movw	r24, r28
     4f2:	47 96       	adiw	r24, 0x17	; 23
     4f4:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     4f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4fa:	1f 92       	push	r1
     4fc:	8f 93       	push	r24
     4fe:	1f 93       	push	r17
     500:	0f 93       	push	r16
     502:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
	printf("%d ", can_data_receive().data[2]);
     506:	ce 01       	movw	r24, r28
     508:	0c 96       	adiw	r24, 0x0c	; 12
     50a:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     50e:	89 89       	ldd	r24, Y+17	; 0x11
     510:	1f 92       	push	r1
     512:	8f 93       	push	r24
     514:	1f 93       	push	r17
     516:	0f 93       	push	r16
     518:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
	printf("%d ", can_data_receive().data[3]);
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	1f 92       	push	r1
     528:	8f 93       	push	r24
     52a:	1f 93       	push	r17
     52c:	0f 93       	push	r16
     52e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
    mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8c e2       	ldi	r24, 0x2C	; 44
     538:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	ac 96       	adiw	r28, 0x2c	; 44
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <joystick_loop>:

#include "joystick_transceiver.h"

void joystick_loop(input_t input)
{
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	62 97       	sbiw	r28, 0x12	; 18
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id = 0;
     598:	1a 82       	std	Y+2, r1	; 0x02
     59a:	19 82       	std	Y+1, r1	; 0x01
	msg.data_length = 2;
	
	msg.data[0] = input.joystick_x;
     59c:	12 2f       	mov	r17, r18
	msg.data[1] = input.joystick_y;
     59e:	23 2f       	mov	r18, r19
	
	//printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	//printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	//printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);
	
	can_message_send(msg);
     5a0:	e1 2c       	mov	r14, r1
     5a2:	fa 80       	ldd	r15, Y+2	; 0x02
     5a4:	02 e0       	ldi	r16, 0x02	; 2
     5a6:	3e 81       	ldd	r19, Y+6	; 0x06
     5a8:	4f 81       	ldd	r20, Y+7	; 0x07
     5aa:	58 85       	ldd	r21, Y+8	; 0x08
     5ac:	69 85       	ldd	r22, Y+9	; 0x09
     5ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     5b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <can_message_send>
}
     5b6:	62 96       	adiw	r28, 0x12	; 18
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <main>:
#include "adc.h"
#include "can.h"
#include "interrupts.h"

int main(void)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	27 97       	sbiw	r28, 0x07	; 7
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
	usart_init(USART_BAUD_RATE_REGISTER);
     5e4:	8f e1       	ldi	r24, 0x1F	; 31
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 b0 05 	call	0xb60	; 0xb60 <usart_init>
	printf("hello world ");
     5ec:	87 e2       	ldi	r24, 0x27	; 39
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>

	xmem_init();
     5f8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <xmem_init>
	adc_init();
     5fc:	0e 94 c3 05 	call	0xb86	; 0xb86 <adc_init>
	OLED_init();
     600:	0e 94 00 05 	call	0xa00	; 0xa00 <OLED_init>
	menu_init();
     604:	0e 94 ef 03 	call	0x7de	; 0x7de <menu_init>
	interrupt_init();
     608:	0e 94 3e 02 	call	0x47c	; 0x47c <interrupt_init>
	can_init();
     60c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
	
	int j = 0;
	while(1)
	{
		input_t input;
		for(int i = 0; i < 10; i++)
     614:	00 e0       	ldi	r16, 0x00	; 0
     616:	10 e0       	ldi	r17, 0x00	; 0
     618:	23 c0       	rjmp	.+70     	; 0x660 <main+0x90>
		{
			input = input_read();
     61a:	0e 94 e5 05 	call	0xbca	; 0xbca <input_read>
     61e:	29 83       	std	Y+1, r18	; 0x01
     620:	3a 83       	std	Y+2, r19	; 0x02
     622:	4b 83       	std	Y+3, r20	; 0x03
     624:	5c 83       	std	Y+4, r21	; 0x04
     626:	6d 83       	std	Y+5, r22	; 0x05
     628:	7e 83       	std	Y+6, r23	; 0x06
     62a:	8f 83       	std	Y+7, r24	; 0x07
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62c:	89 e6       	ldi	r24, 0x69	; 105
     62e:	98 e1       	ldi	r25, 0x18	; 24
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <main+0x60>
     634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x66>
     636:	00 00       	nop
			_delay_ms(25);
			joystick_loop(input);
     638:	29 81       	ldd	r18, Y+1	; 0x01
     63a:	3a 81       	ldd	r19, Y+2	; 0x02
     63c:	4b 81       	ldd	r20, Y+3	; 0x03
     63e:	5c 81       	ldd	r21, Y+4	; 0x04
     640:	6d 81       	ldd	r22, Y+5	; 0x05
     642:	7e 81       	ldd	r23, Y+6	; 0x06
     644:	8f 81       	ldd	r24, Y+7	; 0x07
     646:	0e 94 be 02 	call	0x57c	; 0x57c <joystick_loop>
			menu_input_loop(input);
     64a:	29 81       	ldd	r18, Y+1	; 0x01
     64c:	3a 81       	ldd	r19, Y+2	; 0x02
     64e:	4b 81       	ldd	r20, Y+3	; 0x03
     650:	5c 81       	ldd	r21, Y+4	; 0x04
     652:	6d 81       	ldd	r22, Y+5	; 0x05
     654:	7e 81       	ldd	r23, Y+6	; 0x06
     656:	8f 81       	ldd	r24, Y+7	; 0x07
     658:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <menu_input_loop>
	
	int j = 0;
	while(1)
	{
		input_t input;
		for(int i = 0; i < 10; i++)
     65c:	0f 5f       	subi	r16, 0xFF	; 255
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	0a 30       	cpi	r16, 0x0A	; 10
     662:	11 05       	cpc	r17, r1
     664:	d4 f2       	brlt	.-76     	; 0x61a <main+0x4a>
			input = input_read();
			_delay_ms(25);
			joystick_loop(input);
			menu_input_loop(input);
		}
		menu_draw_loop(input);
     666:	29 81       	ldd	r18, Y+1	; 0x01
     668:	3a 81       	ldd	r19, Y+2	; 0x02
     66a:	4b 81       	ldd	r20, Y+3	; 0x03
     66c:	5c 81       	ldd	r21, Y+4	; 0x04
     66e:	6d 81       	ldd	r22, Y+5	; 0x05
     670:	7e 81       	ldd	r23, Y+6	; 0x06
     672:	8f 81       	ldd	r24, Y+7	; 0x07
     674:	0e 94 74 04 	call	0x8e8	; 0x8e8 <menu_draw_loop>
	}
     678:	cd cf       	rjmp	.-102    	; 0x614 <main+0x44>

0000067a <mcp2515_read>:
    
    // More initialization
    return 0;
}
uint8_t mcp2515_read ( uint8_t address )
{
     67a:	cf 93       	push	r28
     67c:	c8 2f       	mov	r28, r24
    uint8_t result ;
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     67e:	88 b3       	in	r24, 0x18	; 24
     680:	8f 7e       	andi	r24, 0xEF	; 239
     682:	88 bb       	out	0x18, r24	; 24
    SPI_write ( MCP_READ ); // Send read instruction
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write ( address ); // Send address
     68a:	8c 2f       	mov	r24, r28
     68c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    result = SPI_read () ; // Read result
     690:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_read>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     694:	98 b3       	in	r25, 0x18	; 24
     696:	90 61       	ori	r25, 0x10	; 16
     698:	98 bb       	out	0x18, r25	; 24
    return result ;
}
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data)
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	d8 2f       	mov	r29, r24
     6a4:	c6 2f       	mov	r28, r22
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     6a6:	88 b3       	in	r24, 0x18	; 24
     6a8:	8f 7e       	andi	r24, 0xEF	; 239
     6aa:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write (address);
     6b2:	8d 2f       	mov	r24, r29
     6b4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write (data);
     6b8:	8c 2f       	mov	r24, r28
     6ba:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     6be:	88 b3       	in	r24, 0x18	; 24
     6c0:	80 61       	ori	r24, 0x10	; 16
     6c2:	88 bb       	out	0x18, r24	; 24
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <mcp2515_write_bytes>:

void mcp2515_write_bytes(uint8_t address, uint8_t* data, uint8_t data_length)
{
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	c8 2f       	mov	r28, r24
     6d6:	7b 01       	movw	r14, r22
     6d8:	14 2f       	mov	r17, r20
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     6da:	88 b3       	in	r24, 0x18	; 24
     6dc:	8f 7e       	andi	r24, 0xEF	; 239
     6de:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write (address);
     6e6:	8c 2f       	mov	r24, r28
     6e8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    for(int i = 0; i < data_length; i++)
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
     6ee:	d0 e0       	ldi	r29, 0x00	; 0
     6f0:	07 c0       	rjmp	.+14     	; 0x700 <mcp2515_write_bytes+0x36>
    {
        SPI_write (data[i]);
     6f2:	f7 01       	movw	r30, r14
     6f4:	ec 0f       	add	r30, r28
     6f6:	fd 1f       	adc	r31, r29
     6f8:	80 81       	ld	r24, Z
     6fa:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
    
    SPI_write (MCP_WRITE);
    SPI_write (address);
    for(int i = 0; i < data_length; i++)
     6fe:	21 96       	adiw	r28, 0x01	; 1
     700:	81 2f       	mov	r24, r17
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	c8 17       	cp	r28, r24
     706:	d9 07       	cpc	r29, r25
     708:	a4 f3       	brlt	.-24     	; 0x6f2 <mcp2515_write_bytes+0x28>
    {
        SPI_write (data[i]);
    }
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     70a:	88 b3       	in	r24, 0x18	; 24
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	88 bb       	out	0x18, r24	; 24
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <mcp2515_request_to_send>:

void mcp2515_request_to_send()
{
    SPI_write(MCP_RTS_TX0);
     71c:	81 e8       	ldi	r24, 0x81	; 129
     71e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
     722:	08 95       	ret

00000724 <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	18 2f       	mov	r17, r24
     72c:	d6 2f       	mov	r29, r22
     72e:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
     730:	88 b3       	in	r24, 0x18	; 24
     732:	8f 7e       	andi	r24, 0xEF	; 239
     734:	88 bb       	out	0x18, r24	; 24
    SPI_write(MCP_BITMOD);
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write(address);
     73c:	81 2f       	mov	r24, r17
     73e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write(mask);
     742:	8d 2f       	mov	r24, r29
     744:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    SPI_write(data);
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     74e:	88 b3       	in	r24, 0x18	; 24
     750:	80 61       	ori	r24, 0x10	; 16
     752:	88 bb       	out	0x18, r24	; 24
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <mcp2515_reset>:
void mcp2515_reset()
{
    SPI_write(MCP_RESET);
     75c:	80 ec       	ldi	r24, 0xC0	; 192
     75e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SPI_write>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	60 ee       	ldi	r22, 0xE0	; 224
     766:	8f e0       	ldi	r24, 0x0F	; 15
     768:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
     76c:	08 95       	ret

0000076e <mcp2515_init>:
#include "mcp.h"

uint8_t mcp2515_init ()
{
    DDRB |= (1 << PB4 ); // Set CS - pin as output
     76e:	87 b3       	in	r24, 0x17	; 23
     770:	80 61       	ori	r24, 0x10	; 16
     772:	87 bb       	out	0x17, r24	; 23

    
    SPI_init () ; // Initialize SPI
     774:	0e 94 90 05 	call	0xb20	; 0xb20 <SPI_init>
    mcp2515_reset () ; // Send reset - command
     778:	0e 94 ae 03 	call	0x75c	; 0x75c <mcp2515_reset>
    // Self - test
	
    uint8_t value = mcp2515_read ( MCP_CANSTAT  );
     77c:	8e e0       	ldi	r24, 0x0E	; 14
     77e:	0e 94 3d 03 	call	0x67a	; 0x67a <mcp2515_read>
	
    if (( value & MODE_MASK ) != MODE_CONFIG ) {
     782:	80 7e       	andi	r24, 0xE0	; 224
     784:	80 38       	cpi	r24, 0x80	; 128
     786:	31 f0       	breq	.+12     	; 0x794 <mcp2515_init+0x26>
        printf (" MCP2515 is NOT in configuration mode after reset !\n");
     788:	84 e3       	ldi	r24, 0x34	; 52
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <puts>
        return 1;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	08 95       	ret
    }
    mcp2515_bit_modify(MCP_TXRTSCTRL, 0b00000001, 0b00000001);
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	8d e0       	ldi	r24, 0x0D	; 13
     79a:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	
    mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0b00000001); // Enable Message received interrupt
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	8b e2       	ldi	r24, 0x2B	; 43
     7a4:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	
	// Can bus Bit timing
	mcp2515_bit_modify(MCP_CNF1, 0b00111111, 0b00000011); // T_Q = 500ns
     7a8:	43 e0       	ldi	r20, 0x03	; 3
     7aa:	6f e3       	ldi	r22, 0x3F	; 63
     7ac:	8a e2       	ldi	r24, 0x2A	; 42
     7ae:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF1, 0b11000000, 0b00000000); // Synchronization Jump Width Length = 1*T_Q
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	60 ec       	ldi	r22, 0xC0	; 192
     7b6:	8a e2       	ldi	r24, 0x2A	; 42
     7b8:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2, 0b11111111, 0b10110001); // Phase 1 length = 7*T_Q, Propagation Segment = 2*T_Q, BUs Line sampled once and Length of Phase 2 determined by CNF3
     7bc:	41 eb       	ldi	r20, 0xB1	; 177
     7be:	6f ef       	ldi	r22, 0xFF	; 255
     7c0:	89 e2       	ldi	r24, 0x29	; 41
     7c2:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3, 0b00000111, 0b00000101); // Phase 2 length = 6*T_Q
     7c6:	45 e0       	ldi	r20, 0x05	; 5
     7c8:	67 e0       	ldi	r22, 0x07	; 7
     7ca:	88 e2       	ldi	r24, 0x28	; 40
     7cc:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Disable masks - receive all messages
     7d0:	40 e6       	ldi	r20, 0x60	; 96
     7d2:	60 e6       	ldi	r22, 0x60	; 96
     7d4:	80 e6       	ldi	r24, 0x60	; 96
     7d6:	0e 94 92 03 	call	0x724	; 0x724 <mcp2515_bit_modify>
	//printf("%02x ", mcp2515_read(MCP_CNF2));
	//printf("%02x ", mcp2515_read(MCP_CNF3));
	
    
    // More initialization
    return 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
}
     7dc:	08 95       	ret

000007de <menu_init>:
#include "menu.h"

void menu_init()
{
	selected_position = 0;
     7de:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <selected_position>
	current_menu = 0;
     7e2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <current_menu>
	OLED_pos(0, 0);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_reset();
     7f2:	0e 94 c7 04 	call	0x98e	; 0x98e <OLED_reset>
     7f6:	08 95       	ret

000007f8 <menu_input_loop>:
}
void menu_input_loop(input_t input)
{
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	27 97       	sbiw	r28, 0x07	; 7
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	29 83       	std	Y+1, r18	; 0x01
     810:	3a 83       	std	Y+2, r19	; 0x02
     812:	4b 83       	std	Y+3, r20	; 0x03
     814:	5c 83       	std	Y+4, r21	; 0x04
     816:	6d 83       	std	Y+5, r22	; 0x05
     818:	7e 83       	std	Y+6, r23	; 0x06
     81a:	8f 83       	std	Y+7, r24	; 0x07
	if(input.direction == UP && last_input.direction != UP)
     81c:	18 2f       	mov	r17, r24
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	c9 f4       	brne	.+50     	; 0x854 <menu_input_loop+0x5c>
     822:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <last_input+0x6>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	a9 f0       	breq	.+42     	; 0x854 <menu_input_loop+0x5c>
	{
		selected_position = MAX(selected_position-1, 0);
     82a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <selected_position>
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	12 f4       	brpl	.+4      	; 0x838 <menu_input_loop+0x40>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <selected_position>
		printf("UP %d", selected_position);
     83c:	1f 92       	push	r1
     83e:	8f 93       	push	r24
     840:	88 e6       	ldi	r24, 0x68	; 104
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
	}
	if(input.direction == DOWN && last_input.direction != DOWN)
     854:	13 30       	cpi	r17, 0x03	; 3
     856:	d9 f4       	brne	.+54     	; 0x88e <menu_input_loop+0x96>
     858:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <last_input+0x6>
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	b9 f0       	breq	.+46     	; 0x88e <menu_input_loop+0x96>
	{
		selected_position = MIN(selected_position+1, 2);
     860:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <selected_position>
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	83 30       	cpi	r24, 0x03	; 3
     86a:	91 05       	cpc	r25, r1
     86c:	14 f0       	brlt	.+4      	; 0x872 <menu_input_loop+0x7a>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <selected_position>
		printf("DOWN %d", selected_position);
     876:	1f 92       	push	r1
     878:	8f 93       	push	r24
     87a:	8e e6       	ldi	r24, 0x6E	; 110
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
	}
	
	if(input.button_left && (!last_input.button_left))
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	88 23       	and	r24, r24
     892:	b9 f0       	breq	.+46     	; 0x8c2 <menu_input_loop+0xca>
     894:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <last_input+0x5>
     898:	81 11       	cpse	r24, r1
     89a:	13 c0       	rjmp	.+38     	; 0x8c2 <menu_input_loop+0xca>
	{
		current_menu = menu_info[current_menu].select_jump[selected_position];
     89c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <current_menu>
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <selected_position>
     8a6:	fc 01       	movw	r30, r24
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	e0 56       	subi	r30, 0x60	; 96
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	e2 0f       	add	r30, r18
     8ba:	f1 1d       	adc	r31, r1
     8bc:	81 81       	ldd	r24, Z+1	; 0x01
     8be:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <current_menu>
	}
	
	/*printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);*/
	last_input = input;
     8c2:	87 e0       	ldi	r24, 0x07	; 7
     8c4:	fe 01       	movw	r30, r28
     8c6:	31 96       	adiw	r30, 0x01	; 1
     8c8:	ae e0       	ldi	r26, 0x0E	; 14
     8ca:	b2 e0       	ldi	r27, 0x02	; 2
     8cc:	01 90       	ld	r0, Z+
     8ce:	0d 92       	st	X+, r0
     8d0:	8a 95       	dec	r24
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <menu_input_loop+0xd4>
}
     8d4:	27 96       	adiw	r28, 0x07	; 7
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	08 95       	ret

000008e8 <menu_draw_loop>:
void menu_draw_loop(input_t input)
{
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	27 97       	sbiw	r28, 0x07	; 7
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
     900:	0e 94 c7 04 	call	0x98e	; 0x98e <OLED_reset>
	//}
	
	for(int row = 0; row < 3; row++)
     904:	00 e0       	ldi	r16, 0x00	; 0
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	20 c0       	rjmp	.+64     	; 0x94a <menu_draw_loop+0x62>
	{
		OLED_pos(10 + row*8, 10);
     90a:	c8 01       	movw	r24, r16
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	6a e0       	ldi	r22, 0x0A	; 10
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	0a 96       	adiw	r24, 0x0a	; 10
     91e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
		OLED_print(menu_items[current_menu][row]);
     922:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <current_menu>
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	e8 0f       	add	r30, r24
     930:	f9 1f       	adc	r31, r25
     932:	e0 0f       	add	r30, r16
     934:	f1 1f       	adc	r31, r17
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ea 5f       	subi	r30, 0xFA	; 250
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	0e 94 67 05 	call	0xace	; 0xace <OLED_print>
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
	//}
	
	for(int row = 0; row < 3; row++)
     946:	0f 5f       	subi	r16, 0xFF	; 255
     948:	1f 4f       	sbci	r17, 0xFF	; 255
     94a:	03 30       	cpi	r16, 0x03	; 3
     94c:	11 05       	cpc	r17, r1
     94e:	ec f2       	brlt	.-70     	; 0x90a <menu_draw_loop+0x22>
	{
		OLED_pos(10 + row*8, 10);
		OLED_print(menu_items[current_menu][row]);
	}
	OLED_print_arrow(10 + selected_position*8, 0);
     950:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <selected_position>
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0a 96       	adiw	r24, 0x0a	; 10
     968:	0e 94 7e 05 	call	0xafc	; 0xafc <OLED_print_arrow>
     96c:	27 96       	adiw	r28, 0x07	; 7
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <OLED_write_data>:
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
}
void OLED_write_data(char data)
{
	volatile char* oled_data_register = (char*) BASE_ADDRESS_OLED_DATA;
	oled_data_register[0] = data;
     982:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xfe1>
     986:	08 95       	ret

00000988 <OLED_write_command>:
}
void OLED_write_command(char data)
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
     988:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xde1>
     98c:	08 95       	ret

0000098e <OLED_reset>:
} // PDF:"OLED LY190-128064" section 9.4



void OLED_reset()
{
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
	for (int page = 0; page < 8; page++)
     996:	00 e0       	ldi	r16, 0x00	; 0
     998:	10 e0       	ldi	r17, 0x00	; 0
     99a:	16 c0       	rjmp	.+44     	; 0x9c8 <OLED_reset+0x3a>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
     99c:	80 eb       	ldi	r24, 0xB0	; 176
     99e:	80 0f       	add	r24, r16
     9a0:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
		
		for (int i = 0; i < 128; i++)
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <OLED_reset+0x30>
		{
			OLED_write_data(0);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
		
		for (int i = 0; i < 128; i++)
     9bc:	21 96       	adiw	r28, 0x01	; 1
     9be:	c0 38       	cpi	r28, 0x80	; 128
     9c0:	d1 05       	cpc	r29, r1
     9c2:	cc f3       	brlt	.-14     	; 0x9b6 <OLED_reset+0x28>



void OLED_reset()
{
	for (int page = 0; page < 8; page++)
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	08 30       	cpi	r16, 0x08	; 8
     9ca:	11 05       	cpc	r17, r1
     9cc:	3c f3       	brlt	.-50     	; 0x99c <OLED_reset+0xe>
		for (int i = 0; i < 128; i++)
		{
			OLED_write_data(0);
		}
	}
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	08 95       	ret

000009d8 <OLED_pos>:
void OLED_clear_line(uint8_t line)
{
	
}
void OLED_pos(uint8_t row, uint8_t column)
{
     9d8:	cf 93       	push	r28
     9da:	c6 2f       	mov	r28, r22
	OLED_write_command(0xb0 + row / 8); // Set the page start address of the target display location by command B0h to B7h
     9dc:	86 95       	lsr	r24
     9de:	86 95       	lsr	r24
     9e0:	86 95       	lsr	r24
     9e2:	80 55       	subi	r24, 0x50	; 80
     9e4:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x00 + column % 16); // Set the lower start column address of pointer by command 00h~0Fh.
     9e8:	8c 2f       	mov	r24, r28
     9ea:	8f 70       	andi	r24, 0x0F	; 15
     9ec:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
     9f0:	8c 2f       	mov	r24, r28
     9f2:	82 95       	swap	r24
     9f4:	8f 70       	andi	r24, 0x0F	; 15
     9f6:	80 5f       	subi	r24, 0xF0	; 240
     9f8:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
}
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <OLED_init>:
#include <avr/pgmspace.h>

void OLED_init()
{
	
	OLED_write_command(0xae); // display off
     a00:	8e ea       	ldi	r24, 0xAE	; 174
     a02:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xa1); //segment remap
     a06:	81 ea       	ldi	r24, 0xA1	; 161
     a08:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xda); //common pads hardware: alternative
     a0c:	8a ed       	ldi	r24, 0xDA	; 218
     a0e:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x12);
     a12:	82 e1       	ldi	r24, 0x12	; 18
     a14:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xc8); //common output scan direction:com63~com0
     a18:	88 ec       	ldi	r24, 0xC8	; 200
     a1a:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xa8); //multiplex ration mode:63
     a1e:	88 ea       	ldi	r24, 0xA8	; 168
     a20:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x3f);
     a24:	8f e3       	ldi	r24, 0x3F	; 63
     a26:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xd5); //display divide ratio/osc. freq. mode
     a2a:	85 ed       	ldi	r24, 0xD5	; 213
     a2c:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x80);
     a30:	80 e8       	ldi	r24, 0x80	; 128
     a32:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x81); //contrast control
     a36:	81 e8       	ldi	r24, 0x81	; 129
     a38:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x50);
     a3c:	80 e5       	ldi	r24, 0x50	; 80
     a3e:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xd9); //set pre-charge period
     a42:	89 ed       	ldi	r24, 0xD9	; 217
     a44:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x21);
     a48:	81 e2       	ldi	r24, 0x21	; 33
     a4a:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x20); //Set Memory Addressing Mode
     a4e:	80 e2       	ldi	r24, 0x20	; 32
     a50:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x02);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xdb); //VCOM deselect level mode
     a5a:	8b ed       	ldi	r24, 0xDB	; 219
     a5c:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x30);
     a60:	80 e3       	ldi	r24, 0x30	; 48
     a62:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xad); //master configuration
     a66:	8d ea       	ldi	r24, 0xAD	; 173
     a68:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0x00);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xa4); //out follows RAM content
     a72:	84 ea       	ldi	r24, 0xA4	; 164
     a74:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xa6); //set normal display
     a78:	86 ea       	ldi	r24, 0xA6	; 166
     a7a:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	OLED_write_command(0xaf); // display on
     a7e:	8f ea       	ldi	r24, 0xAF	; 175
     a80:	0e 94 c4 04 	call	0x988	; 0x988 <OLED_write_command>
	//OLED_write_command(0xa5);
	/*OLED_write_command(0xb0); // Set the page start address of the target display location by command B0h to B7h
	OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
	OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh*/
	
	OLED_reset();
     a84:	0e 94 c7 04 	call	0x98e	; 0x98e <OLED_reset>
	OLED_pos(0, 0);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
     a90:	08 95       	ret

00000a92 <OLED_print_character>:
		i++;
	}
}

void OLED_print_character(char character)
{
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	18 2f       	mov	r17, r24
	for (int row = 0; row < 8; row++)
     a9a:	c0 e0       	ldi	r28, 0x00	; 0
     a9c:	d0 e0       	ldi	r29, 0x00	; 0
     a9e:	10 c0       	rjmp	.+32     	; 0xac0 <OLED_print_character+0x2e>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
     aa0:	e1 2f       	mov	r30, r17
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ec 0f       	add	r30, r28
     ab2:	fd 1f       	adc	r31, r29
     ab4:	e0 59       	subi	r30, 0x90	; 144
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	84 91       	lpm	r24, Z
     aba:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
	}
}

void OLED_print_character(char character)
{
	for (int row = 0; row < 8; row++)
     abe:	21 96       	adiw	r28, 0x01	; 1
     ac0:	c8 30       	cpi	r28, 0x08	; 8
     ac2:	d1 05       	cpc	r29, r1
     ac4:	6c f3       	brlt	.-38     	; 0xaa0 <OLED_print_character+0xe>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
	}
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	08 95       	ret

00000ace <OLED_print>:
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	8c 01       	movw	r16, r24
	int i = 0;
     ad8:	c0 e0       	ldi	r28, 0x00	; 0
     ada:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i] != '\0')
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <OLED_print+0x18>
	{
		OLED_print_character(string[i] - 32);
     ade:	80 52       	subi	r24, 0x20	; 32
     ae0:	0e 94 49 05 	call	0xa92	; 0xa92 <OLED_print_character>
		i++;
     ae4:	21 96       	adiw	r28, 0x01	; 1
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
	int i = 0;
	while(string[i] != '\0')
     ae6:	f8 01       	movw	r30, r16
     ae8:	ec 0f       	add	r30, r28
     aea:	fd 1f       	adc	r31, r29
     aec:	80 81       	ld	r24, Z
     aee:	81 11       	cpse	r24, r1
     af0:	f6 cf       	rjmp	.-20     	; 0xade <OLED_print+0x10>
	{
		OLED_print_character(string[i] - 32);
		i++;
	}
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <OLED_print_arrow>:
void OLED_set_brightness(uint8_t lvl);


void OLED_print_arrow ( uint8_t row , uint8_t col )
{
	OLED_pos ( row , col );
     afc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OLED_pos>
	OLED_write_data (0b00011000 );
     b00:	88 e1       	ldi	r24, 0x18	; 24
     b02:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
	OLED_write_data (0b00011000 );
     b06:	88 e1       	ldi	r24, 0x18	; 24
     b08:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
	OLED_write_data (0b01111110 );
     b0c:	8e e7       	ldi	r24, 0x7E	; 126
     b0e:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
	OLED_write_data (0b00111100 );
     b12:	8c e3       	ldi	r24, 0x3C	; 60
     b14:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
	OLED_write_data (0b00011000 );
     b18:	88 e1       	ldi	r24, 0x18	; 24
     b1a:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_write_data>
     b1e:	08 95       	ret

00000b20 <SPI_init>:
#include <avr/io.h>

void SPI_init(){
	
	/* Set MOSI, SCK output, all others input */
	DDRB |= (1 << PB5) | (1 << PB7);
     b20:	87 b3       	in	r24, 0x17	; 23
     b22:	80 6a       	ori	r24, 0xA0	; 160
     b24:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	//SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPIE) ;
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) ;
     b26:	8d b1       	in	r24, 0x0d	; 13
     b28:	81 65       	ori	r24, 0x51	; 81
     b2a:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << SPR1) ;
     b2c:	8d b1       	in	r24, 0x0d	; 13
     b2e:	8d 7f       	andi	r24, 0xFD	; 253
     b30:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1 << SPI2X) ;
     b32:	8e b1       	in	r24, 0x0e	; 14
     b34:	8e 7f       	andi	r24, 0xFE	; 254
     b36:	8e b9       	out	0x0e, r24	; 14
     b38:	08 95       	ret

00000b3a <SPI_write>:
}

void SPI_write(char cData){
	
	/* Start transmission */
	SPDR = cData;
     b3a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     b3c:	77 9b       	sbis	0x0e, 7	; 14
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <SPI_write+0x2>
	;
	
	
	
}
     b40:	08 95       	ret

00000b42 <SPI_read>:

char SPI_read(){
	
	/* Start transmission */
	SPDR = 0b00000000;
     b42:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     b44:	77 9b       	sbis	0x0e, 7	; 14
     b46:	fe cf       	rjmp	.-4      	; 0xb44 <SPI_read+0x2>
	;
	/* Received byte is found on the same register */
	return SPDR;
     b48:	8f b1       	in	r24, 0x0f	; 15

     b4a:	08 95       	ret

00000b4c <USART_Transmit>:
    
}
void USART_Transmit(unsigned char data)
{
    // Wait until the transmitter buffer is empty
    while ( !( UCSR0A & (1<<UDRE0)) ); // USART Control and Status Register A, USART Data Register Empty
     b4c:	5d 9b       	sbis	0x0b, 5	; 11
     b4e:	fe cf       	rjmp	.-4      	; 0xb4c <USART_Transmit>
    // Send data
    UDR0 = data; // USART Data Register
     b50:	8c b9       	out	0x0c, r24	; 12
     b52:	08 95       	ret

00000b54 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
     b54:	5f 9b       	sbis	0x0b, 7	; 11
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <USART_Receive+0x8>
        return '\0';
    // Return data received
    return UDR0; // USART Data Register
     b58:	8c b1       	in	r24, 0x0c	; 12
     b5a:	08 95       	ret

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
        return '\0';
     b5c:	80 e0       	ldi	r24, 0x00	; 0
    // Return data received
    return UDR0; // USART Data Register
     b5e:	08 95       	ret

00000b60 <usart_init>:

// static FILE usart_stream_write = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
// static FILE usart_stream_read = FDEV_SETUP_STREAM(NULL, USART_Transmit, _FDEV_SETUP_READ);

void usart_init(unsigned int usart_baud_rate_register)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	c8 2f       	mov	r28, r24
     b66:	d9 2f       	mov	r29, r25
    // Open read/write stream over USART https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html#gab599ddf60819df4cc993c724a83cb1a4
    fdevopen(USART_Transmit, USART_Receive);
     b68:	6a ea       	ldi	r22, 0xAA	; 170
     b6a:	75 e0       	ldi	r23, 0x05	; 5
     b6c:	86 ea       	ldi	r24, 0xA6	; 166
     b6e:	95 e0       	ldi	r25, 0x05	; 5
     b70:	0e 94 9e 09 	call	0x133c	; 0x133c <fdevopen>
    // Set baud rate registers
    UBRR0H = (unsigned char)(usart_baud_rate_register>>8); // usart_baud_rate_register_high
     b74:	d0 bd       	out	0x20, r29	; 32
    UBRR0L = (unsigned char)usart_baud_rate_register; // usart_baud_rate_register_low
     b76:	c9 b9       	out	0x09, r28	; 9
    
    // Enable RX and TX registers
    UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Universal Synchronous Asynchronous Receiver Transmitter Register B, RX Enable, TX Enable
     b78:	88 e1       	ldi	r24, 0x18	; 24
     b7a:	8a b9       	out	0x0a, r24	; 10
    
	
    // Set frame format to 8 data bits, 2 stop bits
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // Universal Synchronous Asynchronous Receiver Transmitter Register C, USART Register Select, USART Stop Bit Select, USART Character Size Select
     b7c:	8e e8       	ldi	r24, 0x8E	; 142
     b7e:	80 bd       	out	0x20, r24	; 32
    
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <adc_init>:
}

uint8_t joystick_angle_from_voltage(uint8_t voltage)
{
	return voltage;
}
     b86:	81 b3       	in	r24, 0x11	; 17
     b88:	80 61       	ori	r24, 0x10	; 16
     b8a:	81 bb       	out	0x11, r24	; 17
     b8c:	ab e8       	ldi	r26, 0x8B	; 139
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	8c 91       	ld	r24, X
     b92:	80 64       	ori	r24, 0x40	; 64
     b94:	8c 93       	st	X, r24
     b96:	ea e8       	ldi	r30, 0x8A	; 138
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	88 61       	ori	r24, 0x18	; 24
     b9e:	80 83       	st	Z, r24
     ba0:	8c 91       	ld	r24, X
     ba2:	83 60       	ori	r24, 0x03	; 3
     ba4:	8c 93       	st	X, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 83       	st	Z, r24
     bac:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     bb0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     bb4:	81 b3       	in	r24, 0x11	; 17
     bb6:	8b 7f       	andi	r24, 0xFB	; 251
     bb8:	81 bb       	out	0x11, r24	; 17
     bba:	81 b3       	in	r24, 0x11	; 17
     bbc:	87 7f       	andi	r24, 0xF7	; 247
     bbe:	81 bb       	out	0x11, r24	; 17
     bc0:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <input_head+0x1>
     bc4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <input_head>
     bc8:	08 95       	ret

00000bca <input_read>:

input_t input_read(){
     bca:	4f 92       	push	r4
     bcc:	5f 92       	push	r5
     bce:	6f 92       	push	r6
     bd0:	7f 92       	push	r7
     bd2:	8f 92       	push	r8
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	65 97       	sbiw	r28, 0x15	; 21
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
	volatile char* adc_out = (char*) BASE_ADDRESS_ADC;
	adc_out[0] = 0;
     bfa:	e0 e0       	ldi	r30, 0x00	; 0
     bfc:	f4 e1       	ldi	r31, 0x14	; 20
     bfe:	10 82       	st	Z, r1
     c00:	83 ef       	ldi	r24, 0xF3	; 243
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <input_read+0x3a>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <input_read+0x40>
     c0a:	00 00       	nop
	
	// Wait for busy
	_delay_ms(2);
	
	input_t input;
	uint8_t y_raw = *adc_out;
     c0c:	d0 80       	ld	r13, Z
	uint8_t x_raw = *adc_out;
     c0e:	00 81       	ld	r16, Z
	uint8_t slider1_raw = *adc_out;
     c10:	e0 80       	ld	r14, Z
	uint8_t slider2_raw = *adc_out;
     c12:	f0 80       	ld	r15, Z
	
	const double PI =  3.1415926;	
	
	uint8_t y_positive = MAX(y_raw, 175) - 175;
     c14:	9f ea       	ldi	r25, 0xAF	; 175
     c16:	9d 15       	cp	r25, r13
     c18:	18 f4       	brcc	.+6      	; 0xc20 <input_read+0x56>
     c1a:	61 e5       	ldi	r22, 0x51	; 81
     c1c:	6d 0d       	add	r22, r13
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <input_read+0x58>
     c20:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_positive = MAX(x_raw, 198) - 198;
     c22:	07 3c       	cpi	r16, 0xC7	; 199
     c24:	18 f0       	brcs	.+6      	; 0xc2c <input_read+0x62>
     c26:	1a e3       	ldi	r17, 0x3A	; 58
     c28:	10 0f       	add	r17, r16
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <input_read+0x64>
     c2c:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t y_positive_scaled = (uint8_t)((float)y_positive * ((float)127/(float)80));
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__floatunsisf>
     c38:	23 e3       	ldi	r18, 0x33	; 51
     c3a:	33 e3       	ldi	r19, 0x33	; 51
     c3c:	4b ec       	ldi	r20, 0xCB	; 203
     c3e:	5f e3       	ldi	r21, 0x3F	; 63
     c40:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     c44:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixunssfsi>
     c48:	b6 2e       	mov	r11, r22
	uint8_t x_positive_scaled = (uint8_t)((float)x_positive * ((float)127/(float)57));
     c4a:	61 2f       	mov	r22, r17
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__floatunsisf>
     c56:	24 eb       	ldi	r18, 0xB4	; 180
     c58:	38 e9       	ldi	r19, 0x98	; 152
     c5a:	4e e0       	ldi	r20, 0x0E	; 14
     c5c:	50 e4       	ldi	r21, 0x40	; 64
     c5e:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     c62:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixunssfsi>
     c66:	16 2f       	mov	r17, r22
	
	uint8_t y_negative = 175 - MIN(y_raw, 175);
     c68:	ee ea       	ldi	r30, 0xAE	; 174
     c6a:	ed 15       	cp	r30, r13
     c6c:	18 f0       	brcs	.+6      	; 0xc74 <input_read+0xaa>
     c6e:	6f ea       	ldi	r22, 0xAF	; 175
     c70:	6d 19       	sub	r22, r13
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <input_read+0xac>
     c74:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_negative = 198 - MIN(x_raw, 198);
     c76:	06 3c       	cpi	r16, 0xC6	; 198
     c78:	20 f4       	brcc	.+8      	; 0xc82 <input_read+0xb8>
     c7a:	86 ec       	ldi	r24, 0xC6	; 198
     c7c:	d8 2e       	mov	r13, r24
     c7e:	d0 1a       	sub	r13, r16
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <input_read+0xba>
     c82:	d1 2c       	mov	r13, r1
	
	uint8_t y_negative_scaled = (uint8_t)((float)y_negative * ((float)127/(float)175));
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__floatunsisf>
     c8e:	29 e6       	ldi	r18, 0x69	; 105
     c90:	38 ec       	ldi	r19, 0xC8	; 200
     c92:	49 e3       	ldi	r20, 0x39	; 57
     c94:	5f e3       	ldi	r21, 0x3F	; 63
     c96:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     c9a:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixunssfsi>
     c9e:	c6 2e       	mov	r12, r22
	uint8_t x_negative_scaled = (uint8_t)((float)x_negative * ((float)127/(float)198));
     ca0:	6d 2d       	mov	r22, r13
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__floatunsisf>
     cac:	28 eb       	ldi	r18, 0xB8	; 184
     cae:	33 e3       	ldi	r19, 0x33	; 51
     cb0:	44 e2       	ldi	r20, 0x24	; 36
     cb2:	5f e3       	ldi	r21, 0x3F	; 63
     cb4:	0e 94 09 09 	call	0x1212	; 0x1212 <__mulsf3>
     cb8:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixunssfsi>
	
	input.joystick_y = (uint8_t)((128 - y_negative_scaled) + y_positive_scaled);
     cbc:	9b 2d       	mov	r25, r11
     cbe:	9c 19       	sub	r25, r12
     cc0:	90 58       	subi	r25, 0x80	; 128
     cc2:	99 87       	std	Y+9, r25	; 0x09
	input.joystick_x = (uint8_t)((128 - x_negative_scaled) + x_positive_scaled);
     cc4:	81 2f       	mov	r24, r17
     cc6:	86 1b       	sub	r24, r22
     cc8:	80 58       	subi	r24, 0x80	; 128
     cca:	88 87       	std	Y+8, r24	; 0x08
	
	input.direction = CENTER;
     ccc:	1e 86       	std	Y+14, r1	; 0x0e
	if(input.joystick_y > 198)
     cce:	97 3c       	cpi	r25, 0xC7	; 199
     cd0:	10 f0       	brcs	.+4      	; 0xcd6 <input_read+0x10c>
		input.direction = UP;
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_x > 198)
     cd6:	87 3c       	cpi	r24, 0xC7	; 199
     cd8:	10 f0       	brcs	.+4      	; 0xcde <input_read+0x114>
		input.direction = RIGHT;
     cda:	22 e0       	ldi	r18, 0x02	; 2
     cdc:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_y < 68)
     cde:	94 34       	cpi	r25, 0x44	; 68
     ce0:	10 f4       	brcc	.+4      	; 0xce6 <input_read+0x11c>
		input.direction = DOWN;
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	9e 87       	std	Y+14, r25	; 0x0e
	if(input.joystick_x < 68)
     ce6:	84 34       	cpi	r24, 0x44	; 68
     ce8:	10 f4       	brcc	.+4      	; 0xcee <input_read+0x124>
		input.direction = LEFT;
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	8e 87       	std	Y+14, r24	; 0x0e
	
	input.slider_1 = slider1_raw;
     cee:	ea 86       	std	Y+10, r14	; 0x0a
	input.slider_2 = slider2_raw;
     cf0:	fb 86       	std	Y+11, r15	; 0x0b
	
	input.button_left = PIND & (1 << PD2);
     cf2:	80 b3       	in	r24, 0x10	; 16
     cf4:	84 70       	andi	r24, 0x04	; 4
     cf6:	8d 87       	std	Y+13, r24	; 0x0d
	input.button_right= PIND & (1 << PD3);
     cf8:	80 b3       	in	r24, 0x10	; 16
     cfa:	88 70       	andi	r24, 0x08	; 8
     cfc:	8c 87       	std	Y+12, r24	; 0x0c
	
	input_buffer[input_head] = input;
     cfe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <input_head>
     d02:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <input_head+0x1>
     d06:	dc 01       	movw	r26, r24
     d08:	aa 0f       	add	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	aa 0f       	add	r26, r26
     d0e:	bb 1f       	adc	r27, r27
     d10:	aa 0f       	add	r26, r26
     d12:	bb 1f       	adc	r27, r27
     d14:	a8 1b       	sub	r26, r24
     d16:	b9 0b       	sbc	r27, r25
     d18:	ac 53       	subi	r26, 0x3C	; 60
     d1a:	be 4f       	sbci	r27, 0xFE	; 254
     d1c:	27 e0       	ldi	r18, 0x07	; 7
     d1e:	fe 01       	movw	r30, r28
     d20:	38 96       	adiw	r30, 0x08	; 8
     d22:	01 90       	ld	r0, Z+
     d24:	0d 92       	st	X+, r0
     d26:	2a 95       	dec	r18
     d28:	e1 f7       	brne	.-8      	; 0xd22 <input_read+0x158>
	input_head = (input_head + 1) % 10;
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	6a e0       	ldi	r22, 0x0A	; 10
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	0e 94 76 09 	call	0x12ec	; 0x12ec <__divmodhi4>
     d34:	08 2f       	mov	r16, r24
     d36:	19 2f       	mov	r17, r25
     d38:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <input_head>
     d3c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <input_head+0x1>
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	fe 01       	movw	r30, r28
     d44:	38 96       	adiw	r30, 0x08	; 8
     d46:	de 01       	movw	r26, r28
     d48:	1f 96       	adiw	r26, 0x0f	; 15
     d4a:	01 90       	ld	r0, Z+
     d4c:	0d 92       	st	X+, r0
     d4e:	8a 95       	dec	r24
     d50:	e1 f7       	brne	.-8      	; 0xd4a <input_read+0x180>
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
     d52:	81 2c       	mov	r8, r1
     d54:	91 2c       	mov	r9, r1
     d56:	54 01       	movw	r10, r8
	input_buffer[input_head] = input;
	input_head = (input_head + 1) % 10;
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
     d58:	41 2c       	mov	r4, r1
     d5a:	51 2c       	mov	r5, r1
     d5c:	71 2c       	mov	r7, r1
     d5e:	61 2c       	mov	r6, r1
	float smooth_joystick_y = 0;
	for(int i = input_head; i != (input_head - 1 + 10) % 10; i = (i + 1) % 10)
     d60:	5a c0       	rjmp	.+180    	; 0xe16 <input_read+0x24c>
	{
		printf("||| %d    %d |||", i, (input_head - 1 + 10) % 10);
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	1f 93       	push	r17
     d68:	0f 93       	push	r16
     d6a:	8c ea       	ldi	r24, 0xAC	; 172
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	9f 93       	push	r25
     d70:	8f 93       	push	r24
     d72:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>
		smooth_joystick_x += (float)input_buffer[i % 10].joystick_x / 10.0;
     d76:	0f 2e       	mov	r0, r31
     d78:	fa e0       	ldi	r31, 0x0A	; 10
     d7a:	cf 2e       	mov	r12, r31
     d7c:	d1 2c       	mov	r13, r1
     d7e:	f0 2d       	mov	r31, r0
     d80:	c8 01       	movw	r24, r16
     d82:	b6 01       	movw	r22, r12
     d84:	0e 94 76 09 	call	0x12ec	; 0x12ec <__divmodhi4>
     d88:	7c 01       	movw	r14, r24
     d8a:	ee 0c       	add	r14, r14
     d8c:	ff 1c       	adc	r15, r15
     d8e:	ee 0c       	add	r14, r14
     d90:	ff 1c       	adc	r15, r15
     d92:	ee 0c       	add	r14, r14
     d94:	ff 1c       	adc	r15, r15
     d96:	97 01       	movw	r18, r14
     d98:	28 1b       	sub	r18, r24
     d9a:	39 0b       	sbc	r19, r25
     d9c:	f9 01       	movw	r30, r18
     d9e:	ec 53       	subi	r30, 0x3C	; 60
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	7f 01       	movw	r14, r30
     da4:	60 81       	ld	r22, Z
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__floatunsisf>
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divsf3>
     dbc:	9b 01       	movw	r18, r22
     dbe:	ac 01       	movw	r20, r24
     dc0:	64 2d       	mov	r22, r4
     dc2:	75 2d       	mov	r23, r5
     dc4:	87 2d       	mov	r24, r7
     dc6:	96 2d       	mov	r25, r6
     dc8:	0e 94 67 07 	call	0xece	; 0xece <__addsf3>
     dcc:	46 2e       	mov	r4, r22
     dce:	57 2e       	mov	r5, r23
     dd0:	78 2e       	mov	r7, r24
     dd2:	69 2e       	mov	r6, r25
		smooth_joystick_y += (float)input_buffer[i % 10].joystick_y / 10.0;
     dd4:	f7 01       	movw	r30, r14
     dd6:	61 81       	ldd	r22, Z+1	; 0x01
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__floatunsisf>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__divsf3>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	c5 01       	movw	r24, r10
     df4:	b4 01       	movw	r22, r8
     df6:	0e 94 67 07 	call	0xece	; 0xece <__addsf3>
     dfa:	4b 01       	movw	r8, r22
     dfc:	5c 01       	movw	r10, r24
	
	// smooth_input is average of all 10 last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	for(int i = input_head; i != (input_head - 1 + 10) % 10; i = (i + 1) % 10)
     dfe:	c8 01       	movw	r24, r16
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	b6 01       	movw	r22, r12
     e04:	0e 94 76 09 	call	0x12ec	; 0x12ec <__divmodhi4>
     e08:	8c 01       	movw	r16, r24
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <input_head>
     e1a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <input_head+0x1>
     e1e:	09 96       	adiw	r24, 0x09	; 9
     e20:	6a e0       	ldi	r22, 0x0A	; 10
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 76 09 	call	0x12ec	; 0x12ec <__divmodhi4>
     e28:	08 17       	cp	r16, r24
     e2a:	19 07       	cpc	r17, r25
     e2c:	09 f0       	breq	.+2      	; 0xe30 <input_read+0x266>
     e2e:	99 cf       	rjmp	.-206    	; 0xd62 <input_read+0x198>
	{
		printf("||| %d    %d |||", i, (input_head - 1 + 10) % 10);
		smooth_joystick_x += (float)input_buffer[i % 10].joystick_x / 10.0;
		smooth_joystick_y += (float)input_buffer[i % 10].joystick_y / 10.0;
	}
	smooth_input.joystick_x = (int)smooth_joystick_x;
     e30:	64 2d       	mov	r22, r4
     e32:	75 2d       	mov	r23, r5
     e34:	87 2d       	mov	r24, r7
     e36:	96 2d       	mov	r25, r6
     e38:	0e 94 45 08 	call	0x108a	; 0x108a <__fixsfsi>
     e3c:	6f 87       	std	Y+15, r22	; 0x0f
	smooth_input.joystick_y = (int)smooth_joystick_y;
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 45 08 	call	0x108a	; 0x108a <__fixsfsi>
     e46:	68 8b       	std	Y+16, r22	; 0x10

	printf("%d    ", smooth_joystick_x);
     e48:	6f 92       	push	r6
     e4a:	7f 92       	push	r7
     e4c:	5f 92       	push	r5
     e4e:	4f 92       	push	r4
     e50:	8d eb       	ldi	r24, 0xBD	; 189
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <printf>


	return smooth_input;
     e5c:	87 e0       	ldi	r24, 0x07	; 7
     e5e:	fe 01       	movw	r30, r28
     e60:	3f 96       	adiw	r30, 0x0f	; 15
     e62:	de 01       	movw	r26, r28
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	01 90       	ld	r0, Z+
     e68:	0d 92       	st	X+, r0
     e6a:	8a 95       	dec	r24
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <input_read+0x29c>
     e6e:	29 81       	ldd	r18, Y+1	; 0x01
     e70:	3a 81       	ldd	r19, Y+2	; 0x02
     e72:	4b 81       	ldd	r20, Y+3	; 0x03
     e74:	5c 81       	ldd	r21, Y+4	; 0x04
     e76:	6d 81       	ldd	r22, Y+5	; 0x05
     e78:	7e 81       	ldd	r23, Y+6	; 0x06
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
}
     e86:	8f 81       	ldd	r24, Y+7	; 0x07
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	65 96       	adiw	r28, 0x15	; 21
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	9f 90       	pop	r9
     eac:	8f 90       	pop	r8
     eae:	7f 90       	pop	r7
     eb0:	6f 90       	pop	r6
     eb2:	5f 90       	pop	r5
     eb4:	4f 90       	pop	r4
     eb6:	08 95       	ret

00000eb8 <xmem_init>:
#include "xmem.h"

// From lab lecture
void xmem_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     eb8:	85 b7       	in	r24, 0x35	; 53
     eba:	80 68       	ori	r24, 0x80	; 128
     ebc:	85 bf       	out	0x35, r24	; 53
	// Mask out some port C address pins for JTAG (datasheet page 32)
	SFIOR |= 1 << XMM2;
     ebe:	80 b7       	in	r24, 0x30	; 48
     ec0:	80 62       	ori	r24, 0x20	; 32
     ec2:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 | 1 << XMM1);
     ec4:	80 b7       	in	r24, 0x30	; 48
     ec6:	87 7e       	andi	r24, 0xE7	; 231
     ec8:	80 bf       	out	0x30, r24	; 48
     eca:	08 95       	ret

00000ecc <__subsf3>:
     ecc:	50 58       	subi	r21, 0x80	; 128

00000ece <__addsf3>:
     ece:	bb 27       	eor	r27, r27
     ed0:	aa 27       	eor	r26, r26
     ed2:	0e 94 7e 07 	call	0xefc	; 0xefc <__addsf3x>
     ed6:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__fp_round>
     eda:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_pscA>
     ede:	38 f0       	brcs	.+14     	; 0xeee <__addsf3+0x20>
     ee0:	0e 94 c8 08 	call	0x1190	; 0x1190 <__fp_pscB>
     ee4:	20 f0       	brcs	.+8      	; 0xeee <__addsf3+0x20>
     ee6:	39 f4       	brne	.+14     	; 0xef6 <__addsf3+0x28>
     ee8:	9f 3f       	cpi	r25, 0xFF	; 255
     eea:	19 f4       	brne	.+6      	; 0xef2 <__addsf3+0x24>
     eec:	26 f4       	brtc	.+8      	; 0xef6 <__addsf3+0x28>
     eee:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_nan>
     ef2:	0e f4       	brtc	.+2      	; 0xef6 <__addsf3+0x28>
     ef4:	e0 95       	com	r30
     ef6:	e7 fb       	bst	r30, 7
     ef8:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_inf>

00000efc <__addsf3x>:
     efc:	e9 2f       	mov	r30, r25
     efe:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_split3>
     f02:	58 f3       	brcs	.-42     	; 0xeda <__addsf3+0xc>
     f04:	ba 17       	cp	r27, r26
     f06:	62 07       	cpc	r22, r18
     f08:	73 07       	cpc	r23, r19
     f0a:	84 07       	cpc	r24, r20
     f0c:	95 07       	cpc	r25, r21
     f0e:	20 f0       	brcs	.+8      	; 0xf18 <__addsf3x+0x1c>
     f10:	79 f4       	brne	.+30     	; 0xf30 <__addsf3x+0x34>
     f12:	a6 f5       	brtc	.+104    	; 0xf7c <__addsf3x+0x80>
     f14:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_zero>
     f18:	0e f4       	brtc	.+2      	; 0xf1c <__addsf3x+0x20>
     f1a:	e0 95       	com	r30
     f1c:	0b 2e       	mov	r0, r27
     f1e:	ba 2f       	mov	r27, r26
     f20:	a0 2d       	mov	r26, r0
     f22:	0b 01       	movw	r0, r22
     f24:	b9 01       	movw	r22, r18
     f26:	90 01       	movw	r18, r0
     f28:	0c 01       	movw	r0, r24
     f2a:	ca 01       	movw	r24, r20
     f2c:	a0 01       	movw	r20, r0
     f2e:	11 24       	eor	r1, r1
     f30:	ff 27       	eor	r31, r31
     f32:	59 1b       	sub	r21, r25
     f34:	99 f0       	breq	.+38     	; 0xf5c <__addsf3x+0x60>
     f36:	59 3f       	cpi	r21, 0xF9	; 249
     f38:	50 f4       	brcc	.+20     	; 0xf4e <__addsf3x+0x52>
     f3a:	50 3e       	cpi	r21, 0xE0	; 224
     f3c:	68 f1       	brcs	.+90     	; 0xf98 <__addsf3x+0x9c>
     f3e:	1a 16       	cp	r1, r26
     f40:	f0 40       	sbci	r31, 0x00	; 0
     f42:	a2 2f       	mov	r26, r18
     f44:	23 2f       	mov	r18, r19
     f46:	34 2f       	mov	r19, r20
     f48:	44 27       	eor	r20, r20
     f4a:	58 5f       	subi	r21, 0xF8	; 248
     f4c:	f3 cf       	rjmp	.-26     	; 0xf34 <__addsf3x+0x38>
     f4e:	46 95       	lsr	r20
     f50:	37 95       	ror	r19
     f52:	27 95       	ror	r18
     f54:	a7 95       	ror	r26
     f56:	f0 40       	sbci	r31, 0x00	; 0
     f58:	53 95       	inc	r21
     f5a:	c9 f7       	brne	.-14     	; 0xf4e <__addsf3x+0x52>
     f5c:	7e f4       	brtc	.+30     	; 0xf7c <__addsf3x+0x80>
     f5e:	1f 16       	cp	r1, r31
     f60:	ba 0b       	sbc	r27, r26
     f62:	62 0b       	sbc	r22, r18
     f64:	73 0b       	sbc	r23, r19
     f66:	84 0b       	sbc	r24, r20
     f68:	ba f0       	brmi	.+46     	; 0xf98 <__addsf3x+0x9c>
     f6a:	91 50       	subi	r25, 0x01	; 1
     f6c:	a1 f0       	breq	.+40     	; 0xf96 <__addsf3x+0x9a>
     f6e:	ff 0f       	add	r31, r31
     f70:	bb 1f       	adc	r27, r27
     f72:	66 1f       	adc	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	c2 f7       	brpl	.-16     	; 0xf6a <__addsf3x+0x6e>
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <__addsf3x+0x9c>
     f7c:	ba 0f       	add	r27, r26
     f7e:	62 1f       	adc	r22, r18
     f80:	73 1f       	adc	r23, r19
     f82:	84 1f       	adc	r24, r20
     f84:	48 f4       	brcc	.+18     	; 0xf98 <__addsf3x+0x9c>
     f86:	87 95       	ror	r24
     f88:	77 95       	ror	r23
     f8a:	67 95       	ror	r22
     f8c:	b7 95       	ror	r27
     f8e:	f7 95       	ror	r31
     f90:	9e 3f       	cpi	r25, 0xFE	; 254
     f92:	08 f0       	brcs	.+2      	; 0xf96 <__addsf3x+0x9a>
     f94:	b0 cf       	rjmp	.-160    	; 0xef6 <__addsf3+0x28>
     f96:	93 95       	inc	r25
     f98:	88 0f       	add	r24, r24
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <__addsf3x+0xa2>
     f9c:	99 27       	eor	r25, r25
     f9e:	ee 0f       	add	r30, r30
     fa0:	97 95       	ror	r25
     fa2:	87 95       	ror	r24
     fa4:	08 95       	ret

00000fa6 <__divsf3>:
     fa6:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3x>
     faa:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__fp_round>
     fae:	0e 94 c8 08 	call	0x1190	; 0x1190 <__fp_pscB>
     fb2:	58 f0       	brcs	.+22     	; 0xfca <__divsf3+0x24>
     fb4:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_pscA>
     fb8:	40 f0       	brcs	.+16     	; 0xfca <__divsf3+0x24>
     fba:	29 f4       	brne	.+10     	; 0xfc6 <__divsf3+0x20>
     fbc:	5f 3f       	cpi	r21, 0xFF	; 255
     fbe:	29 f0       	breq	.+10     	; 0xfca <__divsf3+0x24>
     fc0:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_inf>
     fc4:	51 11       	cpse	r21, r1
     fc6:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_szero>
     fca:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_nan>

00000fce <__divsf3x>:
     fce:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_split3>
     fd2:	68 f3       	brcs	.-38     	; 0xfae <__divsf3+0x8>

00000fd4 <__divsf3_pse>:
     fd4:	99 23       	and	r25, r25
     fd6:	b1 f3       	breq	.-20     	; 0xfc4 <__divsf3+0x1e>
     fd8:	55 23       	and	r21, r21
     fda:	91 f3       	breq	.-28     	; 0xfc0 <__divsf3+0x1a>
     fdc:	95 1b       	sub	r25, r21
     fde:	55 0b       	sbc	r21, r21
     fe0:	bb 27       	eor	r27, r27
     fe2:	aa 27       	eor	r26, r26
     fe4:	62 17       	cp	r22, r18
     fe6:	73 07       	cpc	r23, r19
     fe8:	84 07       	cpc	r24, r20
     fea:	38 f0       	brcs	.+14     	; 0xffa <__divsf3_pse+0x26>
     fec:	9f 5f       	subi	r25, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	44 1f       	adc	r20, r20
     ff6:	aa 1f       	adc	r26, r26
     ff8:	a9 f3       	breq	.-22     	; 0xfe4 <__divsf3_pse+0x10>
     ffa:	35 d0       	rcall	.+106    	; 0x1066 <__divsf3_pse+0x92>
     ffc:	0e 2e       	mov	r0, r30
     ffe:	3a f0       	brmi	.+14     	; 0x100e <__divsf3_pse+0x3a>
    1000:	e0 e8       	ldi	r30, 0x80	; 128
    1002:	32 d0       	rcall	.+100    	; 0x1068 <__divsf3_pse+0x94>
    1004:	91 50       	subi	r25, 0x01	; 1
    1006:	50 40       	sbci	r21, 0x00	; 0
    1008:	e6 95       	lsr	r30
    100a:	00 1c       	adc	r0, r0
    100c:	ca f7       	brpl	.-14     	; 0x1000 <__divsf3_pse+0x2c>
    100e:	2b d0       	rcall	.+86     	; 0x1066 <__divsf3_pse+0x92>
    1010:	fe 2f       	mov	r31, r30
    1012:	29 d0       	rcall	.+82     	; 0x1066 <__divsf3_pse+0x92>
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	bb 1f       	adc	r27, r27
    101c:	26 17       	cp	r18, r22
    101e:	37 07       	cpc	r19, r23
    1020:	48 07       	cpc	r20, r24
    1022:	ab 07       	cpc	r26, r27
    1024:	b0 e8       	ldi	r27, 0x80	; 128
    1026:	09 f0       	breq	.+2      	; 0x102a <__divsf3_pse+0x56>
    1028:	bb 0b       	sbc	r27, r27
    102a:	80 2d       	mov	r24, r0
    102c:	bf 01       	movw	r22, r30
    102e:	ff 27       	eor	r31, r31
    1030:	93 58       	subi	r25, 0x83	; 131
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	3a f0       	brmi	.+14     	; 0x1044 <__divsf3_pse+0x70>
    1036:	9e 3f       	cpi	r25, 0xFE	; 254
    1038:	51 05       	cpc	r21, r1
    103a:	78 f0       	brcs	.+30     	; 0x105a <__divsf3_pse+0x86>
    103c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_inf>
    1040:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_szero>
    1044:	5f 3f       	cpi	r21, 0xFF	; 255
    1046:	e4 f3       	brlt	.-8      	; 0x1040 <__divsf3_pse+0x6c>
    1048:	98 3e       	cpi	r25, 0xE8	; 232
    104a:	d4 f3       	brlt	.-12     	; 0x1040 <__divsf3_pse+0x6c>
    104c:	86 95       	lsr	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b7 95       	ror	r27
    1054:	f7 95       	ror	r31
    1056:	9f 5f       	subi	r25, 0xFF	; 255
    1058:	c9 f7       	brne	.-14     	; 0x104c <__divsf3_pse+0x78>
    105a:	88 0f       	add	r24, r24
    105c:	91 1d       	adc	r25, r1
    105e:	96 95       	lsr	r25
    1060:	87 95       	ror	r24
    1062:	97 f9       	bld	r25, 7
    1064:	08 95       	ret
    1066:	e1 e0       	ldi	r30, 0x01	; 1
    1068:	66 0f       	add	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	88 1f       	adc	r24, r24
    106e:	bb 1f       	adc	r27, r27
    1070:	62 17       	cp	r22, r18
    1072:	73 07       	cpc	r23, r19
    1074:	84 07       	cpc	r24, r20
    1076:	ba 07       	cpc	r27, r26
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__divsf3_pse+0xae>
    107a:	62 1b       	sub	r22, r18
    107c:	73 0b       	sbc	r23, r19
    107e:	84 0b       	sbc	r24, r20
    1080:	ba 0b       	sbc	r27, r26
    1082:	ee 1f       	adc	r30, r30
    1084:	88 f7       	brcc	.-30     	; 0x1068 <__divsf3_pse+0x94>
    1086:	e0 95       	com	r30
    1088:	08 95       	ret

0000108a <__fixsfsi>:
    108a:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixunssfsi>
    108e:	68 94       	set
    1090:	b1 11       	cpse	r27, r1
    1092:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_szero>
    1096:	08 95       	ret

00001098 <__fixunssfsi>:
    1098:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fp_splitA>
    109c:	88 f0       	brcs	.+34     	; 0x10c0 <__fixunssfsi+0x28>
    109e:	9f 57       	subi	r25, 0x7F	; 127
    10a0:	98 f0       	brcs	.+38     	; 0x10c8 <__fixunssfsi+0x30>
    10a2:	b9 2f       	mov	r27, r25
    10a4:	99 27       	eor	r25, r25
    10a6:	b7 51       	subi	r27, 0x17	; 23
    10a8:	b0 f0       	brcs	.+44     	; 0x10d6 <__fixunssfsi+0x3e>
    10aa:	e1 f0       	breq	.+56     	; 0x10e4 <__fixunssfsi+0x4c>
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	1a f0       	brmi	.+6      	; 0x10bc <__fixunssfsi+0x24>
    10b6:	ba 95       	dec	r27
    10b8:	c9 f7       	brne	.-14     	; 0x10ac <__fixunssfsi+0x14>
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <__fixunssfsi+0x4c>
    10bc:	b1 30       	cpi	r27, 0x01	; 1
    10be:	91 f0       	breq	.+36     	; 0x10e4 <__fixunssfsi+0x4c>
    10c0:	0e 94 02 09 	call	0x1204	; 0x1204 <__fp_zero>
    10c4:	b1 e0       	ldi	r27, 0x01	; 1
    10c6:	08 95       	ret
    10c8:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_zero>
    10cc:	67 2f       	mov	r22, r23
    10ce:	78 2f       	mov	r23, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	b8 5f       	subi	r27, 0xF8	; 248
    10d4:	39 f0       	breq	.+14     	; 0x10e4 <__fixunssfsi+0x4c>
    10d6:	b9 3f       	cpi	r27, 0xF9	; 249
    10d8:	cc f3       	brlt	.-14     	; 0x10cc <__fixunssfsi+0x34>
    10da:	86 95       	lsr	r24
    10dc:	77 95       	ror	r23
    10de:	67 95       	ror	r22
    10e0:	b3 95       	inc	r27
    10e2:	d9 f7       	brne	.-10     	; 0x10da <__fixunssfsi+0x42>
    10e4:	3e f4       	brtc	.+14     	; 0x10f4 <__fixunssfsi+0x5c>
    10e6:	90 95       	com	r25
    10e8:	80 95       	com	r24
    10ea:	70 95       	com	r23
    10ec:	61 95       	neg	r22
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__floatunsisf>:
    10f6:	e8 94       	clt
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <__floatsisf+0x12>

000010fa <__floatsisf>:
    10fa:	97 fb       	bst	r25, 7
    10fc:	3e f4       	brtc	.+14     	; 0x110c <__floatsisf+0x12>
    10fe:	90 95       	com	r25
    1100:	80 95       	com	r24
    1102:	70 95       	com	r23
    1104:	61 95       	neg	r22
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	99 23       	and	r25, r25
    110e:	a9 f0       	breq	.+42     	; 0x113a <__floatsisf+0x40>
    1110:	f9 2f       	mov	r31, r25
    1112:	96 e9       	ldi	r25, 0x96	; 150
    1114:	bb 27       	eor	r27, r27
    1116:	93 95       	inc	r25
    1118:	f6 95       	lsr	r31
    111a:	87 95       	ror	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f1 11       	cpse	r31, r1
    1124:	f8 cf       	rjmp	.-16     	; 0x1116 <__floatsisf+0x1c>
    1126:	fa f4       	brpl	.+62     	; 0x1166 <__floatsisf+0x6c>
    1128:	bb 0f       	add	r27, r27
    112a:	11 f4       	brne	.+4      	; 0x1130 <__floatsisf+0x36>
    112c:	60 ff       	sbrs	r22, 0
    112e:	1b c0       	rjmp	.+54     	; 0x1166 <__floatsisf+0x6c>
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	16 c0       	rjmp	.+44     	; 0x1166 <__floatsisf+0x6c>
    113a:	88 23       	and	r24, r24
    113c:	11 f0       	breq	.+4      	; 0x1142 <__floatsisf+0x48>
    113e:	96 e9       	ldi	r25, 0x96	; 150
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <__floatsisf+0x6a>
    1142:	77 23       	and	r23, r23
    1144:	21 f0       	breq	.+8      	; 0x114e <__floatsisf+0x54>
    1146:	9e e8       	ldi	r25, 0x8E	; 142
    1148:	87 2f       	mov	r24, r23
    114a:	76 2f       	mov	r23, r22
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <__floatsisf+0x5e>
    114e:	66 23       	and	r22, r22
    1150:	71 f0       	breq	.+28     	; 0x116e <__floatsisf+0x74>
    1152:	96 e8       	ldi	r25, 0x86	; 134
    1154:	86 2f       	mov	r24, r22
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	2a f0       	brmi	.+10     	; 0x1166 <__floatsisf+0x6c>
    115c:	9a 95       	dec	r25
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	88 1f       	adc	r24, r24
    1164:	da f7       	brpl	.-10     	; 0x115c <__floatsisf+0x62>
    1166:	88 0f       	add	r24, r24
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret

00001170 <__fp_inf>:
    1170:	97 f9       	bld	r25, 7
    1172:	9f 67       	ori	r25, 0x7F	; 127
    1174:	80 e8       	ldi	r24, 0x80	; 128
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	08 95       	ret

0000117c <__fp_nan>:
    117c:	9f ef       	ldi	r25, 0xFF	; 255
    117e:	80 ec       	ldi	r24, 0xC0	; 192
    1180:	08 95       	ret

00001182 <__fp_pscA>:
    1182:	00 24       	eor	r0, r0
    1184:	0a 94       	dec	r0
    1186:	16 16       	cp	r1, r22
    1188:	17 06       	cpc	r1, r23
    118a:	18 06       	cpc	r1, r24
    118c:	09 06       	cpc	r0, r25
    118e:	08 95       	ret

00001190 <__fp_pscB>:
    1190:	00 24       	eor	r0, r0
    1192:	0a 94       	dec	r0
    1194:	12 16       	cp	r1, r18
    1196:	13 06       	cpc	r1, r19
    1198:	14 06       	cpc	r1, r20
    119a:	05 06       	cpc	r0, r21
    119c:	08 95       	ret

0000119e <__fp_round>:
    119e:	09 2e       	mov	r0, r25
    11a0:	03 94       	inc	r0
    11a2:	00 0c       	add	r0, r0
    11a4:	11 f4       	brne	.+4      	; 0x11aa <__fp_round+0xc>
    11a6:	88 23       	and	r24, r24
    11a8:	52 f0       	brmi	.+20     	; 0x11be <__fp_round+0x20>
    11aa:	bb 0f       	add	r27, r27
    11ac:	40 f4       	brcc	.+16     	; 0x11be <__fp_round+0x20>
    11ae:	bf 2b       	or	r27, r31
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <__fp_round+0x18>
    11b2:	60 ff       	sbrs	r22, 0
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <__fp_round+0x20>
    11b6:	6f 5f       	subi	r22, 0xFF	; 255
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	8f 4f       	sbci	r24, 0xFF	; 255
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	08 95       	ret

000011c0 <__fp_split3>:
    11c0:	57 fd       	sbrc	r21, 7
    11c2:	90 58       	subi	r25, 0x80	; 128
    11c4:	44 0f       	add	r20, r20
    11c6:	55 1f       	adc	r21, r21
    11c8:	59 f0       	breq	.+22     	; 0x11e0 <__fp_splitA+0x10>
    11ca:	5f 3f       	cpi	r21, 0xFF	; 255
    11cc:	71 f0       	breq	.+28     	; 0x11ea <__fp_splitA+0x1a>
    11ce:	47 95       	ror	r20

000011d0 <__fp_splitA>:
    11d0:	88 0f       	add	r24, r24
    11d2:	97 fb       	bst	r25, 7
    11d4:	99 1f       	adc	r25, r25
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <__fp_splitA+0x20>
    11d8:	9f 3f       	cpi	r25, 0xFF	; 255
    11da:	79 f0       	breq	.+30     	; 0x11fa <__fp_splitA+0x2a>
    11dc:	87 95       	ror	r24
    11de:	08 95       	ret
    11e0:	12 16       	cp	r1, r18
    11e2:	13 06       	cpc	r1, r19
    11e4:	14 06       	cpc	r1, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	f2 cf       	rjmp	.-28     	; 0x11ce <__fp_split3+0xe>
    11ea:	46 95       	lsr	r20
    11ec:	f1 df       	rcall	.-30     	; 0x11d0 <__fp_splitA>
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <__fp_splitA+0x30>
    11f0:	16 16       	cp	r1, r22
    11f2:	17 06       	cpc	r1, r23
    11f4:	18 06       	cpc	r1, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	f1 cf       	rjmp	.-30     	; 0x11dc <__fp_splitA+0xc>
    11fa:	86 95       	lsr	r24
    11fc:	71 05       	cpc	r23, r1
    11fe:	61 05       	cpc	r22, r1
    1200:	08 94       	sec
    1202:	08 95       	ret

00001204 <__fp_zero>:
    1204:	e8 94       	clt

00001206 <__fp_szero>:
    1206:	bb 27       	eor	r27, r27
    1208:	66 27       	eor	r22, r22
    120a:	77 27       	eor	r23, r23
    120c:	cb 01       	movw	r24, r22
    120e:	97 f9       	bld	r25, 7
    1210:	08 95       	ret

00001212 <__mulsf3>:
    1212:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3x>
    1216:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__fp_round>
    121a:	0e 94 c1 08 	call	0x1182	; 0x1182 <__fp_pscA>
    121e:	38 f0       	brcs	.+14     	; 0x122e <__mulsf3+0x1c>
    1220:	0e 94 c8 08 	call	0x1190	; 0x1190 <__fp_pscB>
    1224:	20 f0       	brcs	.+8      	; 0x122e <__mulsf3+0x1c>
    1226:	95 23       	and	r25, r21
    1228:	11 f0       	breq	.+4      	; 0x122e <__mulsf3+0x1c>
    122a:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_inf>
    122e:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_nan>
    1232:	11 24       	eor	r1, r1
    1234:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_szero>

00001238 <__mulsf3x>:
    1238:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_split3>
    123c:	70 f3       	brcs	.-36     	; 0x121a <__mulsf3+0x8>

0000123e <__mulsf3_pse>:
    123e:	95 9f       	mul	r25, r21
    1240:	c1 f3       	breq	.-16     	; 0x1232 <__mulsf3+0x20>
    1242:	95 0f       	add	r25, r21
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	55 1f       	adc	r21, r21
    1248:	62 9f       	mul	r22, r18
    124a:	f0 01       	movw	r30, r0
    124c:	72 9f       	mul	r23, r18
    124e:	bb 27       	eor	r27, r27
    1250:	f0 0d       	add	r31, r0
    1252:	b1 1d       	adc	r27, r1
    1254:	63 9f       	mul	r22, r19
    1256:	aa 27       	eor	r26, r26
    1258:	f0 0d       	add	r31, r0
    125a:	b1 1d       	adc	r27, r1
    125c:	aa 1f       	adc	r26, r26
    125e:	64 9f       	mul	r22, r20
    1260:	66 27       	eor	r22, r22
    1262:	b0 0d       	add	r27, r0
    1264:	a1 1d       	adc	r26, r1
    1266:	66 1f       	adc	r22, r22
    1268:	82 9f       	mul	r24, r18
    126a:	22 27       	eor	r18, r18
    126c:	b0 0d       	add	r27, r0
    126e:	a1 1d       	adc	r26, r1
    1270:	62 1f       	adc	r22, r18
    1272:	73 9f       	mul	r23, r19
    1274:	b0 0d       	add	r27, r0
    1276:	a1 1d       	adc	r26, r1
    1278:	62 1f       	adc	r22, r18
    127a:	83 9f       	mul	r24, r19
    127c:	a0 0d       	add	r26, r0
    127e:	61 1d       	adc	r22, r1
    1280:	22 1f       	adc	r18, r18
    1282:	74 9f       	mul	r23, r20
    1284:	33 27       	eor	r19, r19
    1286:	a0 0d       	add	r26, r0
    1288:	61 1d       	adc	r22, r1
    128a:	23 1f       	adc	r18, r19
    128c:	84 9f       	mul	r24, r20
    128e:	60 0d       	add	r22, r0
    1290:	21 1d       	adc	r18, r1
    1292:	82 2f       	mov	r24, r18
    1294:	76 2f       	mov	r23, r22
    1296:	6a 2f       	mov	r22, r26
    1298:	11 24       	eor	r1, r1
    129a:	9f 57       	subi	r25, 0x7F	; 127
    129c:	50 40       	sbci	r21, 0x00	; 0
    129e:	9a f0       	brmi	.+38     	; 0x12c6 <__mulsf3_pse+0x88>
    12a0:	f1 f0       	breq	.+60     	; 0x12de <__mulsf3_pse+0xa0>
    12a2:	88 23       	and	r24, r24
    12a4:	4a f0       	brmi	.+18     	; 0x12b8 <__mulsf3_pse+0x7a>
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	bb 1f       	adc	r27, r27
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	91 50       	subi	r25, 0x01	; 1
    12b4:	50 40       	sbci	r21, 0x00	; 0
    12b6:	a9 f7       	brne	.-22     	; 0x12a2 <__mulsf3_pse+0x64>
    12b8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ba:	51 05       	cpc	r21, r1
    12bc:	80 f0       	brcs	.+32     	; 0x12de <__mulsf3_pse+0xa0>
    12be:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_inf>
    12c2:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__fp_szero>
    12c6:	5f 3f       	cpi	r21, 0xFF	; 255
    12c8:	e4 f3       	brlt	.-8      	; 0x12c2 <__mulsf3_pse+0x84>
    12ca:	98 3e       	cpi	r25, 0xE8	; 232
    12cc:	d4 f3       	brlt	.-12     	; 0x12c2 <__mulsf3_pse+0x84>
    12ce:	86 95       	lsr	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b7 95       	ror	r27
    12d6:	f7 95       	ror	r31
    12d8:	e7 95       	ror	r30
    12da:	9f 5f       	subi	r25, 0xFF	; 255
    12dc:	c1 f7       	brne	.-16     	; 0x12ce <__mulsf3_pse+0x90>
    12de:	fe 2b       	or	r31, r30
    12e0:	88 0f       	add	r24, r24
    12e2:	91 1d       	adc	r25, r1
    12e4:	96 95       	lsr	r25
    12e6:	87 95       	ror	r24
    12e8:	97 f9       	bld	r25, 7
    12ea:	08 95       	ret

000012ec <__divmodhi4>:
    12ec:	97 fb       	bst	r25, 7
    12ee:	07 2e       	mov	r0, r23
    12f0:	16 f4       	brtc	.+4      	; 0x12f6 <__divmodhi4+0xa>
    12f2:	00 94       	com	r0
    12f4:	07 d0       	rcall	.+14     	; 0x1304 <__divmodhi4_neg1>
    12f6:	77 fd       	sbrc	r23, 7
    12f8:	09 d0       	rcall	.+18     	; 0x130c <__divmodhi4_neg2>
    12fa:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
    12fe:	07 fc       	sbrc	r0, 7
    1300:	05 d0       	rcall	.+10     	; 0x130c <__divmodhi4_neg2>
    1302:	3e f4       	brtc	.+14     	; 0x1312 <__divmodhi4_exit>

00001304 <__divmodhi4_neg1>:
    1304:	90 95       	com	r25
    1306:	81 95       	neg	r24
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	08 95       	ret

0000130c <__divmodhi4_neg2>:
    130c:	70 95       	com	r23
    130e:	61 95       	neg	r22
    1310:	7f 4f       	sbci	r23, 0xFF	; 255

00001312 <__divmodhi4_exit>:
    1312:	08 95       	ret

00001314 <__udivmodhi4>:
    1314:	aa 1b       	sub	r26, r26
    1316:	bb 1b       	sub	r27, r27
    1318:	51 e1       	ldi	r21, 0x11	; 17
    131a:	07 c0       	rjmp	.+14     	; 0x132a <__udivmodhi4_ep>

0000131c <__udivmodhi4_loop>:
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	a6 17       	cp	r26, r22
    1322:	b7 07       	cpc	r27, r23
    1324:	10 f0       	brcs	.+4      	; 0x132a <__udivmodhi4_ep>
    1326:	a6 1b       	sub	r26, r22
    1328:	b7 0b       	sbc	r27, r23

0000132a <__udivmodhi4_ep>:
    132a:	88 1f       	adc	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	5a 95       	dec	r21
    1330:	a9 f7       	brne	.-22     	; 0x131c <__udivmodhi4_loop>
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	08 95       	ret

0000133c <fdevopen>:
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f4       	brne	.+12     	; 0x1354 <fdevopen+0x18>
    1348:	61 15       	cp	r22, r1
    134a:	71 05       	cpc	r23, r1
    134c:	19 f4       	brne	.+6      	; 0x1354 <fdevopen+0x18>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	3a c0       	rjmp	.+116    	; 0x13c8 <fdevopen+0x8c>
    1354:	8b 01       	movw	r16, r22
    1356:	ec 01       	movw	r28, r24
    1358:	6e e0       	ldi	r22, 0x0E	; 14
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 10 0c 	call	0x1820	; 0x1820 <calloc>
    1364:	fc 01       	movw	r30, r24
    1366:	89 2b       	or	r24, r25
    1368:	91 f3       	breq	.-28     	; 0x134e <fdevopen+0x12>
    136a:	80 e8       	ldi	r24, 0x80	; 128
    136c:	83 83       	std	Z+3, r24	; 0x03
    136e:	01 15       	cp	r16, r1
    1370:	11 05       	cpc	r17, r1
    1372:	71 f0       	breq	.+28     	; 0x1390 <fdevopen+0x54>
    1374:	13 87       	std	Z+11, r17	; 0x0b
    1376:	02 87       	std	Z+10, r16	; 0x0a
    1378:	81 e8       	ldi	r24, 0x81	; 129
    137a:	83 83       	std	Z+3, r24	; 0x03
    137c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <__iob>
    1380:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <__iob+0x1>
    1384:	89 2b       	or	r24, r25
    1386:	21 f4       	brne	.+8      	; 0x1390 <fdevopen+0x54>
    1388:	f0 93 16 02 	sts	0x0216, r31	; 0x800216 <__iob+0x1>
    138c:	e0 93 15 02 	sts	0x0215, r30	; 0x800215 <__iob>
    1390:	20 97       	sbiw	r28, 0x00	; 0
    1392:	c9 f0       	breq	.+50     	; 0x13c6 <fdevopen+0x8a>
    1394:	d1 87       	std	Z+9, r29	; 0x09
    1396:	c0 87       	std	Z+8, r28	; 0x08
    1398:	83 81       	ldd	r24, Z+3	; 0x03
    139a:	82 60       	ori	r24, 0x02	; 2
    139c:	83 83       	std	Z+3, r24	; 0x03
    139e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <__iob+0x2>
    13a2:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <__iob+0x3>
    13a6:	89 2b       	or	r24, r25
    13a8:	71 f4       	brne	.+28     	; 0x13c6 <fdevopen+0x8a>
    13aa:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <__iob+0x3>
    13ae:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <__iob+0x2>
    13b2:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <__iob+0x4>
    13b6:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <__iob+0x5>
    13ba:	89 2b       	or	r24, r25
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <fdevopen+0x8a>
    13be:	f0 93 1a 02 	sts	0x021A, r31	; 0x80021a <__iob+0x5>
    13c2:	e0 93 19 02 	sts	0x0219, r30	; 0x800219 <__iob+0x4>
    13c6:	cf 01       	movw	r24, r30
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret

000013d2 <printf>:
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ef ee       	ldi	r30, 0xEF	; 239
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x20>
    13de:	ae 01       	movw	r20, r28
    13e0:	4b 5f       	subi	r20, 0xFB	; 251
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	fa 01       	movw	r30, r20
    13e6:	61 91       	ld	r22, Z+
    13e8:	71 91       	ld	r23, Z+
    13ea:	af 01       	movw	r20, r30
    13ec:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <__iob+0x2>
    13f0:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <__iob+0x3>
    13f4:	0e 94 2f 0a 	call	0x145e	; 0x145e <vfprintf>
    13f8:	e2 e0       	ldi	r30, 0x02	; 2
    13fa:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x20>

000013fe <puts>:
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <__iob+0x2>
    140a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <__iob+0x3>
    140e:	23 81       	ldd	r18, Z+3	; 0x03
    1410:	21 ff       	sbrs	r18, 1
    1412:	1b c0       	rjmp	.+54     	; 0x144a <puts+0x4c>
    1414:	8c 01       	movw	r16, r24
    1416:	d0 e0       	ldi	r29, 0x00	; 0
    1418:	c0 e0       	ldi	r28, 0x00	; 0
    141a:	f8 01       	movw	r30, r16
    141c:	81 91       	ld	r24, Z+
    141e:	8f 01       	movw	r16, r30
    1420:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <__iob+0x2>
    1424:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <__iob+0x3>
    1428:	db 01       	movw	r26, r22
    142a:	18 96       	adiw	r26, 0x08	; 8
    142c:	ed 91       	ld	r30, X+
    142e:	fc 91       	ld	r31, X
    1430:	19 97       	sbiw	r26, 0x09	; 9
    1432:	88 23       	and	r24, r24
    1434:	31 f0       	breq	.+12     	; 0x1442 <puts+0x44>
    1436:	09 95       	icall
    1438:	89 2b       	or	r24, r25
    143a:	79 f3       	breq	.-34     	; 0x141a <puts+0x1c>
    143c:	df ef       	ldi	r29, 0xFF	; 255
    143e:	cf ef       	ldi	r28, 0xFF	; 255
    1440:	ec cf       	rjmp	.-40     	; 0x141a <puts+0x1c>
    1442:	8a e0       	ldi	r24, 0x0A	; 10
    1444:	09 95       	icall
    1446:	89 2b       	or	r24, r25
    1448:	19 f0       	breq	.+6      	; 0x1450 <puts+0x52>
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <puts+0x56>
    1450:	8d 2f       	mov	r24, r29
    1452:	9c 2f       	mov	r25, r28
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <vfprintf>:
    145e:	ab e0       	ldi	r26, 0x0B	; 11
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e3       	ldi	r30, 0x35	; 53
    1464:	fa e0       	ldi	r31, 0x0A	; 10
    1466:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__prologue_saves__>
    146a:	6c 01       	movw	r12, r24
    146c:	7b 01       	movw	r14, r22
    146e:	8a 01       	movw	r16, r20
    1470:	fc 01       	movw	r30, r24
    1472:	17 82       	std	Z+7, r1	; 0x07
    1474:	16 82       	std	Z+6, r1	; 0x06
    1476:	83 81       	ldd	r24, Z+3	; 0x03
    1478:	81 ff       	sbrs	r24, 1
    147a:	cc c1       	rjmp	.+920    	; 0x1814 <vfprintf+0x3b6>
    147c:	ce 01       	movw	r24, r28
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	3c 01       	movw	r6, r24
    1482:	f6 01       	movw	r30, r12
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	f7 01       	movw	r30, r14
    1488:	93 fd       	sbrc	r25, 3
    148a:	85 91       	lpm	r24, Z+
    148c:	93 ff       	sbrs	r25, 3
    148e:	81 91       	ld	r24, Z+
    1490:	7f 01       	movw	r14, r30
    1492:	88 23       	and	r24, r24
    1494:	09 f4       	brne	.+2      	; 0x1498 <vfprintf+0x3a>
    1496:	ba c1       	rjmp	.+884    	; 0x180c <vfprintf+0x3ae>
    1498:	85 32       	cpi	r24, 0x25	; 37
    149a:	39 f4       	brne	.+14     	; 0x14aa <vfprintf+0x4c>
    149c:	93 fd       	sbrc	r25, 3
    149e:	85 91       	lpm	r24, Z+
    14a0:	93 ff       	sbrs	r25, 3
    14a2:	81 91       	ld	r24, Z+
    14a4:	7f 01       	movw	r14, r30
    14a6:	85 32       	cpi	r24, 0x25	; 37
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <vfprintf+0x56>
    14aa:	b6 01       	movw	r22, r12
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    14b2:	e7 cf       	rjmp	.-50     	; 0x1482 <vfprintf+0x24>
    14b4:	91 2c       	mov	r9, r1
    14b6:	21 2c       	mov	r2, r1
    14b8:	31 2c       	mov	r3, r1
    14ba:	ff e1       	ldi	r31, 0x1F	; 31
    14bc:	f3 15       	cp	r31, r3
    14be:	d8 f0       	brcs	.+54     	; 0x14f6 <vfprintf+0x98>
    14c0:	8b 32       	cpi	r24, 0x2B	; 43
    14c2:	79 f0       	breq	.+30     	; 0x14e2 <vfprintf+0x84>
    14c4:	38 f4       	brcc	.+14     	; 0x14d4 <vfprintf+0x76>
    14c6:	80 32       	cpi	r24, 0x20	; 32
    14c8:	79 f0       	breq	.+30     	; 0x14e8 <vfprintf+0x8a>
    14ca:	83 32       	cpi	r24, 0x23	; 35
    14cc:	a1 f4       	brne	.+40     	; 0x14f6 <vfprintf+0x98>
    14ce:	23 2d       	mov	r18, r3
    14d0:	20 61       	ori	r18, 0x10	; 16
    14d2:	1d c0       	rjmp	.+58     	; 0x150e <vfprintf+0xb0>
    14d4:	8d 32       	cpi	r24, 0x2D	; 45
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <vfprintf+0x92>
    14d8:	80 33       	cpi	r24, 0x30	; 48
    14da:	69 f4       	brne	.+26     	; 0x14f6 <vfprintf+0x98>
    14dc:	23 2d       	mov	r18, r3
    14de:	21 60       	ori	r18, 0x01	; 1
    14e0:	16 c0       	rjmp	.+44     	; 0x150e <vfprintf+0xb0>
    14e2:	83 2d       	mov	r24, r3
    14e4:	82 60       	ori	r24, 0x02	; 2
    14e6:	38 2e       	mov	r3, r24
    14e8:	e3 2d       	mov	r30, r3
    14ea:	e4 60       	ori	r30, 0x04	; 4
    14ec:	3e 2e       	mov	r3, r30
    14ee:	2a c0       	rjmp	.+84     	; 0x1544 <vfprintf+0xe6>
    14f0:	f3 2d       	mov	r31, r3
    14f2:	f8 60       	ori	r31, 0x08	; 8
    14f4:	1d c0       	rjmp	.+58     	; 0x1530 <vfprintf+0xd2>
    14f6:	37 fc       	sbrc	r3, 7
    14f8:	2d c0       	rjmp	.+90     	; 0x1554 <vfprintf+0xf6>
    14fa:	20 ed       	ldi	r18, 0xD0	; 208
    14fc:	28 0f       	add	r18, r24
    14fe:	2a 30       	cpi	r18, 0x0A	; 10
    1500:	40 f0       	brcs	.+16     	; 0x1512 <vfprintf+0xb4>
    1502:	8e 32       	cpi	r24, 0x2E	; 46
    1504:	b9 f4       	brne	.+46     	; 0x1534 <vfprintf+0xd6>
    1506:	36 fc       	sbrc	r3, 6
    1508:	81 c1       	rjmp	.+770    	; 0x180c <vfprintf+0x3ae>
    150a:	23 2d       	mov	r18, r3
    150c:	20 64       	ori	r18, 0x40	; 64
    150e:	32 2e       	mov	r3, r18
    1510:	19 c0       	rjmp	.+50     	; 0x1544 <vfprintf+0xe6>
    1512:	36 fe       	sbrs	r3, 6
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <vfprintf+0xc4>
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	98 9e       	mul	r9, r24
    151a:	20 0d       	add	r18, r0
    151c:	11 24       	eor	r1, r1
    151e:	92 2e       	mov	r9, r18
    1520:	11 c0       	rjmp	.+34     	; 0x1544 <vfprintf+0xe6>
    1522:	ea e0       	ldi	r30, 0x0A	; 10
    1524:	2e 9e       	mul	r2, r30
    1526:	20 0d       	add	r18, r0
    1528:	11 24       	eor	r1, r1
    152a:	22 2e       	mov	r2, r18
    152c:	f3 2d       	mov	r31, r3
    152e:	f0 62       	ori	r31, 0x20	; 32
    1530:	3f 2e       	mov	r3, r31
    1532:	08 c0       	rjmp	.+16     	; 0x1544 <vfprintf+0xe6>
    1534:	8c 36       	cpi	r24, 0x6C	; 108
    1536:	21 f4       	brne	.+8      	; 0x1540 <vfprintf+0xe2>
    1538:	83 2d       	mov	r24, r3
    153a:	80 68       	ori	r24, 0x80	; 128
    153c:	38 2e       	mov	r3, r24
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0xe6>
    1540:	88 36       	cpi	r24, 0x68	; 104
    1542:	41 f4       	brne	.+16     	; 0x1554 <vfprintf+0xf6>
    1544:	f7 01       	movw	r30, r14
    1546:	93 fd       	sbrc	r25, 3
    1548:	85 91       	lpm	r24, Z+
    154a:	93 ff       	sbrs	r25, 3
    154c:	81 91       	ld	r24, Z+
    154e:	7f 01       	movw	r14, r30
    1550:	81 11       	cpse	r24, r1
    1552:	b3 cf       	rjmp	.-154    	; 0x14ba <vfprintf+0x5c>
    1554:	98 2f       	mov	r25, r24
    1556:	9f 7d       	andi	r25, 0xDF	; 223
    1558:	95 54       	subi	r25, 0x45	; 69
    155a:	93 30       	cpi	r25, 0x03	; 3
    155c:	28 f4       	brcc	.+10     	; 0x1568 <vfprintf+0x10a>
    155e:	0c 5f       	subi	r16, 0xFC	; 252
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	9f e3       	ldi	r25, 0x3F	; 63
    1564:	99 83       	std	Y+1, r25	; 0x01
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <vfprintf+0x124>
    1568:	83 36       	cpi	r24, 0x63	; 99
    156a:	31 f0       	breq	.+12     	; 0x1578 <vfprintf+0x11a>
    156c:	83 37       	cpi	r24, 0x73	; 115
    156e:	71 f0       	breq	.+28     	; 0x158c <vfprintf+0x12e>
    1570:	83 35       	cpi	r24, 0x53	; 83
    1572:	09 f0       	breq	.+2      	; 0x1576 <vfprintf+0x118>
    1574:	59 c0       	rjmp	.+178    	; 0x1628 <vfprintf+0x1ca>
    1576:	21 c0       	rjmp	.+66     	; 0x15ba <vfprintf+0x15c>
    1578:	f8 01       	movw	r30, r16
    157a:	80 81       	ld	r24, Z
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	0e 5f       	subi	r16, 0xFE	; 254
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	88 24       	eor	r8, r8
    1584:	83 94       	inc	r8
    1586:	91 2c       	mov	r9, r1
    1588:	53 01       	movw	r10, r6
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <vfprintf+0x154>
    158c:	28 01       	movw	r4, r16
    158e:	f2 e0       	ldi	r31, 0x02	; 2
    1590:	4f 0e       	add	r4, r31
    1592:	51 1c       	adc	r5, r1
    1594:	f8 01       	movw	r30, r16
    1596:	a0 80       	ld	r10, Z
    1598:	b1 80       	ldd	r11, Z+1	; 0x01
    159a:	36 fe       	sbrs	r3, 6
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <vfprintf+0x146>
    159e:	69 2d       	mov	r22, r9
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <vfprintf+0x14a>
    15a4:	6f ef       	ldi	r22, 0xFF	; 255
    15a6:	7f ef       	ldi	r23, 0xFF	; 255
    15a8:	c5 01       	movw	r24, r10
    15aa:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <strnlen>
    15ae:	4c 01       	movw	r8, r24
    15b0:	82 01       	movw	r16, r4
    15b2:	f3 2d       	mov	r31, r3
    15b4:	ff 77       	andi	r31, 0x7F	; 127
    15b6:	3f 2e       	mov	r3, r31
    15b8:	16 c0       	rjmp	.+44     	; 0x15e6 <vfprintf+0x188>
    15ba:	28 01       	movw	r4, r16
    15bc:	22 e0       	ldi	r18, 0x02	; 2
    15be:	42 0e       	add	r4, r18
    15c0:	51 1c       	adc	r5, r1
    15c2:	f8 01       	movw	r30, r16
    15c4:	a0 80       	ld	r10, Z
    15c6:	b1 80       	ldd	r11, Z+1	; 0x01
    15c8:	36 fe       	sbrs	r3, 6
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <vfprintf+0x174>
    15cc:	69 2d       	mov	r22, r9
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x178>
    15d2:	6f ef       	ldi	r22, 0xFF	; 255
    15d4:	7f ef       	ldi	r23, 0xFF	; 255
    15d6:	c5 01       	movw	r24, r10
    15d8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strnlen_P>
    15dc:	4c 01       	movw	r8, r24
    15de:	f3 2d       	mov	r31, r3
    15e0:	f0 68       	ori	r31, 0x80	; 128
    15e2:	3f 2e       	mov	r3, r31
    15e4:	82 01       	movw	r16, r4
    15e6:	33 fc       	sbrc	r3, 3
    15e8:	1b c0       	rjmp	.+54     	; 0x1620 <vfprintf+0x1c2>
    15ea:	82 2d       	mov	r24, r2
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	88 16       	cp	r8, r24
    15f0:	99 06       	cpc	r9, r25
    15f2:	b0 f4       	brcc	.+44     	; 0x1620 <vfprintf+0x1c2>
    15f4:	b6 01       	movw	r22, r12
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    15fe:	2a 94       	dec	r2
    1600:	f4 cf       	rjmp	.-24     	; 0x15ea <vfprintf+0x18c>
    1602:	f5 01       	movw	r30, r10
    1604:	37 fc       	sbrc	r3, 7
    1606:	85 91       	lpm	r24, Z+
    1608:	37 fe       	sbrs	r3, 7
    160a:	81 91       	ld	r24, Z+
    160c:	5f 01       	movw	r10, r30
    160e:	b6 01       	movw	r22, r12
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    1616:	21 10       	cpse	r2, r1
    1618:	2a 94       	dec	r2
    161a:	21 e0       	ldi	r18, 0x01	; 1
    161c:	82 1a       	sub	r8, r18
    161e:	91 08       	sbc	r9, r1
    1620:	81 14       	cp	r8, r1
    1622:	91 04       	cpc	r9, r1
    1624:	71 f7       	brne	.-36     	; 0x1602 <vfprintf+0x1a4>
    1626:	e8 c0       	rjmp	.+464    	; 0x17f8 <vfprintf+0x39a>
    1628:	84 36       	cpi	r24, 0x64	; 100
    162a:	11 f0       	breq	.+4      	; 0x1630 <vfprintf+0x1d2>
    162c:	89 36       	cpi	r24, 0x69	; 105
    162e:	41 f5       	brne	.+80     	; 0x1680 <vfprintf+0x222>
    1630:	f8 01       	movw	r30, r16
    1632:	37 fe       	sbrs	r3, 7
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <vfprintf+0x1e6>
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	0c 5f       	subi	r16, 0xFC	; 252
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <vfprintf+0x1f6>
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	07 2e       	mov	r0, r23
    164a:	00 0c       	add	r0, r0
    164c:	88 0b       	sbc	r24, r24
    164e:	99 0b       	sbc	r25, r25
    1650:	0e 5f       	subi	r16, 0xFE	; 254
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	f3 2d       	mov	r31, r3
    1656:	ff 76       	andi	r31, 0x6F	; 111
    1658:	3f 2e       	mov	r3, r31
    165a:	97 ff       	sbrs	r25, 7
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <vfprintf+0x212>
    165e:	90 95       	com	r25
    1660:	80 95       	com	r24
    1662:	70 95       	com	r23
    1664:	61 95       	neg	r22
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	f0 68       	ori	r31, 0x80	; 128
    166e:	3f 2e       	mov	r3, r31
    1670:	2a e0       	ldi	r18, 0x0A	; 10
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	a3 01       	movw	r20, r6
    1676:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__ultoa_invert>
    167a:	88 2e       	mov	r8, r24
    167c:	86 18       	sub	r8, r6
    167e:	45 c0       	rjmp	.+138    	; 0x170a <vfprintf+0x2ac>
    1680:	85 37       	cpi	r24, 0x75	; 117
    1682:	31 f4       	brne	.+12     	; 0x1690 <vfprintf+0x232>
    1684:	23 2d       	mov	r18, r3
    1686:	2f 7e       	andi	r18, 0xEF	; 239
    1688:	b2 2e       	mov	r11, r18
    168a:	2a e0       	ldi	r18, 0x0A	; 10
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	25 c0       	rjmp	.+74     	; 0x16da <vfprintf+0x27c>
    1690:	93 2d       	mov	r25, r3
    1692:	99 7f       	andi	r25, 0xF9	; 249
    1694:	b9 2e       	mov	r11, r25
    1696:	8f 36       	cpi	r24, 0x6F	; 111
    1698:	c1 f0       	breq	.+48     	; 0x16ca <vfprintf+0x26c>
    169a:	18 f4       	brcc	.+6      	; 0x16a2 <vfprintf+0x244>
    169c:	88 35       	cpi	r24, 0x58	; 88
    169e:	79 f0       	breq	.+30     	; 0x16be <vfprintf+0x260>
    16a0:	b5 c0       	rjmp	.+362    	; 0x180c <vfprintf+0x3ae>
    16a2:	80 37       	cpi	r24, 0x70	; 112
    16a4:	19 f0       	breq	.+6      	; 0x16ac <vfprintf+0x24e>
    16a6:	88 37       	cpi	r24, 0x78	; 120
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <vfprintf+0x254>
    16aa:	b0 c0       	rjmp	.+352    	; 0x180c <vfprintf+0x3ae>
    16ac:	e9 2f       	mov	r30, r25
    16ae:	e0 61       	ori	r30, 0x10	; 16
    16b0:	be 2e       	mov	r11, r30
    16b2:	b4 fe       	sbrs	r11, 4
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <vfprintf+0x272>
    16b6:	fb 2d       	mov	r31, r11
    16b8:	f4 60       	ori	r31, 0x04	; 4
    16ba:	bf 2e       	mov	r11, r31
    16bc:	09 c0       	rjmp	.+18     	; 0x16d0 <vfprintf+0x272>
    16be:	34 fe       	sbrs	r3, 4
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <vfprintf+0x278>
    16c2:	29 2f       	mov	r18, r25
    16c4:	26 60       	ori	r18, 0x06	; 6
    16c6:	b2 2e       	mov	r11, r18
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0x278>
    16ca:	28 e0       	ldi	r18, 0x08	; 8
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <vfprintf+0x27c>
    16d0:	20 e1       	ldi	r18, 0x10	; 16
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x27c>
    16d6:	20 e1       	ldi	r18, 0x10	; 16
    16d8:	32 e0       	ldi	r19, 0x02	; 2
    16da:	f8 01       	movw	r30, r16
    16dc:	b7 fe       	sbrs	r11, 7
    16de:	07 c0       	rjmp	.+14     	; 0x16ee <vfprintf+0x290>
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0c 5f       	subi	r16, 0xFC	; 252
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	06 c0       	rjmp	.+12     	; 0x16fa <vfprintf+0x29c>
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 5f       	subi	r16, 0xFE	; 254
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	a3 01       	movw	r20, r6
    16fc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__ultoa_invert>
    1700:	88 2e       	mov	r8, r24
    1702:	86 18       	sub	r8, r6
    1704:	fb 2d       	mov	r31, r11
    1706:	ff 77       	andi	r31, 0x7F	; 127
    1708:	3f 2e       	mov	r3, r31
    170a:	36 fe       	sbrs	r3, 6
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <vfprintf+0x2ca>
    170e:	23 2d       	mov	r18, r3
    1710:	2e 7f       	andi	r18, 0xFE	; 254
    1712:	a2 2e       	mov	r10, r18
    1714:	89 14       	cp	r8, r9
    1716:	58 f4       	brcc	.+22     	; 0x172e <vfprintf+0x2d0>
    1718:	34 fe       	sbrs	r3, 4
    171a:	0b c0       	rjmp	.+22     	; 0x1732 <vfprintf+0x2d4>
    171c:	32 fc       	sbrc	r3, 2
    171e:	09 c0       	rjmp	.+18     	; 0x1732 <vfprintf+0x2d4>
    1720:	83 2d       	mov	r24, r3
    1722:	8e 7e       	andi	r24, 0xEE	; 238
    1724:	a8 2e       	mov	r10, r24
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <vfprintf+0x2d4>
    1728:	b8 2c       	mov	r11, r8
    172a:	a3 2c       	mov	r10, r3
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <vfprintf+0x2d6>
    172e:	b8 2c       	mov	r11, r8
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <vfprintf+0x2d6>
    1732:	b9 2c       	mov	r11, r9
    1734:	a4 fe       	sbrs	r10, 4
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <vfprintf+0x2f8>
    1738:	fe 01       	movw	r30, r28
    173a:	e8 0d       	add	r30, r8
    173c:	f1 1d       	adc	r31, r1
    173e:	80 81       	ld	r24, Z
    1740:	80 33       	cpi	r24, 0x30	; 48
    1742:	21 f4       	brne	.+8      	; 0x174c <vfprintf+0x2ee>
    1744:	9a 2d       	mov	r25, r10
    1746:	99 7e       	andi	r25, 0xE9	; 233
    1748:	a9 2e       	mov	r10, r25
    174a:	09 c0       	rjmp	.+18     	; 0x175e <vfprintf+0x300>
    174c:	a2 fe       	sbrs	r10, 2
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0x2fe>
    1750:	b3 94       	inc	r11
    1752:	b3 94       	inc	r11
    1754:	04 c0       	rjmp	.+8      	; 0x175e <vfprintf+0x300>
    1756:	8a 2d       	mov	r24, r10
    1758:	86 78       	andi	r24, 0x86	; 134
    175a:	09 f0       	breq	.+2      	; 0x175e <vfprintf+0x300>
    175c:	b3 94       	inc	r11
    175e:	a3 fc       	sbrc	r10, 3
    1760:	11 c0       	rjmp	.+34     	; 0x1784 <vfprintf+0x326>
    1762:	a0 fe       	sbrs	r10, 0
    1764:	06 c0       	rjmp	.+12     	; 0x1772 <vfprintf+0x314>
    1766:	b2 14       	cp	r11, r2
    1768:	88 f4       	brcc	.+34     	; 0x178c <vfprintf+0x32e>
    176a:	28 0c       	add	r2, r8
    176c:	92 2c       	mov	r9, r2
    176e:	9b 18       	sub	r9, r11
    1770:	0e c0       	rjmp	.+28     	; 0x178e <vfprintf+0x330>
    1772:	b2 14       	cp	r11, r2
    1774:	60 f4       	brcc	.+24     	; 0x178e <vfprintf+0x330>
    1776:	b6 01       	movw	r22, r12
    1778:	80 e2       	ldi	r24, 0x20	; 32
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    1780:	b3 94       	inc	r11
    1782:	f7 cf       	rjmp	.-18     	; 0x1772 <vfprintf+0x314>
    1784:	b2 14       	cp	r11, r2
    1786:	18 f4       	brcc	.+6      	; 0x178e <vfprintf+0x330>
    1788:	2b 18       	sub	r2, r11
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x332>
    178c:	98 2c       	mov	r9, r8
    178e:	21 2c       	mov	r2, r1
    1790:	a4 fe       	sbrs	r10, 4
    1792:	10 c0       	rjmp	.+32     	; 0x17b4 <vfprintf+0x356>
    1794:	b6 01       	movw	r22, r12
    1796:	80 e3       	ldi	r24, 0x30	; 48
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    179e:	a2 fe       	sbrs	r10, 2
    17a0:	17 c0       	rjmp	.+46     	; 0x17d0 <vfprintf+0x372>
    17a2:	a1 fc       	sbrc	r10, 1
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <vfprintf+0x34e>
    17a6:	88 e7       	ldi	r24, 0x78	; 120
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0x352>
    17ac:	88 e5       	ldi	r24, 0x58	; 88
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	b6 01       	movw	r22, r12
    17b2:	0c c0       	rjmp	.+24     	; 0x17cc <vfprintf+0x36e>
    17b4:	8a 2d       	mov	r24, r10
    17b6:	86 78       	andi	r24, 0x86	; 134
    17b8:	59 f0       	breq	.+22     	; 0x17d0 <vfprintf+0x372>
    17ba:	a1 fe       	sbrs	r10, 1
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <vfprintf+0x364>
    17be:	8b e2       	ldi	r24, 0x2B	; 43
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <vfprintf+0x366>
    17c2:	80 e2       	ldi	r24, 0x20	; 32
    17c4:	a7 fc       	sbrc	r10, 7
    17c6:	8d e2       	ldi	r24, 0x2D	; 45
    17c8:	b6 01       	movw	r22, r12
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    17d0:	89 14       	cp	r8, r9
    17d2:	38 f4       	brcc	.+14     	; 0x17e2 <vfprintf+0x384>
    17d4:	b6 01       	movw	r22, r12
    17d6:	80 e3       	ldi	r24, 0x30	; 48
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    17de:	9a 94       	dec	r9
    17e0:	f7 cf       	rjmp	.-18     	; 0x17d0 <vfprintf+0x372>
    17e2:	8a 94       	dec	r8
    17e4:	f3 01       	movw	r30, r6
    17e6:	e8 0d       	add	r30, r8
    17e8:	f1 1d       	adc	r31, r1
    17ea:	80 81       	ld	r24, Z
    17ec:	b6 01       	movw	r22, r12
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    17f4:	81 10       	cpse	r8, r1
    17f6:	f5 cf       	rjmp	.-22     	; 0x17e2 <vfprintf+0x384>
    17f8:	22 20       	and	r2, r2
    17fa:	09 f4       	brne	.+2      	; 0x17fe <vfprintf+0x3a0>
    17fc:	42 ce       	rjmp	.-892    	; 0x1482 <vfprintf+0x24>
    17fe:	b6 01       	movw	r22, r12
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <fputc>
    1808:	2a 94       	dec	r2
    180a:	f6 cf       	rjmp	.-20     	; 0x17f8 <vfprintf+0x39a>
    180c:	f6 01       	movw	r30, r12
    180e:	86 81       	ldd	r24, Z+6	; 0x06
    1810:	97 81       	ldd	r25, Z+7	; 0x07
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x3ba>
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	9f ef       	ldi	r25, 0xFF	; 255
    1818:	2b 96       	adiw	r28, 0x0b	; 11
    181a:	e2 e1       	ldi	r30, 0x12	; 18
    181c:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__epilogue_restores__>

00001820 <calloc>:
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	86 9f       	mul	r24, r22
    182a:	80 01       	movw	r16, r0
    182c:	87 9f       	mul	r24, r23
    182e:	10 0d       	add	r17, r0
    1830:	96 9f       	mul	r25, r22
    1832:	10 0d       	add	r17, r0
    1834:	11 24       	eor	r1, r1
    1836:	c8 01       	movw	r24, r16
    1838:	0e 94 2c 0c 	call	0x1858	; 0x1858 <malloc>
    183c:	ec 01       	movw	r28, r24
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	29 f0       	breq	.+10     	; 0x184c <calloc+0x2c>
    1842:	a8 01       	movw	r20, r16
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <memset>
    184c:	ce 01       	movw	r24, r28
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <malloc>:
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	91 05       	cpc	r25, r1
    1864:	10 f4       	brcc	.+4      	; 0x186a <malloc+0x12>
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <__flp>
    186e:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <__flp+0x1>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	30 97       	sbiw	r30, 0x00	; 0
    187c:	19 f1       	breq	.+70     	; 0x18c4 <malloc+0x6c>
    187e:	40 81       	ld	r20, Z
    1880:	51 81       	ldd	r21, Z+1	; 0x01
    1882:	02 81       	ldd	r16, Z+2	; 0x02
    1884:	13 81       	ldd	r17, Z+3	; 0x03
    1886:	48 17       	cp	r20, r24
    1888:	59 07       	cpc	r21, r25
    188a:	c8 f0       	brcs	.+50     	; 0x18be <malloc+0x66>
    188c:	84 17       	cp	r24, r20
    188e:	95 07       	cpc	r25, r21
    1890:	69 f4       	brne	.+26     	; 0x18ac <malloc+0x54>
    1892:	10 97       	sbiw	r26, 0x00	; 0
    1894:	31 f0       	breq	.+12     	; 0x18a2 <malloc+0x4a>
    1896:	12 96       	adiw	r26, 0x02	; 2
    1898:	0c 93       	st	X, r16
    189a:	12 97       	sbiw	r26, 0x02	; 2
    189c:	13 96       	adiw	r26, 0x03	; 3
    189e:	1c 93       	st	X, r17
    18a0:	27 c0       	rjmp	.+78     	; 0x18f0 <malloc+0x98>
    18a2:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <__flp>
    18a6:	10 93 1e 02 	sts	0x021E, r17	; 0x80021e <__flp+0x1>
    18aa:	22 c0       	rjmp	.+68     	; 0x18f0 <malloc+0x98>
    18ac:	21 15       	cp	r18, r1
    18ae:	31 05       	cpc	r19, r1
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <malloc+0x60>
    18b2:	42 17       	cp	r20, r18
    18b4:	53 07       	cpc	r21, r19
    18b6:	18 f4       	brcc	.+6      	; 0x18be <malloc+0x66>
    18b8:	9a 01       	movw	r18, r20
    18ba:	bd 01       	movw	r22, r26
    18bc:	ef 01       	movw	r28, r30
    18be:	df 01       	movw	r26, r30
    18c0:	f8 01       	movw	r30, r16
    18c2:	db cf       	rjmp	.-74     	; 0x187a <malloc+0x22>
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	f9 f0       	breq	.+62     	; 0x1908 <malloc+0xb0>
    18ca:	28 1b       	sub	r18, r24
    18cc:	39 0b       	sbc	r19, r25
    18ce:	24 30       	cpi	r18, 0x04	; 4
    18d0:	31 05       	cpc	r19, r1
    18d2:	80 f4       	brcc	.+32     	; 0x18f4 <malloc+0x9c>
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	61 15       	cp	r22, r1
    18da:	71 05       	cpc	r23, r1
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <malloc+0x8e>
    18de:	fb 01       	movw	r30, r22
    18e0:	93 83       	std	Z+3, r25	; 0x03
    18e2:	82 83       	std	Z+2, r24	; 0x02
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <malloc+0x96>
    18e6:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__flp+0x1>
    18ea:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__flp>
    18ee:	fe 01       	movw	r30, r28
    18f0:	32 96       	adiw	r30, 0x02	; 2
    18f2:	44 c0       	rjmp	.+136    	; 0x197c <malloc+0x124>
    18f4:	fe 01       	movw	r30, r28
    18f6:	e2 0f       	add	r30, r18
    18f8:	f3 1f       	adc	r31, r19
    18fa:	81 93       	st	Z+, r24
    18fc:	91 93       	st	Z+, r25
    18fe:	22 50       	subi	r18, 0x02	; 2
    1900:	31 09       	sbc	r19, r1
    1902:	39 83       	std	Y+1, r19	; 0x01
    1904:	28 83       	st	Y, r18
    1906:	3a c0       	rjmp	.+116    	; 0x197c <malloc+0x124>
    1908:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    190c:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    1910:	23 2b       	or	r18, r19
    1912:	41 f4       	brne	.+16     	; 0x1924 <malloc+0xcc>
    1914:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1918:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    191c:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <__brkval+0x1>
    1920:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <__brkval>
    1924:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1928:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	41 f4       	brne	.+16     	; 0x1942 <malloc+0xea>
    1932:	2d b7       	in	r18, 0x3d	; 61
    1934:	3e b7       	in	r19, 0x3e	; 62
    1936:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    193a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    193e:	24 1b       	sub	r18, r20
    1940:	35 0b       	sbc	r19, r21
    1942:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__brkval>
    1946:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__brkval+0x1>
    194a:	e2 17       	cp	r30, r18
    194c:	f3 07       	cpc	r31, r19
    194e:	a0 f4       	brcc	.+40     	; 0x1978 <malloc+0x120>
    1950:	2e 1b       	sub	r18, r30
    1952:	3f 0b       	sbc	r19, r31
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	78 f0       	brcs	.+30     	; 0x1978 <malloc+0x120>
    195a:	ac 01       	movw	r20, r24
    195c:	4e 5f       	subi	r20, 0xFE	; 254
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	24 17       	cp	r18, r20
    1962:	35 07       	cpc	r19, r21
    1964:	48 f0       	brcs	.+18     	; 0x1978 <malloc+0x120>
    1966:	4e 0f       	add	r20, r30
    1968:	5f 1f       	adc	r21, r31
    196a:	50 93 1c 02 	sts	0x021C, r21	; 0x80021c <__brkval+0x1>
    196e:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <__brkval>
    1972:	81 93       	st	Z+, r24
    1974:	91 93       	st	Z+, r25
    1976:	02 c0       	rjmp	.+4      	; 0x197c <malloc+0x124>
    1978:	e0 e0       	ldi	r30, 0x00	; 0
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	cf 01       	movw	r24, r30
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <free>:
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	09 f4       	brne	.+2      	; 0x1992 <free+0xa>
    1990:	81 c0       	rjmp	.+258    	; 0x1a94 <free+0x10c>
    1992:	fc 01       	movw	r30, r24
    1994:	32 97       	sbiw	r30, 0x02	; 2
    1996:	13 82       	std	Z+3, r1	; 0x03
    1998:	12 82       	std	Z+2, r1	; 0x02
    199a:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <__flp>
    199e:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <__flp+0x1>
    19a2:	10 97       	sbiw	r26, 0x00	; 0
    19a4:	81 f4       	brne	.+32     	; 0x19c6 <free+0x3e>
    19a6:	20 81       	ld	r18, Z
    19a8:	31 81       	ldd	r19, Z+1	; 0x01
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    19b2:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	51 f5       	brne	.+84     	; 0x1a10 <free+0x88>
    19bc:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__brkval+0x1>
    19c0:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__brkval>
    19c4:	67 c0       	rjmp	.+206    	; 0x1a94 <free+0x10c>
    19c6:	ed 01       	movw	r28, r26
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	ce 17       	cp	r28, r30
    19ce:	df 07       	cpc	r29, r31
    19d0:	40 f4       	brcc	.+16     	; 0x19e2 <free+0x5a>
    19d2:	4a 81       	ldd	r20, Y+2	; 0x02
    19d4:	5b 81       	ldd	r21, Y+3	; 0x03
    19d6:	9e 01       	movw	r18, r28
    19d8:	41 15       	cp	r20, r1
    19da:	51 05       	cpc	r21, r1
    19dc:	f1 f0       	breq	.+60     	; 0x1a1a <free+0x92>
    19de:	ea 01       	movw	r28, r20
    19e0:	f5 cf       	rjmp	.-22     	; 0x19cc <free+0x44>
    19e2:	d3 83       	std	Z+3, r29	; 0x03
    19e4:	c2 83       	std	Z+2, r28	; 0x02
    19e6:	40 81       	ld	r20, Z
    19e8:	51 81       	ldd	r21, Z+1	; 0x01
    19ea:	84 0f       	add	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	c8 17       	cp	r28, r24
    19f0:	d9 07       	cpc	r29, r25
    19f2:	59 f4       	brne	.+22     	; 0x1a0a <free+0x82>
    19f4:	88 81       	ld	r24, Y
    19f6:	99 81       	ldd	r25, Y+1	; 0x01
    19f8:	84 0f       	add	r24, r20
    19fa:	95 1f       	adc	r25, r21
    19fc:	02 96       	adiw	r24, 0x02	; 2
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	9b 81       	ldd	r25, Y+3	; 0x03
    1a06:	93 83       	std	Z+3, r25	; 0x03
    1a08:	82 83       	std	Z+2, r24	; 0x02
    1a0a:	21 15       	cp	r18, r1
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	29 f4       	brne	.+10     	; 0x1a1a <free+0x92>
    1a10:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <__flp+0x1>
    1a14:	e0 93 1d 02 	sts	0x021D, r30	; 0x80021d <__flp>
    1a18:	3d c0       	rjmp	.+122    	; 0x1a94 <free+0x10c>
    1a1a:	e9 01       	movw	r28, r18
    1a1c:	fb 83       	std	Y+3, r31	; 0x03
    1a1e:	ea 83       	std	Y+2, r30	; 0x02
    1a20:	49 91       	ld	r20, Y+
    1a22:	59 91       	ld	r21, Y+
    1a24:	c4 0f       	add	r28, r20
    1a26:	d5 1f       	adc	r29, r21
    1a28:	ec 17       	cp	r30, r28
    1a2a:	fd 07       	cpc	r31, r29
    1a2c:	61 f4       	brne	.+24     	; 0x1a46 <free+0xbe>
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	84 0f       	add	r24, r20
    1a34:	95 1f       	adc	r25, r21
    1a36:	02 96       	adiw	r24, 0x02	; 2
    1a38:	e9 01       	movw	r28, r18
    1a3a:	99 83       	std	Y+1, r25	; 0x01
    1a3c:	88 83       	st	Y, r24
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	9b 83       	std	Y+3, r25	; 0x03
    1a44:	8a 83       	std	Y+2, r24	; 0x02
    1a46:	e0 e0       	ldi	r30, 0x00	; 0
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	8d 91       	ld	r24, X+
    1a4e:	9c 91       	ld	r25, X
    1a50:	13 97       	sbiw	r26, 0x03	; 3
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <free+0xd4>
    1a56:	fd 01       	movw	r30, r26
    1a58:	dc 01       	movw	r26, r24
    1a5a:	f7 cf       	rjmp	.-18     	; 0x1a4a <free+0xc2>
    1a5c:	8d 91       	ld	r24, X+
    1a5e:	9c 91       	ld	r25, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	9d 01       	movw	r18, r26
    1a64:	2e 5f       	subi	r18, 0xFE	; 254
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    1a70:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    1a74:	28 17       	cp	r18, r24
    1a76:	39 07       	cpc	r19, r25
    1a78:	69 f4       	brne	.+26     	; 0x1a94 <free+0x10c>
    1a7a:	30 97       	sbiw	r30, 0x00	; 0
    1a7c:	29 f4       	brne	.+10     	; 0x1a88 <free+0x100>
    1a7e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp+0x1>
    1a82:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp>
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <free+0x104>
    1a88:	13 82       	std	Z+3, r1	; 0x03
    1a8a:	12 82       	std	Z+2, r1	; 0x02
    1a8c:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <__brkval+0x1>
    1a90:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <__brkval>
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret

00001a9a <strnlen_P>:
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	05 90       	lpm	r0, Z+
    1a9e:	61 50       	subi	r22, 0x01	; 1
    1aa0:	70 40       	sbci	r23, 0x00	; 0
    1aa2:	01 10       	cpse	r0, r1
    1aa4:	d8 f7       	brcc	.-10     	; 0x1a9c <strnlen_P+0x2>
    1aa6:	80 95       	com	r24
    1aa8:	90 95       	com	r25
    1aaa:	8e 0f       	add	r24, r30
    1aac:	9f 1f       	adc	r25, r31
    1aae:	08 95       	ret

00001ab0 <memset>:
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <memset+0x6>
    1ab4:	6d 93       	st	X+, r22
    1ab6:	41 50       	subi	r20, 0x01	; 1
    1ab8:	50 40       	sbci	r21, 0x00	; 0
    1aba:	e0 f7       	brcc	.-8      	; 0x1ab4 <memset+0x4>
    1abc:	08 95       	ret

00001abe <strnlen>:
    1abe:	fc 01       	movw	r30, r24
    1ac0:	61 50       	subi	r22, 0x01	; 1
    1ac2:	70 40       	sbci	r23, 0x00	; 0
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	01 10       	cpse	r0, r1
    1ac8:	d8 f7       	brcc	.-10     	; 0x1ac0 <strnlen+0x2>
    1aca:	80 95       	com	r24
    1acc:	90 95       	com	r25
    1ace:	8e 0f       	add	r24, r30
    1ad0:	9f 1f       	adc	r25, r31
    1ad2:	08 95       	ret

00001ad4 <fputc>:
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	fb 01       	movw	r30, r22
    1ade:	23 81       	ldd	r18, Z+3	; 0x03
    1ae0:	21 fd       	sbrc	r18, 1
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <fputc+0x16>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	9f ef       	ldi	r25, 0xFF	; 255
    1ae8:	2c c0       	rjmp	.+88     	; 0x1b42 <fputc+0x6e>
    1aea:	22 ff       	sbrs	r18, 2
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <fputc+0x46>
    1aee:	46 81       	ldd	r20, Z+6	; 0x06
    1af0:	57 81       	ldd	r21, Z+7	; 0x07
    1af2:	24 81       	ldd	r18, Z+4	; 0x04
    1af4:	35 81       	ldd	r19, Z+5	; 0x05
    1af6:	42 17       	cp	r20, r18
    1af8:	53 07       	cpc	r21, r19
    1afa:	44 f4       	brge	.+16     	; 0x1b0c <fputc+0x38>
    1afc:	a0 81       	ld	r26, Z
    1afe:	b1 81       	ldd	r27, Z+1	; 0x01
    1b00:	9d 01       	movw	r18, r26
    1b02:	2f 5f       	subi	r18, 0xFF	; 255
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	31 83       	std	Z+1, r19	; 0x01
    1b08:	20 83       	st	Z, r18
    1b0a:	8c 93       	st	X, r24
    1b0c:	26 81       	ldd	r18, Z+6	; 0x06
    1b0e:	37 81       	ldd	r19, Z+7	; 0x07
    1b10:	2f 5f       	subi	r18, 0xFF	; 255
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	37 83       	std	Z+7, r19	; 0x07
    1b16:	26 83       	std	Z+6, r18	; 0x06
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <fputc+0x6e>
    1b1a:	8b 01       	movw	r16, r22
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	fb 01       	movw	r30, r22
    1b20:	00 84       	ldd	r0, Z+8	; 0x08
    1b22:	f1 85       	ldd	r31, Z+9	; 0x09
    1b24:	e0 2d       	mov	r30, r0
    1b26:	09 95       	icall
    1b28:	89 2b       	or	r24, r25
    1b2a:	e1 f6       	brne	.-72     	; 0x1ae4 <fputc+0x10>
    1b2c:	d8 01       	movw	r26, r16
    1b2e:	16 96       	adiw	r26, 0x06	; 6
    1b30:	8d 91       	ld	r24, X+
    1b32:	9c 91       	ld	r25, X
    1b34:	17 97       	sbiw	r26, 0x07	; 7
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	17 96       	adiw	r26, 0x07	; 7
    1b3a:	9c 93       	st	X, r25
    1b3c:	8e 93       	st	-X, r24
    1b3e:	16 97       	sbiw	r26, 0x06	; 6
    1b40:	ce 01       	movw	r24, r28
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <__ultoa_invert>:
    1b4c:	fa 01       	movw	r30, r20
    1b4e:	aa 27       	eor	r26, r26
    1b50:	28 30       	cpi	r18, 0x08	; 8
    1b52:	51 f1       	breq	.+84     	; 0x1ba8 <__ultoa_invert+0x5c>
    1b54:	20 31       	cpi	r18, 0x10	; 16
    1b56:	81 f1       	breq	.+96     	; 0x1bb8 <__ultoa_invert+0x6c>
    1b58:	e8 94       	clt
    1b5a:	6f 93       	push	r22
    1b5c:	6e 7f       	andi	r22, 0xFE	; 254
    1b5e:	6e 5f       	subi	r22, 0xFE	; 254
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	af 4f       	sbci	r26, 0xFF	; 255
    1b68:	b1 e0       	ldi	r27, 0x01	; 1
    1b6a:	3e d0       	rcall	.+124    	; 0x1be8 <__ultoa_invert+0x9c>
    1b6c:	b4 e0       	ldi	r27, 0x04	; 4
    1b6e:	3c d0       	rcall	.+120    	; 0x1be8 <__ultoa_invert+0x9c>
    1b70:	67 0f       	add	r22, r23
    1b72:	78 1f       	adc	r23, r24
    1b74:	89 1f       	adc	r24, r25
    1b76:	9a 1f       	adc	r25, r26
    1b78:	a1 1d       	adc	r26, r1
    1b7a:	68 0f       	add	r22, r24
    1b7c:	79 1f       	adc	r23, r25
    1b7e:	8a 1f       	adc	r24, r26
    1b80:	91 1d       	adc	r25, r1
    1b82:	a1 1d       	adc	r26, r1
    1b84:	6a 0f       	add	r22, r26
    1b86:	71 1d       	adc	r23, r1
    1b88:	81 1d       	adc	r24, r1
    1b8a:	91 1d       	adc	r25, r1
    1b8c:	a1 1d       	adc	r26, r1
    1b8e:	20 d0       	rcall	.+64     	; 0x1bd0 <__ultoa_invert+0x84>
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <__ultoa_invert+0x48>
    1b92:	68 94       	set
    1b94:	3f 91       	pop	r19
    1b96:	2a e0       	ldi	r18, 0x0A	; 10
    1b98:	26 9f       	mul	r18, r22
    1b9a:	11 24       	eor	r1, r1
    1b9c:	30 19       	sub	r19, r0
    1b9e:	30 5d       	subi	r19, 0xD0	; 208
    1ba0:	31 93       	st	Z+, r19
    1ba2:	de f6       	brtc	.-74     	; 0x1b5a <__ultoa_invert+0xe>
    1ba4:	cf 01       	movw	r24, r30
    1ba6:	08 95       	ret
    1ba8:	46 2f       	mov	r20, r22
    1baa:	47 70       	andi	r20, 0x07	; 7
    1bac:	40 5d       	subi	r20, 0xD0	; 208
    1bae:	41 93       	st	Z+, r20
    1bb0:	b3 e0       	ldi	r27, 0x03	; 3
    1bb2:	0f d0       	rcall	.+30     	; 0x1bd2 <__ultoa_invert+0x86>
    1bb4:	c9 f7       	brne	.-14     	; 0x1ba8 <__ultoa_invert+0x5c>
    1bb6:	f6 cf       	rjmp	.-20     	; 0x1ba4 <__ultoa_invert+0x58>
    1bb8:	46 2f       	mov	r20, r22
    1bba:	4f 70       	andi	r20, 0x0F	; 15
    1bbc:	40 5d       	subi	r20, 0xD0	; 208
    1bbe:	4a 33       	cpi	r20, 0x3A	; 58
    1bc0:	18 f0       	brcs	.+6      	; 0x1bc8 <__ultoa_invert+0x7c>
    1bc2:	49 5d       	subi	r20, 0xD9	; 217
    1bc4:	31 fd       	sbrc	r19, 1
    1bc6:	40 52       	subi	r20, 0x20	; 32
    1bc8:	41 93       	st	Z+, r20
    1bca:	02 d0       	rcall	.+4      	; 0x1bd0 <__ultoa_invert+0x84>
    1bcc:	a9 f7       	brne	.-22     	; 0x1bb8 <__ultoa_invert+0x6c>
    1bce:	ea cf       	rjmp	.-44     	; 0x1ba4 <__ultoa_invert+0x58>
    1bd0:	b4 e0       	ldi	r27, 0x04	; 4
    1bd2:	a6 95       	lsr	r26
    1bd4:	97 95       	ror	r25
    1bd6:	87 95       	ror	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	ba 95       	dec	r27
    1bde:	c9 f7       	brne	.-14     	; 0x1bd2 <__ultoa_invert+0x86>
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	61 05       	cpc	r22, r1
    1be4:	71 05       	cpc	r23, r1
    1be6:	08 95       	ret
    1be8:	9b 01       	movw	r18, r22
    1bea:	ac 01       	movw	r20, r24
    1bec:	0a 2e       	mov	r0, r26
    1bee:	06 94       	lsr	r0
    1bf0:	57 95       	ror	r21
    1bf2:	47 95       	ror	r20
    1bf4:	37 95       	ror	r19
    1bf6:	27 95       	ror	r18
    1bf8:	ba 95       	dec	r27
    1bfa:	c9 f7       	brne	.-14     	; 0x1bee <__ultoa_invert+0xa2>
    1bfc:	62 0f       	add	r22, r18
    1bfe:	73 1f       	adc	r23, r19
    1c00:	84 1f       	adc	r24, r20
    1c02:	95 1f       	adc	r25, r21
    1c04:	a0 1d       	adc	r26, r0
    1c06:	08 95       	ret

00001c08 <__prologue_saves__>:
    1c08:	2f 92       	push	r2
    1c0a:	3f 92       	push	r3
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	ca 1b       	sub	r28, r26
    1c32:	db 0b       	sbc	r29, r27
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	09 94       	ijmp

00001c40 <__epilogue_restores__>:
    1c40:	2a 88       	ldd	r2, Y+18	; 0x12
    1c42:	39 88       	ldd	r3, Y+17	; 0x11
    1c44:	48 88       	ldd	r4, Y+16	; 0x10
    1c46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c48:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c50:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c52:	b9 84       	ldd	r11, Y+9	; 0x09
    1c54:	c8 84       	ldd	r12, Y+8	; 0x08
    1c56:	df 80       	ldd	r13, Y+7	; 0x07
    1c58:	ee 80       	ldd	r14, Y+6	; 0x06
    1c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c5e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c60:	aa 81       	ldd	r26, Y+2	; 0x02
    1c62:	b9 81       	ldd	r27, Y+1	; 0x01
    1c64:	ce 0f       	add	r28, r30
    1c66:	d1 1d       	adc	r29, r1
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	ed 01       	movw	r28, r26
    1c74:	08 95       	ret

00001c76 <_exit>:
    1c76:	f8 94       	cli

00001c78 <__stop_program>:
    1c78:	ff cf       	rjmp	.-2      	; 0x1c78 <__stop_program>
