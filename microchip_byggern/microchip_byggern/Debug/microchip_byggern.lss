
microchip_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00001c04  00001c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080018e  0080018e  00001d26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002678  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129d  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ce  00000000  00000000  0000591d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00006bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090c  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce5  00000000  00000000  00007a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000871d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <USART_Transmit+0x6>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e0       	ldi	r30, 0x04	; 4
     37c:	fc e1       	ldi	r31, 0x1C	; 28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 38       	cpi	r26, 0x8E	; 142
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	ae e8       	ldi	r26, 0x8E	; 142
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 3e       	cpi	r26, 0xE9	; 233
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <main>
     39e:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include "can.h"

void can_init()
{
    // Set to loopback mode
    mcp2515_init();
     3a6:	0e 94 b4 03 	call	0x768	; 0x768 <mcp2515_init>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	60 ee       	ldi	r22, 0xE0	; 224
     3ae:	8f e0       	ldi	r24, 0x0F	; 15
     3b0:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
     3b4:	08 95       	ret

000003b6 <can_message_send>:
	//TODO: Make some acknowledge action happen, or something like this. Node 2 cant send to node 1
	
	
}
void can_message_send(can_message message)
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2b 97       	sbiw	r28, 0x0b	; 11
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	e9 82       	std	Y+1, r14	; 0x01
     3d4:	fa 82       	std	Y+2, r15	; 0x02
     3d6:	0b 83       	std	Y+3, r16	; 0x03
     3d8:	1c 83       	std	Y+4, r17	; 0x04
     3da:	2d 83       	std	Y+5, r18	; 0x05
     3dc:	3e 83       	std	Y+6, r19	; 0x06
     3de:	4f 83       	std	Y+7, r20	; 0x07
     3e0:	58 87       	std	Y+8, r21	; 0x08
     3e2:	69 87       	std	Y+9, r22	; 0x09
     3e4:	7a 87       	std	Y+10, r23	; 0x0a
     3e6:	8b 87       	std	Y+11, r24	; 0x0b
    // In order to initiate message transmission, the
    // TXBnCTRL.TXREQ bit must be set for each buffer to
    // be transmitted. This can be accomplished by:
    // • Writing to the register via the SPI write command
    
    mcp2515_write(MCP_TXB0SIDH, message.id >> 8);
     3e8:	6f 2d       	mov	r22, r15
     3ea:	81 e3       	ldi	r24, 0x31	; 49
     3ec:	0e 94 4c 03 	call	0x698	; 0x698 <mcp2515_write>
    mcp2515_write(MCP_TXB0SIDL, message.id);
     3f0:	69 81       	ldd	r22, Y+1	; 0x01
     3f2:	82 e3       	ldi	r24, 0x32	; 50
     3f4:	0e 94 4c 03 	call	0x698	; 0x698 <mcp2515_write>
    mcp2515_write(MCP_TXB0DLC, message.data_length);
     3f8:	6b 81       	ldd	r22, Y+3	; 0x03
     3fa:	85 e3       	ldi	r24, 0x35	; 53
     3fc:	0e 94 4c 03 	call	0x698	; 0x698 <mcp2515_write>

    mcp2515_write_bytes(MCP_TXB0D0, message.data, message.data_length);
     400:	4b 81       	ldd	r20, Y+3	; 0x03
     402:	be 01       	movw	r22, r28
     404:	6c 5f       	subi	r22, 0xFC	; 252
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	86 e3       	ldi	r24, 0x36	; 54
     40a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <mcp2515_write_bytes>
	
	mcp2515_bit_modify(MCP_TXB0CTRL, 0b00001000, 0b00001000);
     40e:	48 e0       	ldi	r20, 0x08	; 8
     410:	68 e0       	ldi	r22, 0x08	; 8
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
    
    // • Sending the SPI RTS command
    mcp2515_request_to_send();
     418:	0e 94 8b 03 	call	0x716	; 0x716 <mcp2515_request_to_send>
    // • Setting the TXnRTS pin low for the particular transmit buffer(s) that are to be transmitted
    // If configured to operate as a request-to-send pin, the pin is mapped into the respective TXBnCTRL.TXREQ bit for the transmit buffer
}
     41c:	2b 96       	adiw	r28, 0x0b	; 11
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	08 95       	ret

00000436 <can_data_receive>:
can_message can_data_receive()
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	8c 01       	movw	r16, r24
    can_message message;

    message.id = mcp2515_read(MCP_RXB0SIDH) << 8 | mcp2515_read(MCP_RXB0SIDL);
     440:	81 e6       	ldi	r24, 0x61	; 97
     442:	0e 94 3a 03 	call	0x674	; 0x674 <mcp2515_read>
     446:	c8 2f       	mov	r28, r24
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	dc 2f       	mov	r29, r28
     44c:	cc 27       	eor	r28, r28
     44e:	82 e6       	ldi	r24, 0x62	; 98
     450:	0e 94 3a 03 	call	0x674	; 0x674 <mcp2515_read>
     454:	c8 2b       	or	r28, r24
     456:	f8 01       	movw	r30, r16
     458:	d1 83       	std	Z+1, r29	; 0x01
     45a:	c0 83       	st	Z, r28
    message.data[0] = mcp2515_read(MCP_RXB0D0);
     45c:	86 e6       	ldi	r24, 0x66	; 102
     45e:	0e 94 3a 03 	call	0x674	; 0x674 <mcp2515_read>
     462:	f8 01       	movw	r30, r16
     464:	83 83       	std	Z+3, r24	; 0x03
    message.data_length = mcp2515_read(MCP_RXB0DLC);
     466:	85 e6       	ldi	r24, 0x65	; 101
     468:	0e 94 3a 03 	call	0x674	; 0x674 <mcp2515_read>
     46c:	f8 01       	movw	r30, r16
     46e:	82 83       	std	Z+2, r24	; 0x02

    return message;
}
     470:	c8 01       	movw	r24, r16
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <interrupt_init>:

#include "interrupts.h"

interrupt_init(){
	
	GICR &= ~(1 << INT2); // Disable External Interrupt 2
     47c:	8b b7       	in	r24, 0x3b	; 59
     47e:	8f 7d       	andi	r24, 0xDF	; 223
     480:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7); // Enable global interrupts
     482:	8f b7       	in	r24, 0x3f	; 63
     484:	80 68       	ori	r24, 0x80	; 128
     486:	8f bf       	out	0x3f, r24	; 63
	EMCUCR &= ~(1 << ISC2); // Interrupt on Falling edge
     488:	86 b7       	in	r24, 0x36	; 54
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	86 bf       	out	0x36, r24	; 54
	GICR |= (1 << INT2); // Enable External Interrupt 2
     48e:	8b b7       	in	r24, 0x3b	; 59
     490:	80 62       	ori	r24, 0x20	; 32
     492:	8b bf       	out	0x3b, r24	; 59
     494:	08 95       	ret

00000496 <__vector_3>:

}

ISR(INT2_vect){
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	ac 97       	sbiw	r28, 0x2c	; 44
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	cd bf       	out	0x3d, r28	; 61
	printf("received message");
     4ca:	8a e0       	ldi	r24, 0x0A	; 10
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
	printf("%d ", can_data_receive().data[0]);
     4d6:	ce 01       	movw	r24, r28
     4d8:	82 96       	adiw	r24, 0x22	; 34
     4da:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     4de:	8d a1       	ldd	r24, Y+37	; 0x25
     4e0:	1f 92       	push	r1
     4e2:	8f 93       	push	r24
     4e4:	0b e1       	ldi	r16, 0x1B	; 27
     4e6:	11 e0       	ldi	r17, 0x01	; 1
     4e8:	1f 93       	push	r17
     4ea:	0f 93       	push	r16
     4ec:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
	printf("%d ", can_data_receive().data[1]);
     4f0:	ce 01       	movw	r24, r28
     4f2:	47 96       	adiw	r24, 0x17	; 23
     4f4:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     4f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4fa:	1f 92       	push	r1
     4fc:	8f 93       	push	r24
     4fe:	1f 93       	push	r17
     500:	0f 93       	push	r16
     502:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
	printf("%d ", can_data_receive().data[2]);
     506:	ce 01       	movw	r24, r28
     508:	0c 96       	adiw	r24, 0x0c	; 12
     50a:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     50e:	89 89       	ldd	r24, Y+17	; 0x11
     510:	1f 92       	push	r1
     512:	8f 93       	push	r24
     514:	1f 93       	push	r17
     516:	0f 93       	push	r16
     518:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
	printf("%d ", can_data_receive().data[3]);
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 1b 02 	call	0x436	; 0x436 <can_data_receive>
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	1f 92       	push	r1
     528:	8f 93       	push	r24
     52a:	1f 93       	push	r17
     52c:	0f 93       	push	r16
     52e:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
    mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8c e2       	ldi	r24, 0x2C	; 44
     538:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	ac 96       	adiw	r28, 0x2c	; 44
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <joystick_loop>:

#include "joystick_transceiver.h"

void joystick_loop(input_t input, int current_menu)
{
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	62 97       	sbiw	r28, 0x12	; 18
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	40 2f       	mov	r20, r16
	can_message msg;
	msg.id = 0;
     59a:	1a 82       	std	Y+2, r1	; 0x02
     59c:	19 82       	std	Y+1, r1	; 0x01
	msg.data_length = 4;
	
	msg.data[0] = input.slider_2;
     59e:	15 2f       	mov	r17, r21
	msg.data[1] = input.joystick_x;
	msg.data[2] = input.button_left;
     5a0:	37 2f       	mov	r19, r23
	
	//printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	//printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	//printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);
	
	can_message_send(msg);
     5a2:	e1 2c       	mov	r14, r1
     5a4:	fa 80       	ldd	r15, Y+2	; 0x02
     5a6:	04 e0       	ldi	r16, 0x04	; 4
     5a8:	58 85       	ldd	r21, Y+8	; 0x08
     5aa:	69 85       	ldd	r22, Y+9	; 0x09
     5ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     5ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <can_message_send>
}
     5b4:	62 96       	adiw	r28, 0x12	; 18
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	08 95       	ret

000005ce <main>:
#include "can.h"
#include "interrupts.h"
#include "menu.h"

int main(void)
{
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	27 97       	sbiw	r28, 0x07	; 7
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
	usart_init(USART_BAUD_RATE_REGISTER);
     5e2:	8f e1       	ldi	r24, 0x1F	; 31
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 a8 05 	call	0xb50	; 0xb50 <usart_init>
	printf("hello world ");
     5ea:	8f e1       	ldi	r24, 0x1F	; 31
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>

	xmem_init();
     5f6:	0e 94 21 07 	call	0xe42	; 0xe42 <xmem_init>
	adc_init();
     5fa:	0e 94 bb 05 	call	0xb76	; 0xb76 <adc_init>
	OLED_init();
     5fe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <OLED_init>
	menu_init();
     602:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <menu_init>
	interrupt_init();
     606:	0e 94 3e 02 	call	0x47c	; 0x47c <interrupt_init>
	can_init();
     60a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
	
	//int j = 0;
	input_t input;
	while(1)
	{
		for(int i = 0; i < 100; i++)
     612:	e1 2c       	mov	r14, r1
     614:	f1 2c       	mov	r15, r1
     616:	20 c0       	rjmp	.+64     	; 0x658 <main+0x8a>
		{
			input = input_read();
     618:	0e 94 dd 05 	call	0xbba	; 0xbba <input_read>
     61c:	29 83       	std	Y+1, r18	; 0x01
     61e:	3a 83       	std	Y+2, r19	; 0x02
     620:	4b 83       	std	Y+3, r20	; 0x03
     622:	5c 83       	std	Y+4, r21	; 0x04
     624:	6d 83       	std	Y+5, r22	; 0x05
     626:	7e 83       	std	Y+6, r23	; 0x06
     628:	8f 83       	std	Y+7, r24	; 0x07
			menu_input_loop(input);
     62a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <menu_input_loop>
			joystick_loop(input, current_menu);
     62e:	00 91 d7 01 	lds	r16, 0x01D7	; 0x8001d7 <current_menu>
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	29 81       	ldd	r18, Y+1	; 0x01
     636:	3a 81       	ldd	r19, Y+2	; 0x02
     638:	4b 81       	ldd	r20, Y+3	; 0x03
     63a:	5c 81       	ldd	r21, Y+4	; 0x04
     63c:	6d 81       	ldd	r22, Y+5	; 0x05
     63e:	7e 81       	ldd	r23, Y+6	; 0x06
     640:	8f 81       	ldd	r24, Y+7	; 0x07
     642:	0e 94 be 02 	call	0x57c	; 0x57c <joystick_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     646:	89 ef       	ldi	r24, 0xF9	; 249
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <main+0x7c>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <main+0x82>
     650:	00 00       	nop
	
	//int j = 0;
	input_t input;
	while(1)
	{
		for(int i = 0; i < 100; i++)
     652:	9f ef       	ldi	r25, 0xFF	; 255
     654:	e9 1a       	sub	r14, r25
     656:	f9 0a       	sbc	r15, r25
     658:	84 e6       	ldi	r24, 0x64	; 100
     65a:	e8 16       	cp	r14, r24
     65c:	f1 04       	cpc	r15, r1
     65e:	e4 f2       	brlt	.-72     	; 0x618 <main+0x4a>
			input = input_read();
			menu_input_loop(input);
			joystick_loop(input, current_menu);
			_delay_ms(1);
		}
		menu_draw_loop(input);
     660:	29 81       	ldd	r18, Y+1	; 0x01
     662:	3a 81       	ldd	r19, Y+2	; 0x02
     664:	4b 81       	ldd	r20, Y+3	; 0x03
     666:	5c 81       	ldd	r21, Y+4	; 0x04
     668:	6d 81       	ldd	r22, Y+5	; 0x05
     66a:	7e 81       	ldd	r23, Y+6	; 0x06
     66c:	8f 81       	ldd	r24, Y+7	; 0x07
     66e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_draw_loop>
	}
     672:	cf cf       	rjmp	.-98     	; 0x612 <main+0x44>

00000674 <mcp2515_read>:
    
    // More initialization
    return 0;
}
uint8_t mcp2515_read ( uint8_t address )
{
     674:	cf 93       	push	r28
     676:	c8 2f       	mov	r28, r24
    uint8_t result ;
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     678:	88 b3       	in	r24, 0x18	; 24
     67a:	8f 7e       	andi	r24, 0xEF	; 239
     67c:	88 bb       	out	0x18, r24	; 24
    SPI_write ( MCP_READ ); // Send read instruction
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write ( address ); // Send address
     684:	8c 2f       	mov	r24, r28
     686:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    result = SPI_read () ; // Read result
     68a:	0e 94 99 05 	call	0xb32	; 0xb32 <SPI_read>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     68e:	98 b3       	in	r25, 0x18	; 24
     690:	90 61       	ori	r25, 0x10	; 16
     692:	98 bb       	out	0x18, r25	; 24
    return result ;
}
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <mcp2515_write>:

void mcp2515_write(uint8_t address, uint8_t data)
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	d8 2f       	mov	r29, r24
     69e:	c6 2f       	mov	r28, r22
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     6a0:	88 b3       	in	r24, 0x18	; 24
     6a2:	8f 7e       	andi	r24, 0xEF	; 239
     6a4:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write (address);
     6ac:	8d 2f       	mov	r24, r29
     6ae:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write (data);
     6b2:	8c 2f       	mov	r24, r28
     6b4:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     6b8:	88 b3       	in	r24, 0x18	; 24
     6ba:	80 61       	ori	r24, 0x10	; 16
     6bc:	88 bb       	out	0x18, r24	; 24
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <mcp2515_write_bytes>:

void mcp2515_write_bytes(uint8_t address, uint8_t* data, uint8_t data_length)
{
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	c8 2f       	mov	r28, r24
     6d0:	7b 01       	movw	r14, r22
     6d2:	14 2f       	mov	r17, r20
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
     6d4:	88 b3       	in	r24, 0x18	; 24
     6d6:	8f 7e       	andi	r24, 0xEF	; 239
     6d8:	88 bb       	out	0x18, r24	; 24
    
    SPI_write (MCP_WRITE);
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write (address);
     6e0:	8c 2f       	mov	r24, r28
     6e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    for(int i = 0; i < data_length; i++)
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <mcp2515_write_bytes+0x36>
    {
        SPI_write (data[i]);
     6ec:	f7 01       	movw	r30, r14
     6ee:	ec 0f       	add	r30, r28
     6f0:	fd 1f       	adc	r31, r29
     6f2:	80 81       	ld	r24, Z
     6f4:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    // MCU selects one of the slaves by setting its corresponding SS signal to low
    PORTB &= ~(1 << PB4 ); // Select CAN - controller
    
    SPI_write (MCP_WRITE);
    SPI_write (address);
    for(int i = 0; i < data_length; i++)
     6f8:	21 96       	adiw	r28, 0x01	; 1
     6fa:	81 2f       	mov	r24, r17
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	c8 17       	cp	r28, r24
     700:	d9 07       	cpc	r29, r25
     702:	a4 f3       	brlt	.-24     	; 0x6ec <mcp2515_write_bytes+0x28>
    {
        SPI_write (data[i]);
    }
    
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     704:	88 b3       	in	r24, 0x18	; 24
     706:	80 61       	ori	r24, 0x10	; 16
     708:	88 bb       	out	0x18, r24	; 24
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	08 95       	ret

00000716 <mcp2515_request_to_send>:

void mcp2515_request_to_send()
{
    SPI_write(MCP_RTS_TX0);
     716:	81 e8       	ldi	r24, 0x81	; 129
     718:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
     71c:	08 95       	ret

0000071e <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	18 2f       	mov	r17, r24
     726:	d6 2f       	mov	r29, r22
     728:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
     72a:	88 b3       	in	r24, 0x18	; 24
     72c:	8f 7e       	andi	r24, 0xEF	; 239
     72e:	88 bb       	out	0x18, r24	; 24
    SPI_write(MCP_BITMOD);
     730:	85 e0       	ldi	r24, 0x05	; 5
     732:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write(address);
     736:	81 2f       	mov	r24, r17
     738:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write(mask);
     73c:	8d 2f       	mov	r24, r29
     73e:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    SPI_write(data);
     742:	8c 2f       	mov	r24, r28
     744:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
     748:	88 b3       	in	r24, 0x18	; 24
     74a:	80 61       	ori	r24, 0x10	; 16
     74c:	88 bb       	out	0x18, r24	; 24
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	08 95       	ret

00000756 <mcp2515_reset>:
void mcp2515_reset()
{
    SPI_write(MCP_RESET);
     756:	80 ec       	ldi	r24, 0xC0	; 192
     758:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_write>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	60 ee       	ldi	r22, 0xE0	; 224
     760:	8f e0       	ldi	r24, 0x0F	; 15
     762:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
     766:	08 95       	ret

00000768 <mcp2515_init>:
#include "mcp.h"

uint8_t mcp2515_init ()
{
    DDRB |= (1 << PB4 ); // Set CS - pin as output
     768:	87 b3       	in	r24, 0x17	; 23
     76a:	80 61       	ori	r24, 0x10	; 16
     76c:	87 bb       	out	0x17, r24	; 23

    
    SPI_init () ; // Initialize SPI
     76e:	0e 94 88 05 	call	0xb10	; 0xb10 <SPI_init>
    mcp2515_reset () ; // Send reset - command
     772:	0e 94 ab 03 	call	0x756	; 0x756 <mcp2515_reset>
    // Self - test
	
    uint8_t value = mcp2515_read ( MCP_CANSTAT  );
     776:	8e e0       	ldi	r24, 0x0E	; 14
     778:	0e 94 3a 03 	call	0x674	; 0x674 <mcp2515_read>
	
    if (( value & MODE_MASK ) != MODE_CONFIG ) {
     77c:	80 7e       	andi	r24, 0xE0	; 224
     77e:	80 38       	cpi	r24, 0x80	; 128
     780:	31 f0       	breq	.+12     	; 0x78e <mcp2515_init+0x26>
        printf (" MCP2515 is NOT in configuration mode after reset !\n");
     782:	8c e2       	ldi	r24, 0x2C	; 44
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 c4 09 	call	0x1388	; 0x1388 <puts>
        return 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	08 95       	ret
    }
    mcp2515_bit_modify(MCP_TXRTSCTRL, 0b00000001, 0b00000001);
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	8d e0       	ldi	r24, 0x0D	; 13
     794:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	
    mcp2515_bit_modify(MCP_CANINTE, 0b00000001, 0b00000001); // Enable Message received interrupt
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	8b e2       	ldi	r24, 0x2B	; 43
     79e:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	
	// Can bus Bit timing
	mcp2515_bit_modify(MCP_CNF1, 0b00111111, 0b00000011); // T_Q = 500ns
     7a2:	43 e0       	ldi	r20, 0x03	; 3
     7a4:	6f e3       	ldi	r22, 0x3F	; 63
     7a6:	8a e2       	ldi	r24, 0x2A	; 42
     7a8:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF1, 0b11000000, 0b00000000); // Synchronization Jump Width Length = 1*T_Q
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	60 ec       	ldi	r22, 0xC0	; 192
     7b0:	8a e2       	ldi	r24, 0x2A	; 42
     7b2:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF2, 0b11111111, 0b10110001); // Phase 1 length = 7*T_Q, Propagation Segment = 2*T_Q, BUs Line sampled once and Length of Phase 2 determined by CNF3
     7b6:	41 eb       	ldi	r20, 0xB1	; 177
     7b8:	6f ef       	ldi	r22, 0xFF	; 255
     7ba:	89 e2       	ldi	r24, 0x29	; 41
     7bc:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CNF3, 0b00000111, 0b00000101); // Phase 2 length = 6*T_Q
     7c0:	45 e0       	ldi	r20, 0x05	; 5
     7c2:	67 e0       	ldi	r22, 0x07	; 7
     7c4:	88 e2       	ldi	r24, 0x28	; 40
     7c6:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0b01100000); // Disable masks - receive all messages
     7ca:	40 e6       	ldi	r20, 0x60	; 96
     7cc:	60 e6       	ldi	r22, 0x60	; 96
     7ce:	80 e6       	ldi	r24, 0x60	; 96
     7d0:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp2515_bit_modify>
	//printf("%02x ", mcp2515_read(MCP_CNF2));
	//printf("%02x ", mcp2515_read(MCP_CNF3));
	
    
    // More initialization
    return 0;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
}
     7d6:	08 95       	ret

000007d8 <menu_init>:
	{ .number_of_items=3, .select_jump={0, 0, 0, 0, 0} }
};

void menu_init()
{
	selected_position = 0;
     7d8:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <selected_position>
	current_menu = 0;
     7dc:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <current_menu>
	OLED_pos(0, 0);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <OLED_pos>
	OLED_reset();
     7ec:	0e 94 bf 04 	call	0x97e	; 0x97e <OLED_reset>
     7f0:	08 95       	ret

000007f2 <menu_input_loop>:
}
void menu_input_loop(input_t input)
{
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	27 97       	sbiw	r28, 0x07	; 7
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	29 83       	std	Y+1, r18	; 0x01
     80a:	3a 83       	std	Y+2, r19	; 0x02
     80c:	4b 83       	std	Y+3, r20	; 0x03
     80e:	5c 83       	std	Y+4, r21	; 0x04
     810:	6d 83       	std	Y+5, r22	; 0x05
     812:	7e 83       	std	Y+6, r23	; 0x06
     814:	8f 83       	std	Y+7, r24	; 0x07
	if(input.direction == UP && last_input.direction != UP)
     816:	18 2f       	mov	r17, r24
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	c9 f4       	brne	.+50     	; 0x84e <menu_input_loop+0x5c>
     81c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <last_input+0x6>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	a9 f0       	breq	.+42     	; 0x84e <menu_input_loop+0x5c>
	{
		selected_position = MAX(selected_position-1, 0);
     824:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <selected_position>
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	12 f4       	brpl	.+4      	; 0x832 <menu_input_loop+0x40>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <selected_position>
		printf("UP %d", selected_position);
     836:	1f 92       	push	r1
     838:	8f 93       	push	r24
     83a:	80 e6       	ldi	r24, 0x60	; 96
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
	}
	if(input.direction == DOWN && last_input.direction != DOWN)
     84e:	13 30       	cpi	r17, 0x03	; 3
     850:	d9 f4       	brne	.+54     	; 0x888 <menu_input_loop+0x96>
     852:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <last_input+0x6>
     856:	83 30       	cpi	r24, 0x03	; 3
     858:	b9 f0       	breq	.+46     	; 0x888 <menu_input_loop+0x96>
	{
		selected_position = MIN(selected_position+1, 2);
     85a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <selected_position>
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	83 30       	cpi	r24, 0x03	; 3
     864:	91 05       	cpc	r25, r1
     866:	14 f0       	brlt	.+4      	; 0x86c <menu_input_loop+0x7a>
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <selected_position>
		printf("DOWN %d", selected_position);
     870:	1f 92       	push	r1
     872:	8f 93       	push	r24
     874:	86 e6       	ldi	r24, 0x66	; 102
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	0e 94 ae 09 	call	0x135c	; 0x135c <printf>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
	}
	
	if(input.button_right && (!last_input.button_right))
     888:	8d 81       	ldd	r24, Y+5	; 0x05
     88a:	88 23       	and	r24, r24
     88c:	b9 f0       	breq	.+46     	; 0x8bc <menu_input_loop+0xca>
     88e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <last_input+0x4>
     892:	81 11       	cpse	r24, r1
     894:	13 c0       	rjmp	.+38     	; 0x8bc <menu_input_loop+0xca>
	{
		current_menu = menu_info[current_menu].select_jump[selected_position];
     896:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <current_menu>
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <selected_position>
     8a0:	fc 01       	movw	r30, r24
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	e8 0f       	add	r30, r24
     8a8:	f9 1f       	adc	r31, r25
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	ee 57       	subi	r30, 0x7E	; 126
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	e2 0f       	add	r30, r18
     8b4:	f1 1d       	adc	r31, r1
     8b6:	81 81       	ldd	r24, Z+1	; 0x01
     8b8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <current_menu>
	}
	
	/*printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
	printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
	printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);*/
	last_input = input;
     8bc:	87 e0       	ldi	r24, 0x07	; 7
     8be:	fe 01       	movw	r30, r28
     8c0:	31 96       	adiw	r30, 0x01	; 1
     8c2:	a8 ed       	ldi	r26, 0xD8	; 216
     8c4:	b1 e0       	ldi	r27, 0x01	; 1
     8c6:	01 90       	ld	r0, Z+
     8c8:	0d 92       	st	X+, r0
     8ca:	8a 95       	dec	r24
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <menu_input_loop+0xd4>
}
     8ce:	27 96       	adiw	r28, 0x07	; 7
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	08 95       	ret

000008e2 <menu_draw_loop>:
void menu_draw_loop(input_t input)
{
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	27 97       	sbiw	r28, 0x07	; 7
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
     8fa:	0e 94 bf 04 	call	0x97e	; 0x97e <OLED_reset>
	//}
	
	for(int row = 0; row < 1; row++)
     8fe:	00 e0       	ldi	r16, 0x00	; 0
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	1b c0       	rjmp	.+54     	; 0x93a <menu_draw_loop+0x58>
	{
		OLED_pos(10 + row*8, 10);
     904:	c8 01       	movw	r24, r16
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	6a e0       	ldi	r22, 0x0A	; 10
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0a 96       	adiw	r24, 0x0a	; 10
     918:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <OLED_pos>
		OLED_print(menu_items[current_menu][row]);
     91c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <current_menu>
     920:	f8 01       	movw	r30, r16
     922:	e8 0f       	add	r30, r24
     924:	f1 1d       	adc	r31, r1
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	ea 5f       	subi	r30, 0xFA	; 250
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	0e 94 5f 05 	call	0xabe	; 0xabe <OLED_print>
	//if(input.direction != last_input.direction || input.button_left != last_input.button_left)
	//{
	OLED_reset();
	//}
	
	for(int row = 0; row < 1; row++)
     936:	0f 5f       	subi	r16, 0xFF	; 255
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	10 16       	cp	r1, r16
     93c:	11 06       	cpc	r1, r17
     93e:	14 f7       	brge	.-60     	; 0x904 <menu_draw_loop+0x22>
	{
		OLED_pos(10 + row*8, 10);
		OLED_print(menu_items[current_menu][row]);
	}
	OLED_print_arrow(10 + selected_position*8, 0);
     940:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <selected_position>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0a 96       	adiw	r24, 0x0a	; 10
     958:	0e 94 76 05 	call	0xaec	; 0xaec <OLED_print_arrow>
     95c:	27 96       	adiw	r28, 0x07	; 7
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <OLED_write_data>:
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
}
void OLED_write_data(char data)
{
	volatile char* oled_data_register = (char*) BASE_ADDRESS_OLED_DATA;
	oled_data_register[0] = data;
     972:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1017>
     976:	08 95       	ret

00000978 <OLED_write_command>:
}
void OLED_write_command(char data)
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
     978:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe17>
     97c:	08 95       	ret

0000097e <OLED_reset>:
} // PDF:"OLED LY190-128064" section 9.4



void OLED_reset()
{
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
	for (int page = 0; page < 8; page++)
     986:	00 e0       	ldi	r16, 0x00	; 0
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	16 c0       	rjmp	.+44     	; 0x9b8 <OLED_reset+0x3a>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
     98c:	80 eb       	ldi	r24, 0xB0	; 176
     98e:	80 0f       	add	r24, r16
     990:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
     99a:	80 e1       	ldi	r24, 0x10	; 16
     99c:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
		
		for (int i = 0; i < 128; i++)
     9a0:	c0 e0       	ldi	r28, 0x00	; 0
     9a2:	d0 e0       	ldi	r29, 0x00	; 0
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <OLED_reset+0x30>
		{
			OLED_write_data(0);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
		
		for (int i = 0; i < 128; i++)
     9ac:	21 96       	adiw	r28, 0x01	; 1
     9ae:	c0 38       	cpi	r28, 0x80	; 128
     9b0:	d1 05       	cpc	r29, r1
     9b2:	cc f3       	brlt	.-14     	; 0x9a6 <OLED_reset+0x28>



void OLED_reset()
{
	for (int page = 0; page < 8; page++)
     9b4:	0f 5f       	subi	r16, 0xFF	; 255
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
     9b8:	08 30       	cpi	r16, 0x08	; 8
     9ba:	11 05       	cpc	r17, r1
     9bc:	3c f3       	brlt	.-50     	; 0x98c <OLED_reset+0xe>
		for (int i = 0; i < 128; i++)
		{
			OLED_write_data(0);
		}
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <OLED_pos>:
void OLED_clear_line(uint8_t line)
{
	
}
void OLED_pos(uint8_t row, uint8_t column)
{
     9c8:	cf 93       	push	r28
     9ca:	c6 2f       	mov	r28, r22
	OLED_write_command(0xb0 + row / 8); // Set the page start address of the target display location by command B0h to B7h
     9cc:	86 95       	lsr	r24
     9ce:	86 95       	lsr	r24
     9d0:	86 95       	lsr	r24
     9d2:	80 55       	subi	r24, 0x50	; 80
     9d4:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x00 + column % 16); // Set the lower start column address of pointer by command 00h~0Fh.
     9d8:	8c 2f       	mov	r24, r28
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
     9e0:	8c 2f       	mov	r24, r28
     9e2:	82 95       	swap	r24
     9e4:	8f 70       	andi	r24, 0x0F	; 15
     9e6:	80 5f       	subi	r24, 0xF0	; 240
     9e8:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
}
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <OLED_init>:
#include <avr/pgmspace.h>

void OLED_init()
{
	
	OLED_write_command(0xae); // display off
     9f0:	8e ea       	ldi	r24, 0xAE	; 174
     9f2:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xa1); //segment remap
     9f6:	81 ea       	ldi	r24, 0xA1	; 161
     9f8:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xda); //common pads hardware: alternative
     9fc:	8a ed       	ldi	r24, 0xDA	; 218
     9fe:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x12);
     a02:	82 e1       	ldi	r24, 0x12	; 18
     a04:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xc8); //common output scan direction:com63~com0
     a08:	88 ec       	ldi	r24, 0xC8	; 200
     a0a:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xa8); //multiplex ration mode:63
     a0e:	88 ea       	ldi	r24, 0xA8	; 168
     a10:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x3f);
     a14:	8f e3       	ldi	r24, 0x3F	; 63
     a16:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xd5); //display divide ratio/osc. freq. mode
     a1a:	85 ed       	ldi	r24, 0xD5	; 213
     a1c:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x80);
     a20:	80 e8       	ldi	r24, 0x80	; 128
     a22:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x81); //contrast control
     a26:	81 e8       	ldi	r24, 0x81	; 129
     a28:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x50);
     a2c:	80 e5       	ldi	r24, 0x50	; 80
     a2e:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xd9); //set pre-charge period
     a32:	89 ed       	ldi	r24, 0xD9	; 217
     a34:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x21);
     a38:	81 e2       	ldi	r24, 0x21	; 33
     a3a:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x20); //Set Memory Addressing Mode
     a3e:	80 e2       	ldi	r24, 0x20	; 32
     a40:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x02);
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xdb); //VCOM deselect level mode
     a4a:	8b ed       	ldi	r24, 0xDB	; 219
     a4c:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x30);
     a50:	80 e3       	ldi	r24, 0x30	; 48
     a52:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xad); //master configuration
     a56:	8d ea       	ldi	r24, 0xAD	; 173
     a58:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0x00);
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xa4); //out follows RAM content
     a62:	84 ea       	ldi	r24, 0xA4	; 164
     a64:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xa6); //set normal display
     a68:	86 ea       	ldi	r24, 0xA6	; 166
     a6a:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	OLED_write_command(0xaf); // display on
     a6e:	8f ea       	ldi	r24, 0xAF	; 175
     a70:	0e 94 bc 04 	call	0x978	; 0x978 <OLED_write_command>
	//OLED_write_command(0xa5);
	/*OLED_write_command(0xb0); // Set the page start address of the target display location by command B0h to B7h
	OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
	OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh*/
	
	OLED_reset();
     a74:	0e 94 bf 04 	call	0x97e	; 0x97e <OLED_reset>
	OLED_pos(0, 0);
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <OLED_pos>
     a80:	08 95       	ret

00000a82 <OLED_print_character>:
		i++;
	}
}

void OLED_print_character(char character)
{
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	18 2f       	mov	r17, r24
	for (int row = 0; row < 8; row++)
     a8a:	c0 e0       	ldi	r28, 0x00	; 0
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	10 c0       	rjmp	.+32     	; 0xab0 <OLED_print_character+0x2e>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
     a90:	e1 2f       	mov	r30, r17
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ec 0f       	add	r30, r28
     aa2:	fd 1f       	adc	r31, r29
     aa4:	e0 59       	subi	r30, 0x90	; 144
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	84 91       	lpm	r24, Z
     aaa:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
	}
}

void OLED_print_character(char character)
{
	for (int row = 0; row < 8; row++)
     aae:	21 96       	adiw	r28, 0x01	; 1
     ab0:	c8 30       	cpi	r28, 0x08	; 8
     ab2:	d1 05       	cpc	r29, r1
     ab4:	6c f3       	brlt	.-38     	; 0xa90 <OLED_print_character+0xe>
	{
		OLED_write_data(pgm_read_byte(&(font8[character][row])));
	}
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	08 95       	ret

00000abe <OLED_print>:
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	8c 01       	movw	r16, r24
	int i = 0;
     ac8:	c0 e0       	ldi	r28, 0x00	; 0
     aca:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i] != '\0')
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <OLED_print+0x18>
	{
		OLED_print_character(string[i] - 32);
     ace:	80 52       	subi	r24, 0x20	; 32
     ad0:	0e 94 41 05 	call	0xa82	; 0xa82 <OLED_print_character>
		i++;
     ad4:	21 96       	adiw	r28, 0x01	; 1
	oled_command_register[0] = data;
}
void OLED_print(char* string)
{
	int i = 0;
	while(string[i] != '\0')
     ad6:	f8 01       	movw	r30, r16
     ad8:	ec 0f       	add	r30, r28
     ada:	fd 1f       	adc	r31, r29
     adc:	80 81       	ld	r24, Z
     ade:	81 11       	cpse	r24, r1
     ae0:	f6 cf       	rjmp	.-20     	; 0xace <OLED_print+0x10>
	{
		OLED_print_character(string[i] - 32);
		i++;
	}
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	08 95       	ret

00000aec <OLED_print_arrow>:
void OLED_set_brightness(uint8_t lvl);


void OLED_print_arrow ( uint8_t row , uint8_t col )
{
	OLED_pos ( row , col );
     aec:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <OLED_pos>
	OLED_write_data (0b00011000 );
     af0:	88 e1       	ldi	r24, 0x18	; 24
     af2:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
	OLED_write_data (0b00011000 );
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
	OLED_write_data (0b01111110 );
     afc:	8e e7       	ldi	r24, 0x7E	; 126
     afe:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
	OLED_write_data (0b00111100 );
     b02:	8c e3       	ldi	r24, 0x3C	; 60
     b04:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
	OLED_write_data (0b00011000 );
     b08:	88 e1       	ldi	r24, 0x18	; 24
     b0a:	0e 94 b9 04 	call	0x972	; 0x972 <OLED_write_data>
     b0e:	08 95       	ret

00000b10 <SPI_init>:
#include <avr/io.h>

void SPI_init(){
	
	/* Set MOSI, SCK output, all others input */
	DDRB |= (1 << PB5) | (1 << PB7);
     b10:	87 b3       	in	r24, 0x17	; 23
     b12:	80 6a       	ori	r24, 0xA0	; 160
     b14:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	//SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPIE) ;
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) ;
     b16:	8d b1       	in	r24, 0x0d	; 13
     b18:	81 65       	ori	r24, 0x51	; 81
     b1a:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << SPR1) ;
     b1c:	8d b1       	in	r24, 0x0d	; 13
     b1e:	8d 7f       	andi	r24, 0xFD	; 253
     b20:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1 << SPI2X) ;
     b22:	8e b1       	in	r24, 0x0e	; 14
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	8e b9       	out	0x0e, r24	; 14
     b28:	08 95       	ret

00000b2a <SPI_write>:
}

void SPI_write(char cData){
	
	/* Start transmission */
	SPDR = cData;
     b2a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     b2c:	77 9b       	sbis	0x0e, 7	; 14
     b2e:	fe cf       	rjmp	.-4      	; 0xb2c <SPI_write+0x2>
	;
	
	
	
}
     b30:	08 95       	ret

00000b32 <SPI_read>:

char SPI_read(){
	
	/* Start transmission */
	SPDR = 0b00000000;
     b32:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
     b34:	77 9b       	sbis	0x0e, 7	; 14
     b36:	fe cf       	rjmp	.-4      	; 0xb34 <SPI_read+0x2>
	;
	/* Received byte is found on the same register */
	return SPDR;
     b38:	8f b1       	in	r24, 0x0f	; 15

     b3a:	08 95       	ret

00000b3c <USART_Transmit>:
    
}
void USART_Transmit(unsigned char data)
{
    // Wait until the transmitter buffer is empty
    while ( !( UCSR0A & (1<<UDRE0)) ); // USART Control and Status Register A, USART Data Register Empty
     b3c:	5d 9b       	sbis	0x0b, 5	; 11
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <USART_Transmit>
    // Send data
    UDR0 = data; // USART Data Register
     b40:	8c b9       	out	0x0c, r24	; 12
     b42:	08 95       	ret

00000b44 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
     b44:	5f 9b       	sbis	0x0b, 7	; 11
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <USART_Receive+0x8>
        return '\0';
    // Return data received
    return UDR0; // USART Data Register
     b48:	8c b1       	in	r24, 0x0c	; 12
     b4a:	08 95       	ret

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
        return '\0';
     b4c:	80 e0       	ldi	r24, 0x00	; 0
    // Return data received
    return UDR0; // USART Data Register
     b4e:	08 95       	ret

00000b50 <usart_init>:

// static FILE usart_stream_write = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
// static FILE usart_stream_read = FDEV_SETUP_STREAM(NULL, USART_Transmit, _FDEV_SETUP_READ);

void usart_init(unsigned int usart_baud_rate_register)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	c8 2f       	mov	r28, r24
     b56:	d9 2f       	mov	r29, r25
    // Open read/write stream over USART https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html#gab599ddf60819df4cc993c724a83cb1a4
    fdevopen(USART_Transmit, USART_Receive);
     b58:	62 ea       	ldi	r22, 0xA2	; 162
     b5a:	75 e0       	ldi	r23, 0x05	; 5
     b5c:	8e e9       	ldi	r24, 0x9E	; 158
     b5e:	95 e0       	ldi	r25, 0x05	; 5
     b60:	0e 94 63 09 	call	0x12c6	; 0x12c6 <fdevopen>
    // Set baud rate registers
    UBRR0H = (unsigned char)(usart_baud_rate_register>>8); // usart_baud_rate_register_high
     b64:	d0 bd       	out	0x20, r29	; 32
    UBRR0L = (unsigned char)usart_baud_rate_register; // usart_baud_rate_register_low
     b66:	c9 b9       	out	0x09, r28	; 9
    
    // Enable RX and TX registers
    UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Universal Synchronous Asynchronous Receiver Transmitter Register B, RX Enable, TX Enable
     b68:	88 e1       	ldi	r24, 0x18	; 24
     b6a:	8a b9       	out	0x0a, r24	; 10
    
	
    // Set frame format to 8 data bits, 2 stop bits
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // Universal Synchronous Asynchronous Receiver Transmitter Register C, USART Register Select, USART Stop Bit Select, USART Character Size Select
     b6c:	8e e8       	ldi	r24, 0x8E	; 142
     b6e:	80 bd       	out	0x20, r24	; 32
    
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <adc_init>:
}

uint8_t joystick_angle_from_voltage(uint8_t voltage)
{
	return voltage;
}
     b76:	81 b3       	in	r24, 0x11	; 17
     b78:	80 61       	ori	r24, 0x10	; 16
     b7a:	81 bb       	out	0x11, r24	; 17
     b7c:	ab e8       	ldi	r26, 0x8B	; 139
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	8c 91       	ld	r24, X
     b82:	80 64       	ori	r24, 0x40	; 64
     b84:	8c 93       	st	X, r24
     b86:	ea e8       	ldi	r30, 0x8A	; 138
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 61       	ori	r24, 0x18	; 24
     b8e:	80 83       	st	Z, r24
     b90:	8c 91       	ld	r24, X
     b92:	83 60       	ori	r24, 0x03	; 3
     b94:	8c 93       	st	X, r24
     b96:	80 81       	ld	r24, Z
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	80 83       	st	Z, r24
     b9c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     ba0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     ba4:	81 b3       	in	r24, 0x11	; 17
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	81 bb       	out	0x11, r24	; 17
     baa:	81 b3       	in	r24, 0x11	; 17
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	81 bb       	out	0x11, r24	; 17
     bb0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <input_head+0x1>
     bb4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <input_head>
     bb8:	08 95       	ret

00000bba <input_read>:

input_t input_read(){
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	65 97       	sbiw	r28, 0x15	; 21
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
	volatile char* adc_out = (char*) BASE_ADDRESS_ADC;
	adc_out[0] = 0;
     bea:	e0 e0       	ldi	r30, 0x00	; 0
     bec:	f4 e1       	ldi	r31, 0x14	; 20
     bee:	10 82       	st	Z, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	89 e1       	ldi	r24, 0x19	; 25
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <input_read+0x3a>
	// Wait for busy
	//_delay_ms(2);
	_delay_loop_2(25);
	
	input_t input;
	uint8_t y_raw = *adc_out;
     bf8:	d0 80       	ld	r13, Z
	uint8_t x_raw = *adc_out;
     bfa:	00 81       	ld	r16, Z
	uint8_t slider1_raw = *adc_out;
     bfc:	e0 80       	ld	r14, Z
	uint8_t slider2_raw = *adc_out;
     bfe:	f0 80       	ld	r15, Z
	
	const double PI =  3.1415926;	
	
	uint8_t y_positive = MAX(y_raw, 175) - 175;
     c00:	8f ea       	ldi	r24, 0xAF	; 175
     c02:	8d 15       	cp	r24, r13
     c04:	18 f4       	brcc	.+6      	; 0xc0c <input_read+0x52>
     c06:	61 e5       	ldi	r22, 0x51	; 81
     c08:	6d 0d       	add	r22, r13
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <input_read+0x54>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_positive = MAX(x_raw, 198) - 198;
     c0e:	07 3c       	cpi	r16, 0xC7	; 199
     c10:	18 f0       	brcs	.+6      	; 0xc18 <input_read+0x5e>
     c12:	1a e3       	ldi	r17, 0x3A	; 58
     c14:	10 0f       	add	r17, r16
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <input_read+0x60>
     c18:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t y_positive_scaled = (uint8_t)((float)y_positive * ((float)127/(float)80));
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     c24:	23 e3       	ldi	r18, 0x33	; 51
     c26:	33 e3       	ldi	r19, 0x33	; 51
     c28:	4b ec       	ldi	r20, 0xCB	; 203
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	0e 94 ce 08 	call	0x119c	; 0x119c <__mulsf3>
     c30:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixunssfsi>
     c34:	b6 2e       	mov	r11, r22
	uint8_t x_positive_scaled = (uint8_t)((float)x_positive * ((float)127/(float)57));
     c36:	61 2f       	mov	r22, r17
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     c42:	24 eb       	ldi	r18, 0xB4	; 180
     c44:	38 e9       	ldi	r19, 0x98	; 152
     c46:	4e e0       	ldi	r20, 0x0E	; 14
     c48:	50 e4       	ldi	r21, 0x40	; 64
     c4a:	0e 94 ce 08 	call	0x119c	; 0x119c <__mulsf3>
     c4e:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixunssfsi>
     c52:	16 2f       	mov	r17, r22
	
	uint8_t y_negative = 175 - MIN(y_raw, 175);
     c54:	ee ea       	ldi	r30, 0xAE	; 174
     c56:	ed 15       	cp	r30, r13
     c58:	18 f0       	brcs	.+6      	; 0xc60 <input_read+0xa6>
     c5a:	6f ea       	ldi	r22, 0xAF	; 175
     c5c:	6d 19       	sub	r22, r13
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <input_read+0xa8>
     c60:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t x_negative = 198 - MIN(x_raw, 198);
     c62:	06 3c       	cpi	r16, 0xC6	; 198
     c64:	20 f4       	brcc	.+8      	; 0xc6e <input_read+0xb4>
     c66:	86 ec       	ldi	r24, 0xC6	; 198
     c68:	d8 2e       	mov	r13, r24
     c6a:	d0 1a       	sub	r13, r16
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <input_read+0xb6>
     c6e:	d1 2c       	mov	r13, r1
	
	uint8_t y_negative_scaled = (uint8_t)((float)y_negative * ((float)127/(float)175));
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     c7a:	29 e6       	ldi	r18, 0x69	; 105
     c7c:	38 ec       	ldi	r19, 0xC8	; 200
     c7e:	49 e3       	ldi	r20, 0x39	; 57
     c80:	5f e3       	ldi	r21, 0x3F	; 63
     c82:	0e 94 ce 08 	call	0x119c	; 0x119c <__mulsf3>
     c86:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixunssfsi>
     c8a:	c6 2e       	mov	r12, r22
	uint8_t x_negative_scaled = (uint8_t)((float)x_negative * ((float)127/(float)198));
     c8c:	6d 2d       	mov	r22, r13
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     c98:	28 eb       	ldi	r18, 0xB8	; 184
     c9a:	33 e3       	ldi	r19, 0x33	; 51
     c9c:	44 e2       	ldi	r20, 0x24	; 36
     c9e:	5f e3       	ldi	r21, 0x3F	; 63
     ca0:	0e 94 ce 08 	call	0x119c	; 0x119c <__mulsf3>
     ca4:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixunssfsi>
	
	input.joystick_y = (uint8_t)((128 - y_negative_scaled) + y_positive_scaled);
     ca8:	9b 2d       	mov	r25, r11
     caa:	9c 19       	sub	r25, r12
     cac:	90 58       	subi	r25, 0x80	; 128
     cae:	99 87       	std	Y+9, r25	; 0x09
	input.joystick_x = (uint8_t)((128 - x_negative_scaled) + x_positive_scaled);
     cb0:	81 2f       	mov	r24, r17
     cb2:	86 1b       	sub	r24, r22
     cb4:	80 58       	subi	r24, 0x80	; 128
     cb6:	88 87       	std	Y+8, r24	; 0x08
	
	input.direction = CENTER;
     cb8:	1e 86       	std	Y+14, r1	; 0x0e
	if(input.joystick_y > 198)
     cba:	97 3c       	cpi	r25, 0xC7	; 199
     cbc:	10 f0       	brcs	.+4      	; 0xcc2 <input_read+0x108>
		input.direction = UP;
     cbe:	21 e0       	ldi	r18, 0x01	; 1
     cc0:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_x > 198)
     cc2:	87 3c       	cpi	r24, 0xC7	; 199
     cc4:	10 f0       	brcs	.+4      	; 0xcca <input_read+0x110>
		input.direction = RIGHT;
     cc6:	22 e0       	ldi	r18, 0x02	; 2
     cc8:	2e 87       	std	Y+14, r18	; 0x0e
	if(input.joystick_y < 68)
     cca:	94 34       	cpi	r25, 0x44	; 68
     ccc:	10 f4       	brcc	.+4      	; 0xcd2 <input_read+0x118>
		input.direction = DOWN;
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	9e 87       	std	Y+14, r25	; 0x0e
	if(input.joystick_x < 68)
     cd2:	84 34       	cpi	r24, 0x44	; 68
     cd4:	10 f4       	brcc	.+4      	; 0xcda <input_read+0x120>
		input.direction = LEFT;
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	8e 87       	std	Y+14, r24	; 0x0e
	
	input.slider_1 = slider1_raw;
     cda:	ea 86       	std	Y+10, r14	; 0x0a
	input.slider_2 = slider2_raw;
     cdc:	fb 86       	std	Y+11, r15	; 0x0b
	
	input.button_left = PIND & (1 << PD2);
     cde:	80 b3       	in	r24, 0x10	; 16
     ce0:	84 70       	andi	r24, 0x04	; 4
     ce2:	8d 87       	std	Y+13, r24	; 0x0d
	input.button_right= PIND & (1 << PD3);
     ce4:	80 b3       	in	r24, 0x10	; 16
     ce6:	88 70       	andi	r24, 0x08	; 8
     ce8:	8c 87       	std	Y+12, r24	; 0x0c
	
	input_buffer[input_head] = input;
     cea:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <input_head>
     cee:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <input_head+0x1>
     cf2:	dc 01       	movw	r26, r24
     cf4:	aa 0f       	add	r26, r26
     cf6:	bb 1f       	adc	r27, r27
     cf8:	aa 0f       	add	r26, r26
     cfa:	bb 1f       	adc	r27, r27
     cfc:	aa 0f       	add	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	a8 1b       	sub	r26, r24
     d02:	b9 0b       	sbc	r27, r25
     d04:	a2 57       	subi	r26, 0x72	; 114
     d06:	be 4f       	sbci	r27, 0xFE	; 254
     d08:	27 e0       	ldi	r18, 0x07	; 7
     d0a:	fe 01       	movw	r30, r28
     d0c:	38 96       	adiw	r30, 0x08	; 8
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	2a 95       	dec	r18
     d14:	e1 f7       	brne	.-8      	; 0xd0e <input_read+0x154>
	input_head = (input_head + 1) % INPUT_BUFFER_SIZE;
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	6a e0       	ldi	r22, 0x0A	; 10
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     d20:	c8 2e       	mov	r12, r24
     d22:	d9 2e       	mov	r13, r25
     d24:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <input_head>
     d28:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <input_head+0x1>
	
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
     d2c:	87 e0       	ldi	r24, 0x07	; 7
     d2e:	fe 01       	movw	r30, r28
     d30:	38 96       	adiw	r30, 0x08	; 8
     d32:	de 01       	movw	r26, r28
     d34:	1f 96       	adiw	r26, 0x0f	; 15
     d36:	01 90       	ld	r0, Z+
     d38:	0d 92       	st	X+, r0
     d3a:	8a 95       	dec	r24
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <input_read+0x17c>
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	
	for(int age = 0; age < INPUT_BUFFER_SIZE; age++)
     d3e:	e1 2c       	mov	r14, r1
     d40:	f1 2c       	mov	r15, r1
	input_head = (input_head + 1) % INPUT_BUFFER_SIZE;
	
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
     d42:	81 2c       	mov	r8, r1
     d44:	91 2c       	mov	r9, r1
     d46:	54 01       	movw	r10, r8
	input_buffer[input_head] = input;
	input_head = (input_head + 1) % INPUT_BUFFER_SIZE;
	
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
     d48:	24 01       	movw	r4, r8
     d4a:	35 01       	movw	r6, r10
	float smooth_joystick_y = 0;
	
	for(int age = 0; age < INPUT_BUFFER_SIZE; age++)
     d4c:	43 c0       	rjmp	.+134    	; 0xdd4 <input_read+0x21a>
	{
		int buffer_index = (input_head + age) % INPUT_BUFFER_SIZE;
     d4e:	c7 01       	movw	r24, r14
     d50:	8c 0d       	add	r24, r12
     d52:	9d 1d       	adc	r25, r13
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	b9 01       	movw	r22, r18
     d5a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
		smooth_joystick_x += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_x / INPUT_BUFFER_SIZE; //* pow(1/2, age);
     d5e:	b9 01       	movw	r22, r18
     d60:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     d64:	8c 01       	movw	r16, r24
     d66:	00 0f       	add	r16, r16
     d68:	11 1f       	adc	r17, r17
     d6a:	00 0f       	add	r16, r16
     d6c:	11 1f       	adc	r17, r17
     d6e:	00 0f       	add	r16, r16
     d70:	11 1f       	adc	r17, r17
     d72:	08 1b       	sub	r16, r24
     d74:	19 0b       	sbc	r17, r25
     d76:	02 57       	subi	r16, 0x72	; 114
     d78:	1e 4f       	sbci	r17, 0xFE	; 254
     d7a:	f8 01       	movw	r30, r16
     d7c:	60 81       	ld	r22, Z
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e2       	ldi	r20, 0x20	; 32
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	0e 94 98 07 	call	0xf30	; 0xf30 <__divsf3>
     d94:	9b 01       	movw	r18, r22
     d96:	ac 01       	movw	r20, r24
     d98:	c3 01       	movw	r24, r6
     d9a:	b2 01       	movw	r22, r4
     d9c:	0e 94 2c 07 	call	0xe58	; 0xe58 <__addsf3>
     da0:	2b 01       	movw	r4, r22
     da2:	3c 01       	movw	r6, r24
		smooth_joystick_y += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_y / INPUT_BUFFER_SIZE;
     da4:	f8 01       	movw	r30, r16
     da6:	61 81       	ldd	r22, Z+1	; 0x01
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	51 e4       	ldi	r21, 0x41	; 65
     dba:	0e 94 98 07 	call	0xf30	; 0xf30 <__divsf3>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	c5 01       	movw	r24, r10
     dc4:	b4 01       	movw	r22, r8
     dc6:	0e 94 2c 07 	call	0xe58	; 0xe58 <__addsf3>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
	// smooth_input is average of all INPUT_BUFFER_SIZE last inputs
	input_t smooth_input = input;
	float smooth_joystick_x = 0;
	float smooth_joystick_y = 0;
	
	for(int age = 0; age < INPUT_BUFFER_SIZE; age++)
     dce:	ff ef       	ldi	r31, 0xFF	; 255
     dd0:	ef 1a       	sub	r14, r31
     dd2:	ff 0a       	sbc	r15, r31
     dd4:	8a e0       	ldi	r24, 0x0A	; 10
     dd6:	e8 16       	cp	r14, r24
     dd8:	f1 04       	cpc	r15, r1
     dda:	0c f4       	brge	.+2      	; 0xdde <input_read+0x224>
     ddc:	b8 cf       	rjmp	.-144    	; 0xd4e <input_read+0x194>
	{
		int buffer_index = (input_head + age) % INPUT_BUFFER_SIZE;
		smooth_joystick_x += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_x / INPUT_BUFFER_SIZE; //* pow(1/2, age);
		smooth_joystick_y += (float)input_buffer[buffer_index % INPUT_BUFFER_SIZE].joystick_y / INPUT_BUFFER_SIZE;
	}
	smooth_input.joystick_x = (int)smooth_joystick_x;
     dde:	c3 01       	movw	r24, r6
     de0:	b2 01       	movw	r22, r4
     de2:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fixsfsi>
     de6:	6f 87       	std	Y+15, r22	; 0x0f
	smooth_input.joystick_y = (int)smooth_joystick_y;
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fixsfsi>
     df0:	68 8b       	std	Y+16, r22	; 0x10
	
	//printf("%d   ", (int)(smooth_joystick_x));

	return smooth_input;
     df2:	87 e0       	ldi	r24, 0x07	; 7
     df4:	fe 01       	movw	r30, r28
     df6:	3f 96       	adiw	r30, 0x0f	; 15
     df8:	de 01       	movw	r26, r28
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	01 90       	ld	r0, Z+
     dfe:	0d 92       	st	X+, r0
     e00:	8a 95       	dec	r24
     e02:	e1 f7       	brne	.-8      	; 0xdfc <input_read+0x242>
     e04:	29 81       	ldd	r18, Y+1	; 0x01
     e06:	3a 81       	ldd	r19, Y+2	; 0x02
     e08:	4b 81       	ldd	r20, Y+3	; 0x03
     e0a:	5c 81       	ldd	r21, Y+4	; 0x04
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
}
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	65 96       	adiw	r28, 0x15	; 21
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	9f 90       	pop	r9
     e36:	8f 90       	pop	r8
     e38:	7f 90       	pop	r7
     e3a:	6f 90       	pop	r6
     e3c:	5f 90       	pop	r5
     e3e:	4f 90       	pop	r4
     e40:	08 95       	ret

00000e42 <xmem_init>:
#include "xmem.h"

// From lab lecture
void xmem_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
     e42:	85 b7       	in	r24, 0x35	; 53
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	85 bf       	out	0x35, r24	; 53
	// Mask out some port C address pins for JTAG (datasheet page 32)
	SFIOR |= 1 << XMM2;
     e48:	80 b7       	in	r24, 0x30	; 48
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 | 1 << XMM1);
     e4e:	80 b7       	in	r24, 0x30	; 48
     e50:	87 7e       	andi	r24, 0xE7	; 231
     e52:	80 bf       	out	0x30, r24	; 48
     e54:	08 95       	ret

00000e56 <__subsf3>:
     e56:	50 58       	subi	r21, 0x80	; 128

00000e58 <__addsf3>:
     e58:	bb 27       	eor	r27, r27
     e5a:	aa 27       	eor	r26, r26
     e5c:	0e 94 43 07 	call	0xe86	; 0xe86 <__addsf3x>
     e60:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_round>
     e64:	0e 94 86 08 	call	0x110c	; 0x110c <__fp_pscA>
     e68:	38 f0       	brcs	.+14     	; 0xe78 <__addsf3+0x20>
     e6a:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_pscB>
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__addsf3+0x20>
     e70:	39 f4       	brne	.+14     	; 0xe80 <__addsf3+0x28>
     e72:	9f 3f       	cpi	r25, 0xFF	; 255
     e74:	19 f4       	brne	.+6      	; 0xe7c <__addsf3+0x24>
     e76:	26 f4       	brtc	.+8      	; 0xe80 <__addsf3+0x28>
     e78:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_nan>
     e7c:	0e f4       	brtc	.+2      	; 0xe80 <__addsf3+0x28>
     e7e:	e0 95       	com	r30
     e80:	e7 fb       	bst	r30, 7
     e82:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_inf>

00000e86 <__addsf3x>:
     e86:	e9 2f       	mov	r30, r25
     e88:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_split3>
     e8c:	58 f3       	brcs	.-42     	; 0xe64 <__addsf3+0xc>
     e8e:	ba 17       	cp	r27, r26
     e90:	62 07       	cpc	r22, r18
     e92:	73 07       	cpc	r23, r19
     e94:	84 07       	cpc	r24, r20
     e96:	95 07       	cpc	r25, r21
     e98:	20 f0       	brcs	.+8      	; 0xea2 <__addsf3x+0x1c>
     e9a:	79 f4       	brne	.+30     	; 0xeba <__addsf3x+0x34>
     e9c:	a6 f5       	brtc	.+104    	; 0xf06 <__addsf3x+0x80>
     e9e:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_zero>
     ea2:	0e f4       	brtc	.+2      	; 0xea6 <__addsf3x+0x20>
     ea4:	e0 95       	com	r30
     ea6:	0b 2e       	mov	r0, r27
     ea8:	ba 2f       	mov	r27, r26
     eaa:	a0 2d       	mov	r26, r0
     eac:	0b 01       	movw	r0, r22
     eae:	b9 01       	movw	r22, r18
     eb0:	90 01       	movw	r18, r0
     eb2:	0c 01       	movw	r0, r24
     eb4:	ca 01       	movw	r24, r20
     eb6:	a0 01       	movw	r20, r0
     eb8:	11 24       	eor	r1, r1
     eba:	ff 27       	eor	r31, r31
     ebc:	59 1b       	sub	r21, r25
     ebe:	99 f0       	breq	.+38     	; 0xee6 <__addsf3x+0x60>
     ec0:	59 3f       	cpi	r21, 0xF9	; 249
     ec2:	50 f4       	brcc	.+20     	; 0xed8 <__addsf3x+0x52>
     ec4:	50 3e       	cpi	r21, 0xE0	; 224
     ec6:	68 f1       	brcs	.+90     	; 0xf22 <__addsf3x+0x9c>
     ec8:	1a 16       	cp	r1, r26
     eca:	f0 40       	sbci	r31, 0x00	; 0
     ecc:	a2 2f       	mov	r26, r18
     ece:	23 2f       	mov	r18, r19
     ed0:	34 2f       	mov	r19, r20
     ed2:	44 27       	eor	r20, r20
     ed4:	58 5f       	subi	r21, 0xF8	; 248
     ed6:	f3 cf       	rjmp	.-26     	; 0xebe <__addsf3x+0x38>
     ed8:	46 95       	lsr	r20
     eda:	37 95       	ror	r19
     edc:	27 95       	ror	r18
     ede:	a7 95       	ror	r26
     ee0:	f0 40       	sbci	r31, 0x00	; 0
     ee2:	53 95       	inc	r21
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <__addsf3x+0x52>
     ee6:	7e f4       	brtc	.+30     	; 0xf06 <__addsf3x+0x80>
     ee8:	1f 16       	cp	r1, r31
     eea:	ba 0b       	sbc	r27, r26
     eec:	62 0b       	sbc	r22, r18
     eee:	73 0b       	sbc	r23, r19
     ef0:	84 0b       	sbc	r24, r20
     ef2:	ba f0       	brmi	.+46     	; 0xf22 <__addsf3x+0x9c>
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	a1 f0       	breq	.+40     	; 0xf20 <__addsf3x+0x9a>
     ef8:	ff 0f       	add	r31, r31
     efa:	bb 1f       	adc	r27, r27
     efc:	66 1f       	adc	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	c2 f7       	brpl	.-16     	; 0xef4 <__addsf3x+0x6e>
     f04:	0e c0       	rjmp	.+28     	; 0xf22 <__addsf3x+0x9c>
     f06:	ba 0f       	add	r27, r26
     f08:	62 1f       	adc	r22, r18
     f0a:	73 1f       	adc	r23, r19
     f0c:	84 1f       	adc	r24, r20
     f0e:	48 f4       	brcc	.+18     	; 0xf22 <__addsf3x+0x9c>
     f10:	87 95       	ror	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	b7 95       	ror	r27
     f18:	f7 95       	ror	r31
     f1a:	9e 3f       	cpi	r25, 0xFE	; 254
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <__addsf3x+0x9a>
     f1e:	b0 cf       	rjmp	.-160    	; 0xe80 <__addsf3+0x28>
     f20:	93 95       	inc	r25
     f22:	88 0f       	add	r24, r24
     f24:	08 f0       	brcs	.+2      	; 0xf28 <__addsf3x+0xa2>
     f26:	99 27       	eor	r25, r25
     f28:	ee 0f       	add	r30, r30
     f2a:	97 95       	ror	r25
     f2c:	87 95       	ror	r24
     f2e:	08 95       	ret

00000f30 <__divsf3>:
     f30:	0e 94 ac 07 	call	0xf58	; 0xf58 <__divsf3x>
     f34:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_round>
     f38:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_pscB>
     f3c:	58 f0       	brcs	.+22     	; 0xf54 <__divsf3+0x24>
     f3e:	0e 94 86 08 	call	0x110c	; 0x110c <__fp_pscA>
     f42:	40 f0       	brcs	.+16     	; 0xf54 <__divsf3+0x24>
     f44:	29 f4       	brne	.+10     	; 0xf50 <__divsf3+0x20>
     f46:	5f 3f       	cpi	r21, 0xFF	; 255
     f48:	29 f0       	breq	.+10     	; 0xf54 <__divsf3+0x24>
     f4a:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_inf>
     f4e:	51 11       	cpse	r21, r1
     f50:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_szero>
     f54:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_nan>

00000f58 <__divsf3x>:
     f58:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_split3>
     f5c:	68 f3       	brcs	.-38     	; 0xf38 <__divsf3+0x8>

00000f5e <__divsf3_pse>:
     f5e:	99 23       	and	r25, r25
     f60:	b1 f3       	breq	.-20     	; 0xf4e <__divsf3+0x1e>
     f62:	55 23       	and	r21, r21
     f64:	91 f3       	breq	.-28     	; 0xf4a <__divsf3+0x1a>
     f66:	95 1b       	sub	r25, r21
     f68:	55 0b       	sbc	r21, r21
     f6a:	bb 27       	eor	r27, r27
     f6c:	aa 27       	eor	r26, r26
     f6e:	62 17       	cp	r22, r18
     f70:	73 07       	cpc	r23, r19
     f72:	84 07       	cpc	r24, r20
     f74:	38 f0       	brcs	.+14     	; 0xf84 <__divsf3_pse+0x26>
     f76:	9f 5f       	subi	r25, 0xFF	; 255
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	44 1f       	adc	r20, r20
     f80:	aa 1f       	adc	r26, r26
     f82:	a9 f3       	breq	.-22     	; 0xf6e <__divsf3_pse+0x10>
     f84:	35 d0       	rcall	.+106    	; 0xff0 <__divsf3_pse+0x92>
     f86:	0e 2e       	mov	r0, r30
     f88:	3a f0       	brmi	.+14     	; 0xf98 <__divsf3_pse+0x3a>
     f8a:	e0 e8       	ldi	r30, 0x80	; 128
     f8c:	32 d0       	rcall	.+100    	; 0xff2 <__divsf3_pse+0x94>
     f8e:	91 50       	subi	r25, 0x01	; 1
     f90:	50 40       	sbci	r21, 0x00	; 0
     f92:	e6 95       	lsr	r30
     f94:	00 1c       	adc	r0, r0
     f96:	ca f7       	brpl	.-14     	; 0xf8a <__divsf3_pse+0x2c>
     f98:	2b d0       	rcall	.+86     	; 0xff0 <__divsf3_pse+0x92>
     f9a:	fe 2f       	mov	r31, r30
     f9c:	29 d0       	rcall	.+82     	; 0xff0 <__divsf3_pse+0x92>
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	88 1f       	adc	r24, r24
     fa4:	bb 1f       	adc	r27, r27
     fa6:	26 17       	cp	r18, r22
     fa8:	37 07       	cpc	r19, r23
     faa:	48 07       	cpc	r20, r24
     fac:	ab 07       	cpc	r26, r27
     fae:	b0 e8       	ldi	r27, 0x80	; 128
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <__divsf3_pse+0x56>
     fb2:	bb 0b       	sbc	r27, r27
     fb4:	80 2d       	mov	r24, r0
     fb6:	bf 01       	movw	r22, r30
     fb8:	ff 27       	eor	r31, r31
     fba:	93 58       	subi	r25, 0x83	; 131
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	3a f0       	brmi	.+14     	; 0xfce <__divsf3_pse+0x70>
     fc0:	9e 3f       	cpi	r25, 0xFE	; 254
     fc2:	51 05       	cpc	r21, r1
     fc4:	78 f0       	brcs	.+30     	; 0xfe4 <__divsf3_pse+0x86>
     fc6:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_inf>
     fca:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_szero>
     fce:	5f 3f       	cpi	r21, 0xFF	; 255
     fd0:	e4 f3       	brlt	.-8      	; 0xfca <__divsf3_pse+0x6c>
     fd2:	98 3e       	cpi	r25, 0xE8	; 232
     fd4:	d4 f3       	brlt	.-12     	; 0xfca <__divsf3_pse+0x6c>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b7 95       	ror	r27
     fde:	f7 95       	ror	r31
     fe0:	9f 5f       	subi	r25, 0xFF	; 255
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__divsf3_pse+0x78>
     fe4:	88 0f       	add	r24, r24
     fe6:	91 1d       	adc	r25, r1
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret
     ff0:	e1 e0       	ldi	r30, 0x01	; 1
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	bb 1f       	adc	r27, r27
     ffa:	62 17       	cp	r22, r18
     ffc:	73 07       	cpc	r23, r19
     ffe:	84 07       	cpc	r24, r20
    1000:	ba 07       	cpc	r27, r26
    1002:	20 f0       	brcs	.+8      	; 0x100c <__divsf3_pse+0xae>
    1004:	62 1b       	sub	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	ba 0b       	sbc	r27, r26
    100c:	ee 1f       	adc	r30, r30
    100e:	88 f7       	brcc	.-30     	; 0xff2 <__divsf3_pse+0x94>
    1010:	e0 95       	com	r30
    1012:	08 95       	ret

00001014 <__fixsfsi>:
    1014:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixunssfsi>
    1018:	68 94       	set
    101a:	b1 11       	cpse	r27, r1
    101c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_szero>
    1020:	08 95       	ret

00001022 <__fixunssfsi>:
    1022:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_splitA>
    1026:	88 f0       	brcs	.+34     	; 0x104a <__fixunssfsi+0x28>
    1028:	9f 57       	subi	r25, 0x7F	; 127
    102a:	98 f0       	brcs	.+38     	; 0x1052 <__fixunssfsi+0x30>
    102c:	b9 2f       	mov	r27, r25
    102e:	99 27       	eor	r25, r25
    1030:	b7 51       	subi	r27, 0x17	; 23
    1032:	b0 f0       	brcs	.+44     	; 0x1060 <__fixunssfsi+0x3e>
    1034:	e1 f0       	breq	.+56     	; 0x106e <__fixunssfsi+0x4c>
    1036:	66 0f       	add	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	1a f0       	brmi	.+6      	; 0x1046 <__fixunssfsi+0x24>
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__fixunssfsi+0x14>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <__fixunssfsi+0x4c>
    1046:	b1 30       	cpi	r27, 0x01	; 1
    1048:	91 f0       	breq	.+36     	; 0x106e <__fixunssfsi+0x4c>
    104a:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_zero>
    104e:	b1 e0       	ldi	r27, 0x01	; 1
    1050:	08 95       	ret
    1052:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_zero>
    1056:	67 2f       	mov	r22, r23
    1058:	78 2f       	mov	r23, r24
    105a:	88 27       	eor	r24, r24
    105c:	b8 5f       	subi	r27, 0xF8	; 248
    105e:	39 f0       	breq	.+14     	; 0x106e <__fixunssfsi+0x4c>
    1060:	b9 3f       	cpi	r27, 0xF9	; 249
    1062:	cc f3       	brlt	.-14     	; 0x1056 <__fixunssfsi+0x34>
    1064:	86 95       	lsr	r24
    1066:	77 95       	ror	r23
    1068:	67 95       	ror	r22
    106a:	b3 95       	inc	r27
    106c:	d9 f7       	brne	.-10     	; 0x1064 <__fixunssfsi+0x42>
    106e:	3e f4       	brtc	.+14     	; 0x107e <__fixunssfsi+0x5c>
    1070:	90 95       	com	r25
    1072:	80 95       	com	r24
    1074:	70 95       	com	r23
    1076:	61 95       	neg	r22
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	08 95       	ret

00001080 <__floatunsisf>:
    1080:	e8 94       	clt
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <__floatsisf+0x12>

00001084 <__floatsisf>:
    1084:	97 fb       	bst	r25, 7
    1086:	3e f4       	brtc	.+14     	; 0x1096 <__floatsisf+0x12>
    1088:	90 95       	com	r25
    108a:	80 95       	com	r24
    108c:	70 95       	com	r23
    108e:	61 95       	neg	r22
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	99 23       	and	r25, r25
    1098:	a9 f0       	breq	.+42     	; 0x10c4 <__floatsisf+0x40>
    109a:	f9 2f       	mov	r31, r25
    109c:	96 e9       	ldi	r25, 0x96	; 150
    109e:	bb 27       	eor	r27, r27
    10a0:	93 95       	inc	r25
    10a2:	f6 95       	lsr	r31
    10a4:	87 95       	ror	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f1 11       	cpse	r31, r1
    10ae:	f8 cf       	rjmp	.-16     	; 0x10a0 <__floatsisf+0x1c>
    10b0:	fa f4       	brpl	.+62     	; 0x10f0 <__floatsisf+0x6c>
    10b2:	bb 0f       	add	r27, r27
    10b4:	11 f4       	brne	.+4      	; 0x10ba <__floatsisf+0x36>
    10b6:	60 ff       	sbrs	r22, 0
    10b8:	1b c0       	rjmp	.+54     	; 0x10f0 <__floatsisf+0x6c>
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	16 c0       	rjmp	.+44     	; 0x10f0 <__floatsisf+0x6c>
    10c4:	88 23       	and	r24, r24
    10c6:	11 f0       	breq	.+4      	; 0x10cc <__floatsisf+0x48>
    10c8:	96 e9       	ldi	r25, 0x96	; 150
    10ca:	11 c0       	rjmp	.+34     	; 0x10ee <__floatsisf+0x6a>
    10cc:	77 23       	and	r23, r23
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <__floatsisf+0x54>
    10d0:	9e e8       	ldi	r25, 0x8E	; 142
    10d2:	87 2f       	mov	r24, r23
    10d4:	76 2f       	mov	r23, r22
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <__floatsisf+0x5e>
    10d8:	66 23       	and	r22, r22
    10da:	71 f0       	breq	.+28     	; 0x10f8 <__floatsisf+0x74>
    10dc:	96 e8       	ldi	r25, 0x86	; 134
    10de:	86 2f       	mov	r24, r22
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	2a f0       	brmi	.+10     	; 0x10f0 <__floatsisf+0x6c>
    10e6:	9a 95       	dec	r25
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	da f7       	brpl	.-10     	; 0x10e6 <__floatsisf+0x62>
    10f0:	88 0f       	add	r24, r24
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	97 f9       	bld	r25, 7
    10f8:	08 95       	ret

000010fa <__fp_inf>:
    10fa:	97 f9       	bld	r25, 7
    10fc:	9f 67       	ori	r25, 0x7F	; 127
    10fe:	80 e8       	ldi	r24, 0x80	; 128
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	08 95       	ret

00001106 <__fp_nan>:
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	80 ec       	ldi	r24, 0xC0	; 192
    110a:	08 95       	ret

0000110c <__fp_pscA>:
    110c:	00 24       	eor	r0, r0
    110e:	0a 94       	dec	r0
    1110:	16 16       	cp	r1, r22
    1112:	17 06       	cpc	r1, r23
    1114:	18 06       	cpc	r1, r24
    1116:	09 06       	cpc	r0, r25
    1118:	08 95       	ret

0000111a <__fp_pscB>:
    111a:	00 24       	eor	r0, r0
    111c:	0a 94       	dec	r0
    111e:	12 16       	cp	r1, r18
    1120:	13 06       	cpc	r1, r19
    1122:	14 06       	cpc	r1, r20
    1124:	05 06       	cpc	r0, r21
    1126:	08 95       	ret

00001128 <__fp_round>:
    1128:	09 2e       	mov	r0, r25
    112a:	03 94       	inc	r0
    112c:	00 0c       	add	r0, r0
    112e:	11 f4       	brne	.+4      	; 0x1134 <__fp_round+0xc>
    1130:	88 23       	and	r24, r24
    1132:	52 f0       	brmi	.+20     	; 0x1148 <__fp_round+0x20>
    1134:	bb 0f       	add	r27, r27
    1136:	40 f4       	brcc	.+16     	; 0x1148 <__fp_round+0x20>
    1138:	bf 2b       	or	r27, r31
    113a:	11 f4       	brne	.+4      	; 0x1140 <__fp_round+0x18>
    113c:	60 ff       	sbrs	r22, 0
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <__fp_round+0x20>
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <__fp_split3>:
    114a:	57 fd       	sbrc	r21, 7
    114c:	90 58       	subi	r25, 0x80	; 128
    114e:	44 0f       	add	r20, r20
    1150:	55 1f       	adc	r21, r21
    1152:	59 f0       	breq	.+22     	; 0x116a <__fp_splitA+0x10>
    1154:	5f 3f       	cpi	r21, 0xFF	; 255
    1156:	71 f0       	breq	.+28     	; 0x1174 <__fp_splitA+0x1a>
    1158:	47 95       	ror	r20

0000115a <__fp_splitA>:
    115a:	88 0f       	add	r24, r24
    115c:	97 fb       	bst	r25, 7
    115e:	99 1f       	adc	r25, r25
    1160:	61 f0       	breq	.+24     	; 0x117a <__fp_splitA+0x20>
    1162:	9f 3f       	cpi	r25, 0xFF	; 255
    1164:	79 f0       	breq	.+30     	; 0x1184 <__fp_splitA+0x2a>
    1166:	87 95       	ror	r24
    1168:	08 95       	ret
    116a:	12 16       	cp	r1, r18
    116c:	13 06       	cpc	r1, r19
    116e:	14 06       	cpc	r1, r20
    1170:	55 1f       	adc	r21, r21
    1172:	f2 cf       	rjmp	.-28     	; 0x1158 <__fp_split3+0xe>
    1174:	46 95       	lsr	r20
    1176:	f1 df       	rcall	.-30     	; 0x115a <__fp_splitA>
    1178:	08 c0       	rjmp	.+16     	; 0x118a <__fp_splitA+0x30>
    117a:	16 16       	cp	r1, r22
    117c:	17 06       	cpc	r1, r23
    117e:	18 06       	cpc	r1, r24
    1180:	99 1f       	adc	r25, r25
    1182:	f1 cf       	rjmp	.-30     	; 0x1166 <__fp_splitA+0xc>
    1184:	86 95       	lsr	r24
    1186:	71 05       	cpc	r23, r1
    1188:	61 05       	cpc	r22, r1
    118a:	08 94       	sec
    118c:	08 95       	ret

0000118e <__fp_zero>:
    118e:	e8 94       	clt

00001190 <__fp_szero>:
    1190:	bb 27       	eor	r27, r27
    1192:	66 27       	eor	r22, r22
    1194:	77 27       	eor	r23, r23
    1196:	cb 01       	movw	r24, r22
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret

0000119c <__mulsf3>:
    119c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__mulsf3x>
    11a0:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_round>
    11a4:	0e 94 86 08 	call	0x110c	; 0x110c <__fp_pscA>
    11a8:	38 f0       	brcs	.+14     	; 0x11b8 <__mulsf3+0x1c>
    11aa:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_pscB>
    11ae:	20 f0       	brcs	.+8      	; 0x11b8 <__mulsf3+0x1c>
    11b0:	95 23       	and	r25, r21
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <__mulsf3+0x1c>
    11b4:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_inf>
    11b8:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_nan>
    11bc:	11 24       	eor	r1, r1
    11be:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_szero>

000011c2 <__mulsf3x>:
    11c2:	0e 94 a5 08 	call	0x114a	; 0x114a <__fp_split3>
    11c6:	70 f3       	brcs	.-36     	; 0x11a4 <__mulsf3+0x8>

000011c8 <__mulsf3_pse>:
    11c8:	95 9f       	mul	r25, r21
    11ca:	c1 f3       	breq	.-16     	; 0x11bc <__mulsf3+0x20>
    11cc:	95 0f       	add	r25, r21
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	55 1f       	adc	r21, r21
    11d2:	62 9f       	mul	r22, r18
    11d4:	f0 01       	movw	r30, r0
    11d6:	72 9f       	mul	r23, r18
    11d8:	bb 27       	eor	r27, r27
    11da:	f0 0d       	add	r31, r0
    11dc:	b1 1d       	adc	r27, r1
    11de:	63 9f       	mul	r22, r19
    11e0:	aa 27       	eor	r26, r26
    11e2:	f0 0d       	add	r31, r0
    11e4:	b1 1d       	adc	r27, r1
    11e6:	aa 1f       	adc	r26, r26
    11e8:	64 9f       	mul	r22, r20
    11ea:	66 27       	eor	r22, r22
    11ec:	b0 0d       	add	r27, r0
    11ee:	a1 1d       	adc	r26, r1
    11f0:	66 1f       	adc	r22, r22
    11f2:	82 9f       	mul	r24, r18
    11f4:	22 27       	eor	r18, r18
    11f6:	b0 0d       	add	r27, r0
    11f8:	a1 1d       	adc	r26, r1
    11fa:	62 1f       	adc	r22, r18
    11fc:	73 9f       	mul	r23, r19
    11fe:	b0 0d       	add	r27, r0
    1200:	a1 1d       	adc	r26, r1
    1202:	62 1f       	adc	r22, r18
    1204:	83 9f       	mul	r24, r19
    1206:	a0 0d       	add	r26, r0
    1208:	61 1d       	adc	r22, r1
    120a:	22 1f       	adc	r18, r18
    120c:	74 9f       	mul	r23, r20
    120e:	33 27       	eor	r19, r19
    1210:	a0 0d       	add	r26, r0
    1212:	61 1d       	adc	r22, r1
    1214:	23 1f       	adc	r18, r19
    1216:	84 9f       	mul	r24, r20
    1218:	60 0d       	add	r22, r0
    121a:	21 1d       	adc	r18, r1
    121c:	82 2f       	mov	r24, r18
    121e:	76 2f       	mov	r23, r22
    1220:	6a 2f       	mov	r22, r26
    1222:	11 24       	eor	r1, r1
    1224:	9f 57       	subi	r25, 0x7F	; 127
    1226:	50 40       	sbci	r21, 0x00	; 0
    1228:	9a f0       	brmi	.+38     	; 0x1250 <__mulsf3_pse+0x88>
    122a:	f1 f0       	breq	.+60     	; 0x1268 <__mulsf3_pse+0xa0>
    122c:	88 23       	and	r24, r24
    122e:	4a f0       	brmi	.+18     	; 0x1242 <__mulsf3_pse+0x7a>
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	bb 1f       	adc	r27, r27
    1236:	66 1f       	adc	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	a9 f7       	brne	.-22     	; 0x122c <__mulsf3_pse+0x64>
    1242:	9e 3f       	cpi	r25, 0xFE	; 254
    1244:	51 05       	cpc	r21, r1
    1246:	80 f0       	brcs	.+32     	; 0x1268 <__mulsf3_pse+0xa0>
    1248:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_inf>
    124c:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_szero>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	e4 f3       	brlt	.-8      	; 0x124c <__mulsf3_pse+0x84>
    1254:	98 3e       	cpi	r25, 0xE8	; 232
    1256:	d4 f3       	brlt	.-12     	; 0x124c <__mulsf3_pse+0x84>
    1258:	86 95       	lsr	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	e7 95       	ror	r30
    1264:	9f 5f       	subi	r25, 0xFF	; 255
    1266:	c1 f7       	brne	.-16     	; 0x1258 <__mulsf3_pse+0x90>
    1268:	fe 2b       	or	r31, r30
    126a:	88 0f       	add	r24, r24
    126c:	91 1d       	adc	r25, r1
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	97 f9       	bld	r25, 7
    1274:	08 95       	ret

00001276 <__divmodhi4>:
    1276:	97 fb       	bst	r25, 7
    1278:	07 2e       	mov	r0, r23
    127a:	16 f4       	brtc	.+4      	; 0x1280 <__divmodhi4+0xa>
    127c:	00 94       	com	r0
    127e:	07 d0       	rcall	.+14     	; 0x128e <__divmodhi4_neg1>
    1280:	77 fd       	sbrc	r23, 7
    1282:	09 d0       	rcall	.+18     	; 0x1296 <__divmodhi4_neg2>
    1284:	0e 94 4f 09 	call	0x129e	; 0x129e <__udivmodhi4>
    1288:	07 fc       	sbrc	r0, 7
    128a:	05 d0       	rcall	.+10     	; 0x1296 <__divmodhi4_neg2>
    128c:	3e f4       	brtc	.+14     	; 0x129c <__divmodhi4_exit>

0000128e <__divmodhi4_neg1>:
    128e:	90 95       	com	r25
    1290:	81 95       	neg	r24
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	08 95       	ret

00001296 <__divmodhi4_neg2>:
    1296:	70 95       	com	r23
    1298:	61 95       	neg	r22
    129a:	7f 4f       	sbci	r23, 0xFF	; 255

0000129c <__divmodhi4_exit>:
    129c:	08 95       	ret

0000129e <__udivmodhi4>:
    129e:	aa 1b       	sub	r26, r26
    12a0:	bb 1b       	sub	r27, r27
    12a2:	51 e1       	ldi	r21, 0x11	; 17
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <__udivmodhi4_ep>

000012a6 <__udivmodhi4_loop>:
    12a6:	aa 1f       	adc	r26, r26
    12a8:	bb 1f       	adc	r27, r27
    12aa:	a6 17       	cp	r26, r22
    12ac:	b7 07       	cpc	r27, r23
    12ae:	10 f0       	brcs	.+4      	; 0x12b4 <__udivmodhi4_ep>
    12b0:	a6 1b       	sub	r26, r22
    12b2:	b7 0b       	sbc	r27, r23

000012b4 <__udivmodhi4_ep>:
    12b4:	88 1f       	adc	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	5a 95       	dec	r21
    12ba:	a9 f7       	brne	.-22     	; 0x12a6 <__udivmodhi4_loop>
    12bc:	80 95       	com	r24
    12be:	90 95       	com	r25
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	08 95       	ret

000012c6 <fdevopen>:
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	31 f4       	brne	.+12     	; 0x12de <fdevopen+0x18>
    12d2:	61 15       	cp	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	19 f4       	brne	.+6      	; 0x12de <fdevopen+0x18>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	3a c0       	rjmp	.+116    	; 0x1352 <fdevopen+0x8c>
    12de:	8b 01       	movw	r16, r22
    12e0:	ec 01       	movw	r28, r24
    12e2:	6e e0       	ldi	r22, 0x0E	; 14
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <calloc>
    12ee:	fc 01       	movw	r30, r24
    12f0:	89 2b       	or	r24, r25
    12f2:	91 f3       	breq	.-28     	; 0x12d8 <fdevopen+0x12>
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	83 83       	std	Z+3, r24	; 0x03
    12f8:	01 15       	cp	r16, r1
    12fa:	11 05       	cpc	r17, r1
    12fc:	71 f0       	breq	.+28     	; 0x131a <fdevopen+0x54>
    12fe:	13 87       	std	Z+11, r17	; 0x0b
    1300:	02 87       	std	Z+10, r16	; 0x0a
    1302:	81 e8       	ldi	r24, 0x81	; 129
    1304:	83 83       	std	Z+3, r24	; 0x03
    1306:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <__iob>
    130a:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <__iob+0x1>
    130e:	89 2b       	or	r24, r25
    1310:	21 f4       	brne	.+8      	; 0x131a <fdevopen+0x54>
    1312:	f0 93 e0 01 	sts	0x01E0, r31	; 0x8001e0 <__iob+0x1>
    1316:	e0 93 df 01 	sts	0x01DF, r30	; 0x8001df <__iob>
    131a:	20 97       	sbiw	r28, 0x00	; 0
    131c:	c9 f0       	breq	.+50     	; 0x1350 <fdevopen+0x8a>
    131e:	d1 87       	std	Z+9, r29	; 0x09
    1320:	c0 87       	std	Z+8, r28	; 0x08
    1322:	83 81       	ldd	r24, Z+3	; 0x03
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	83 83       	std	Z+3, r24	; 0x03
    1328:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <__iob+0x2>
    132c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <__iob+0x3>
    1330:	89 2b       	or	r24, r25
    1332:	71 f4       	brne	.+28     	; 0x1350 <fdevopen+0x8a>
    1334:	f0 93 e2 01 	sts	0x01E2, r31	; 0x8001e2 <__iob+0x3>
    1338:	e0 93 e1 01 	sts	0x01E1, r30	; 0x8001e1 <__iob+0x2>
    133c:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <__iob+0x4>
    1340:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <__iob+0x5>
    1344:	89 2b       	or	r24, r25
    1346:	21 f4       	brne	.+8      	; 0x1350 <fdevopen+0x8a>
    1348:	f0 93 e4 01 	sts	0x01E4, r31	; 0x8001e4 <__iob+0x5>
    134c:	e0 93 e3 01 	sts	0x01E3, r30	; 0x8001e3 <__iob+0x4>
    1350:	cf 01       	movw	r24, r30
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <printf>:
    135c:	a0 e0       	ldi	r26, 0x00	; 0
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 eb       	ldi	r30, 0xB4	; 180
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__prologue_saves__+0x20>
    1368:	ae 01       	movw	r20, r28
    136a:	4b 5f       	subi	r20, 0xFB	; 251
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	fa 01       	movw	r30, r20
    1370:	61 91       	ld	r22, Z+
    1372:	71 91       	ld	r23, Z+
    1374:	af 01       	movw	r20, r30
    1376:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <__iob+0x2>
    137a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <__iob+0x3>
    137e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <vfprintf>
    1382:	e2 e0       	ldi	r30, 0x02	; 2
    1384:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__epilogue_restores__+0x20>

00001388 <puts>:
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <__iob+0x2>
    1394:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <__iob+0x3>
    1398:	23 81       	ldd	r18, Z+3	; 0x03
    139a:	21 ff       	sbrs	r18, 1
    139c:	1b c0       	rjmp	.+54     	; 0x13d4 <puts+0x4c>
    139e:	8c 01       	movw	r16, r24
    13a0:	d0 e0       	ldi	r29, 0x00	; 0
    13a2:	c0 e0       	ldi	r28, 0x00	; 0
    13a4:	f8 01       	movw	r30, r16
    13a6:	81 91       	ld	r24, Z+
    13a8:	8f 01       	movw	r16, r30
    13aa:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <__iob+0x2>
    13ae:	70 91 e2 01 	lds	r23, 0x01E2	; 0x8001e2 <__iob+0x3>
    13b2:	db 01       	movw	r26, r22
    13b4:	18 96       	adiw	r26, 0x08	; 8
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	19 97       	sbiw	r26, 0x09	; 9
    13bc:	88 23       	and	r24, r24
    13be:	31 f0       	breq	.+12     	; 0x13cc <puts+0x44>
    13c0:	09 95       	icall
    13c2:	89 2b       	or	r24, r25
    13c4:	79 f3       	breq	.-34     	; 0x13a4 <puts+0x1c>
    13c6:	df ef       	ldi	r29, 0xFF	; 255
    13c8:	cf ef       	ldi	r28, 0xFF	; 255
    13ca:	ec cf       	rjmp	.-40     	; 0x13a4 <puts+0x1c>
    13cc:	8a e0       	ldi	r24, 0x0A	; 10
    13ce:	09 95       	icall
    13d0:	89 2b       	or	r24, r25
    13d2:	19 f0       	breq	.+6      	; 0x13da <puts+0x52>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	9f ef       	ldi	r25, 0xFF	; 255
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <puts+0x56>
    13da:	8d 2f       	mov	r24, r29
    13dc:	9c 2f       	mov	r25, r28
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <vfprintf>:
    13e8:	ab e0       	ldi	r26, 0x0B	; 11
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ea ef       	ldi	r30, 0xFA	; 250
    13ee:	f9 e0       	ldi	r31, 0x09	; 9
    13f0:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__prologue_saves__>
    13f4:	6c 01       	movw	r12, r24
    13f6:	7b 01       	movw	r14, r22
    13f8:	8a 01       	movw	r16, r20
    13fa:	fc 01       	movw	r30, r24
    13fc:	17 82       	std	Z+7, r1	; 0x07
    13fe:	16 82       	std	Z+6, r1	; 0x06
    1400:	83 81       	ldd	r24, Z+3	; 0x03
    1402:	81 ff       	sbrs	r24, 1
    1404:	cc c1       	rjmp	.+920    	; 0x179e <vfprintf+0x3b6>
    1406:	ce 01       	movw	r24, r28
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	3c 01       	movw	r6, r24
    140c:	f6 01       	movw	r30, r12
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	f7 01       	movw	r30, r14
    1412:	93 fd       	sbrc	r25, 3
    1414:	85 91       	lpm	r24, Z+
    1416:	93 ff       	sbrs	r25, 3
    1418:	81 91       	ld	r24, Z+
    141a:	7f 01       	movw	r14, r30
    141c:	88 23       	and	r24, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <vfprintf+0x3a>
    1420:	ba c1       	rjmp	.+884    	; 0x1796 <vfprintf+0x3ae>
    1422:	85 32       	cpi	r24, 0x25	; 37
    1424:	39 f4       	brne	.+14     	; 0x1434 <vfprintf+0x4c>
    1426:	93 fd       	sbrc	r25, 3
    1428:	85 91       	lpm	r24, Z+
    142a:	93 ff       	sbrs	r25, 3
    142c:	81 91       	ld	r24, Z+
    142e:	7f 01       	movw	r14, r30
    1430:	85 32       	cpi	r24, 0x25	; 37
    1432:	29 f4       	brne	.+10     	; 0x143e <vfprintf+0x56>
    1434:	b6 01       	movw	r22, r12
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    143c:	e7 cf       	rjmp	.-50     	; 0x140c <vfprintf+0x24>
    143e:	91 2c       	mov	r9, r1
    1440:	21 2c       	mov	r2, r1
    1442:	31 2c       	mov	r3, r1
    1444:	ff e1       	ldi	r31, 0x1F	; 31
    1446:	f3 15       	cp	r31, r3
    1448:	d8 f0       	brcs	.+54     	; 0x1480 <vfprintf+0x98>
    144a:	8b 32       	cpi	r24, 0x2B	; 43
    144c:	79 f0       	breq	.+30     	; 0x146c <vfprintf+0x84>
    144e:	38 f4       	brcc	.+14     	; 0x145e <vfprintf+0x76>
    1450:	80 32       	cpi	r24, 0x20	; 32
    1452:	79 f0       	breq	.+30     	; 0x1472 <vfprintf+0x8a>
    1454:	83 32       	cpi	r24, 0x23	; 35
    1456:	a1 f4       	brne	.+40     	; 0x1480 <vfprintf+0x98>
    1458:	23 2d       	mov	r18, r3
    145a:	20 61       	ori	r18, 0x10	; 16
    145c:	1d c0       	rjmp	.+58     	; 0x1498 <vfprintf+0xb0>
    145e:	8d 32       	cpi	r24, 0x2D	; 45
    1460:	61 f0       	breq	.+24     	; 0x147a <vfprintf+0x92>
    1462:	80 33       	cpi	r24, 0x30	; 48
    1464:	69 f4       	brne	.+26     	; 0x1480 <vfprintf+0x98>
    1466:	23 2d       	mov	r18, r3
    1468:	21 60       	ori	r18, 0x01	; 1
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <vfprintf+0xb0>
    146c:	83 2d       	mov	r24, r3
    146e:	82 60       	ori	r24, 0x02	; 2
    1470:	38 2e       	mov	r3, r24
    1472:	e3 2d       	mov	r30, r3
    1474:	e4 60       	ori	r30, 0x04	; 4
    1476:	3e 2e       	mov	r3, r30
    1478:	2a c0       	rjmp	.+84     	; 0x14ce <vfprintf+0xe6>
    147a:	f3 2d       	mov	r31, r3
    147c:	f8 60       	ori	r31, 0x08	; 8
    147e:	1d c0       	rjmp	.+58     	; 0x14ba <vfprintf+0xd2>
    1480:	37 fc       	sbrc	r3, 7
    1482:	2d c0       	rjmp	.+90     	; 0x14de <vfprintf+0xf6>
    1484:	20 ed       	ldi	r18, 0xD0	; 208
    1486:	28 0f       	add	r18, r24
    1488:	2a 30       	cpi	r18, 0x0A	; 10
    148a:	40 f0       	brcs	.+16     	; 0x149c <vfprintf+0xb4>
    148c:	8e 32       	cpi	r24, 0x2E	; 46
    148e:	b9 f4       	brne	.+46     	; 0x14be <vfprintf+0xd6>
    1490:	36 fc       	sbrc	r3, 6
    1492:	81 c1       	rjmp	.+770    	; 0x1796 <vfprintf+0x3ae>
    1494:	23 2d       	mov	r18, r3
    1496:	20 64       	ori	r18, 0x40	; 64
    1498:	32 2e       	mov	r3, r18
    149a:	19 c0       	rjmp	.+50     	; 0x14ce <vfprintf+0xe6>
    149c:	36 fe       	sbrs	r3, 6
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <vfprintf+0xc4>
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	98 9e       	mul	r9, r24
    14a4:	20 0d       	add	r18, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	92 2e       	mov	r9, r18
    14aa:	11 c0       	rjmp	.+34     	; 0x14ce <vfprintf+0xe6>
    14ac:	ea e0       	ldi	r30, 0x0A	; 10
    14ae:	2e 9e       	mul	r2, r30
    14b0:	20 0d       	add	r18, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	22 2e       	mov	r2, r18
    14b6:	f3 2d       	mov	r31, r3
    14b8:	f0 62       	ori	r31, 0x20	; 32
    14ba:	3f 2e       	mov	r3, r31
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <vfprintf+0xe6>
    14be:	8c 36       	cpi	r24, 0x6C	; 108
    14c0:	21 f4       	brne	.+8      	; 0x14ca <vfprintf+0xe2>
    14c2:	83 2d       	mov	r24, r3
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	38 2e       	mov	r3, r24
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <vfprintf+0xe6>
    14ca:	88 36       	cpi	r24, 0x68	; 104
    14cc:	41 f4       	brne	.+16     	; 0x14de <vfprintf+0xf6>
    14ce:	f7 01       	movw	r30, r14
    14d0:	93 fd       	sbrc	r25, 3
    14d2:	85 91       	lpm	r24, Z+
    14d4:	93 ff       	sbrs	r25, 3
    14d6:	81 91       	ld	r24, Z+
    14d8:	7f 01       	movw	r14, r30
    14da:	81 11       	cpse	r24, r1
    14dc:	b3 cf       	rjmp	.-154    	; 0x1444 <vfprintf+0x5c>
    14de:	98 2f       	mov	r25, r24
    14e0:	9f 7d       	andi	r25, 0xDF	; 223
    14e2:	95 54       	subi	r25, 0x45	; 69
    14e4:	93 30       	cpi	r25, 0x03	; 3
    14e6:	28 f4       	brcc	.+10     	; 0x14f2 <vfprintf+0x10a>
    14e8:	0c 5f       	subi	r16, 0xFC	; 252
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	9f e3       	ldi	r25, 0x3F	; 63
    14ee:	99 83       	std	Y+1, r25	; 0x01
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <vfprintf+0x124>
    14f2:	83 36       	cpi	r24, 0x63	; 99
    14f4:	31 f0       	breq	.+12     	; 0x1502 <vfprintf+0x11a>
    14f6:	83 37       	cpi	r24, 0x73	; 115
    14f8:	71 f0       	breq	.+28     	; 0x1516 <vfprintf+0x12e>
    14fa:	83 35       	cpi	r24, 0x53	; 83
    14fc:	09 f0       	breq	.+2      	; 0x1500 <vfprintf+0x118>
    14fe:	59 c0       	rjmp	.+178    	; 0x15b2 <vfprintf+0x1ca>
    1500:	21 c0       	rjmp	.+66     	; 0x1544 <vfprintf+0x15c>
    1502:	f8 01       	movw	r30, r16
    1504:	80 81       	ld	r24, Z
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	0e 5f       	subi	r16, 0xFE	; 254
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	88 24       	eor	r8, r8
    150e:	83 94       	inc	r8
    1510:	91 2c       	mov	r9, r1
    1512:	53 01       	movw	r10, r6
    1514:	13 c0       	rjmp	.+38     	; 0x153c <vfprintf+0x154>
    1516:	28 01       	movw	r4, r16
    1518:	f2 e0       	ldi	r31, 0x02	; 2
    151a:	4f 0e       	add	r4, r31
    151c:	51 1c       	adc	r5, r1
    151e:	f8 01       	movw	r30, r16
    1520:	a0 80       	ld	r10, Z
    1522:	b1 80       	ldd	r11, Z+1	; 0x01
    1524:	36 fe       	sbrs	r3, 6
    1526:	03 c0       	rjmp	.+6      	; 0x152e <vfprintf+0x146>
    1528:	69 2d       	mov	r22, r9
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x14a>
    152e:	6f ef       	ldi	r22, 0xFF	; 255
    1530:	7f ef       	ldi	r23, 0xFF	; 255
    1532:	c5 01       	movw	r24, r10
    1534:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <strnlen>
    1538:	4c 01       	movw	r8, r24
    153a:	82 01       	movw	r16, r4
    153c:	f3 2d       	mov	r31, r3
    153e:	ff 77       	andi	r31, 0x7F	; 127
    1540:	3f 2e       	mov	r3, r31
    1542:	16 c0       	rjmp	.+44     	; 0x1570 <vfprintf+0x188>
    1544:	28 01       	movw	r4, r16
    1546:	22 e0       	ldi	r18, 0x02	; 2
    1548:	42 0e       	add	r4, r18
    154a:	51 1c       	adc	r5, r1
    154c:	f8 01       	movw	r30, r16
    154e:	a0 80       	ld	r10, Z
    1550:	b1 80       	ldd	r11, Z+1	; 0x01
    1552:	36 fe       	sbrs	r3, 6
    1554:	03 c0       	rjmp	.+6      	; 0x155c <vfprintf+0x174>
    1556:	69 2d       	mov	r22, r9
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <vfprintf+0x178>
    155c:	6f ef       	ldi	r22, 0xFF	; 255
    155e:	7f ef       	ldi	r23, 0xFF	; 255
    1560:	c5 01       	movw	r24, r10
    1562:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <strnlen_P>
    1566:	4c 01       	movw	r8, r24
    1568:	f3 2d       	mov	r31, r3
    156a:	f0 68       	ori	r31, 0x80	; 128
    156c:	3f 2e       	mov	r3, r31
    156e:	82 01       	movw	r16, r4
    1570:	33 fc       	sbrc	r3, 3
    1572:	1b c0       	rjmp	.+54     	; 0x15aa <vfprintf+0x1c2>
    1574:	82 2d       	mov	r24, r2
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	88 16       	cp	r8, r24
    157a:	99 06       	cpc	r9, r25
    157c:	b0 f4       	brcc	.+44     	; 0x15aa <vfprintf+0x1c2>
    157e:	b6 01       	movw	r22, r12
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    1588:	2a 94       	dec	r2
    158a:	f4 cf       	rjmp	.-24     	; 0x1574 <vfprintf+0x18c>
    158c:	f5 01       	movw	r30, r10
    158e:	37 fc       	sbrc	r3, 7
    1590:	85 91       	lpm	r24, Z+
    1592:	37 fe       	sbrs	r3, 7
    1594:	81 91       	ld	r24, Z+
    1596:	5f 01       	movw	r10, r30
    1598:	b6 01       	movw	r22, r12
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    15a0:	21 10       	cpse	r2, r1
    15a2:	2a 94       	dec	r2
    15a4:	21 e0       	ldi	r18, 0x01	; 1
    15a6:	82 1a       	sub	r8, r18
    15a8:	91 08       	sbc	r9, r1
    15aa:	81 14       	cp	r8, r1
    15ac:	91 04       	cpc	r9, r1
    15ae:	71 f7       	brne	.-36     	; 0x158c <vfprintf+0x1a4>
    15b0:	e8 c0       	rjmp	.+464    	; 0x1782 <vfprintf+0x39a>
    15b2:	84 36       	cpi	r24, 0x64	; 100
    15b4:	11 f0       	breq	.+4      	; 0x15ba <vfprintf+0x1d2>
    15b6:	89 36       	cpi	r24, 0x69	; 105
    15b8:	41 f5       	brne	.+80     	; 0x160a <vfprintf+0x222>
    15ba:	f8 01       	movw	r30, r16
    15bc:	37 fe       	sbrs	r3, 7
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <vfprintf+0x1e6>
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	0c 5f       	subi	r16, 0xFC	; 252
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <vfprintf+0x1f6>
    15ce:	60 81       	ld	r22, Z
    15d0:	71 81       	ldd	r23, Z+1	; 0x01
    15d2:	07 2e       	mov	r0, r23
    15d4:	00 0c       	add	r0, r0
    15d6:	88 0b       	sbc	r24, r24
    15d8:	99 0b       	sbc	r25, r25
    15da:	0e 5f       	subi	r16, 0xFE	; 254
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	f3 2d       	mov	r31, r3
    15e0:	ff 76       	andi	r31, 0x6F	; 111
    15e2:	3f 2e       	mov	r3, r31
    15e4:	97 ff       	sbrs	r25, 7
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x212>
    15e8:	90 95       	com	r25
    15ea:	80 95       	com	r24
    15ec:	70 95       	com	r23
    15ee:	61 95       	neg	r22
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f 4f       	sbci	r24, 0xFF	; 255
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	f0 68       	ori	r31, 0x80	; 128
    15f8:	3f 2e       	mov	r3, r31
    15fa:	2a e0       	ldi	r18, 0x0A	; 10
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	a3 01       	movw	r20, r6
    1600:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__ultoa_invert>
    1604:	88 2e       	mov	r8, r24
    1606:	86 18       	sub	r8, r6
    1608:	45 c0       	rjmp	.+138    	; 0x1694 <vfprintf+0x2ac>
    160a:	85 37       	cpi	r24, 0x75	; 117
    160c:	31 f4       	brne	.+12     	; 0x161a <vfprintf+0x232>
    160e:	23 2d       	mov	r18, r3
    1610:	2f 7e       	andi	r18, 0xEF	; 239
    1612:	b2 2e       	mov	r11, r18
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	25 c0       	rjmp	.+74     	; 0x1664 <vfprintf+0x27c>
    161a:	93 2d       	mov	r25, r3
    161c:	99 7f       	andi	r25, 0xF9	; 249
    161e:	b9 2e       	mov	r11, r25
    1620:	8f 36       	cpi	r24, 0x6F	; 111
    1622:	c1 f0       	breq	.+48     	; 0x1654 <vfprintf+0x26c>
    1624:	18 f4       	brcc	.+6      	; 0x162c <vfprintf+0x244>
    1626:	88 35       	cpi	r24, 0x58	; 88
    1628:	79 f0       	breq	.+30     	; 0x1648 <vfprintf+0x260>
    162a:	b5 c0       	rjmp	.+362    	; 0x1796 <vfprintf+0x3ae>
    162c:	80 37       	cpi	r24, 0x70	; 112
    162e:	19 f0       	breq	.+6      	; 0x1636 <vfprintf+0x24e>
    1630:	88 37       	cpi	r24, 0x78	; 120
    1632:	21 f0       	breq	.+8      	; 0x163c <vfprintf+0x254>
    1634:	b0 c0       	rjmp	.+352    	; 0x1796 <vfprintf+0x3ae>
    1636:	e9 2f       	mov	r30, r25
    1638:	e0 61       	ori	r30, 0x10	; 16
    163a:	be 2e       	mov	r11, r30
    163c:	b4 fe       	sbrs	r11, 4
    163e:	0d c0       	rjmp	.+26     	; 0x165a <vfprintf+0x272>
    1640:	fb 2d       	mov	r31, r11
    1642:	f4 60       	ori	r31, 0x04	; 4
    1644:	bf 2e       	mov	r11, r31
    1646:	09 c0       	rjmp	.+18     	; 0x165a <vfprintf+0x272>
    1648:	34 fe       	sbrs	r3, 4
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <vfprintf+0x278>
    164c:	29 2f       	mov	r18, r25
    164e:	26 60       	ori	r18, 0x06	; 6
    1650:	b2 2e       	mov	r11, r18
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0x278>
    1654:	28 e0       	ldi	r18, 0x08	; 8
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <vfprintf+0x27c>
    165a:	20 e1       	ldi	r18, 0x10	; 16
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x27c>
    1660:	20 e1       	ldi	r18, 0x10	; 16
    1662:	32 e0       	ldi	r19, 0x02	; 2
    1664:	f8 01       	movw	r30, r16
    1666:	b7 fe       	sbrs	r11, 7
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <vfprintf+0x290>
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	0c 5f       	subi	r16, 0xFC	; 252
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <vfprintf+0x29c>
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 5f       	subi	r16, 0xFE	; 254
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	a3 01       	movw	r20, r6
    1686:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__ultoa_invert>
    168a:	88 2e       	mov	r8, r24
    168c:	86 18       	sub	r8, r6
    168e:	fb 2d       	mov	r31, r11
    1690:	ff 77       	andi	r31, 0x7F	; 127
    1692:	3f 2e       	mov	r3, r31
    1694:	36 fe       	sbrs	r3, 6
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <vfprintf+0x2ca>
    1698:	23 2d       	mov	r18, r3
    169a:	2e 7f       	andi	r18, 0xFE	; 254
    169c:	a2 2e       	mov	r10, r18
    169e:	89 14       	cp	r8, r9
    16a0:	58 f4       	brcc	.+22     	; 0x16b8 <vfprintf+0x2d0>
    16a2:	34 fe       	sbrs	r3, 4
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x2d4>
    16a6:	32 fc       	sbrc	r3, 2
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <vfprintf+0x2d4>
    16aa:	83 2d       	mov	r24, r3
    16ac:	8e 7e       	andi	r24, 0xEE	; 238
    16ae:	a8 2e       	mov	r10, r24
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <vfprintf+0x2d4>
    16b2:	b8 2c       	mov	r11, r8
    16b4:	a3 2c       	mov	r10, r3
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <vfprintf+0x2d6>
    16b8:	b8 2c       	mov	r11, r8
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <vfprintf+0x2d6>
    16bc:	b9 2c       	mov	r11, r9
    16be:	a4 fe       	sbrs	r10, 4
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <vfprintf+0x2f8>
    16c2:	fe 01       	movw	r30, r28
    16c4:	e8 0d       	add	r30, r8
    16c6:	f1 1d       	adc	r31, r1
    16c8:	80 81       	ld	r24, Z
    16ca:	80 33       	cpi	r24, 0x30	; 48
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <vfprintf+0x2ee>
    16ce:	9a 2d       	mov	r25, r10
    16d0:	99 7e       	andi	r25, 0xE9	; 233
    16d2:	a9 2e       	mov	r10, r25
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <vfprintf+0x300>
    16d6:	a2 fe       	sbrs	r10, 2
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0x2fe>
    16da:	b3 94       	inc	r11
    16dc:	b3 94       	inc	r11
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <vfprintf+0x300>
    16e0:	8a 2d       	mov	r24, r10
    16e2:	86 78       	andi	r24, 0x86	; 134
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <vfprintf+0x300>
    16e6:	b3 94       	inc	r11
    16e8:	a3 fc       	sbrc	r10, 3
    16ea:	11 c0       	rjmp	.+34     	; 0x170e <vfprintf+0x326>
    16ec:	a0 fe       	sbrs	r10, 0
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <vfprintf+0x314>
    16f0:	b2 14       	cp	r11, r2
    16f2:	88 f4       	brcc	.+34     	; 0x1716 <vfprintf+0x32e>
    16f4:	28 0c       	add	r2, r8
    16f6:	92 2c       	mov	r9, r2
    16f8:	9b 18       	sub	r9, r11
    16fa:	0e c0       	rjmp	.+28     	; 0x1718 <vfprintf+0x330>
    16fc:	b2 14       	cp	r11, r2
    16fe:	60 f4       	brcc	.+24     	; 0x1718 <vfprintf+0x330>
    1700:	b6 01       	movw	r22, r12
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    170a:	b3 94       	inc	r11
    170c:	f7 cf       	rjmp	.-18     	; 0x16fc <vfprintf+0x314>
    170e:	b2 14       	cp	r11, r2
    1710:	18 f4       	brcc	.+6      	; 0x1718 <vfprintf+0x330>
    1712:	2b 18       	sub	r2, r11
    1714:	02 c0       	rjmp	.+4      	; 0x171a <vfprintf+0x332>
    1716:	98 2c       	mov	r9, r8
    1718:	21 2c       	mov	r2, r1
    171a:	a4 fe       	sbrs	r10, 4
    171c:	10 c0       	rjmp	.+32     	; 0x173e <vfprintf+0x356>
    171e:	b6 01       	movw	r22, r12
    1720:	80 e3       	ldi	r24, 0x30	; 48
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    1728:	a2 fe       	sbrs	r10, 2
    172a:	17 c0       	rjmp	.+46     	; 0x175a <vfprintf+0x372>
    172c:	a1 fc       	sbrc	r10, 1
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <vfprintf+0x34e>
    1730:	88 e7       	ldi	r24, 0x78	; 120
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <vfprintf+0x352>
    1736:	88 e5       	ldi	r24, 0x58	; 88
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	b6 01       	movw	r22, r12
    173c:	0c c0       	rjmp	.+24     	; 0x1756 <vfprintf+0x36e>
    173e:	8a 2d       	mov	r24, r10
    1740:	86 78       	andi	r24, 0x86	; 134
    1742:	59 f0       	breq	.+22     	; 0x175a <vfprintf+0x372>
    1744:	a1 fe       	sbrs	r10, 1
    1746:	02 c0       	rjmp	.+4      	; 0x174c <vfprintf+0x364>
    1748:	8b e2       	ldi	r24, 0x2B	; 43
    174a:	01 c0       	rjmp	.+2      	; 0x174e <vfprintf+0x366>
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	a7 fc       	sbrc	r10, 7
    1750:	8d e2       	ldi	r24, 0x2D	; 45
    1752:	b6 01       	movw	r22, r12
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    175a:	89 14       	cp	r8, r9
    175c:	38 f4       	brcc	.+14     	; 0x176c <vfprintf+0x384>
    175e:	b6 01       	movw	r22, r12
    1760:	80 e3       	ldi	r24, 0x30	; 48
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    1768:	9a 94       	dec	r9
    176a:	f7 cf       	rjmp	.-18     	; 0x175a <vfprintf+0x372>
    176c:	8a 94       	dec	r8
    176e:	f3 01       	movw	r30, r6
    1770:	e8 0d       	add	r30, r8
    1772:	f1 1d       	adc	r31, r1
    1774:	80 81       	ld	r24, Z
    1776:	b6 01       	movw	r22, r12
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    177e:	81 10       	cpse	r8, r1
    1780:	f5 cf       	rjmp	.-22     	; 0x176c <vfprintf+0x384>
    1782:	22 20       	and	r2, r2
    1784:	09 f4       	brne	.+2      	; 0x1788 <vfprintf+0x3a0>
    1786:	42 ce       	rjmp	.-892    	; 0x140c <vfprintf+0x24>
    1788:	b6 01       	movw	r22, r12
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <fputc>
    1792:	2a 94       	dec	r2
    1794:	f6 cf       	rjmp	.-20     	; 0x1782 <vfprintf+0x39a>
    1796:	f6 01       	movw	r30, r12
    1798:	86 81       	ldd	r24, Z+6	; 0x06
    179a:	97 81       	ldd	r25, Z+7	; 0x07
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x3ba>
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	2b 96       	adiw	r28, 0x0b	; 11
    17a4:	e2 e1       	ldi	r30, 0x12	; 18
    17a6:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__epilogue_restores__>

000017aa <calloc>:
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	86 9f       	mul	r24, r22
    17b4:	80 01       	movw	r16, r0
    17b6:	87 9f       	mul	r24, r23
    17b8:	10 0d       	add	r17, r0
    17ba:	96 9f       	mul	r25, r22
    17bc:	10 0d       	add	r17, r0
    17be:	11 24       	eor	r1, r1
    17c0:	c8 01       	movw	r24, r16
    17c2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <malloc>
    17c6:	ec 01       	movw	r28, r24
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <calloc+0x2c>
    17cc:	a8 01       	movw	r20, r16
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <memset>
    17d6:	ce 01       	movw	r24, r28
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <malloc>:
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	10 f4       	brcc	.+4      	; 0x17f4 <malloc+0x12>
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <__flp>
    17f8:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <__flp+0x1>
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	a0 e0       	ldi	r26, 0x00	; 0
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	30 97       	sbiw	r30, 0x00	; 0
    1806:	19 f1       	breq	.+70     	; 0x184e <malloc+0x6c>
    1808:	40 81       	ld	r20, Z
    180a:	51 81       	ldd	r21, Z+1	; 0x01
    180c:	02 81       	ldd	r16, Z+2	; 0x02
    180e:	13 81       	ldd	r17, Z+3	; 0x03
    1810:	48 17       	cp	r20, r24
    1812:	59 07       	cpc	r21, r25
    1814:	c8 f0       	brcs	.+50     	; 0x1848 <malloc+0x66>
    1816:	84 17       	cp	r24, r20
    1818:	95 07       	cpc	r25, r21
    181a:	69 f4       	brne	.+26     	; 0x1836 <malloc+0x54>
    181c:	10 97       	sbiw	r26, 0x00	; 0
    181e:	31 f0       	breq	.+12     	; 0x182c <malloc+0x4a>
    1820:	12 96       	adiw	r26, 0x02	; 2
    1822:	0c 93       	st	X, r16
    1824:	12 97       	sbiw	r26, 0x02	; 2
    1826:	13 96       	adiw	r26, 0x03	; 3
    1828:	1c 93       	st	X, r17
    182a:	27 c0       	rjmp	.+78     	; 0x187a <malloc+0x98>
    182c:	00 93 e7 01 	sts	0x01E7, r16	; 0x8001e7 <__flp>
    1830:	10 93 e8 01 	sts	0x01E8, r17	; 0x8001e8 <__flp+0x1>
    1834:	22 c0       	rjmp	.+68     	; 0x187a <malloc+0x98>
    1836:	21 15       	cp	r18, r1
    1838:	31 05       	cpc	r19, r1
    183a:	19 f0       	breq	.+6      	; 0x1842 <malloc+0x60>
    183c:	42 17       	cp	r20, r18
    183e:	53 07       	cpc	r21, r19
    1840:	18 f4       	brcc	.+6      	; 0x1848 <malloc+0x66>
    1842:	9a 01       	movw	r18, r20
    1844:	bd 01       	movw	r22, r26
    1846:	ef 01       	movw	r28, r30
    1848:	df 01       	movw	r26, r30
    184a:	f8 01       	movw	r30, r16
    184c:	db cf       	rjmp	.-74     	; 0x1804 <malloc+0x22>
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	f9 f0       	breq	.+62     	; 0x1892 <malloc+0xb0>
    1854:	28 1b       	sub	r18, r24
    1856:	39 0b       	sbc	r19, r25
    1858:	24 30       	cpi	r18, 0x04	; 4
    185a:	31 05       	cpc	r19, r1
    185c:	80 f4       	brcc	.+32     	; 0x187e <malloc+0x9c>
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	9b 81       	ldd	r25, Y+3	; 0x03
    1862:	61 15       	cp	r22, r1
    1864:	71 05       	cpc	r23, r1
    1866:	21 f0       	breq	.+8      	; 0x1870 <malloc+0x8e>
    1868:	fb 01       	movw	r30, r22
    186a:	93 83       	std	Z+3, r25	; 0x03
    186c:	82 83       	std	Z+2, r24	; 0x02
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <malloc+0x96>
    1870:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <__flp+0x1>
    1874:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <__flp>
    1878:	fe 01       	movw	r30, r28
    187a:	32 96       	adiw	r30, 0x02	; 2
    187c:	44 c0       	rjmp	.+136    	; 0x1906 <malloc+0x124>
    187e:	fe 01       	movw	r30, r28
    1880:	e2 0f       	add	r30, r18
    1882:	f3 1f       	adc	r31, r19
    1884:	81 93       	st	Z+, r24
    1886:	91 93       	st	Z+, r25
    1888:	22 50       	subi	r18, 0x02	; 2
    188a:	31 09       	sbc	r19, r1
    188c:	39 83       	std	Y+1, r19	; 0x01
    188e:	28 83       	st	Y, r18
    1890:	3a c0       	rjmp	.+116    	; 0x1906 <malloc+0x124>
    1892:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <__brkval>
    1896:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <__brkval+0x1>
    189a:	23 2b       	or	r18, r19
    189c:	41 f4       	brne	.+16     	; 0x18ae <malloc+0xcc>
    189e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    18a2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    18a6:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <__brkval+0x1>
    18aa:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <__brkval>
    18ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    18b2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	41 f4       	brne	.+16     	; 0x18cc <malloc+0xea>
    18bc:	2d b7       	in	r18, 0x3d	; 61
    18be:	3e b7       	in	r19, 0x3e	; 62
    18c0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    18c4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18c8:	24 1b       	sub	r18, r20
    18ca:	35 0b       	sbc	r19, r21
    18cc:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <__brkval>
    18d0:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <__brkval+0x1>
    18d4:	e2 17       	cp	r30, r18
    18d6:	f3 07       	cpc	r31, r19
    18d8:	a0 f4       	brcc	.+40     	; 0x1902 <malloc+0x120>
    18da:	2e 1b       	sub	r18, r30
    18dc:	3f 0b       	sbc	r19, r31
    18de:	28 17       	cp	r18, r24
    18e0:	39 07       	cpc	r19, r25
    18e2:	78 f0       	brcs	.+30     	; 0x1902 <malloc+0x120>
    18e4:	ac 01       	movw	r20, r24
    18e6:	4e 5f       	subi	r20, 0xFE	; 254
    18e8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ea:	24 17       	cp	r18, r20
    18ec:	35 07       	cpc	r19, r21
    18ee:	48 f0       	brcs	.+18     	; 0x1902 <malloc+0x120>
    18f0:	4e 0f       	add	r20, r30
    18f2:	5f 1f       	adc	r21, r31
    18f4:	50 93 e6 01 	sts	0x01E6, r21	; 0x8001e6 <__brkval+0x1>
    18f8:	40 93 e5 01 	sts	0x01E5, r20	; 0x8001e5 <__brkval>
    18fc:	81 93       	st	Z+, r24
    18fe:	91 93       	st	Z+, r25
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <malloc+0x124>
    1902:	e0 e0       	ldi	r30, 0x00	; 0
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	cf 01       	movw	r24, r30
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	08 95       	ret

00001912 <free>:
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	09 f4       	brne	.+2      	; 0x191c <free+0xa>
    191a:	81 c0       	rjmp	.+258    	; 0x1a1e <free+0x10c>
    191c:	fc 01       	movw	r30, r24
    191e:	32 97       	sbiw	r30, 0x02	; 2
    1920:	13 82       	std	Z+3, r1	; 0x03
    1922:	12 82       	std	Z+2, r1	; 0x02
    1924:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <__flp>
    1928:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <__flp+0x1>
    192c:	10 97       	sbiw	r26, 0x00	; 0
    192e:	81 f4       	brne	.+32     	; 0x1950 <free+0x3e>
    1930:	20 81       	ld	r18, Z
    1932:	31 81       	ldd	r19, Z+1	; 0x01
    1934:	82 0f       	add	r24, r18
    1936:	93 1f       	adc	r25, r19
    1938:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <__brkval>
    193c:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <__brkval+0x1>
    1940:	28 17       	cp	r18, r24
    1942:	39 07       	cpc	r19, r25
    1944:	51 f5       	brne	.+84     	; 0x199a <free+0x88>
    1946:	f0 93 e6 01 	sts	0x01E6, r31	; 0x8001e6 <__brkval+0x1>
    194a:	e0 93 e5 01 	sts	0x01E5, r30	; 0x8001e5 <__brkval>
    194e:	67 c0       	rjmp	.+206    	; 0x1a1e <free+0x10c>
    1950:	ed 01       	movw	r28, r26
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	ce 17       	cp	r28, r30
    1958:	df 07       	cpc	r29, r31
    195a:	40 f4       	brcc	.+16     	; 0x196c <free+0x5a>
    195c:	4a 81       	ldd	r20, Y+2	; 0x02
    195e:	5b 81       	ldd	r21, Y+3	; 0x03
    1960:	9e 01       	movw	r18, r28
    1962:	41 15       	cp	r20, r1
    1964:	51 05       	cpc	r21, r1
    1966:	f1 f0       	breq	.+60     	; 0x19a4 <free+0x92>
    1968:	ea 01       	movw	r28, r20
    196a:	f5 cf       	rjmp	.-22     	; 0x1956 <free+0x44>
    196c:	d3 83       	std	Z+3, r29	; 0x03
    196e:	c2 83       	std	Z+2, r28	; 0x02
    1970:	40 81       	ld	r20, Z
    1972:	51 81       	ldd	r21, Z+1	; 0x01
    1974:	84 0f       	add	r24, r20
    1976:	95 1f       	adc	r25, r21
    1978:	c8 17       	cp	r28, r24
    197a:	d9 07       	cpc	r29, r25
    197c:	59 f4       	brne	.+22     	; 0x1994 <free+0x82>
    197e:	88 81       	ld	r24, Y
    1980:	99 81       	ldd	r25, Y+1	; 0x01
    1982:	84 0f       	add	r24, r20
    1984:	95 1f       	adc	r25, r21
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	93 83       	std	Z+3, r25	; 0x03
    1992:	82 83       	std	Z+2, r24	; 0x02
    1994:	21 15       	cp	r18, r1
    1996:	31 05       	cpc	r19, r1
    1998:	29 f4       	brne	.+10     	; 0x19a4 <free+0x92>
    199a:	f0 93 e8 01 	sts	0x01E8, r31	; 0x8001e8 <__flp+0x1>
    199e:	e0 93 e7 01 	sts	0x01E7, r30	; 0x8001e7 <__flp>
    19a2:	3d c0       	rjmp	.+122    	; 0x1a1e <free+0x10c>
    19a4:	e9 01       	movw	r28, r18
    19a6:	fb 83       	std	Y+3, r31	; 0x03
    19a8:	ea 83       	std	Y+2, r30	; 0x02
    19aa:	49 91       	ld	r20, Y+
    19ac:	59 91       	ld	r21, Y+
    19ae:	c4 0f       	add	r28, r20
    19b0:	d5 1f       	adc	r29, r21
    19b2:	ec 17       	cp	r30, r28
    19b4:	fd 07       	cpc	r31, r29
    19b6:	61 f4       	brne	.+24     	; 0x19d0 <free+0xbe>
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	84 0f       	add	r24, r20
    19be:	95 1f       	adc	r25, r21
    19c0:	02 96       	adiw	r24, 0x02	; 2
    19c2:	e9 01       	movw	r28, r18
    19c4:	99 83       	std	Y+1, r25	; 0x01
    19c6:	88 83       	st	Y, r24
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	e0 e0       	ldi	r30, 0x00	; 0
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	12 96       	adiw	r26, 0x02	; 2
    19d6:	8d 91       	ld	r24, X+
    19d8:	9c 91       	ld	r25, X
    19da:	13 97       	sbiw	r26, 0x03	; 3
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	19 f0       	breq	.+6      	; 0x19e6 <free+0xd4>
    19e0:	fd 01       	movw	r30, r26
    19e2:	dc 01       	movw	r26, r24
    19e4:	f7 cf       	rjmp	.-18     	; 0x19d4 <free+0xc2>
    19e6:	8d 91       	ld	r24, X+
    19e8:	9c 91       	ld	r25, X
    19ea:	11 97       	sbiw	r26, 0x01	; 1
    19ec:	9d 01       	movw	r18, r26
    19ee:	2e 5f       	subi	r18, 0xFE	; 254
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	82 0f       	add	r24, r18
    19f4:	93 1f       	adc	r25, r19
    19f6:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <__brkval>
    19fa:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <__brkval+0x1>
    19fe:	28 17       	cp	r18, r24
    1a00:	39 07       	cpc	r19, r25
    1a02:	69 f4       	brne	.+26     	; 0x1a1e <free+0x10c>
    1a04:	30 97       	sbiw	r30, 0x00	; 0
    1a06:	29 f4       	brne	.+10     	; 0x1a12 <free+0x100>
    1a08:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <__flp+0x1>
    1a0c:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__flp>
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <free+0x104>
    1a12:	13 82       	std	Z+3, r1	; 0x03
    1a14:	12 82       	std	Z+2, r1	; 0x02
    1a16:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <__brkval+0x1>
    1a1a:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <__brkval>
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <strnlen_P>:
    1a24:	fc 01       	movw	r30, r24
    1a26:	05 90       	lpm	r0, Z+
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	70 40       	sbci	r23, 0x00	; 0
    1a2c:	01 10       	cpse	r0, r1
    1a2e:	d8 f7       	brcc	.-10     	; 0x1a26 <strnlen_P+0x2>
    1a30:	80 95       	com	r24
    1a32:	90 95       	com	r25
    1a34:	8e 0f       	add	r24, r30
    1a36:	9f 1f       	adc	r25, r31
    1a38:	08 95       	ret

00001a3a <memset>:
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <memset+0x6>
    1a3e:	6d 93       	st	X+, r22
    1a40:	41 50       	subi	r20, 0x01	; 1
    1a42:	50 40       	sbci	r21, 0x00	; 0
    1a44:	e0 f7       	brcc	.-8      	; 0x1a3e <memset+0x4>
    1a46:	08 95       	ret

00001a48 <strnlen>:
    1a48:	fc 01       	movw	r30, r24
    1a4a:	61 50       	subi	r22, 0x01	; 1
    1a4c:	70 40       	sbci	r23, 0x00	; 0
    1a4e:	01 90       	ld	r0, Z+
    1a50:	01 10       	cpse	r0, r1
    1a52:	d8 f7       	brcc	.-10     	; 0x1a4a <strnlen+0x2>
    1a54:	80 95       	com	r24
    1a56:	90 95       	com	r25
    1a58:	8e 0f       	add	r24, r30
    1a5a:	9f 1f       	adc	r25, r31
    1a5c:	08 95       	ret

00001a5e <fputc>:
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	fb 01       	movw	r30, r22
    1a68:	23 81       	ldd	r18, Z+3	; 0x03
    1a6a:	21 fd       	sbrc	r18, 1
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <fputc+0x16>
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	2c c0       	rjmp	.+88     	; 0x1acc <fputc+0x6e>
    1a74:	22 ff       	sbrs	r18, 2
    1a76:	16 c0       	rjmp	.+44     	; 0x1aa4 <fputc+0x46>
    1a78:	46 81       	ldd	r20, Z+6	; 0x06
    1a7a:	57 81       	ldd	r21, Z+7	; 0x07
    1a7c:	24 81       	ldd	r18, Z+4	; 0x04
    1a7e:	35 81       	ldd	r19, Z+5	; 0x05
    1a80:	42 17       	cp	r20, r18
    1a82:	53 07       	cpc	r21, r19
    1a84:	44 f4       	brge	.+16     	; 0x1a96 <fputc+0x38>
    1a86:	a0 81       	ld	r26, Z
    1a88:	b1 81       	ldd	r27, Z+1	; 0x01
    1a8a:	9d 01       	movw	r18, r26
    1a8c:	2f 5f       	subi	r18, 0xFF	; 255
    1a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a90:	31 83       	std	Z+1, r19	; 0x01
    1a92:	20 83       	st	Z, r18
    1a94:	8c 93       	st	X, r24
    1a96:	26 81       	ldd	r18, Z+6	; 0x06
    1a98:	37 81       	ldd	r19, Z+7	; 0x07
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	37 83       	std	Z+7, r19	; 0x07
    1aa0:	26 83       	std	Z+6, r18	; 0x06
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <fputc+0x6e>
    1aa4:	8b 01       	movw	r16, r22
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	fb 01       	movw	r30, r22
    1aaa:	00 84       	ldd	r0, Z+8	; 0x08
    1aac:	f1 85       	ldd	r31, Z+9	; 0x09
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	09 95       	icall
    1ab2:	89 2b       	or	r24, r25
    1ab4:	e1 f6       	brne	.-72     	; 0x1a6e <fputc+0x10>
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	16 96       	adiw	r26, 0x06	; 6
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	17 97       	sbiw	r26, 0x07	; 7
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	17 96       	adiw	r26, 0x07	; 7
    1ac4:	9c 93       	st	X, r25
    1ac6:	8e 93       	st	-X, r24
    1ac8:	16 97       	sbiw	r26, 0x06	; 6
    1aca:	ce 01       	movw	r24, r28
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <__ultoa_invert>:
    1ad6:	fa 01       	movw	r30, r20
    1ad8:	aa 27       	eor	r26, r26
    1ada:	28 30       	cpi	r18, 0x08	; 8
    1adc:	51 f1       	breq	.+84     	; 0x1b32 <__ultoa_invert+0x5c>
    1ade:	20 31       	cpi	r18, 0x10	; 16
    1ae0:	81 f1       	breq	.+96     	; 0x1b42 <__ultoa_invert+0x6c>
    1ae2:	e8 94       	clt
    1ae4:	6f 93       	push	r22
    1ae6:	6e 7f       	andi	r22, 0xFE	; 254
    1ae8:	6e 5f       	subi	r22, 0xFE	; 254
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	af 4f       	sbci	r26, 0xFF	; 255
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	3e d0       	rcall	.+124    	; 0x1b72 <__ultoa_invert+0x9c>
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	3c d0       	rcall	.+120    	; 0x1b72 <__ultoa_invert+0x9c>
    1afa:	67 0f       	add	r22, r23
    1afc:	78 1f       	adc	r23, r24
    1afe:	89 1f       	adc	r24, r25
    1b00:	9a 1f       	adc	r25, r26
    1b02:	a1 1d       	adc	r26, r1
    1b04:	68 0f       	add	r22, r24
    1b06:	79 1f       	adc	r23, r25
    1b08:	8a 1f       	adc	r24, r26
    1b0a:	91 1d       	adc	r25, r1
    1b0c:	a1 1d       	adc	r26, r1
    1b0e:	6a 0f       	add	r22, r26
    1b10:	71 1d       	adc	r23, r1
    1b12:	81 1d       	adc	r24, r1
    1b14:	91 1d       	adc	r25, r1
    1b16:	a1 1d       	adc	r26, r1
    1b18:	20 d0       	rcall	.+64     	; 0x1b5a <__ultoa_invert+0x84>
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <__ultoa_invert+0x48>
    1b1c:	68 94       	set
    1b1e:	3f 91       	pop	r19
    1b20:	2a e0       	ldi	r18, 0x0A	; 10
    1b22:	26 9f       	mul	r18, r22
    1b24:	11 24       	eor	r1, r1
    1b26:	30 19       	sub	r19, r0
    1b28:	30 5d       	subi	r19, 0xD0	; 208
    1b2a:	31 93       	st	Z+, r19
    1b2c:	de f6       	brtc	.-74     	; 0x1ae4 <__ultoa_invert+0xe>
    1b2e:	cf 01       	movw	r24, r30
    1b30:	08 95       	ret
    1b32:	46 2f       	mov	r20, r22
    1b34:	47 70       	andi	r20, 0x07	; 7
    1b36:	40 5d       	subi	r20, 0xD0	; 208
    1b38:	41 93       	st	Z+, r20
    1b3a:	b3 e0       	ldi	r27, 0x03	; 3
    1b3c:	0f d0       	rcall	.+30     	; 0x1b5c <__ultoa_invert+0x86>
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0x5c>
    1b40:	f6 cf       	rjmp	.-20     	; 0x1b2e <__ultoa_invert+0x58>
    1b42:	46 2f       	mov	r20, r22
    1b44:	4f 70       	andi	r20, 0x0F	; 15
    1b46:	40 5d       	subi	r20, 0xD0	; 208
    1b48:	4a 33       	cpi	r20, 0x3A	; 58
    1b4a:	18 f0       	brcs	.+6      	; 0x1b52 <__ultoa_invert+0x7c>
    1b4c:	49 5d       	subi	r20, 0xD9	; 217
    1b4e:	31 fd       	sbrc	r19, 1
    1b50:	40 52       	subi	r20, 0x20	; 32
    1b52:	41 93       	st	Z+, r20
    1b54:	02 d0       	rcall	.+4      	; 0x1b5a <__ultoa_invert+0x84>
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <__ultoa_invert+0x6c>
    1b58:	ea cf       	rjmp	.-44     	; 0x1b2e <__ultoa_invert+0x58>
    1b5a:	b4 e0       	ldi	r27, 0x04	; 4
    1b5c:	a6 95       	lsr	r26
    1b5e:	97 95       	ror	r25
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__ultoa_invert+0x86>
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	61 05       	cpc	r22, r1
    1b6e:	71 05       	cpc	r23, r1
    1b70:	08 95       	ret
    1b72:	9b 01       	movw	r18, r22
    1b74:	ac 01       	movw	r20, r24
    1b76:	0a 2e       	mov	r0, r26
    1b78:	06 94       	lsr	r0
    1b7a:	57 95       	ror	r21
    1b7c:	47 95       	ror	r20
    1b7e:	37 95       	ror	r19
    1b80:	27 95       	ror	r18
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0xa2>
    1b86:	62 0f       	add	r22, r18
    1b88:	73 1f       	adc	r23, r19
    1b8a:	84 1f       	adc	r24, r20
    1b8c:	95 1f       	adc	r25, r21
    1b8e:	a0 1d       	adc	r26, r0
    1b90:	08 95       	ret

00001b92 <__prologue_saves__>:
    1b92:	2f 92       	push	r2
    1b94:	3f 92       	push	r3
    1b96:	4f 92       	push	r4
    1b98:	5f 92       	push	r5
    1b9a:	6f 92       	push	r6
    1b9c:	7f 92       	push	r7
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	ca 1b       	sub	r28, r26
    1bbc:	db 0b       	sbc	r29, r27
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	09 94       	ijmp

00001bca <__epilogue_restores__>:
    1bca:	2a 88       	ldd	r2, Y+18	; 0x12
    1bcc:	39 88       	ldd	r3, Y+17	; 0x11
    1bce:	48 88       	ldd	r4, Y+16	; 0x10
    1bd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bda:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bdc:	b9 84       	ldd	r11, Y+9	; 0x09
    1bde:	c8 84       	ldd	r12, Y+8	; 0x08
    1be0:	df 80       	ldd	r13, Y+7	; 0x07
    1be2:	ee 80       	ldd	r14, Y+6	; 0x06
    1be4:	fd 80       	ldd	r15, Y+5	; 0x05
    1be6:	0c 81       	ldd	r16, Y+4	; 0x04
    1be8:	1b 81       	ldd	r17, Y+3	; 0x03
    1bea:	aa 81       	ldd	r26, Y+2	; 0x02
    1bec:	b9 81       	ldd	r27, Y+1	; 0x01
    1bee:	ce 0f       	add	r28, r30
    1bf0:	d1 1d       	adc	r29, r1
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	ed 01       	movw	r28, r26
    1bfe:	08 95       	ret

00001c00 <_exit>:
    1c00:	f8 94       	cli

00001c02 <__stop_program>:
    1c02:	ff cf       	rjmp	.-2      	; 0x1c02 <__stop_program>
