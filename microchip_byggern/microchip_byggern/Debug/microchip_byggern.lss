
microchip_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000c96  00000d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800148  00800148  00000d72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bcb  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  00002b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1b  00000000  00000000  00003a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e0  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080b  00000000  00000000  000053a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e9       	ldi	r30, 0x96	; 150
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 34       	cpi	r26, 0x48	; 72
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e4       	ldi	r26, 0x48	; 72
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 35       	cpi	r26, 0x5B	; 91
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 49 06 	jmp	0xc92	; 0xc92 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "can.h"


int main(void)
{
	usart_init(USART_BAUD_RATE_REGISTER);
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <usart_init>
	printf("hello world ");
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	9f 93       	push	r25
  bc:	8f 93       	push	r24
  be:	0e 94 f7 01 	call	0x3ee	; 0x3ee <printf>
	
	//SREG |= (1 << 7); // Enable global interrupts
	
	xmem_init();
  c2:	0e 94 a2 01 	call	0x344	; 0x344 <xmem_init>
	adc_init();
  c6:	0e 94 84 01 	call	0x308	; 0x308 <adc_init>
	OLED_init();
  ca:	0e 94 0e 01 	call	0x21c	; 0x21c <OLED_init>
	menu_init();
  ce:	0e 94 c2 00 	call	0x184	; 0x184 <menu_init>
	mcp2515_init();
  d2:	0e 94 a8 00 	call	0x150	; 0x150 <mcp2515_init>
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
	
	while (1)
	{
		SPI_write(0);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
  e0:	fc cf       	rjmp	.-8      	; 0xda <main+0x2c>

000000e2 <mcp2515_read>:
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
}

void mcp2515_request_to_send()
{
    SPI_write(MCP_RTS_TX0);
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
  f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SPI_read>
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	90 61       	ori	r25, 0x10	; 16
 100:	98 bb       	out	0x18, r25	; 24
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <mcp2515_bit_modify>:
}
void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	18 2f       	mov	r17, r24
 10e:	d6 2f       	mov	r29, r22
 110:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4 ); // Select CAN - controller
 112:	88 b3       	in	r24, 0x18	; 24
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	88 bb       	out	0x18, r24	; 24
    SPI_write(MCP_BITMOD);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
    SPI_write(address);
 11e:	81 2f       	mov	r24, r17
 120:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
    SPI_write(mask);
 124:	8d 2f       	mov	r24, r29
 126:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
    SPI_write(data);
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
    PORTB |= (1 << PB4 ); // Deselect CAN - controller
 130:	88 b3       	in	r24, 0x18	; 24
 132:	80 61       	ori	r24, 0x10	; 16
 134:	88 bb       	out	0x18, r24	; 24
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <mcp2515_reset>:
void mcp2515_reset()
{
    SPI_write(MCP_RESET);
 13e:	80 ec       	ldi	r24, 0xC0	; 192
 140:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SPI_write>
	
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	60 ee       	ldi	r22, 0xE0	; 224
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	0e 94 83 00 	call	0x106	; 0x106 <mcp2515_bit_modify>
 14e:	08 95       	ret

00000150 <mcp2515_init>:
#include "mcp.h"

uint8_t mcp2515_init ()
{
    DDRB |= (1 << PB4 ); // Set CS - pin as output
 150:	87 b3       	in	r24, 0x17	; 23
 152:	80 61       	ori	r24, 0x10	; 16
 154:	87 bb       	out	0x17, r24	; 23

    
    SPI_init () ; // Initialize SPI
 156:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_init>
    mcp2515_reset () ; // Send reset - command
 15a:	0e 94 9f 00 	call	0x13e	; 0x13e <mcp2515_reset>
    // Self - test
	
    uint8_t value = mcp2515_read ( MCP_CANSTAT  );
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 71 00 	call	0xe2	; 0xe2 <mcp2515_read>
	
    if (( value & MODE_MASK ) != MODE_CONFIG ) {
 164:	80 7e       	andi	r24, 0xE0	; 224
 166:	80 38       	cpi	r24, 0x80	; 128
 168:	31 f0       	breq	.+12     	; 0x176 <mcp2515_init+0x26>
        printf (" MCP2515 is NOT in configuration mode after reset !\n");
 16a:	83 e1       	ldi	r24, 0x13	; 19
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 0d 02 	call	0x41a	; 0x41a <puts>
        return 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret
    }
    mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
 176:	40 e4       	ldi	r20, 0x40	; 64
 178:	60 ee       	ldi	r22, 0xE0	; 224
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	0e 94 83 00 	call	0x106	; 0x106 <mcp2515_bit_modify>
    // More initialization
    return 0;
 180:	80 e0       	ldi	r24, 0x00	; 0
}
 182:	08 95       	ret

00000184 <menu_init>:
#include "menu.h"

void menu_init()
{
	selected_position = 0;
 184:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
	current_menu = 0;
 188:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <current_menu>
	OLED_pos(0, 0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <OLED_pos>
	OLED_reset();
 198:	0e 94 d5 00 	call	0x1aa	; 0x1aa <OLED_reset>
 19c:	08 95       	ret

0000019e <OLED_write_data>:
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
}
void OLED_write_data(char data)
{
	volatile char* oled_data_register = (char*) BASE_ADDRESS_OLED_DATA;
	oled_data_register[0] = data;
 19e:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10a5>
 1a2:	08 95       	ret

000001a4 <OLED_write_command>:
}
void OLED_write_command(char data)
{
	volatile char* oled_command_register = (char*) BASE_ADDRESS_OLED_COMMAND;
	oled_command_register[0] = data;
 1a4:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xea5>
 1a8:	08 95       	ret

000001aa <OLED_reset>:
} // PDF:"OLED LY190-128064" section 9.4



void OLED_reset()
{
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
	for (int page = 0; page < 8; page++)
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	16 c0       	rjmp	.+44     	; 0x1e4 <OLED_reset+0x3a>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
 1b8:	80 eb       	ldi	r24, 0xB0	; 176
 1ba:	80 0f       	add	r24, r16
 1bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
		
		for (int i = 0; i < 128; i++)
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <OLED_reset+0x30>
		{
			OLED_write_data(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 cf 00 	call	0x19e	; 0x19e <OLED_write_data>
	{
		OLED_write_command(0xb0 + page); // Set the page start address of the target display location by command B0h to B7h
		OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
		OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh
		
		for (int i = 0; i < 128; i++)
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	c0 38       	cpi	r28, 0x80	; 128
 1dc:	d1 05       	cpc	r29, r1
 1de:	cc f3       	brlt	.-14     	; 0x1d2 <OLED_reset+0x28>



void OLED_reset()
{
	for (int page = 0; page < 8; page++)
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	08 30       	cpi	r16, 0x08	; 8
 1e6:	11 05       	cpc	r17, r1
 1e8:	3c f3       	brlt	.-50     	; 0x1b8 <OLED_reset+0xe>
		for (int i = 0; i < 128; i++)
		{
			OLED_write_data(0);
		}
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <OLED_pos>:
void OLED_clear_line(uint8_t line)
{
	
}
void OLED_pos(uint8_t row, uint8_t column)
{
 1f4:	cf 93       	push	r28
 1f6:	c6 2f       	mov	r28, r22
	OLED_write_command(0xb0 + row / 8); // Set the page start address of the target display location by command B0h to B7h
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	80 55       	subi	r24, 0x50	; 80
 200:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x00 + column % 16); // Set the lower start column address of pointer by command 00h~0Fh.
 204:	8c 2f       	mov	r24, r28
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x10 + column / 16); // Set the upper start column address of pointer by command 10h~1Fh
 20c:	8c 2f       	mov	r24, r28
 20e:	82 95       	swap	r24
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	80 5f       	subi	r24, 0xF0	; 240
 214:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
}
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <OLED_init>:
#include <avr/pgmspace.h>

void OLED_init()
{
	
	OLED_write_command(0xae); // display off
 21c:	8e ea       	ldi	r24, 0xAE	; 174
 21e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xa1); //segment remap
 222:	81 ea       	ldi	r24, 0xA1	; 161
 224:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xda); //common pads hardware: alternative
 228:	8a ed       	ldi	r24, 0xDA	; 218
 22a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x12);
 22e:	82 e1       	ldi	r24, 0x12	; 18
 230:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xc8); //common output scan direction:com63~com0
 234:	88 ec       	ldi	r24, 0xC8	; 200
 236:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xa8); //multiplex ration mode:63
 23a:	88 ea       	ldi	r24, 0xA8	; 168
 23c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x3f);
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xd5); //display divide ratio/osc. freq. mode
 246:	85 ed       	ldi	r24, 0xD5	; 213
 248:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x80);
 24c:	80 e8       	ldi	r24, 0x80	; 128
 24e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x81); //contrast control
 252:	81 e8       	ldi	r24, 0x81	; 129
 254:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x50);
 258:	80 e5       	ldi	r24, 0x50	; 80
 25a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xd9); //set pre-charge period
 25e:	89 ed       	ldi	r24, 0xD9	; 217
 260:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x21);
 264:	81 e2       	ldi	r24, 0x21	; 33
 266:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x20); //Set Memory Addressing Mode
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x02);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xdb); //VCOM deselect level mode
 276:	8b ed       	ldi	r24, 0xDB	; 219
 278:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x30);
 27c:	80 e3       	ldi	r24, 0x30	; 48
 27e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xad); //master configuration
 282:	8d ea       	ldi	r24, 0xAD	; 173
 284:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0x00);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xa4); //out follows RAM content
 28e:	84 ea       	ldi	r24, 0xA4	; 164
 290:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xa6); //set normal display
 294:	86 ea       	ldi	r24, 0xA6	; 166
 296:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	OLED_write_command(0xaf); // display on
 29a:	8f ea       	ldi	r24, 0xAF	; 175
 29c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <OLED_write_command>
	//OLED_write_command(0xa5);
	/*OLED_write_command(0xb0); // Set the page start address of the target display location by command B0h to B7h
	OLED_write_command(0x00); // Set the lower start column address of pointer by command 00h~0Fh.
	OLED_write_command(0x10); // Set the upper start column address of pointer by command 10h~1Fh*/
	
	OLED_reset();
 2a0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <OLED_reset>
	OLED_pos(0, 0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <OLED_pos>
 2ac:	08 95       	ret

000002ae <SPI_init>:
#include <avr/io.h>

void SPI_init(){
	
	/* Set MOSI, SCK output, all others input */
	DDRB |= (1 << PB5) | (1 << PB7);
 2ae:	87 b3       	in	r24, 0x17	; 23
 2b0:	80 6a       	ori	r24, 0xA0	; 160
 2b2:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	//SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPIE) ;
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0) ;
 2b4:	8d b1       	in	r24, 0x0d	; 13
 2b6:	81 65       	ori	r24, 0x51	; 81
 2b8:	8d b9       	out	0x0d, r24	; 13
 2ba:	08 95       	ret

000002bc <SPI_write>:
}

void SPI_write(char cData){
	
	/* Start transmission */
	SPDR = cData;
 2bc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
 2be:	77 9b       	sbis	0x0e, 7	; 14
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <SPI_write+0x2>
	;
	
	
	
}
 2c2:	08 95       	ret

000002c4 <SPI_read>:

char SPI_read(){
	
	/* Start transmission */
	SPDR = 0b00000000;
 2c4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)))
 2c6:	77 9b       	sbis	0x0e, 7	; 14
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <SPI_read+0x2>
	;
	/* Received byte is found on the same register */
	return SPDR;
 2ca:	8f b1       	in	r24, 0x0f	; 15

 2cc:	08 95       	ret

000002ce <USART_Transmit>:
    
}
void USART_Transmit(unsigned char data)
{
    // Wait until the transmitter buffer is empty
    while ( !( UCSR0A & (1<<UDRE0)) ); // USART Control and Status Register A, USART Data Register Empty
 2ce:	5d 9b       	sbis	0x0b, 5	; 11
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <USART_Transmit>
    // Send data
    UDR0 = data; // USART Data Register
 2d2:	8c b9       	out	0x0c, r24	; 12
 2d4:	08 95       	ret

000002d6 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
 2d6:	5f 9b       	sbis	0x0b, 7	; 11
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <USART_Receive+0x8>
        return '\0';
    // Return data received
    return UDR0; // USART Data Register
 2da:	8c b1       	in	r24, 0x0c	; 12
 2dc:	08 95       	ret

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
        return '\0';
 2de:	80 e0       	ldi	r24, 0x00	; 0
    // Return data received
    return UDR0; // USART Data Register
 2e0:	08 95       	ret

000002e2 <usart_init>:

// static FILE usart_stream_write = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
// static FILE usart_stream_read = FDEV_SETUP_STREAM(NULL, USART_Transmit, _FDEV_SETUP_READ);

void usart_init(unsigned int usart_baud_rate_register)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	c8 2f       	mov	r28, r24
 2e8:	d9 2f       	mov	r29, r25
    // Open read/write stream over USART https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html#gab599ddf60819df4cc993c724a83cb1a4
    fdevopen(USART_Transmit, USART_Receive);
 2ea:	6b e6       	ldi	r22, 0x6B	; 107
 2ec:	71 e0       	ldi	r23, 0x01	; 1
 2ee:	87 e6       	ldi	r24, 0x67	; 103
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 ac 01 	call	0x358	; 0x358 <fdevopen>
    // Set baud rate registers
    UBRR0H = (unsigned char)(usart_baud_rate_register>>8); // usart_baud_rate_register_high
 2f6:	d0 bd       	out	0x20, r29	; 32
    UBRR0L = (unsigned char)usart_baud_rate_register; // usart_baud_rate_register_low
 2f8:	c9 b9       	out	0x09, r28	; 9
    
    // Enable RX and TX registers
    UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Universal Synchronous Asynchronous Receiver Transmitter Register B, RX Enable, TX Enable
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	8a b9       	out	0x0a, r24	; 10
    
	
    // Set frame format to 8 data bits, 2 stop bits
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // Universal Synchronous Asynchronous Receiver Transmitter Register C, USART Register Select, USART Stop Bit Select, USART Character Size Select
 2fe:	8e e8       	ldi	r24, 0x8E	; 142
 300:	80 bd       	out	0x20, r24	; 32
    
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <adc_init>:
	
	OCR1A = (FREQUENCY_OF_OSCILLATOR / (2 * 64 * FREQUENCY_OF_OSCILLATOR)) -1;
	
	TCNT1 = 0; // Enable counter*/

	DDRD |= 1 << PD4;
 308:	81 b3       	in	r24, 0x11	; 17
 30a:	80 61       	ori	r24, 0x10	; 16
 30c:	81 bb       	out	0x11, r24	; 17
	TCCR3A |= (1 << COM3A0); // Toggle on compare
 30e:	ab e8       	ldi	r26, 0x8B	; 139
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	8c 91       	ld	r24, X
 314:	80 64       	ori	r24, 0x40	; 64
 316:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32);
 318:	ea e8       	ldi	r30, 0x8A	; 138
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	88 61       	ori	r24, 0x18	; 24
 320:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30); // Fast PWM OCRnA, datasheet p.130
 322:	8c 91       	ld	r24, X
 324:	83 60       	ori	r24, 0x03	; 3
 326:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS30); // No prescaling, datasheet p.132
 328:	80 81       	ld	r24, Z
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	80 83       	st	Z, r24
	OCR3A = 0;
 32e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
 332:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	
	// Enable button input
	DDRD &= ~(1 << PD2);
 336:	81 b3       	in	r24, 0x11	; 17
 338:	8b 7f       	andi	r24, 0xFB	; 251
 33a:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD3);
 33c:	81 b3       	in	r24, 0x11	; 17
 33e:	87 7f       	andi	r24, 0xF7	; 247
 340:	81 bb       	out	0x11, r24	; 17
}
 342:	08 95       	ret

00000344 <xmem_init>:
#include "xmem.h"

// From lab lecture
void xmem_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
 344:	85 b7       	in	r24, 0x35	; 53
 346:	80 68       	ori	r24, 0x80	; 128
 348:	85 bf       	out	0x35, r24	; 53
	// Mask out some port C address pins for JTAG (datasheet page 32)
	SFIOR |= 1 << XMM2;
 34a:	80 b7       	in	r24, 0x30	; 48
 34c:	80 62       	ori	r24, 0x20	; 32
 34e:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 | 1 << XMM1);
 350:	80 b7       	in	r24, 0x30	; 48
 352:	87 7e       	andi	r24, 0xE7	; 231
 354:	80 bf       	out	0x30, r24	; 48
 356:	08 95       	ret

00000358 <fdevopen>:
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	31 f4       	brne	.+12     	; 0x370 <fdevopen+0x18>
 364:	61 15       	cp	r22, r1
 366:	71 05       	cpc	r23, r1
 368:	19 f4       	brne	.+6      	; 0x370 <fdevopen+0x18>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	3a c0       	rjmp	.+116    	; 0x3e4 <fdevopen+0x8c>
 370:	8b 01       	movw	r16, r22
 372:	ec 01       	movw	r28, r24
 374:	6e e0       	ldi	r22, 0x0E	; 14
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 1e 04 	call	0x83c	; 0x83c <calloc>
 380:	fc 01       	movw	r30, r24
 382:	89 2b       	or	r24, r25
 384:	91 f3       	breq	.-28     	; 0x36a <fdevopen+0x12>
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	83 83       	std	Z+3, r24	; 0x03
 38a:	01 15       	cp	r16, r1
 38c:	11 05       	cpc	r17, r1
 38e:	71 f0       	breq	.+28     	; 0x3ac <fdevopen+0x54>
 390:	13 87       	std	Z+11, r17	; 0x0b
 392:	02 87       	std	Z+10, r16	; 0x0a
 394:	81 e8       	ldi	r24, 0x81	; 129
 396:	83 83       	std	Z+3, r24	; 0x03
 398:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__iob>
 39c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <__iob+0x1>
 3a0:	89 2b       	or	r24, r25
 3a2:	21 f4       	brne	.+8      	; 0x3ac <fdevopen+0x54>
 3a4:	f0 93 52 01 	sts	0x0152, r31	; 0x800152 <__iob+0x1>
 3a8:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <__iob>
 3ac:	20 97       	sbiw	r28, 0x00	; 0
 3ae:	c9 f0       	breq	.+50     	; 0x3e2 <fdevopen+0x8a>
 3b0:	d1 87       	std	Z+9, r29	; 0x09
 3b2:	c0 87       	std	Z+8, r28	; 0x08
 3b4:	83 81       	ldd	r24, Z+3	; 0x03
 3b6:	82 60       	ori	r24, 0x02	; 2
 3b8:	83 83       	std	Z+3, r24	; 0x03
 3ba:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__iob+0x2>
 3be:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__iob+0x3>
 3c2:	89 2b       	or	r24, r25
 3c4:	71 f4       	brne	.+28     	; 0x3e2 <fdevopen+0x8a>
 3c6:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <__iob+0x3>
 3ca:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <__iob+0x2>
 3ce:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <__iob+0x4>
 3d2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__iob+0x5>
 3d6:	89 2b       	or	r24, r25
 3d8:	21 f4       	brne	.+8      	; 0x3e2 <fdevopen+0x8a>
 3da:	f0 93 56 01 	sts	0x0156, r31	; 0x800156 <__iob+0x5>
 3de:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <__iob+0x4>
 3e2:	cf 01       	movw	r24, r30
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <printf>:
 3ee:	a0 e0       	ldi	r26, 0x00	; 0
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	ed ef       	ldi	r30, 0xFD	; 253
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__prologue_saves__+0x20>
 3fa:	ae 01       	movw	r20, r28
 3fc:	4b 5f       	subi	r20, 0xFB	; 251
 3fe:	5f 4f       	sbci	r21, 0xFF	; 255
 400:	fa 01       	movw	r30, r20
 402:	61 91       	ld	r22, Z+
 404:	71 91       	ld	r23, Z+
 406:	af 01       	movw	r20, r30
 408:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__iob+0x2>
 40c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__iob+0x3>
 410:	0e 94 3d 02 	call	0x47a	; 0x47a <vfprintf>
 414:	e2 e0       	ldi	r30, 0x02	; 2
 416:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__epilogue_restores__+0x20>

0000041a <puts>:
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <__iob+0x2>
 426:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <__iob+0x3>
 42a:	23 81       	ldd	r18, Z+3	; 0x03
 42c:	21 ff       	sbrs	r18, 1
 42e:	1b c0       	rjmp	.+54     	; 0x466 <puts+0x4c>
 430:	8c 01       	movw	r16, r24
 432:	d0 e0       	ldi	r29, 0x00	; 0
 434:	c0 e0       	ldi	r28, 0x00	; 0
 436:	f8 01       	movw	r30, r16
 438:	81 91       	ld	r24, Z+
 43a:	8f 01       	movw	r16, r30
 43c:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <__iob+0x2>
 440:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <__iob+0x3>
 444:	db 01       	movw	r26, r22
 446:	18 96       	adiw	r26, 0x08	; 8
 448:	ed 91       	ld	r30, X+
 44a:	fc 91       	ld	r31, X
 44c:	19 97       	sbiw	r26, 0x09	; 9
 44e:	88 23       	and	r24, r24
 450:	31 f0       	breq	.+12     	; 0x45e <puts+0x44>
 452:	09 95       	icall
 454:	89 2b       	or	r24, r25
 456:	79 f3       	breq	.-34     	; 0x436 <puts+0x1c>
 458:	df ef       	ldi	r29, 0xFF	; 255
 45a:	cf ef       	ldi	r28, 0xFF	; 255
 45c:	ec cf       	rjmp	.-40     	; 0x436 <puts+0x1c>
 45e:	8a e0       	ldi	r24, 0x0A	; 10
 460:	09 95       	icall
 462:	89 2b       	or	r24, r25
 464:	19 f0       	breq	.+6      	; 0x46c <puts+0x52>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	9f ef       	ldi	r25, 0xFF	; 255
 46a:	02 c0       	rjmp	.+4      	; 0x470 <puts+0x56>
 46c:	8d 2f       	mov	r24, r29
 46e:	9c 2f       	mov	r25, r28
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	08 95       	ret

0000047a <vfprintf>:
 47a:	ab e0       	ldi	r26, 0x0B	; 11
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e3 e4       	ldi	r30, 0x43	; 67
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__prologue_saves__>
 486:	6c 01       	movw	r12, r24
 488:	7b 01       	movw	r14, r22
 48a:	8a 01       	movw	r16, r20
 48c:	fc 01       	movw	r30, r24
 48e:	17 82       	std	Z+7, r1	; 0x07
 490:	16 82       	std	Z+6, r1	; 0x06
 492:	83 81       	ldd	r24, Z+3	; 0x03
 494:	81 ff       	sbrs	r24, 1
 496:	cc c1       	rjmp	.+920    	; 0x830 <__stack+0x331>
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	3c 01       	movw	r6, r24
 49e:	f6 01       	movw	r30, r12
 4a0:	93 81       	ldd	r25, Z+3	; 0x03
 4a2:	f7 01       	movw	r30, r14
 4a4:	93 fd       	sbrc	r25, 3
 4a6:	85 91       	lpm	r24, Z+
 4a8:	93 ff       	sbrs	r25, 3
 4aa:	81 91       	ld	r24, Z+
 4ac:	7f 01       	movw	r14, r30
 4ae:	88 23       	and	r24, r24
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <vfprintf+0x3a>
 4b2:	ba c1       	rjmp	.+884    	; 0x828 <__stack+0x329>
 4b4:	85 32       	cpi	r24, 0x25	; 37
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <vfprintf+0x4c>
 4b8:	93 fd       	sbrc	r25, 3
 4ba:	85 91       	lpm	r24, Z+
 4bc:	93 ff       	sbrs	r25, 3
 4be:	81 91       	ld	r24, Z+
 4c0:	7f 01       	movw	r14, r30
 4c2:	85 32       	cpi	r24, 0x25	; 37
 4c4:	29 f4       	brne	.+10     	; 0x4d0 <vfprintf+0x56>
 4c6:	b6 01       	movw	r22, r12
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 4ce:	e7 cf       	rjmp	.-50     	; 0x49e <vfprintf+0x24>
 4d0:	91 2c       	mov	r9, r1
 4d2:	21 2c       	mov	r2, r1
 4d4:	31 2c       	mov	r3, r1
 4d6:	ff e1       	ldi	r31, 0x1F	; 31
 4d8:	f3 15       	cp	r31, r3
 4da:	d8 f0       	brcs	.+54     	; 0x512 <__stack+0x13>
 4dc:	8b 32       	cpi	r24, 0x2B	; 43
 4de:	79 f0       	breq	.+30     	; 0x4fe <vfprintf+0x84>
 4e0:	38 f4       	brcc	.+14     	; 0x4f0 <vfprintf+0x76>
 4e2:	80 32       	cpi	r24, 0x20	; 32
 4e4:	79 f0       	breq	.+30     	; 0x504 <__stack+0x5>
 4e6:	83 32       	cpi	r24, 0x23	; 35
 4e8:	a1 f4       	brne	.+40     	; 0x512 <__stack+0x13>
 4ea:	23 2d       	mov	r18, r3
 4ec:	20 61       	ori	r18, 0x10	; 16
 4ee:	1d c0       	rjmp	.+58     	; 0x52a <__stack+0x2b>
 4f0:	8d 32       	cpi	r24, 0x2D	; 45
 4f2:	61 f0       	breq	.+24     	; 0x50c <__stack+0xd>
 4f4:	80 33       	cpi	r24, 0x30	; 48
 4f6:	69 f4       	brne	.+26     	; 0x512 <__stack+0x13>
 4f8:	23 2d       	mov	r18, r3
 4fa:	21 60       	ori	r18, 0x01	; 1
 4fc:	16 c0       	rjmp	.+44     	; 0x52a <__stack+0x2b>
 4fe:	83 2d       	mov	r24, r3
 500:	82 60       	ori	r24, 0x02	; 2
 502:	38 2e       	mov	r3, r24
 504:	e3 2d       	mov	r30, r3
 506:	e4 60       	ori	r30, 0x04	; 4
 508:	3e 2e       	mov	r3, r30
 50a:	2a c0       	rjmp	.+84     	; 0x560 <__stack+0x61>
 50c:	f3 2d       	mov	r31, r3
 50e:	f8 60       	ori	r31, 0x08	; 8
 510:	1d c0       	rjmp	.+58     	; 0x54c <__stack+0x4d>
 512:	37 fc       	sbrc	r3, 7
 514:	2d c0       	rjmp	.+90     	; 0x570 <__stack+0x71>
 516:	20 ed       	ldi	r18, 0xD0	; 208
 518:	28 0f       	add	r18, r24
 51a:	2a 30       	cpi	r18, 0x0A	; 10
 51c:	40 f0       	brcs	.+16     	; 0x52e <__stack+0x2f>
 51e:	8e 32       	cpi	r24, 0x2E	; 46
 520:	b9 f4       	brne	.+46     	; 0x550 <__stack+0x51>
 522:	36 fc       	sbrc	r3, 6
 524:	81 c1       	rjmp	.+770    	; 0x828 <__stack+0x329>
 526:	23 2d       	mov	r18, r3
 528:	20 64       	ori	r18, 0x40	; 64
 52a:	32 2e       	mov	r3, r18
 52c:	19 c0       	rjmp	.+50     	; 0x560 <__stack+0x61>
 52e:	36 fe       	sbrs	r3, 6
 530:	06 c0       	rjmp	.+12     	; 0x53e <__stack+0x3f>
 532:	8a e0       	ldi	r24, 0x0A	; 10
 534:	98 9e       	mul	r9, r24
 536:	20 0d       	add	r18, r0
 538:	11 24       	eor	r1, r1
 53a:	92 2e       	mov	r9, r18
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__stack+0x61>
 53e:	ea e0       	ldi	r30, 0x0A	; 10
 540:	2e 9e       	mul	r2, r30
 542:	20 0d       	add	r18, r0
 544:	11 24       	eor	r1, r1
 546:	22 2e       	mov	r2, r18
 548:	f3 2d       	mov	r31, r3
 54a:	f0 62       	ori	r31, 0x20	; 32
 54c:	3f 2e       	mov	r3, r31
 54e:	08 c0       	rjmp	.+16     	; 0x560 <__stack+0x61>
 550:	8c 36       	cpi	r24, 0x6C	; 108
 552:	21 f4       	brne	.+8      	; 0x55c <__stack+0x5d>
 554:	83 2d       	mov	r24, r3
 556:	80 68       	ori	r24, 0x80	; 128
 558:	38 2e       	mov	r3, r24
 55a:	02 c0       	rjmp	.+4      	; 0x560 <__stack+0x61>
 55c:	88 36       	cpi	r24, 0x68	; 104
 55e:	41 f4       	brne	.+16     	; 0x570 <__stack+0x71>
 560:	f7 01       	movw	r30, r14
 562:	93 fd       	sbrc	r25, 3
 564:	85 91       	lpm	r24, Z+
 566:	93 ff       	sbrs	r25, 3
 568:	81 91       	ld	r24, Z+
 56a:	7f 01       	movw	r14, r30
 56c:	81 11       	cpse	r24, r1
 56e:	b3 cf       	rjmp	.-154    	; 0x4d6 <vfprintf+0x5c>
 570:	98 2f       	mov	r25, r24
 572:	9f 7d       	andi	r25, 0xDF	; 223
 574:	95 54       	subi	r25, 0x45	; 69
 576:	93 30       	cpi	r25, 0x03	; 3
 578:	28 f4       	brcc	.+10     	; 0x584 <__stack+0x85>
 57a:	0c 5f       	subi	r16, 0xFC	; 252
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	9f e3       	ldi	r25, 0x3F	; 63
 580:	99 83       	std	Y+1, r25	; 0x01
 582:	0d c0       	rjmp	.+26     	; 0x59e <__stack+0x9f>
 584:	83 36       	cpi	r24, 0x63	; 99
 586:	31 f0       	breq	.+12     	; 0x594 <__stack+0x95>
 588:	83 37       	cpi	r24, 0x73	; 115
 58a:	71 f0       	breq	.+28     	; 0x5a8 <__stack+0xa9>
 58c:	83 35       	cpi	r24, 0x53	; 83
 58e:	09 f0       	breq	.+2      	; 0x592 <__stack+0x93>
 590:	59 c0       	rjmp	.+178    	; 0x644 <__stack+0x145>
 592:	21 c0       	rjmp	.+66     	; 0x5d6 <__stack+0xd7>
 594:	f8 01       	movw	r30, r16
 596:	80 81       	ld	r24, Z
 598:	89 83       	std	Y+1, r24	; 0x01
 59a:	0e 5f       	subi	r16, 0xFE	; 254
 59c:	1f 4f       	sbci	r17, 0xFF	; 255
 59e:	88 24       	eor	r8, r8
 5a0:	83 94       	inc	r8
 5a2:	91 2c       	mov	r9, r1
 5a4:	53 01       	movw	r10, r6
 5a6:	13 c0       	rjmp	.+38     	; 0x5ce <__stack+0xcf>
 5a8:	28 01       	movw	r4, r16
 5aa:	f2 e0       	ldi	r31, 0x02	; 2
 5ac:	4f 0e       	add	r4, r31
 5ae:	51 1c       	adc	r5, r1
 5b0:	f8 01       	movw	r30, r16
 5b2:	a0 80       	ld	r10, Z
 5b4:	b1 80       	ldd	r11, Z+1	; 0x01
 5b6:	36 fe       	sbrs	r3, 6
 5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <__stack+0xc1>
 5ba:	69 2d       	mov	r22, r9
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__stack+0xc5>
 5c0:	6f ef       	ldi	r22, 0xFF	; 255
 5c2:	7f ef       	ldi	r23, 0xFF	; 255
 5c4:	c5 01       	movw	r24, r10
 5c6:	0e 94 6d 05 	call	0xada	; 0xada <strnlen>
 5ca:	4c 01       	movw	r8, r24
 5cc:	82 01       	movw	r16, r4
 5ce:	f3 2d       	mov	r31, r3
 5d0:	ff 77       	andi	r31, 0x7F	; 127
 5d2:	3f 2e       	mov	r3, r31
 5d4:	16 c0       	rjmp	.+44     	; 0x602 <__stack+0x103>
 5d6:	28 01       	movw	r4, r16
 5d8:	22 e0       	ldi	r18, 0x02	; 2
 5da:	42 0e       	add	r4, r18
 5dc:	51 1c       	adc	r5, r1
 5de:	f8 01       	movw	r30, r16
 5e0:	a0 80       	ld	r10, Z
 5e2:	b1 80       	ldd	r11, Z+1	; 0x01
 5e4:	36 fe       	sbrs	r3, 6
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <__stack+0xef>
 5e8:	69 2d       	mov	r22, r9
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <__stack+0xf3>
 5ee:	6f ef       	ldi	r22, 0xFF	; 255
 5f0:	7f ef       	ldi	r23, 0xFF	; 255
 5f2:	c5 01       	movw	r24, r10
 5f4:	0e 94 5b 05 	call	0xab6	; 0xab6 <strnlen_P>
 5f8:	4c 01       	movw	r8, r24
 5fa:	f3 2d       	mov	r31, r3
 5fc:	f0 68       	ori	r31, 0x80	; 128
 5fe:	3f 2e       	mov	r3, r31
 600:	82 01       	movw	r16, r4
 602:	33 fc       	sbrc	r3, 3
 604:	1b c0       	rjmp	.+54     	; 0x63c <__stack+0x13d>
 606:	82 2d       	mov	r24, r2
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	88 16       	cp	r8, r24
 60c:	99 06       	cpc	r9, r25
 60e:	b0 f4       	brcc	.+44     	; 0x63c <__stack+0x13d>
 610:	b6 01       	movw	r22, r12
 612:	80 e2       	ldi	r24, 0x20	; 32
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 61a:	2a 94       	dec	r2
 61c:	f4 cf       	rjmp	.-24     	; 0x606 <__stack+0x107>
 61e:	f5 01       	movw	r30, r10
 620:	37 fc       	sbrc	r3, 7
 622:	85 91       	lpm	r24, Z+
 624:	37 fe       	sbrs	r3, 7
 626:	81 91       	ld	r24, Z+
 628:	5f 01       	movw	r10, r30
 62a:	b6 01       	movw	r22, r12
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 632:	21 10       	cpse	r2, r1
 634:	2a 94       	dec	r2
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	82 1a       	sub	r8, r18
 63a:	91 08       	sbc	r9, r1
 63c:	81 14       	cp	r8, r1
 63e:	91 04       	cpc	r9, r1
 640:	71 f7       	brne	.-36     	; 0x61e <__stack+0x11f>
 642:	e8 c0       	rjmp	.+464    	; 0x814 <__stack+0x315>
 644:	84 36       	cpi	r24, 0x64	; 100
 646:	11 f0       	breq	.+4      	; 0x64c <__stack+0x14d>
 648:	89 36       	cpi	r24, 0x69	; 105
 64a:	41 f5       	brne	.+80     	; 0x69c <__stack+0x19d>
 64c:	f8 01       	movw	r30, r16
 64e:	37 fe       	sbrs	r3, 7
 650:	07 c0       	rjmp	.+14     	; 0x660 <__stack+0x161>
 652:	60 81       	ld	r22, Z
 654:	71 81       	ldd	r23, Z+1	; 0x01
 656:	82 81       	ldd	r24, Z+2	; 0x02
 658:	93 81       	ldd	r25, Z+3	; 0x03
 65a:	0c 5f       	subi	r16, 0xFC	; 252
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	08 c0       	rjmp	.+16     	; 0x670 <__stack+0x171>
 660:	60 81       	ld	r22, Z
 662:	71 81       	ldd	r23, Z+1	; 0x01
 664:	07 2e       	mov	r0, r23
 666:	00 0c       	add	r0, r0
 668:	88 0b       	sbc	r24, r24
 66a:	99 0b       	sbc	r25, r25
 66c:	0e 5f       	subi	r16, 0xFE	; 254
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	f3 2d       	mov	r31, r3
 672:	ff 76       	andi	r31, 0x6F	; 111
 674:	3f 2e       	mov	r3, r31
 676:	97 ff       	sbrs	r25, 7
 678:	09 c0       	rjmp	.+18     	; 0x68c <__stack+0x18d>
 67a:	90 95       	com	r25
 67c:	80 95       	com	r24
 67e:	70 95       	com	r23
 680:	61 95       	neg	r22
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	8f 4f       	sbci	r24, 0xFF	; 255
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	f0 68       	ori	r31, 0x80	; 128
 68a:	3f 2e       	mov	r3, r31
 68c:	2a e0       	ldi	r18, 0x0A	; 10
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	a3 01       	movw	r20, r6
 692:	0e 94 b4 05 	call	0xb68	; 0xb68 <__ultoa_invert>
 696:	88 2e       	mov	r8, r24
 698:	86 18       	sub	r8, r6
 69a:	45 c0       	rjmp	.+138    	; 0x726 <__stack+0x227>
 69c:	85 37       	cpi	r24, 0x75	; 117
 69e:	31 f4       	brne	.+12     	; 0x6ac <__stack+0x1ad>
 6a0:	23 2d       	mov	r18, r3
 6a2:	2f 7e       	andi	r18, 0xEF	; 239
 6a4:	b2 2e       	mov	r11, r18
 6a6:	2a e0       	ldi	r18, 0x0A	; 10
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	25 c0       	rjmp	.+74     	; 0x6f6 <__stack+0x1f7>
 6ac:	93 2d       	mov	r25, r3
 6ae:	99 7f       	andi	r25, 0xF9	; 249
 6b0:	b9 2e       	mov	r11, r25
 6b2:	8f 36       	cpi	r24, 0x6F	; 111
 6b4:	c1 f0       	breq	.+48     	; 0x6e6 <__stack+0x1e7>
 6b6:	18 f4       	brcc	.+6      	; 0x6be <__stack+0x1bf>
 6b8:	88 35       	cpi	r24, 0x58	; 88
 6ba:	79 f0       	breq	.+30     	; 0x6da <__stack+0x1db>
 6bc:	b5 c0       	rjmp	.+362    	; 0x828 <__stack+0x329>
 6be:	80 37       	cpi	r24, 0x70	; 112
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <__stack+0x1c9>
 6c2:	88 37       	cpi	r24, 0x78	; 120
 6c4:	21 f0       	breq	.+8      	; 0x6ce <__stack+0x1cf>
 6c6:	b0 c0       	rjmp	.+352    	; 0x828 <__stack+0x329>
 6c8:	e9 2f       	mov	r30, r25
 6ca:	e0 61       	ori	r30, 0x10	; 16
 6cc:	be 2e       	mov	r11, r30
 6ce:	b4 fe       	sbrs	r11, 4
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <__stack+0x1ed>
 6d2:	fb 2d       	mov	r31, r11
 6d4:	f4 60       	ori	r31, 0x04	; 4
 6d6:	bf 2e       	mov	r11, r31
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <__stack+0x1ed>
 6da:	34 fe       	sbrs	r3, 4
 6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <__stack+0x1f3>
 6de:	29 2f       	mov	r18, r25
 6e0:	26 60       	ori	r18, 0x06	; 6
 6e2:	b2 2e       	mov	r11, r18
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <__stack+0x1f3>
 6e6:	28 e0       	ldi	r18, 0x08	; 8
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__stack+0x1f7>
 6ec:	20 e1       	ldi	r18, 0x10	; 16
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__stack+0x1f7>
 6f2:	20 e1       	ldi	r18, 0x10	; 16
 6f4:	32 e0       	ldi	r19, 0x02	; 2
 6f6:	f8 01       	movw	r30, r16
 6f8:	b7 fe       	sbrs	r11, 7
 6fa:	07 c0       	rjmp	.+14     	; 0x70a <__stack+0x20b>
 6fc:	60 81       	ld	r22, Z
 6fe:	71 81       	ldd	r23, Z+1	; 0x01
 700:	82 81       	ldd	r24, Z+2	; 0x02
 702:	93 81       	ldd	r25, Z+3	; 0x03
 704:	0c 5f       	subi	r16, 0xFC	; 252
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	06 c0       	rjmp	.+12     	; 0x716 <__stack+0x217>
 70a:	60 81       	ld	r22, Z
 70c:	71 81       	ldd	r23, Z+1	; 0x01
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 5f       	subi	r16, 0xFE	; 254
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	a3 01       	movw	r20, r6
 718:	0e 94 b4 05 	call	0xb68	; 0xb68 <__ultoa_invert>
 71c:	88 2e       	mov	r8, r24
 71e:	86 18       	sub	r8, r6
 720:	fb 2d       	mov	r31, r11
 722:	ff 77       	andi	r31, 0x7F	; 127
 724:	3f 2e       	mov	r3, r31
 726:	36 fe       	sbrs	r3, 6
 728:	0d c0       	rjmp	.+26     	; 0x744 <__stack+0x245>
 72a:	23 2d       	mov	r18, r3
 72c:	2e 7f       	andi	r18, 0xFE	; 254
 72e:	a2 2e       	mov	r10, r18
 730:	89 14       	cp	r8, r9
 732:	58 f4       	brcc	.+22     	; 0x74a <__stack+0x24b>
 734:	34 fe       	sbrs	r3, 4
 736:	0b c0       	rjmp	.+22     	; 0x74e <__stack+0x24f>
 738:	32 fc       	sbrc	r3, 2
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__stack+0x24f>
 73c:	83 2d       	mov	r24, r3
 73e:	8e 7e       	andi	r24, 0xEE	; 238
 740:	a8 2e       	mov	r10, r24
 742:	05 c0       	rjmp	.+10     	; 0x74e <__stack+0x24f>
 744:	b8 2c       	mov	r11, r8
 746:	a3 2c       	mov	r10, r3
 748:	03 c0       	rjmp	.+6      	; 0x750 <__stack+0x251>
 74a:	b8 2c       	mov	r11, r8
 74c:	01 c0       	rjmp	.+2      	; 0x750 <__stack+0x251>
 74e:	b9 2c       	mov	r11, r9
 750:	a4 fe       	sbrs	r10, 4
 752:	0f c0       	rjmp	.+30     	; 0x772 <__stack+0x273>
 754:	fe 01       	movw	r30, r28
 756:	e8 0d       	add	r30, r8
 758:	f1 1d       	adc	r31, r1
 75a:	80 81       	ld	r24, Z
 75c:	80 33       	cpi	r24, 0x30	; 48
 75e:	21 f4       	brne	.+8      	; 0x768 <__stack+0x269>
 760:	9a 2d       	mov	r25, r10
 762:	99 7e       	andi	r25, 0xE9	; 233
 764:	a9 2e       	mov	r10, r25
 766:	09 c0       	rjmp	.+18     	; 0x77a <__stack+0x27b>
 768:	a2 fe       	sbrs	r10, 2
 76a:	06 c0       	rjmp	.+12     	; 0x778 <__stack+0x279>
 76c:	b3 94       	inc	r11
 76e:	b3 94       	inc	r11
 770:	04 c0       	rjmp	.+8      	; 0x77a <__stack+0x27b>
 772:	8a 2d       	mov	r24, r10
 774:	86 78       	andi	r24, 0x86	; 134
 776:	09 f0       	breq	.+2      	; 0x77a <__stack+0x27b>
 778:	b3 94       	inc	r11
 77a:	a3 fc       	sbrc	r10, 3
 77c:	11 c0       	rjmp	.+34     	; 0x7a0 <__stack+0x2a1>
 77e:	a0 fe       	sbrs	r10, 0
 780:	06 c0       	rjmp	.+12     	; 0x78e <__stack+0x28f>
 782:	b2 14       	cp	r11, r2
 784:	88 f4       	brcc	.+34     	; 0x7a8 <__stack+0x2a9>
 786:	28 0c       	add	r2, r8
 788:	92 2c       	mov	r9, r2
 78a:	9b 18       	sub	r9, r11
 78c:	0e c0       	rjmp	.+28     	; 0x7aa <__stack+0x2ab>
 78e:	b2 14       	cp	r11, r2
 790:	60 f4       	brcc	.+24     	; 0x7aa <__stack+0x2ab>
 792:	b6 01       	movw	r22, r12
 794:	80 e2       	ldi	r24, 0x20	; 32
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 79c:	b3 94       	inc	r11
 79e:	f7 cf       	rjmp	.-18     	; 0x78e <__stack+0x28f>
 7a0:	b2 14       	cp	r11, r2
 7a2:	18 f4       	brcc	.+6      	; 0x7aa <__stack+0x2ab>
 7a4:	2b 18       	sub	r2, r11
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <__stack+0x2ad>
 7a8:	98 2c       	mov	r9, r8
 7aa:	21 2c       	mov	r2, r1
 7ac:	a4 fe       	sbrs	r10, 4
 7ae:	10 c0       	rjmp	.+32     	; 0x7d0 <__stack+0x2d1>
 7b0:	b6 01       	movw	r22, r12
 7b2:	80 e3       	ldi	r24, 0x30	; 48
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 7ba:	a2 fe       	sbrs	r10, 2
 7bc:	17 c0       	rjmp	.+46     	; 0x7ec <__stack+0x2ed>
 7be:	a1 fc       	sbrc	r10, 1
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <__stack+0x2c9>
 7c2:	88 e7       	ldi	r24, 0x78	; 120
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <__stack+0x2cd>
 7c8:	88 e5       	ldi	r24, 0x58	; 88
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	b6 01       	movw	r22, r12
 7ce:	0c c0       	rjmp	.+24     	; 0x7e8 <__stack+0x2e9>
 7d0:	8a 2d       	mov	r24, r10
 7d2:	86 78       	andi	r24, 0x86	; 134
 7d4:	59 f0       	breq	.+22     	; 0x7ec <__stack+0x2ed>
 7d6:	a1 fe       	sbrs	r10, 1
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <__stack+0x2df>
 7da:	8b e2       	ldi	r24, 0x2B	; 43
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <__stack+0x2e1>
 7de:	80 e2       	ldi	r24, 0x20	; 32
 7e0:	a7 fc       	sbrc	r10, 7
 7e2:	8d e2       	ldi	r24, 0x2D	; 45
 7e4:	b6 01       	movw	r22, r12
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 7ec:	89 14       	cp	r8, r9
 7ee:	38 f4       	brcc	.+14     	; 0x7fe <__stack+0x2ff>
 7f0:	b6 01       	movw	r22, r12
 7f2:	80 e3       	ldi	r24, 0x30	; 48
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 7fa:	9a 94       	dec	r9
 7fc:	f7 cf       	rjmp	.-18     	; 0x7ec <__stack+0x2ed>
 7fe:	8a 94       	dec	r8
 800:	f3 01       	movw	r30, r6
 802:	e8 0d       	add	r30, r8
 804:	f1 1d       	adc	r31, r1
 806:	80 81       	ld	r24, Z
 808:	b6 01       	movw	r22, r12
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 810:	81 10       	cpse	r8, r1
 812:	f5 cf       	rjmp	.-22     	; 0x7fe <__stack+0x2ff>
 814:	22 20       	and	r2, r2
 816:	09 f4       	brne	.+2      	; 0x81a <__stack+0x31b>
 818:	42 ce       	rjmp	.-892    	; 0x49e <vfprintf+0x24>
 81a:	b6 01       	movw	r22, r12
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputc>
 824:	2a 94       	dec	r2
 826:	f6 cf       	rjmp	.-20     	; 0x814 <__stack+0x315>
 828:	f6 01       	movw	r30, r12
 82a:	86 81       	ldd	r24, Z+6	; 0x06
 82c:	97 81       	ldd	r25, Z+7	; 0x07
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__stack+0x335>
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	9f ef       	ldi	r25, 0xFF	; 255
 834:	2b 96       	adiw	r28, 0x0b	; 11
 836:	e2 e1       	ldi	r30, 0x12	; 18
 838:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__epilogue_restores__>

0000083c <calloc>:
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	86 9f       	mul	r24, r22
 846:	80 01       	movw	r16, r0
 848:	87 9f       	mul	r24, r23
 84a:	10 0d       	add	r17, r0
 84c:	96 9f       	mul	r25, r22
 84e:	10 0d       	add	r17, r0
 850:	11 24       	eor	r1, r1
 852:	c8 01       	movw	r24, r16
 854:	0e 94 3a 04 	call	0x874	; 0x874 <malloc>
 858:	ec 01       	movw	r28, r24
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	29 f0       	breq	.+10     	; 0x868 <calloc+0x2c>
 85e:	a8 01       	movw	r20, r16
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	0e 94 66 05 	call	0xacc	; 0xacc <memset>
 868:	ce 01       	movw	r24, r28
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	1f 91       	pop	r17
 870:	0f 91       	pop	r16
 872:	08 95       	ret

00000874 <malloc>:
 874:	0f 93       	push	r16
 876:	1f 93       	push	r17
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	82 30       	cpi	r24, 0x02	; 2
 87e:	91 05       	cpc	r25, r1
 880:	10 f4       	brcc	.+4      	; 0x886 <malloc+0x12>
 882:	82 e0       	ldi	r24, 0x02	; 2
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <__flp>
 88a:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <__flp+0x1>
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	a0 e0       	ldi	r26, 0x00	; 0
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	30 97       	sbiw	r30, 0x00	; 0
 898:	19 f1       	breq	.+70     	; 0x8e0 <malloc+0x6c>
 89a:	40 81       	ld	r20, Z
 89c:	51 81       	ldd	r21, Z+1	; 0x01
 89e:	02 81       	ldd	r16, Z+2	; 0x02
 8a0:	13 81       	ldd	r17, Z+3	; 0x03
 8a2:	48 17       	cp	r20, r24
 8a4:	59 07       	cpc	r21, r25
 8a6:	c8 f0       	brcs	.+50     	; 0x8da <malloc+0x66>
 8a8:	84 17       	cp	r24, r20
 8aa:	95 07       	cpc	r25, r21
 8ac:	69 f4       	brne	.+26     	; 0x8c8 <malloc+0x54>
 8ae:	10 97       	sbiw	r26, 0x00	; 0
 8b0:	31 f0       	breq	.+12     	; 0x8be <malloc+0x4a>
 8b2:	12 96       	adiw	r26, 0x02	; 2
 8b4:	0c 93       	st	X, r16
 8b6:	12 97       	sbiw	r26, 0x02	; 2
 8b8:	13 96       	adiw	r26, 0x03	; 3
 8ba:	1c 93       	st	X, r17
 8bc:	27 c0       	rjmp	.+78     	; 0x90c <malloc+0x98>
 8be:	00 93 59 01 	sts	0x0159, r16	; 0x800159 <__flp>
 8c2:	10 93 5a 01 	sts	0x015A, r17	; 0x80015a <__flp+0x1>
 8c6:	22 c0       	rjmp	.+68     	; 0x90c <malloc+0x98>
 8c8:	21 15       	cp	r18, r1
 8ca:	31 05       	cpc	r19, r1
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <malloc+0x60>
 8ce:	42 17       	cp	r20, r18
 8d0:	53 07       	cpc	r21, r19
 8d2:	18 f4       	brcc	.+6      	; 0x8da <malloc+0x66>
 8d4:	9a 01       	movw	r18, r20
 8d6:	bd 01       	movw	r22, r26
 8d8:	ef 01       	movw	r28, r30
 8da:	df 01       	movw	r26, r30
 8dc:	f8 01       	movw	r30, r16
 8de:	db cf       	rjmp	.-74     	; 0x896 <malloc+0x22>
 8e0:	21 15       	cp	r18, r1
 8e2:	31 05       	cpc	r19, r1
 8e4:	f9 f0       	breq	.+62     	; 0x924 <malloc+0xb0>
 8e6:	28 1b       	sub	r18, r24
 8e8:	39 0b       	sbc	r19, r25
 8ea:	24 30       	cpi	r18, 0x04	; 4
 8ec:	31 05       	cpc	r19, r1
 8ee:	80 f4       	brcc	.+32     	; 0x910 <malloc+0x9c>
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	9b 81       	ldd	r25, Y+3	; 0x03
 8f4:	61 15       	cp	r22, r1
 8f6:	71 05       	cpc	r23, r1
 8f8:	21 f0       	breq	.+8      	; 0x902 <malloc+0x8e>
 8fa:	fb 01       	movw	r30, r22
 8fc:	93 83       	std	Z+3, r25	; 0x03
 8fe:	82 83       	std	Z+2, r24	; 0x02
 900:	04 c0       	rjmp	.+8      	; 0x90a <malloc+0x96>
 902:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <__flp+0x1>
 906:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <__flp>
 90a:	fe 01       	movw	r30, r28
 90c:	32 96       	adiw	r30, 0x02	; 2
 90e:	44 c0       	rjmp	.+136    	; 0x998 <malloc+0x124>
 910:	fe 01       	movw	r30, r28
 912:	e2 0f       	add	r30, r18
 914:	f3 1f       	adc	r31, r19
 916:	81 93       	st	Z+, r24
 918:	91 93       	st	Z+, r25
 91a:	22 50       	subi	r18, 0x02	; 2
 91c:	31 09       	sbc	r19, r1
 91e:	39 83       	std	Y+1, r19	; 0x01
 920:	28 83       	st	Y, r18
 922:	3a c0       	rjmp	.+116    	; 0x998 <malloc+0x124>
 924:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
 928:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
 92c:	23 2b       	or	r18, r19
 92e:	41 f4       	brne	.+16     	; 0x940 <malloc+0xcc>
 930:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 934:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 938:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <__brkval+0x1>
 93c:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <__brkval>
 940:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 944:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 948:	21 15       	cp	r18, r1
 94a:	31 05       	cpc	r19, r1
 94c:	41 f4       	brne	.+16     	; 0x95e <malloc+0xea>
 94e:	2d b7       	in	r18, 0x3d	; 61
 950:	3e b7       	in	r19, 0x3e	; 62
 952:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 956:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 95a:	24 1b       	sub	r18, r20
 95c:	35 0b       	sbc	r19, r21
 95e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <__brkval>
 962:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <__brkval+0x1>
 966:	e2 17       	cp	r30, r18
 968:	f3 07       	cpc	r31, r19
 96a:	a0 f4       	brcc	.+40     	; 0x994 <malloc+0x120>
 96c:	2e 1b       	sub	r18, r30
 96e:	3f 0b       	sbc	r19, r31
 970:	28 17       	cp	r18, r24
 972:	39 07       	cpc	r19, r25
 974:	78 f0       	brcs	.+30     	; 0x994 <malloc+0x120>
 976:	ac 01       	movw	r20, r24
 978:	4e 5f       	subi	r20, 0xFE	; 254
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	24 17       	cp	r18, r20
 97e:	35 07       	cpc	r19, r21
 980:	48 f0       	brcs	.+18     	; 0x994 <malloc+0x120>
 982:	4e 0f       	add	r20, r30
 984:	5f 1f       	adc	r21, r31
 986:	50 93 58 01 	sts	0x0158, r21	; 0x800158 <__brkval+0x1>
 98a:	40 93 57 01 	sts	0x0157, r20	; 0x800157 <__brkval>
 98e:	81 93       	st	Z+, r24
 990:	91 93       	st	Z+, r25
 992:	02 c0       	rjmp	.+4      	; 0x998 <malloc+0x124>
 994:	e0 e0       	ldi	r30, 0x00	; 0
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	cf 01       	movw	r24, r30
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	08 95       	ret

000009a4 <free>:
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	00 97       	sbiw	r24, 0x00	; 0
 9aa:	09 f4       	brne	.+2      	; 0x9ae <free+0xa>
 9ac:	81 c0       	rjmp	.+258    	; 0xab0 <free+0x10c>
 9ae:	fc 01       	movw	r30, r24
 9b0:	32 97       	sbiw	r30, 0x02	; 2
 9b2:	13 82       	std	Z+3, r1	; 0x03
 9b4:	12 82       	std	Z+2, r1	; 0x02
 9b6:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <__flp>
 9ba:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <__flp+0x1>
 9be:	10 97       	sbiw	r26, 0x00	; 0
 9c0:	81 f4       	brne	.+32     	; 0x9e2 <free+0x3e>
 9c2:	20 81       	ld	r18, Z
 9c4:	31 81       	ldd	r19, Z+1	; 0x01
 9c6:	82 0f       	add	r24, r18
 9c8:	93 1f       	adc	r25, r19
 9ca:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
 9ce:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
 9d2:	28 17       	cp	r18, r24
 9d4:	39 07       	cpc	r19, r25
 9d6:	51 f5       	brne	.+84     	; 0xa2c <free+0x88>
 9d8:	f0 93 58 01 	sts	0x0158, r31	; 0x800158 <__brkval+0x1>
 9dc:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <__brkval>
 9e0:	67 c0       	rjmp	.+206    	; 0xab0 <free+0x10c>
 9e2:	ed 01       	movw	r28, r26
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	ce 17       	cp	r28, r30
 9ea:	df 07       	cpc	r29, r31
 9ec:	40 f4       	brcc	.+16     	; 0x9fe <free+0x5a>
 9ee:	4a 81       	ldd	r20, Y+2	; 0x02
 9f0:	5b 81       	ldd	r21, Y+3	; 0x03
 9f2:	9e 01       	movw	r18, r28
 9f4:	41 15       	cp	r20, r1
 9f6:	51 05       	cpc	r21, r1
 9f8:	f1 f0       	breq	.+60     	; 0xa36 <free+0x92>
 9fa:	ea 01       	movw	r28, r20
 9fc:	f5 cf       	rjmp	.-22     	; 0x9e8 <free+0x44>
 9fe:	d3 83       	std	Z+3, r29	; 0x03
 a00:	c2 83       	std	Z+2, r28	; 0x02
 a02:	40 81       	ld	r20, Z
 a04:	51 81       	ldd	r21, Z+1	; 0x01
 a06:	84 0f       	add	r24, r20
 a08:	95 1f       	adc	r25, r21
 a0a:	c8 17       	cp	r28, r24
 a0c:	d9 07       	cpc	r29, r25
 a0e:	59 f4       	brne	.+22     	; 0xa26 <free+0x82>
 a10:	88 81       	ld	r24, Y
 a12:	99 81       	ldd	r25, Y+1	; 0x01
 a14:	84 0f       	add	r24, r20
 a16:	95 1f       	adc	r25, r21
 a18:	02 96       	adiw	r24, 0x02	; 2
 a1a:	91 83       	std	Z+1, r25	; 0x01
 a1c:	80 83       	st	Z, r24
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	9b 81       	ldd	r25, Y+3	; 0x03
 a22:	93 83       	std	Z+3, r25	; 0x03
 a24:	82 83       	std	Z+2, r24	; 0x02
 a26:	21 15       	cp	r18, r1
 a28:	31 05       	cpc	r19, r1
 a2a:	29 f4       	brne	.+10     	; 0xa36 <free+0x92>
 a2c:	f0 93 5a 01 	sts	0x015A, r31	; 0x80015a <__flp+0x1>
 a30:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <__flp>
 a34:	3d c0       	rjmp	.+122    	; 0xab0 <free+0x10c>
 a36:	e9 01       	movw	r28, r18
 a38:	fb 83       	std	Y+3, r31	; 0x03
 a3a:	ea 83       	std	Y+2, r30	; 0x02
 a3c:	49 91       	ld	r20, Y+
 a3e:	59 91       	ld	r21, Y+
 a40:	c4 0f       	add	r28, r20
 a42:	d5 1f       	adc	r29, r21
 a44:	ec 17       	cp	r30, r28
 a46:	fd 07       	cpc	r31, r29
 a48:	61 f4       	brne	.+24     	; 0xa62 <free+0xbe>
 a4a:	80 81       	ld	r24, Z
 a4c:	91 81       	ldd	r25, Z+1	; 0x01
 a4e:	84 0f       	add	r24, r20
 a50:	95 1f       	adc	r25, r21
 a52:	02 96       	adiw	r24, 0x02	; 2
 a54:	e9 01       	movw	r28, r18
 a56:	99 83       	std	Y+1, r25	; 0x01
 a58:	88 83       	st	Y, r24
 a5a:	82 81       	ldd	r24, Z+2	; 0x02
 a5c:	93 81       	ldd	r25, Z+3	; 0x03
 a5e:	9b 83       	std	Y+3, r25	; 0x03
 a60:	8a 83       	std	Y+2, r24	; 0x02
 a62:	e0 e0       	ldi	r30, 0x00	; 0
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	12 96       	adiw	r26, 0x02	; 2
 a68:	8d 91       	ld	r24, X+
 a6a:	9c 91       	ld	r25, X
 a6c:	13 97       	sbiw	r26, 0x03	; 3
 a6e:	00 97       	sbiw	r24, 0x00	; 0
 a70:	19 f0       	breq	.+6      	; 0xa78 <free+0xd4>
 a72:	fd 01       	movw	r30, r26
 a74:	dc 01       	movw	r26, r24
 a76:	f7 cf       	rjmp	.-18     	; 0xa66 <free+0xc2>
 a78:	8d 91       	ld	r24, X+
 a7a:	9c 91       	ld	r25, X
 a7c:	11 97       	sbiw	r26, 0x01	; 1
 a7e:	9d 01       	movw	r18, r26
 a80:	2e 5f       	subi	r18, 0xFE	; 254
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	82 0f       	add	r24, r18
 a86:	93 1f       	adc	r25, r19
 a88:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
 a8c:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
 a90:	28 17       	cp	r18, r24
 a92:	39 07       	cpc	r19, r25
 a94:	69 f4       	brne	.+26     	; 0xab0 <free+0x10c>
 a96:	30 97       	sbiw	r30, 0x00	; 0
 a98:	29 f4       	brne	.+10     	; 0xaa4 <free+0x100>
 a9a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__flp+0x1>
 a9e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__flp>
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <free+0x104>
 aa4:	13 82       	std	Z+3, r1	; 0x03
 aa6:	12 82       	std	Z+2, r1	; 0x02
 aa8:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <__brkval+0x1>
 aac:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <__brkval>
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	08 95       	ret

00000ab6 <strnlen_P>:
 ab6:	fc 01       	movw	r30, r24
 ab8:	05 90       	lpm	r0, Z+
 aba:	61 50       	subi	r22, 0x01	; 1
 abc:	70 40       	sbci	r23, 0x00	; 0
 abe:	01 10       	cpse	r0, r1
 ac0:	d8 f7       	brcc	.-10     	; 0xab8 <strnlen_P+0x2>
 ac2:	80 95       	com	r24
 ac4:	90 95       	com	r25
 ac6:	8e 0f       	add	r24, r30
 ac8:	9f 1f       	adc	r25, r31
 aca:	08 95       	ret

00000acc <memset>:
 acc:	dc 01       	movw	r26, r24
 ace:	01 c0       	rjmp	.+2      	; 0xad2 <memset+0x6>
 ad0:	6d 93       	st	X+, r22
 ad2:	41 50       	subi	r20, 0x01	; 1
 ad4:	50 40       	sbci	r21, 0x00	; 0
 ad6:	e0 f7       	brcc	.-8      	; 0xad0 <memset+0x4>
 ad8:	08 95       	ret

00000ada <strnlen>:
 ada:	fc 01       	movw	r30, r24
 adc:	61 50       	subi	r22, 0x01	; 1
 ade:	70 40       	sbci	r23, 0x00	; 0
 ae0:	01 90       	ld	r0, Z+
 ae2:	01 10       	cpse	r0, r1
 ae4:	d8 f7       	brcc	.-10     	; 0xadc <strnlen+0x2>
 ae6:	80 95       	com	r24
 ae8:	90 95       	com	r25
 aea:	8e 0f       	add	r24, r30
 aec:	9f 1f       	adc	r25, r31
 aee:	08 95       	ret

00000af0 <fputc>:
 af0:	0f 93       	push	r16
 af2:	1f 93       	push	r17
 af4:	cf 93       	push	r28
 af6:	df 93       	push	r29
 af8:	fb 01       	movw	r30, r22
 afa:	23 81       	ldd	r18, Z+3	; 0x03
 afc:	21 fd       	sbrc	r18, 1
 afe:	03 c0       	rjmp	.+6      	; 0xb06 <fputc+0x16>
 b00:	8f ef       	ldi	r24, 0xFF	; 255
 b02:	9f ef       	ldi	r25, 0xFF	; 255
 b04:	2c c0       	rjmp	.+88     	; 0xb5e <fputc+0x6e>
 b06:	22 ff       	sbrs	r18, 2
 b08:	16 c0       	rjmp	.+44     	; 0xb36 <fputc+0x46>
 b0a:	46 81       	ldd	r20, Z+6	; 0x06
 b0c:	57 81       	ldd	r21, Z+7	; 0x07
 b0e:	24 81       	ldd	r18, Z+4	; 0x04
 b10:	35 81       	ldd	r19, Z+5	; 0x05
 b12:	42 17       	cp	r20, r18
 b14:	53 07       	cpc	r21, r19
 b16:	44 f4       	brge	.+16     	; 0xb28 <fputc+0x38>
 b18:	a0 81       	ld	r26, Z
 b1a:	b1 81       	ldd	r27, Z+1	; 0x01
 b1c:	9d 01       	movw	r18, r26
 b1e:	2f 5f       	subi	r18, 0xFF	; 255
 b20:	3f 4f       	sbci	r19, 0xFF	; 255
 b22:	31 83       	std	Z+1, r19	; 0x01
 b24:	20 83       	st	Z, r18
 b26:	8c 93       	st	X, r24
 b28:	26 81       	ldd	r18, Z+6	; 0x06
 b2a:	37 81       	ldd	r19, Z+7	; 0x07
 b2c:	2f 5f       	subi	r18, 0xFF	; 255
 b2e:	3f 4f       	sbci	r19, 0xFF	; 255
 b30:	37 83       	std	Z+7, r19	; 0x07
 b32:	26 83       	std	Z+6, r18	; 0x06
 b34:	14 c0       	rjmp	.+40     	; 0xb5e <fputc+0x6e>
 b36:	8b 01       	movw	r16, r22
 b38:	ec 01       	movw	r28, r24
 b3a:	fb 01       	movw	r30, r22
 b3c:	00 84       	ldd	r0, Z+8	; 0x08
 b3e:	f1 85       	ldd	r31, Z+9	; 0x09
 b40:	e0 2d       	mov	r30, r0
 b42:	09 95       	icall
 b44:	89 2b       	or	r24, r25
 b46:	e1 f6       	brne	.-72     	; 0xb00 <fputc+0x10>
 b48:	d8 01       	movw	r26, r16
 b4a:	16 96       	adiw	r26, 0x06	; 6
 b4c:	8d 91       	ld	r24, X+
 b4e:	9c 91       	ld	r25, X
 b50:	17 97       	sbiw	r26, 0x07	; 7
 b52:	01 96       	adiw	r24, 0x01	; 1
 b54:	17 96       	adiw	r26, 0x07	; 7
 b56:	9c 93       	st	X, r25
 b58:	8e 93       	st	-X, r24
 b5a:	16 97       	sbiw	r26, 0x06	; 6
 b5c:	ce 01       	movw	r24, r28
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	1f 91       	pop	r17
 b64:	0f 91       	pop	r16
 b66:	08 95       	ret

00000b68 <__ultoa_invert>:
 b68:	fa 01       	movw	r30, r20
 b6a:	aa 27       	eor	r26, r26
 b6c:	28 30       	cpi	r18, 0x08	; 8
 b6e:	51 f1       	breq	.+84     	; 0xbc4 <__ultoa_invert+0x5c>
 b70:	20 31       	cpi	r18, 0x10	; 16
 b72:	81 f1       	breq	.+96     	; 0xbd4 <__ultoa_invert+0x6c>
 b74:	e8 94       	clt
 b76:	6f 93       	push	r22
 b78:	6e 7f       	andi	r22, 0xFE	; 254
 b7a:	6e 5f       	subi	r22, 0xFE	; 254
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	af 4f       	sbci	r26, 0xFF	; 255
 b84:	b1 e0       	ldi	r27, 0x01	; 1
 b86:	3e d0       	rcall	.+124    	; 0xc04 <__ultoa_invert+0x9c>
 b88:	b4 e0       	ldi	r27, 0x04	; 4
 b8a:	3c d0       	rcall	.+120    	; 0xc04 <__ultoa_invert+0x9c>
 b8c:	67 0f       	add	r22, r23
 b8e:	78 1f       	adc	r23, r24
 b90:	89 1f       	adc	r24, r25
 b92:	9a 1f       	adc	r25, r26
 b94:	a1 1d       	adc	r26, r1
 b96:	68 0f       	add	r22, r24
 b98:	79 1f       	adc	r23, r25
 b9a:	8a 1f       	adc	r24, r26
 b9c:	91 1d       	adc	r25, r1
 b9e:	a1 1d       	adc	r26, r1
 ba0:	6a 0f       	add	r22, r26
 ba2:	71 1d       	adc	r23, r1
 ba4:	81 1d       	adc	r24, r1
 ba6:	91 1d       	adc	r25, r1
 ba8:	a1 1d       	adc	r26, r1
 baa:	20 d0       	rcall	.+64     	; 0xbec <__ultoa_invert+0x84>
 bac:	09 f4       	brne	.+2      	; 0xbb0 <__ultoa_invert+0x48>
 bae:	68 94       	set
 bb0:	3f 91       	pop	r19
 bb2:	2a e0       	ldi	r18, 0x0A	; 10
 bb4:	26 9f       	mul	r18, r22
 bb6:	11 24       	eor	r1, r1
 bb8:	30 19       	sub	r19, r0
 bba:	30 5d       	subi	r19, 0xD0	; 208
 bbc:	31 93       	st	Z+, r19
 bbe:	de f6       	brtc	.-74     	; 0xb76 <__ultoa_invert+0xe>
 bc0:	cf 01       	movw	r24, r30
 bc2:	08 95       	ret
 bc4:	46 2f       	mov	r20, r22
 bc6:	47 70       	andi	r20, 0x07	; 7
 bc8:	40 5d       	subi	r20, 0xD0	; 208
 bca:	41 93       	st	Z+, r20
 bcc:	b3 e0       	ldi	r27, 0x03	; 3
 bce:	0f d0       	rcall	.+30     	; 0xbee <__ultoa_invert+0x86>
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__ultoa_invert+0x5c>
 bd2:	f6 cf       	rjmp	.-20     	; 0xbc0 <__ultoa_invert+0x58>
 bd4:	46 2f       	mov	r20, r22
 bd6:	4f 70       	andi	r20, 0x0F	; 15
 bd8:	40 5d       	subi	r20, 0xD0	; 208
 bda:	4a 33       	cpi	r20, 0x3A	; 58
 bdc:	18 f0       	brcs	.+6      	; 0xbe4 <__ultoa_invert+0x7c>
 bde:	49 5d       	subi	r20, 0xD9	; 217
 be0:	31 fd       	sbrc	r19, 1
 be2:	40 52       	subi	r20, 0x20	; 32
 be4:	41 93       	st	Z+, r20
 be6:	02 d0       	rcall	.+4      	; 0xbec <__ultoa_invert+0x84>
 be8:	a9 f7       	brne	.-22     	; 0xbd4 <__ultoa_invert+0x6c>
 bea:	ea cf       	rjmp	.-44     	; 0xbc0 <__ultoa_invert+0x58>
 bec:	b4 e0       	ldi	r27, 0x04	; 4
 bee:	a6 95       	lsr	r26
 bf0:	97 95       	ror	r25
 bf2:	87 95       	ror	r24
 bf4:	77 95       	ror	r23
 bf6:	67 95       	ror	r22
 bf8:	ba 95       	dec	r27
 bfa:	c9 f7       	brne	.-14     	; 0xbee <__ultoa_invert+0x86>
 bfc:	00 97       	sbiw	r24, 0x00	; 0
 bfe:	61 05       	cpc	r22, r1
 c00:	71 05       	cpc	r23, r1
 c02:	08 95       	ret
 c04:	9b 01       	movw	r18, r22
 c06:	ac 01       	movw	r20, r24
 c08:	0a 2e       	mov	r0, r26
 c0a:	06 94       	lsr	r0
 c0c:	57 95       	ror	r21
 c0e:	47 95       	ror	r20
 c10:	37 95       	ror	r19
 c12:	27 95       	ror	r18
 c14:	ba 95       	dec	r27
 c16:	c9 f7       	brne	.-14     	; 0xc0a <__ultoa_invert+0xa2>
 c18:	62 0f       	add	r22, r18
 c1a:	73 1f       	adc	r23, r19
 c1c:	84 1f       	adc	r24, r20
 c1e:	95 1f       	adc	r25, r21
 c20:	a0 1d       	adc	r26, r0
 c22:	08 95       	ret

00000c24 <__prologue_saves__>:
 c24:	2f 92       	push	r2
 c26:	3f 92       	push	r3
 c28:	4f 92       	push	r4
 c2a:	5f 92       	push	r5
 c2c:	6f 92       	push	r6
 c2e:	7f 92       	push	r7
 c30:	8f 92       	push	r8
 c32:	9f 92       	push	r9
 c34:	af 92       	push	r10
 c36:	bf 92       	push	r11
 c38:	cf 92       	push	r12
 c3a:	df 92       	push	r13
 c3c:	ef 92       	push	r14
 c3e:	ff 92       	push	r15
 c40:	0f 93       	push	r16
 c42:	1f 93       	push	r17
 c44:	cf 93       	push	r28
 c46:	df 93       	push	r29
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62
 c4c:	ca 1b       	sub	r28, r26
 c4e:	db 0b       	sbc	r29, r27
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	f8 94       	cli
 c54:	de bf       	out	0x3e, r29	; 62
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	cd bf       	out	0x3d, r28	; 61
 c5a:	09 94       	ijmp

00000c5c <__epilogue_restores__>:
 c5c:	2a 88       	ldd	r2, Y+18	; 0x12
 c5e:	39 88       	ldd	r3, Y+17	; 0x11
 c60:	48 88       	ldd	r4, Y+16	; 0x10
 c62:	5f 84       	ldd	r5, Y+15	; 0x0f
 c64:	6e 84       	ldd	r6, Y+14	; 0x0e
 c66:	7d 84       	ldd	r7, Y+13	; 0x0d
 c68:	8c 84       	ldd	r8, Y+12	; 0x0c
 c6a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c6c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c6e:	b9 84       	ldd	r11, Y+9	; 0x09
 c70:	c8 84       	ldd	r12, Y+8	; 0x08
 c72:	df 80       	ldd	r13, Y+7	; 0x07
 c74:	ee 80       	ldd	r14, Y+6	; 0x06
 c76:	fd 80       	ldd	r15, Y+5	; 0x05
 c78:	0c 81       	ldd	r16, Y+4	; 0x04
 c7a:	1b 81       	ldd	r17, Y+3	; 0x03
 c7c:	aa 81       	ldd	r26, Y+2	; 0x02
 c7e:	b9 81       	ldd	r27, Y+1	; 0x01
 c80:	ce 0f       	add	r28, r30
 c82:	d1 1d       	adc	r29, r1
 c84:	0f b6       	in	r0, 0x3f	; 63
 c86:	f8 94       	cli
 c88:	de bf       	out	0x3e, r29	; 62
 c8a:	0f be       	out	0x3f, r0	; 63
 c8c:	cd bf       	out	0x3d, r28	; 61
 c8e:	ed 01       	movw	r28, r26
 c90:	08 95       	ret

00000c92 <_exit>:
 c92:	f8 94       	cli

00000c94 <__stop_program>:
 c94:	ff cf       	rjmp	.-2      	; 0xc94 <__stop_program>
