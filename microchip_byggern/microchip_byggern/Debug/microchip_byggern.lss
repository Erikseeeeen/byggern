
microchip_byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000004d8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800112  00800112  0000057e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c74  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098b  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002be  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002c7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ed       	ldi	r30, 0xD8	; 216
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 31       	cpi	r26, 0x12	; 18
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e1       	ldi	r26, 0x12	; 18
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 31       	cpi	r26, 0x1C	; 28
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "adc.h"


int main(void)
{
	usart_init(USART_BAUD_RATE_REGISTER);
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_init>
	xmem_init();
  b6:	0e 94 a1 00 	call	0x142	; 0x142 <xmem_init>
	adc_init();
  ba:	0e 94 83 00 	call	0x106	; 0x106 <adc_init>
	
	printf("Hello world\n");
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <puts>
		//input_t input = input_read();
		//printf("Joystick x: %8d y: %8d                                                ", input.joystick_x, input.joystick_y);
		//printf("Button   l: %8d r: %8d                                                ", input.button_left, input.button_right);
		//printf("Slider   1: %8d 2: %8d                                                ", input.slider_1, input.slider_2);
		volatile char* ext_mem = (char*) 0x1800;
		ext_mem[10] = 0;
  c6:	10 92 0a 18 	sts	0x180A, r1	; 0x80180a <__bss_end+0x16ee>
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <main+0x18>

000000cc <USART_Transmit>:
    
}
void USART_Transmit(unsigned char data)
{
    // Wait until the transmitter buffer is empty
    while ( !( UCSR0A & (1<<UDRE0)) ); // USART Control and Status Register A, USART Data Register Empty
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <USART_Transmit>
    // Send data
    UDR0 = data; // USART Data Register
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	08 95       	ret

000000d4 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
  d4:	5f 9b       	sbis	0x0b, 7	; 11
  d6:	02 c0       	rjmp	.+4      	; 0xdc <USART_Receive+0x8>
        return '\0';
    // Return data received
    return UDR0; // USART Data Register
  d8:	8c b1       	in	r24, 0x0c	; 12
  da:	08 95       	ret

unsigned char USART_Receive(void)
{
    // Wait for data to be received
    if ( !(UCSR0A & (1<<RXC0)) ) // USART Control and Status Register A, USART Receive Complete
        return '\0';
  dc:	80 e0       	ldi	r24, 0x00	; 0
    // Return data received
    return UDR0; // USART Data Register
  de:	08 95       	ret

000000e0 <usart_init>:

// static FILE usart_stream_write = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
// static FILE usart_stream_read = FDEV_SETUP_STREAM(NULL, USART_Transmit, _FDEV_SETUP_READ);

void usart_init(unsigned int usart_baud_rate_register)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	c8 2f       	mov	r28, r24
  e6:	d9 2f       	mov	r29, r25
    // Open read/write stream over USART https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html#gab599ddf60819df4cc993c724a83cb1a4
    fdevopen(USART_Transmit, USART_Receive);
  e8:	6a e6       	ldi	r22, 0x6A	; 106
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 ab 00 	call	0x156	; 0x156 <fdevopen>
    // Set baud rate registers
    UBRR0H = (unsigned char)(usart_baud_rate_register>>8); // usart_baud_rate_register_high
  f4:	d0 bd       	out	0x20, r29	; 32
    UBRR0L = (unsigned char)usart_baud_rate_register; // usart_baud_rate_register_low
  f6:	c9 b9       	out	0x09, r28	; 9
    
    // Enable RX and TX registers
    UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Universal Synchronous Asynchronous Receiver Transmitter Register B, RX Enable, TX Enable
  f8:	88 e1       	ldi	r24, 0x18	; 24
  fa:	8a b9       	out	0x0a, r24	; 10
    
	
    // Set frame format to 8 data bits, 2 stop bits
    UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // Universal Synchronous Asynchronous Receiver Transmitter Register C, USART Register Select, USART Stop Bit Select, USART Character Size Select
  fc:	8e e8       	ldi	r24, 0x8E	; 142
  fe:	80 bd       	out	0x20, r24	; 32
    
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <adc_init>:
	
	OCR1A = (FREQUENCY_OF_OSCILLATOR / (2 * 64 * FREQUENCY_OF_OSCILLATOR)) -1;
	
	TCNT1 = 0; // Enable counter*/

	DDRD |= 1 << PD4;
 106:	81 b3       	in	r24, 0x11	; 17
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	81 bb       	out	0x11, r24	; 17
	TCCR3A |= (1 << COM3A0); // Toggle on compare
 10c:	ab e8       	ldi	r26, 0x8B	; 139
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	8c 91       	ld	r24, X
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM33) | (1 << WGM32);
 116:	ea e8       	ldi	r30, 0x8A	; 138
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 61       	ori	r24, 0x18	; 24
 11e:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM31) | (1 << WGM30); // Fast PWM OCRnA, datasheet p.130
 120:	8c 91       	ld	r24, X
 122:	83 60       	ori	r24, 0x03	; 3
 124:	8c 93       	st	X, r24
	TCCR3B |= (1 << CS30); // No prescaling, datasheet p.132
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
	OCR3A = 0;
 12c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
 130:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
	
	// Enable button input
	DDRD &= ~(1 << PD2);
 134:	81 b3       	in	r24, 0x11	; 17
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD3);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	87 7f       	andi	r24, 0xF7	; 247
 13e:	81 bb       	out	0x11, r24	; 17
}
 140:	08 95       	ret

00000142 <xmem_init>:
#include "xmem.h"

// From lab lecture
void xmem_init(void) {
	// Enable XMEM
	MCUCR |= (1 << SRE);
 142:	85 b7       	in	r24, 0x35	; 53
 144:	80 68       	ori	r24, 0x80	; 128
 146:	85 bf       	out	0x35, r24	; 53
	// Mask out some port C address pins for JTAG (datasheet page 32)
	SFIOR |= 1 << XMM2;
 148:	80 b7       	in	r24, 0x30	; 48
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 | 1 << XMM1);
 14e:	80 b7       	in	r24, 0x30	; 48
 150:	87 7e       	andi	r24, 0xE7	; 231
 152:	80 bf       	out	0x30, r24	; 48
 154:	08 95       	ret

00000156 <fdevopen>:
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	31 f4       	brne	.+12     	; 0x16e <fdevopen+0x18>
 162:	61 15       	cp	r22, r1
 164:	71 05       	cpc	r23, r1
 166:	19 f4       	brne	.+6      	; 0x16e <fdevopen+0x18>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	3a c0       	rjmp	.+116    	; 0x1e2 <fdevopen+0x8c>
 16e:	8b 01       	movw	r16, r22
 170:	ec 01       	movw	r28, r24
 172:	6e e0       	ldi	r22, 0x0E	; 14
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 26 01 	call	0x24c	; 0x24c <calloc>
 17e:	fc 01       	movw	r30, r24
 180:	89 2b       	or	r24, r25
 182:	91 f3       	breq	.-28     	; 0x168 <fdevopen+0x12>
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	83 83       	std	Z+3, r24	; 0x03
 188:	01 15       	cp	r16, r1
 18a:	11 05       	cpc	r17, r1
 18c:	71 f0       	breq	.+28     	; 0x1aa <fdevopen+0x54>
 18e:	13 87       	std	Z+11, r17	; 0x0b
 190:	02 87       	std	Z+10, r16	; 0x0a
 192:	81 e8       	ldi	r24, 0x81	; 129
 194:	83 83       	std	Z+3, r24	; 0x03
 196:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 19a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 19e:	89 2b       	or	r24, r25
 1a0:	21 f4       	brne	.+8      	; 0x1aa <fdevopen+0x54>
 1a2:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__data_end+0x1>
 1a6:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__data_end>
 1aa:	20 97       	sbiw	r28, 0x00	; 0
 1ac:	c9 f0       	breq	.+50     	; 0x1e0 <fdevopen+0x8a>
 1ae:	d1 87       	std	Z+9, r29	; 0x09
 1b0:	c0 87       	std	Z+8, r28	; 0x08
 1b2:	83 81       	ldd	r24, Z+3	; 0x03
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	83 83       	std	Z+3, r24	; 0x03
 1b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
 1bc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x3>
 1c0:	89 2b       	or	r24, r25
 1c2:	71 f4       	brne	.+28     	; 0x1e0 <fdevopen+0x8a>
 1c4:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__data_end+0x3>
 1c8:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__data_end+0x2>
 1cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x4>
 1d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x5>
 1d4:	89 2b       	or	r24, r25
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <fdevopen+0x8a>
 1d8:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__data_end+0x5>
 1dc:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__data_end+0x4>
 1e0:	cf 01       	movw	r24, r30
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <puts>:
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end+0x2>
 1f8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x3>
 1fc:	23 81       	ldd	r18, Z+3	; 0x03
 1fe:	21 ff       	sbrs	r18, 1
 200:	1b c0       	rjmp	.+54     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 202:	8c 01       	movw	r16, r24
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	f8 01       	movw	r30, r16
 20a:	81 91       	ld	r24, Z+
 20c:	8f 01       	movw	r16, r30
 20e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end+0x2>
 212:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x3>
 216:	db 01       	movw	r26, r22
 218:	18 96       	adiw	r26, 0x08	; 8
 21a:	ed 91       	ld	r30, X+
 21c:	fc 91       	ld	r31, X
 21e:	19 97       	sbiw	r26, 0x09	; 9
 220:	88 23       	and	r24, r24
 222:	31 f0       	breq	.+12     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 224:	09 95       	icall
 226:	89 2b       	or	r24, r25
 228:	79 f3       	breq	.-34     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 22a:	df ef       	ldi	r29, 0xFF	; 255
 22c:	cf ef       	ldi	r28, 0xFF	; 255
 22e:	ec cf       	rjmp	.-40     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	09 95       	icall
 234:	89 2b       	or	r24, r25
 236:	19 f0       	breq	.+6      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	9f ef       	ldi	r25, 0xFF	; 255
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 23e:	8d 2f       	mov	r24, r29
 240:	9c 2f       	mov	r25, r28
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	08 95       	ret

0000024c <calloc>:
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	86 9f       	mul	r24, r22
 256:	80 01       	movw	r16, r0
 258:	87 9f       	mul	r24, r23
 25a:	10 0d       	add	r17, r0
 25c:	96 9f       	mul	r25, r22
 25e:	10 0d       	add	r17, r0
 260:	11 24       	eor	r1, r1
 262:	c8 01       	movw	r24, r16
 264:	0e 94 42 01 	call	0x284	; 0x284 <malloc>
 268:	ec 01       	movw	r28, r24
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	29 f0       	breq	.+10     	; 0x278 <calloc+0x2c>
 26e:	a8 01       	movw	r20, r16
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	0e 94 63 02 	call	0x4c6	; 0x4c6 <memset>
 278:	ce 01       	movw	r24, r28
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <malloc>:
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	91 05       	cpc	r25, r1
 290:	10 f4       	brcc	.+4      	; 0x296 <malloc+0x12>
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__flp>
 29a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__flp+0x1>
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	a0 e0       	ldi	r26, 0x00	; 0
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	30 97       	sbiw	r30, 0x00	; 0
 2a8:	19 f1       	breq	.+70     	; 0x2f0 <malloc+0x6c>
 2aa:	40 81       	ld	r20, Z
 2ac:	51 81       	ldd	r21, Z+1	; 0x01
 2ae:	02 81       	ldd	r16, Z+2	; 0x02
 2b0:	13 81       	ldd	r17, Z+3	; 0x03
 2b2:	48 17       	cp	r20, r24
 2b4:	59 07       	cpc	r21, r25
 2b6:	c8 f0       	brcs	.+50     	; 0x2ea <malloc+0x66>
 2b8:	84 17       	cp	r24, r20
 2ba:	95 07       	cpc	r25, r21
 2bc:	69 f4       	brne	.+26     	; 0x2d8 <malloc+0x54>
 2be:	10 97       	sbiw	r26, 0x00	; 0
 2c0:	31 f0       	breq	.+12     	; 0x2ce <malloc+0x4a>
 2c2:	12 96       	adiw	r26, 0x02	; 2
 2c4:	0c 93       	st	X, r16
 2c6:	12 97       	sbiw	r26, 0x02	; 2
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	1c 93       	st	X, r17
 2cc:	27 c0       	rjmp	.+78     	; 0x31c <malloc+0x98>
 2ce:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <__flp>
 2d2:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <__flp+0x1>
 2d6:	22 c0       	rjmp	.+68     	; 0x31c <malloc+0x98>
 2d8:	21 15       	cp	r18, r1
 2da:	31 05       	cpc	r19, r1
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <malloc+0x60>
 2de:	42 17       	cp	r20, r18
 2e0:	53 07       	cpc	r21, r19
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <malloc+0x66>
 2e4:	9a 01       	movw	r18, r20
 2e6:	bd 01       	movw	r22, r26
 2e8:	ef 01       	movw	r28, r30
 2ea:	df 01       	movw	r26, r30
 2ec:	f8 01       	movw	r30, r16
 2ee:	db cf       	rjmp	.-74     	; 0x2a6 <malloc+0x22>
 2f0:	21 15       	cp	r18, r1
 2f2:	31 05       	cpc	r19, r1
 2f4:	f9 f0       	breq	.+62     	; 0x334 <malloc+0xb0>
 2f6:	28 1b       	sub	r18, r24
 2f8:	39 0b       	sbc	r19, r25
 2fa:	24 30       	cpi	r18, 0x04	; 4
 2fc:	31 05       	cpc	r19, r1
 2fe:	80 f4       	brcc	.+32     	; 0x320 <malloc+0x9c>
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	9b 81       	ldd	r25, Y+3	; 0x03
 304:	61 15       	cp	r22, r1
 306:	71 05       	cpc	r23, r1
 308:	21 f0       	breq	.+8      	; 0x312 <malloc+0x8e>
 30a:	fb 01       	movw	r30, r22
 30c:	93 83       	std	Z+3, r25	; 0x03
 30e:	82 83       	std	Z+2, r24	; 0x02
 310:	04 c0       	rjmp	.+8      	; 0x31a <malloc+0x96>
 312:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__flp+0x1>
 316:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__flp>
 31a:	fe 01       	movw	r30, r28
 31c:	32 96       	adiw	r30, 0x02	; 2
 31e:	44 c0       	rjmp	.+136    	; 0x3a8 <malloc+0x124>
 320:	fe 01       	movw	r30, r28
 322:	e2 0f       	add	r30, r18
 324:	f3 1f       	adc	r31, r19
 326:	81 93       	st	Z+, r24
 328:	91 93       	st	Z+, r25
 32a:	22 50       	subi	r18, 0x02	; 2
 32c:	31 09       	sbc	r19, r1
 32e:	39 83       	std	Y+1, r19	; 0x01
 330:	28 83       	st	Y, r18
 332:	3a c0       	rjmp	.+116    	; 0x3a8 <malloc+0x124>
 334:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 338:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 33c:	23 2b       	or	r18, r19
 33e:	41 f4       	brne	.+16     	; 0x350 <malloc+0xcc>
 340:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 344:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 348:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__brkval+0x1>
 34c:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__brkval>
 350:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 354:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 358:	21 15       	cp	r18, r1
 35a:	31 05       	cpc	r19, r1
 35c:	41 f4       	brne	.+16     	; 0x36e <malloc+0xea>
 35e:	2d b7       	in	r18, 0x3d	; 61
 360:	3e b7       	in	r19, 0x3e	; 62
 362:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 366:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 36a:	24 1b       	sub	r18, r20
 36c:	35 0b       	sbc	r19, r21
 36e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__brkval>
 372:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__brkval+0x1>
 376:	e2 17       	cp	r30, r18
 378:	f3 07       	cpc	r31, r19
 37a:	a0 f4       	brcc	.+40     	; 0x3a4 <malloc+0x120>
 37c:	2e 1b       	sub	r18, r30
 37e:	3f 0b       	sbc	r19, r31
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	78 f0       	brcs	.+30     	; 0x3a4 <malloc+0x120>
 386:	ac 01       	movw	r20, r24
 388:	4e 5f       	subi	r20, 0xFE	; 254
 38a:	5f 4f       	sbci	r21, 0xFF	; 255
 38c:	24 17       	cp	r18, r20
 38e:	35 07       	cpc	r19, r21
 390:	48 f0       	brcs	.+18     	; 0x3a4 <malloc+0x120>
 392:	4e 0f       	add	r20, r30
 394:	5f 1f       	adc	r21, r31
 396:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__brkval+0x1>
 39a:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__brkval>
 39e:	81 93       	st	Z+, r24
 3a0:	91 93       	st	Z+, r25
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <malloc+0x124>
 3a4:	e0 e0       	ldi	r30, 0x00	; 0
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	cf 01       	movw	r24, r30
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <free>:
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	09 f4       	brne	.+2      	; 0x3be <free+0xa>
 3bc:	81 c0       	rjmp	.+258    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 3be:	fc 01       	movw	r30, r24
 3c0:	32 97       	sbiw	r30, 0x02	; 2
 3c2:	13 82       	std	Z+3, r1	; 0x03
 3c4:	12 82       	std	Z+2, r1	; 0x02
 3c6:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__flp>
 3ca:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__flp+0x1>
 3ce:	10 97       	sbiw	r26, 0x00	; 0
 3d0:	81 f4       	brne	.+32     	; 0x3f2 <free+0x3e>
 3d2:	20 81       	ld	r18, Z
 3d4:	31 81       	ldd	r19, Z+1	; 0x01
 3d6:	82 0f       	add	r24, r18
 3d8:	93 1f       	adc	r25, r19
 3da:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 3de:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	51 f5       	brne	.+84     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 3e8:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__brkval+0x1>
 3ec:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__brkval>
 3f0:	67 c0       	rjmp	.+206    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 3f2:	ed 01       	movw	r28, r26
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	ce 17       	cp	r28, r30
 3fa:	df 07       	cpc	r29, r31
 3fc:	40 f4       	brcc	.+16     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 3fe:	4a 81       	ldd	r20, Y+2	; 0x02
 400:	5b 81       	ldd	r21, Y+3	; 0x03
 402:	9e 01       	movw	r18, r28
 404:	41 15       	cp	r20, r1
 406:	51 05       	cpc	r21, r1
 408:	f1 f0       	breq	.+60     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 40a:	ea 01       	movw	r28, r20
 40c:	f5 cf       	rjmp	.-22     	; 0x3f8 <free+0x44>
 40e:	d3 83       	std	Z+3, r29	; 0x03
 410:	c2 83       	std	Z+2, r28	; 0x02
 412:	40 81       	ld	r20, Z
 414:	51 81       	ldd	r21, Z+1	; 0x01
 416:	84 0f       	add	r24, r20
 418:	95 1f       	adc	r25, r21
 41a:	c8 17       	cp	r28, r24
 41c:	d9 07       	cpc	r29, r25
 41e:	59 f4       	brne	.+22     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 420:	88 81       	ld	r24, Y
 422:	99 81       	ldd	r25, Y+1	; 0x01
 424:	84 0f       	add	r24, r20
 426:	95 1f       	adc	r25, r21
 428:	02 96       	adiw	r24, 0x02	; 2
 42a:	91 83       	std	Z+1, r25	; 0x01
 42c:	80 83       	st	Z, r24
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	9b 81       	ldd	r25, Y+3	; 0x03
 432:	93 83       	std	Z+3, r25	; 0x03
 434:	82 83       	std	Z+2, r24	; 0x02
 436:	21 15       	cp	r18, r1
 438:	31 05       	cpc	r19, r1
 43a:	29 f4       	brne	.+10     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 43c:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__flp+0x1>
 440:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__flp>
 444:	3d c0       	rjmp	.+122    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 446:	e9 01       	movw	r28, r18
 448:	fb 83       	std	Y+3, r31	; 0x03
 44a:	ea 83       	std	Y+2, r30	; 0x02
 44c:	49 91       	ld	r20, Y+
 44e:	59 91       	ld	r21, Y+
 450:	c4 0f       	add	r28, r20
 452:	d5 1f       	adc	r29, r21
 454:	ec 17       	cp	r30, r28
 456:	fd 07       	cpc	r31, r29
 458:	61 f4       	brne	.+24     	; 0x472 <__DATA_REGION_LENGTH__+0x72>
 45a:	80 81       	ld	r24, Z
 45c:	91 81       	ldd	r25, Z+1	; 0x01
 45e:	84 0f       	add	r24, r20
 460:	95 1f       	adc	r25, r21
 462:	02 96       	adiw	r24, 0x02	; 2
 464:	e9 01       	movw	r28, r18
 466:	99 83       	std	Y+1, r25	; 0x01
 468:	88 83       	st	Y, r24
 46a:	82 81       	ldd	r24, Z+2	; 0x02
 46c:	93 81       	ldd	r25, Z+3	; 0x03
 46e:	9b 83       	std	Y+3, r25	; 0x03
 470:	8a 83       	std	Y+2, r24	; 0x02
 472:	e0 e0       	ldi	r30, 0x00	; 0
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	8d 91       	ld	r24, X+
 47a:	9c 91       	ld	r25, X
 47c:	13 97       	sbiw	r26, 0x03	; 3
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	19 f0       	breq	.+6      	; 0x488 <__DATA_REGION_LENGTH__+0x88>
 482:	fd 01       	movw	r30, r26
 484:	dc 01       	movw	r26, r24
 486:	f7 cf       	rjmp	.-18     	; 0x476 <__DATA_REGION_LENGTH__+0x76>
 488:	8d 91       	ld	r24, X+
 48a:	9c 91       	ld	r25, X
 48c:	11 97       	sbiw	r26, 0x01	; 1
 48e:	9d 01       	movw	r18, r26
 490:	2e 5f       	subi	r18, 0xFE	; 254
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	82 0f       	add	r24, r18
 496:	93 1f       	adc	r25, r19
 498:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 49c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	29 f4       	brne	.+10     	; 0x4b4 <__DATA_REGION_LENGTH__+0xb4>
 4aa:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__flp+0x1>
 4ae:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__flp>
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__DATA_REGION_LENGTH__+0xb8>
 4b4:	13 82       	std	Z+3, r1	; 0x03
 4b6:	12 82       	std	Z+2, r1	; 0x02
 4b8:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__brkval+0x1>
 4bc:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__brkval>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <memset>:
 4c6:	dc 01       	movw	r26, r24
 4c8:	01 c0       	rjmp	.+2      	; 0x4cc <memset+0x6>
 4ca:	6d 93       	st	X+, r22
 4cc:	41 50       	subi	r20, 0x01	; 1
 4ce:	50 40       	sbci	r21, 0x00	; 0
 4d0:	e0 f7       	brcc	.-8      	; 0x4ca <memset+0x4>
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
